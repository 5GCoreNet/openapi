/*
Ndcaf_DataReporting

Data Collection AF: Data Collection and Reporting Configuration API and Data Reporting API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ndcaf_DataReporting

import (
	"encoding/json"
)

// checks if the DataReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataReport{}

// DataReport A data report sent by a data collection client to the Data Collection AF.
type DataReport struct {
	// String providing an application identifier.
	ExternalApplicationId string `json:"externalApplicationId"`
	ServiceExperienceRecords []ServiceExperienceRecord `json:"serviceExperienceRecords,omitempty"`
	LocationRecords []LocationRecord `json:"locationRecords,omitempty"`
	CommunicationRecords []CommunicationRecord `json:"communicationRecords,omitempty"`
	PerformanceDataRecords []PerformanceDataRecord `json:"performanceDataRecords,omitempty"`
	ApplicationSpecificRecords []ApplicationSpecificRecord `json:"applicationSpecificRecords,omitempty"`
	TripPlanRecords []TripPlanRecord `json:"tripPlanRecords,omitempty"`
	MediaStreamingAccessRecords []MediaStreamingAccessRecord `json:"mediaStreamingAccessRecords,omitempty"`
}

// NewDataReport instantiates a new DataReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataReport(externalApplicationId string) *DataReport {
	this := DataReport{}
	this.ExternalApplicationId = externalApplicationId
	return &this
}

// NewDataReportWithDefaults instantiates a new DataReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataReportWithDefaults() *DataReport {
	this := DataReport{}
	return &this
}

// GetExternalApplicationId returns the ExternalApplicationId field value
func (o *DataReport) GetExternalApplicationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalApplicationId
}

// GetExternalApplicationIdOk returns a tuple with the ExternalApplicationId field value
// and a boolean to check if the value has been set.
func (o *DataReport) GetExternalApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalApplicationId, true
}

// SetExternalApplicationId sets field value
func (o *DataReport) SetExternalApplicationId(v string) {
	o.ExternalApplicationId = v
}

// GetServiceExperienceRecords returns the ServiceExperienceRecords field value if set, zero value otherwise.
func (o *DataReport) GetServiceExperienceRecords() []ServiceExperienceRecord {
	if o == nil || isNil(o.ServiceExperienceRecords) {
		var ret []ServiceExperienceRecord
		return ret
	}
	return o.ServiceExperienceRecords
}

// GetServiceExperienceRecordsOk returns a tuple with the ServiceExperienceRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataReport) GetServiceExperienceRecordsOk() ([]ServiceExperienceRecord, bool) {
	if o == nil || isNil(o.ServiceExperienceRecords) {
		return nil, false
	}
	return o.ServiceExperienceRecords, true
}

// HasServiceExperienceRecords returns a boolean if a field has been set.
func (o *DataReport) HasServiceExperienceRecords() bool {
	if o != nil && !isNil(o.ServiceExperienceRecords) {
		return true
	}

	return false
}

// SetServiceExperienceRecords gets a reference to the given []ServiceExperienceRecord and assigns it to the ServiceExperienceRecords field.
func (o *DataReport) SetServiceExperienceRecords(v []ServiceExperienceRecord) {
	o.ServiceExperienceRecords = v
}

// GetLocationRecords returns the LocationRecords field value if set, zero value otherwise.
func (o *DataReport) GetLocationRecords() []LocationRecord {
	if o == nil || isNil(o.LocationRecords) {
		var ret []LocationRecord
		return ret
	}
	return o.LocationRecords
}

// GetLocationRecordsOk returns a tuple with the LocationRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataReport) GetLocationRecordsOk() ([]LocationRecord, bool) {
	if o == nil || isNil(o.LocationRecords) {
		return nil, false
	}
	return o.LocationRecords, true
}

// HasLocationRecords returns a boolean if a field has been set.
func (o *DataReport) HasLocationRecords() bool {
	if o != nil && !isNil(o.LocationRecords) {
		return true
	}

	return false
}

// SetLocationRecords gets a reference to the given []LocationRecord and assigns it to the LocationRecords field.
func (o *DataReport) SetLocationRecords(v []LocationRecord) {
	o.LocationRecords = v
}

// GetCommunicationRecords returns the CommunicationRecords field value if set, zero value otherwise.
func (o *DataReport) GetCommunicationRecords() []CommunicationRecord {
	if o == nil || isNil(o.CommunicationRecords) {
		var ret []CommunicationRecord
		return ret
	}
	return o.CommunicationRecords
}

// GetCommunicationRecordsOk returns a tuple with the CommunicationRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataReport) GetCommunicationRecordsOk() ([]CommunicationRecord, bool) {
	if o == nil || isNil(o.CommunicationRecords) {
		return nil, false
	}
	return o.CommunicationRecords, true
}

// HasCommunicationRecords returns a boolean if a field has been set.
func (o *DataReport) HasCommunicationRecords() bool {
	if o != nil && !isNil(o.CommunicationRecords) {
		return true
	}

	return false
}

// SetCommunicationRecords gets a reference to the given []CommunicationRecord and assigns it to the CommunicationRecords field.
func (o *DataReport) SetCommunicationRecords(v []CommunicationRecord) {
	o.CommunicationRecords = v
}

// GetPerformanceDataRecords returns the PerformanceDataRecords field value if set, zero value otherwise.
func (o *DataReport) GetPerformanceDataRecords() []PerformanceDataRecord {
	if o == nil || isNil(o.PerformanceDataRecords) {
		var ret []PerformanceDataRecord
		return ret
	}
	return o.PerformanceDataRecords
}

// GetPerformanceDataRecordsOk returns a tuple with the PerformanceDataRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataReport) GetPerformanceDataRecordsOk() ([]PerformanceDataRecord, bool) {
	if o == nil || isNil(o.PerformanceDataRecords) {
		return nil, false
	}
	return o.PerformanceDataRecords, true
}

// HasPerformanceDataRecords returns a boolean if a field has been set.
func (o *DataReport) HasPerformanceDataRecords() bool {
	if o != nil && !isNil(o.PerformanceDataRecords) {
		return true
	}

	return false
}

// SetPerformanceDataRecords gets a reference to the given []PerformanceDataRecord and assigns it to the PerformanceDataRecords field.
func (o *DataReport) SetPerformanceDataRecords(v []PerformanceDataRecord) {
	o.PerformanceDataRecords = v
}

// GetApplicationSpecificRecords returns the ApplicationSpecificRecords field value if set, zero value otherwise.
func (o *DataReport) GetApplicationSpecificRecords() []ApplicationSpecificRecord {
	if o == nil || isNil(o.ApplicationSpecificRecords) {
		var ret []ApplicationSpecificRecord
		return ret
	}
	return o.ApplicationSpecificRecords
}

// GetApplicationSpecificRecordsOk returns a tuple with the ApplicationSpecificRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataReport) GetApplicationSpecificRecordsOk() ([]ApplicationSpecificRecord, bool) {
	if o == nil || isNil(o.ApplicationSpecificRecords) {
		return nil, false
	}
	return o.ApplicationSpecificRecords, true
}

// HasApplicationSpecificRecords returns a boolean if a field has been set.
func (o *DataReport) HasApplicationSpecificRecords() bool {
	if o != nil && !isNil(o.ApplicationSpecificRecords) {
		return true
	}

	return false
}

// SetApplicationSpecificRecords gets a reference to the given []ApplicationSpecificRecord and assigns it to the ApplicationSpecificRecords field.
func (o *DataReport) SetApplicationSpecificRecords(v []ApplicationSpecificRecord) {
	o.ApplicationSpecificRecords = v
}

// GetTripPlanRecords returns the TripPlanRecords field value if set, zero value otherwise.
func (o *DataReport) GetTripPlanRecords() []TripPlanRecord {
	if o == nil || isNil(o.TripPlanRecords) {
		var ret []TripPlanRecord
		return ret
	}
	return o.TripPlanRecords
}

// GetTripPlanRecordsOk returns a tuple with the TripPlanRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataReport) GetTripPlanRecordsOk() ([]TripPlanRecord, bool) {
	if o == nil || isNil(o.TripPlanRecords) {
		return nil, false
	}
	return o.TripPlanRecords, true
}

// HasTripPlanRecords returns a boolean if a field has been set.
func (o *DataReport) HasTripPlanRecords() bool {
	if o != nil && !isNil(o.TripPlanRecords) {
		return true
	}

	return false
}

// SetTripPlanRecords gets a reference to the given []TripPlanRecord and assigns it to the TripPlanRecords field.
func (o *DataReport) SetTripPlanRecords(v []TripPlanRecord) {
	o.TripPlanRecords = v
}

// GetMediaStreamingAccessRecords returns the MediaStreamingAccessRecords field value if set, zero value otherwise.
func (o *DataReport) GetMediaStreamingAccessRecords() []MediaStreamingAccessRecord {
	if o == nil || isNil(o.MediaStreamingAccessRecords) {
		var ret []MediaStreamingAccessRecord
		return ret
	}
	return o.MediaStreamingAccessRecords
}

// GetMediaStreamingAccessRecordsOk returns a tuple with the MediaStreamingAccessRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataReport) GetMediaStreamingAccessRecordsOk() ([]MediaStreamingAccessRecord, bool) {
	if o == nil || isNil(o.MediaStreamingAccessRecords) {
		return nil, false
	}
	return o.MediaStreamingAccessRecords, true
}

// HasMediaStreamingAccessRecords returns a boolean if a field has been set.
func (o *DataReport) HasMediaStreamingAccessRecords() bool {
	if o != nil && !isNil(o.MediaStreamingAccessRecords) {
		return true
	}

	return false
}

// SetMediaStreamingAccessRecords gets a reference to the given []MediaStreamingAccessRecord and assigns it to the MediaStreamingAccessRecords field.
func (o *DataReport) SetMediaStreamingAccessRecords(v []MediaStreamingAccessRecord) {
	o.MediaStreamingAccessRecords = v
}

func (o DataReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["externalApplicationId"] = o.ExternalApplicationId
	if !isNil(o.ServiceExperienceRecords) {
		toSerialize["serviceExperienceRecords"] = o.ServiceExperienceRecords
	}
	if !isNil(o.LocationRecords) {
		toSerialize["locationRecords"] = o.LocationRecords
	}
	if !isNil(o.CommunicationRecords) {
		toSerialize["communicationRecords"] = o.CommunicationRecords
	}
	if !isNil(o.PerformanceDataRecords) {
		toSerialize["performanceDataRecords"] = o.PerformanceDataRecords
	}
	if !isNil(o.ApplicationSpecificRecords) {
		toSerialize["applicationSpecificRecords"] = o.ApplicationSpecificRecords
	}
	if !isNil(o.TripPlanRecords) {
		toSerialize["tripPlanRecords"] = o.TripPlanRecords
	}
	if !isNil(o.MediaStreamingAccessRecords) {
		toSerialize["mediaStreamingAccessRecords"] = o.MediaStreamingAccessRecords
	}
	return toSerialize, nil
}

type NullableDataReport struct {
	value *DataReport
	isSet bool
}

func (v NullableDataReport) Get() *DataReport {
	return v.value
}

func (v *NullableDataReport) Set(val *DataReport) {
	v.value = val
	v.isSet = true
}

func (v NullableDataReport) IsSet() bool {
	return v.isSet
}

func (v *NullableDataReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataReport(val *DataReport) *NullableDataReport {
	return &NullableDataReport{value: val, isSet: true}
}

func (v NullableDataReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


