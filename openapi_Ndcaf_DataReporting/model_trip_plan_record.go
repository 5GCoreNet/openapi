/*
Ndcaf_DataReporting

Data Collection AF: Data Collection and Reporting Configuration API and Data Reporting API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ndcaf_DataReporting

import (
	"encoding/json"
	"time"
)

// checks if the TripPlanRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TripPlanRecord{}

// TripPlanRecord struct for TripPlanRecord
type TripPlanRecord struct {
	BaseRecord
	StartingPoint LocationData   `json:"startingPoint"`
	Waypoints     []LocationData `json:"waypoints,omitempty"`
	Destination   LocationData   `json:"destination"`
	// Indicates value of horizontal speed.
	EstimatedAverageSpeed *float32 `json:"estimatedAverageSpeed,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	EstimatedArrivalTime *time.Time `json:"estimatedArrivalTime,omitempty"`
}

// NewTripPlanRecord instantiates a new TripPlanRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTripPlanRecord(startingPoint LocationData, destination LocationData, timestamp time.Time) *TripPlanRecord {
	this := TripPlanRecord{}
	this.Timestamp = timestamp
	this.StartingPoint = startingPoint
	this.Destination = destination
	return &this
}

// NewTripPlanRecordWithDefaults instantiates a new TripPlanRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTripPlanRecordWithDefaults() *TripPlanRecord {
	this := TripPlanRecord{}
	return &this
}

// GetStartingPoint returns the StartingPoint field value
func (o *TripPlanRecord) GetStartingPoint() LocationData {
	if o == nil {
		var ret LocationData
		return ret
	}

	return o.StartingPoint
}

// GetStartingPointOk returns a tuple with the StartingPoint field value
// and a boolean to check if the value has been set.
func (o *TripPlanRecord) GetStartingPointOk() (*LocationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartingPoint, true
}

// SetStartingPoint sets field value
func (o *TripPlanRecord) SetStartingPoint(v LocationData) {
	o.StartingPoint = v
}

// GetWaypoints returns the Waypoints field value if set, zero value otherwise.
func (o *TripPlanRecord) GetWaypoints() []LocationData {
	if o == nil || IsNil(o.Waypoints) {
		var ret []LocationData
		return ret
	}
	return o.Waypoints
}

// GetWaypointsOk returns a tuple with the Waypoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TripPlanRecord) GetWaypointsOk() ([]LocationData, bool) {
	if o == nil || IsNil(o.Waypoints) {
		return nil, false
	}
	return o.Waypoints, true
}

// HasWaypoints returns a boolean if a field has been set.
func (o *TripPlanRecord) HasWaypoints() bool {
	if o != nil && !IsNil(o.Waypoints) {
		return true
	}

	return false
}

// SetWaypoints gets a reference to the given []LocationData and assigns it to the Waypoints field.
func (o *TripPlanRecord) SetWaypoints(v []LocationData) {
	o.Waypoints = v
}

// GetDestination returns the Destination field value
func (o *TripPlanRecord) GetDestination() LocationData {
	if o == nil {
		var ret LocationData
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *TripPlanRecord) GetDestinationOk() (*LocationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *TripPlanRecord) SetDestination(v LocationData) {
	o.Destination = v
}

// GetEstimatedAverageSpeed returns the EstimatedAverageSpeed field value if set, zero value otherwise.
func (o *TripPlanRecord) GetEstimatedAverageSpeed() float32 {
	if o == nil || IsNil(o.EstimatedAverageSpeed) {
		var ret float32
		return ret
	}
	return *o.EstimatedAverageSpeed
}

// GetEstimatedAverageSpeedOk returns a tuple with the EstimatedAverageSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TripPlanRecord) GetEstimatedAverageSpeedOk() (*float32, bool) {
	if o == nil || IsNil(o.EstimatedAverageSpeed) {
		return nil, false
	}
	return o.EstimatedAverageSpeed, true
}

// HasEstimatedAverageSpeed returns a boolean if a field has been set.
func (o *TripPlanRecord) HasEstimatedAverageSpeed() bool {
	if o != nil && !IsNil(o.EstimatedAverageSpeed) {
		return true
	}

	return false
}

// SetEstimatedAverageSpeed gets a reference to the given float32 and assigns it to the EstimatedAverageSpeed field.
func (o *TripPlanRecord) SetEstimatedAverageSpeed(v float32) {
	o.EstimatedAverageSpeed = &v
}

// GetEstimatedArrivalTime returns the EstimatedArrivalTime field value if set, zero value otherwise.
func (o *TripPlanRecord) GetEstimatedArrivalTime() time.Time {
	if o == nil || IsNil(o.EstimatedArrivalTime) {
		var ret time.Time
		return ret
	}
	return *o.EstimatedArrivalTime
}

// GetEstimatedArrivalTimeOk returns a tuple with the EstimatedArrivalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TripPlanRecord) GetEstimatedArrivalTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EstimatedArrivalTime) {
		return nil, false
	}
	return o.EstimatedArrivalTime, true
}

// HasEstimatedArrivalTime returns a boolean if a field has been set.
func (o *TripPlanRecord) HasEstimatedArrivalTime() bool {
	if o != nil && !IsNil(o.EstimatedArrivalTime) {
		return true
	}

	return false
}

// SetEstimatedArrivalTime gets a reference to the given time.Time and assigns it to the EstimatedArrivalTime field.
func (o *TripPlanRecord) SetEstimatedArrivalTime(v time.Time) {
	o.EstimatedArrivalTime = &v
}

func (o TripPlanRecord) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TripPlanRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseRecord, errBaseRecord := json.Marshal(o.BaseRecord)
	if errBaseRecord != nil {
		return map[string]interface{}{}, errBaseRecord
	}
	errBaseRecord = json.Unmarshal([]byte(serializedBaseRecord), &toSerialize)
	if errBaseRecord != nil {
		return map[string]interface{}{}, errBaseRecord
	}
	toSerialize["startingPoint"] = o.StartingPoint
	if !IsNil(o.Waypoints) {
		toSerialize["waypoints"] = o.Waypoints
	}
	toSerialize["destination"] = o.Destination
	if !IsNil(o.EstimatedAverageSpeed) {
		toSerialize["estimatedAverageSpeed"] = o.EstimatedAverageSpeed
	}
	if !IsNil(o.EstimatedArrivalTime) {
		toSerialize["estimatedArrivalTime"] = o.EstimatedArrivalTime
	}
	return toSerialize, nil
}

type NullableTripPlanRecord struct {
	value *TripPlanRecord
	isSet bool
}

func (v NullableTripPlanRecord) Get() *TripPlanRecord {
	return v.value
}

func (v *NullableTripPlanRecord) Set(val *TripPlanRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableTripPlanRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableTripPlanRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTripPlanRecord(val *TripPlanRecord) *NullableTripPlanRecord {
	return &NullableTripPlanRecord{value: val, isSet: true}
}

func (v NullableTripPlanRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTripPlanRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
