/*
Ndcaf_DataReporting

Data Collection AF: Data Collection and Reporting Configuration API and Data Reporting API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ndcaf_DataReporting

import (
	"encoding/json"
	"time"
)

// checks if the BaseRecord1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseRecord1{}

// BaseRecord1 struct for BaseRecord1
type BaseRecord1 struct {
	// string with format 'date-time' as defined in OpenAPI.
	Timestamp time.Time `json:"timestamp"`
}

// NewBaseRecord1 instantiates a new BaseRecord1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseRecord1(timestamp time.Time) *BaseRecord1 {
	this := BaseRecord1{}
	this.Timestamp = timestamp
	return &this
}

// NewBaseRecord1WithDefaults instantiates a new BaseRecord1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseRecord1WithDefaults() *BaseRecord1 {
	this := BaseRecord1{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *BaseRecord1) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *BaseRecord1) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *BaseRecord1) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o BaseRecord1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseRecord1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

type NullableBaseRecord1 struct {
	value *BaseRecord1
	isSet bool
}

func (v NullableBaseRecord1) Get() *BaseRecord1 {
	return v.value
}

func (v *NullableBaseRecord1) Set(val *BaseRecord1) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseRecord1) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseRecord1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseRecord1(val *BaseRecord1) *NullableBaseRecord1 {
	return &NullableBaseRecord1{value: val, isSet: true}
}

func (v NullableBaseRecord1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseRecord1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


