/*
Ndcaf_DataReporting

Data Collection AF: Data Collection and Reporting Configuration API and Data Reporting API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ndcaf_DataReporting

import (
	"encoding/json"
	"fmt"
)

// ReportingEventTriggerAnyOf the model 'ReportingEventTriggerAnyOf'
type ReportingEventTriggerAnyOf string

// List of ReportingEventTrigger_anyOf
const (
	LOCATION ReportingEventTriggerAnyOf = "LOCATION"
	DESTINATION ReportingEventTriggerAnyOf = "DESTINATION"
)

// All allowed values of ReportingEventTriggerAnyOf enum
var AllowedReportingEventTriggerAnyOfEnumValues = []ReportingEventTriggerAnyOf{
	"LOCATION",
	"DESTINATION",
}

func (v *ReportingEventTriggerAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportingEventTriggerAnyOf(value)
	for _, existing := range AllowedReportingEventTriggerAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportingEventTriggerAnyOf", value)
}

// NewReportingEventTriggerAnyOfFromValue returns a pointer to a valid ReportingEventTriggerAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportingEventTriggerAnyOfFromValue(v string) (*ReportingEventTriggerAnyOf, error) {
	ev := ReportingEventTriggerAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportingEventTriggerAnyOf: valid values are %v", v, AllowedReportingEventTriggerAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportingEventTriggerAnyOf) IsValid() bool {
	for _, existing := range AllowedReportingEventTriggerAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReportingEventTrigger_anyOf value
func (v ReportingEventTriggerAnyOf) Ptr() *ReportingEventTriggerAnyOf {
	return &v
}

type NullableReportingEventTriggerAnyOf struct {
	value *ReportingEventTriggerAnyOf
	isSet bool
}

func (v NullableReportingEventTriggerAnyOf) Get() *ReportingEventTriggerAnyOf {
	return v.value
}

func (v *NullableReportingEventTriggerAnyOf) Set(val *ReportingEventTriggerAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingEventTriggerAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingEventTriggerAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingEventTriggerAnyOf(val *ReportingEventTriggerAnyOf) *NullableReportingEventTriggerAnyOf {
	return &NullableReportingEventTriggerAnyOf{value: val, isSet: true}
}

func (v NullableReportingEventTriggerAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingEventTriggerAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

