/*
Ndcaf_DataReporting

Data Collection AF: Data Collection and Reporting Configuration API and Data Reporting API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ndcaf_DataReporting

import (
	"encoding/json"
)

// checks if the LocationRecordAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationRecordAllOf{}

// LocationRecordAllOf struct for LocationRecordAllOf
type LocationRecordAllOf struct {
	Location LocationData `json:"location"`
}

// NewLocationRecordAllOf instantiates a new LocationRecordAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationRecordAllOf(location LocationData) *LocationRecordAllOf {
	this := LocationRecordAllOf{}
	this.Location = location
	return &this
}

// NewLocationRecordAllOfWithDefaults instantiates a new LocationRecordAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationRecordAllOfWithDefaults() *LocationRecordAllOf {
	this := LocationRecordAllOf{}
	return &this
}

// GetLocation returns the Location field value
func (o *LocationRecordAllOf) GetLocation() LocationData {
	if o == nil {
		var ret LocationData
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *LocationRecordAllOf) GetLocationOk() (*LocationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *LocationRecordAllOf) SetLocation(v LocationData) {
	o.Location = v
}

func (o LocationRecordAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationRecordAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["location"] = o.Location
	return toSerialize, nil
}

type NullableLocationRecordAllOf struct {
	value *LocationRecordAllOf
	isSet bool
}

func (v NullableLocationRecordAllOf) Get() *LocationRecordAllOf {
	return v.value
}

func (v *NullableLocationRecordAllOf) Set(val *LocationRecordAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationRecordAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationRecordAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationRecordAllOf(val *LocationRecordAllOf) *NullableLocationRecordAllOf {
	return &NullableLocationRecordAllOf{value: val, isSet: true}
}

func (v NullableLocationRecordAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationRecordAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
