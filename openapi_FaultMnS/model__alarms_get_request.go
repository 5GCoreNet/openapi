/*
Fault Supervision MnS

OAS 3.0.1 definition of the Fault Supervision MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_FaultMnS

import (
	"encoding/json"
	"fmt"
)

// AlarmsGetRequest - struct for AlarmsGetRequest
type AlarmsGetRequest struct {
	MapOfMergePatchAcknowledgeAlarm *map[string]MergePatchAcknowledgeAlarm
	MapOfMergePatchClearAlarm *map[string]MergePatchClearAlarm
}

// map[string]MergePatchAcknowledgeAlarmAsAlarmsGetRequest is a convenience function that returns map[string]MergePatchAcknowledgeAlarm wrapped in AlarmsGetRequest
func MapOfMergePatchAcknowledgeAlarmAsAlarmsGetRequest(v *map[string]MergePatchAcknowledgeAlarm) AlarmsGetRequest {
	return AlarmsGetRequest{
		MapOfMergePatchAcknowledgeAlarm: v,
	}
}

// map[string]MergePatchClearAlarmAsAlarmsGetRequest is a convenience function that returns map[string]MergePatchClearAlarm wrapped in AlarmsGetRequest
func MapOfMergePatchClearAlarmAsAlarmsGetRequest(v *map[string]MergePatchClearAlarm) AlarmsGetRequest {
	return AlarmsGetRequest{
		MapOfMergePatchClearAlarm: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AlarmsGetRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapOfMergePatchAcknowledgeAlarm
	err = newStrictDecoder(data).Decode(&dst.MapOfMergePatchAcknowledgeAlarm)
	if err == nil {
		jsonMapOfMergePatchAcknowledgeAlarm, _ := json.Marshal(dst.MapOfMergePatchAcknowledgeAlarm)
		if string(jsonMapOfMergePatchAcknowledgeAlarm) == "{}" { // empty struct
			dst.MapOfMergePatchAcknowledgeAlarm = nil
		} else {
			match++
		}
	} else {
		dst.MapOfMergePatchAcknowledgeAlarm = nil
	}

	// try to unmarshal data into MapOfMergePatchClearAlarm
	err = newStrictDecoder(data).Decode(&dst.MapOfMergePatchClearAlarm)
	if err == nil {
		jsonMapOfMergePatchClearAlarm, _ := json.Marshal(dst.MapOfMergePatchClearAlarm)
		if string(jsonMapOfMergePatchClearAlarm) == "{}" { // empty struct
			dst.MapOfMergePatchClearAlarm = nil
		} else {
			match++
		}
	} else {
		dst.MapOfMergePatchClearAlarm = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapOfMergePatchAcknowledgeAlarm = nil
		dst.MapOfMergePatchClearAlarm = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AlarmsGetRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AlarmsGetRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AlarmsGetRequest) MarshalJSON() ([]byte, error) {
	if src.MapOfMergePatchAcknowledgeAlarm != nil {
		return json.Marshal(&src.MapOfMergePatchAcknowledgeAlarm)
	}

	if src.MapOfMergePatchClearAlarm != nil {
		return json.Marshal(&src.MapOfMergePatchClearAlarm)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AlarmsGetRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapOfMergePatchAcknowledgeAlarm != nil {
		return obj.MapOfMergePatchAcknowledgeAlarm
	}

	if obj.MapOfMergePatchClearAlarm != nil {
		return obj.MapOfMergePatchClearAlarm
	}

	// all schemas are nil
	return nil
}

type NullableAlarmsGetRequest struct {
	value *AlarmsGetRequest
	isSet bool
}

func (v NullableAlarmsGetRequest) Get() *AlarmsGetRequest {
	return v.value
}

func (v *NullableAlarmsGetRequest) Set(val *AlarmsGetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarmsGetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarmsGetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarmsGetRequest(val *AlarmsGetRequest) *NullableAlarmsGetRequest {
	return &NullableAlarmsGetRequest{value: val, isSet: true}
}

func (v NullableAlarmsGetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarmsGetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


