/*
Fault Supervision MnS

OAS 3.0.1 definition of the Fault Supervision MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_FaultMnS

import (
	"encoding/json"
	"fmt"
)

// SubscriptionsPostRequest - struct for SubscriptionsPostRequest
type SubscriptionsPostRequest struct {
	NotifyNewAlarm *NotifyNewAlarm
	NotifyNewSecAlarm *NotifyNewSecAlarm
}

// NotifyNewAlarmAsSubscriptionsPostRequest is a convenience function that returns NotifyNewAlarm wrapped in SubscriptionsPostRequest
func NotifyNewAlarmAsSubscriptionsPostRequest(v *NotifyNewAlarm) SubscriptionsPostRequest {
	return SubscriptionsPostRequest{
		NotifyNewAlarm: v,
	}
}

// NotifyNewSecAlarmAsSubscriptionsPostRequest is a convenience function that returns NotifyNewSecAlarm wrapped in SubscriptionsPostRequest
func NotifyNewSecAlarmAsSubscriptionsPostRequest(v *NotifyNewSecAlarm) SubscriptionsPostRequest {
	return SubscriptionsPostRequest{
		NotifyNewSecAlarm: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubscriptionsPostRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NotifyNewAlarm
	err = newStrictDecoder(data).Decode(&dst.NotifyNewAlarm)
	if err == nil {
		jsonNotifyNewAlarm, _ := json.Marshal(dst.NotifyNewAlarm)
		if string(jsonNotifyNewAlarm) == "{}" { // empty struct
			dst.NotifyNewAlarm = nil
		} else {
			match++
		}
	} else {
		dst.NotifyNewAlarm = nil
	}

	// try to unmarshal data into NotifyNewSecAlarm
	err = newStrictDecoder(data).Decode(&dst.NotifyNewSecAlarm)
	if err == nil {
		jsonNotifyNewSecAlarm, _ := json.Marshal(dst.NotifyNewSecAlarm)
		if string(jsonNotifyNewSecAlarm) == "{}" { // empty struct
			dst.NotifyNewSecAlarm = nil
		} else {
			match++
		}
	} else {
		dst.NotifyNewSecAlarm = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NotifyNewAlarm = nil
		dst.NotifyNewSecAlarm = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SubscriptionsPostRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SubscriptionsPostRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubscriptionsPostRequest) MarshalJSON() ([]byte, error) {
	if src.NotifyNewAlarm != nil {
		return json.Marshal(&src.NotifyNewAlarm)
	}

	if src.NotifyNewSecAlarm != nil {
		return json.Marshal(&src.NotifyNewSecAlarm)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubscriptionsPostRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NotifyNewAlarm != nil {
		return obj.NotifyNewAlarm
	}

	if obj.NotifyNewSecAlarm != nil {
		return obj.NotifyNewSecAlarm
	}

	// all schemas are nil
	return nil
}

type NullableSubscriptionsPostRequest struct {
	value *SubscriptionsPostRequest
	isSet bool
}

func (v NullableSubscriptionsPostRequest) Get() *SubscriptionsPostRequest {
	return v.value
}

func (v *NullableSubscriptionsPostRequest) Set(val *SubscriptionsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionsPostRequest(val *SubscriptionsPostRequest) *NullableSubscriptionsPostRequest {
	return &NullableSubscriptionsPostRequest{value: val, isSet: true}
}

func (v NullableSubscriptionsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


