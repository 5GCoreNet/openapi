/*
Fault Supervision MnS

OAS 3.0.1 definition of the Fault Supervision MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_FaultMnS

import (
	"encoding/json"
	"fmt"
)

// SubscriptionsPostRequest1 - struct for SubscriptionsPostRequest1
type SubscriptionsPostRequest1 struct {
	NotifyChangedAlarmGeneral *NotifyChangedAlarmGeneral
	NotifyChangedSecAlarmGeneral *NotifyChangedSecAlarmGeneral
}

// NotifyChangedAlarmGeneralAsSubscriptionsPostRequest1 is a convenience function that returns NotifyChangedAlarmGeneral wrapped in SubscriptionsPostRequest1
func NotifyChangedAlarmGeneralAsSubscriptionsPostRequest1(v *NotifyChangedAlarmGeneral) SubscriptionsPostRequest1 {
	return SubscriptionsPostRequest1{
		NotifyChangedAlarmGeneral: v,
	}
}

// NotifyChangedSecAlarmGeneralAsSubscriptionsPostRequest1 is a convenience function that returns NotifyChangedSecAlarmGeneral wrapped in SubscriptionsPostRequest1
func NotifyChangedSecAlarmGeneralAsSubscriptionsPostRequest1(v *NotifyChangedSecAlarmGeneral) SubscriptionsPostRequest1 {
	return SubscriptionsPostRequest1{
		NotifyChangedSecAlarmGeneral: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubscriptionsPostRequest1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NotifyChangedAlarmGeneral
	err = newStrictDecoder(data).Decode(&dst.NotifyChangedAlarmGeneral)
	if err == nil {
		jsonNotifyChangedAlarmGeneral, _ := json.Marshal(dst.NotifyChangedAlarmGeneral)
		if string(jsonNotifyChangedAlarmGeneral) == "{}" { // empty struct
			dst.NotifyChangedAlarmGeneral = nil
		} else {
			match++
		}
	} else {
		dst.NotifyChangedAlarmGeneral = nil
	}

	// try to unmarshal data into NotifyChangedSecAlarmGeneral
	err = newStrictDecoder(data).Decode(&dst.NotifyChangedSecAlarmGeneral)
	if err == nil {
		jsonNotifyChangedSecAlarmGeneral, _ := json.Marshal(dst.NotifyChangedSecAlarmGeneral)
		if string(jsonNotifyChangedSecAlarmGeneral) == "{}" { // empty struct
			dst.NotifyChangedSecAlarmGeneral = nil
		} else {
			match++
		}
	} else {
		dst.NotifyChangedSecAlarmGeneral = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NotifyChangedAlarmGeneral = nil
		dst.NotifyChangedSecAlarmGeneral = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SubscriptionsPostRequest1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SubscriptionsPostRequest1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubscriptionsPostRequest1) MarshalJSON() ([]byte, error) {
	if src.NotifyChangedAlarmGeneral != nil {
		return json.Marshal(&src.NotifyChangedAlarmGeneral)
	}

	if src.NotifyChangedSecAlarmGeneral != nil {
		return json.Marshal(&src.NotifyChangedSecAlarmGeneral)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubscriptionsPostRequest1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NotifyChangedAlarmGeneral != nil {
		return obj.NotifyChangedAlarmGeneral
	}

	if obj.NotifyChangedSecAlarmGeneral != nil {
		return obj.NotifyChangedSecAlarmGeneral
	}

	// all schemas are nil
	return nil
}

type NullableSubscriptionsPostRequest1 struct {
	value *SubscriptionsPostRequest1
	isSet bool
}

func (v NullableSubscriptionsPostRequest1) Get() *SubscriptionsPostRequest1 {
	return v.value
}

func (v *NullableSubscriptionsPostRequest1) Set(val *SubscriptionsPostRequest1) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionsPostRequest1) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionsPostRequest1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionsPostRequest1(val *SubscriptionsPostRequest1) *NullableSubscriptionsPostRequest1 {
	return &NullableSubscriptionsPostRequest1{value: val, isSet: true}
}

func (v NullableSubscriptionsPostRequest1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionsPostRequest1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


