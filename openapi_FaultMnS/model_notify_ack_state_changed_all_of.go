/*
Fault Supervision MnS

OAS 3.0.1 definition of the Fault Supervision MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_FaultMnS

import (
	"encoding/json"
)

// checks if the NotifyAckStateChangedAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyAckStateChangedAllOf{}

// NotifyAckStateChangedAllOf struct for NotifyAckStateChangedAllOf
type NotifyAckStateChangedAllOf struct {
	AlarmId string `json:"alarmId"`
	AlarmType AlarmType `json:"alarmType"`
	ProbableCause ProbableCause `json:"probableCause"`
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`
	AckState AckState `json:"ackState"`
	AckUserId string `json:"ackUserId"`
	AckSystemId *string `json:"ackSystemId,omitempty"`
}

// NewNotifyAckStateChangedAllOf instantiates a new NotifyAckStateChangedAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyAckStateChangedAllOf(alarmId string, alarmType AlarmType, probableCause ProbableCause, perceivedSeverity PerceivedSeverity, ackState AckState, ackUserId string) *NotifyAckStateChangedAllOf {
	this := NotifyAckStateChangedAllOf{}
	this.AlarmId = alarmId
	this.AlarmType = alarmType
	this.ProbableCause = probableCause
	this.PerceivedSeverity = perceivedSeverity
	this.AckState = ackState
	this.AckUserId = ackUserId
	return &this
}

// NewNotifyAckStateChangedAllOfWithDefaults instantiates a new NotifyAckStateChangedAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyAckStateChangedAllOfWithDefaults() *NotifyAckStateChangedAllOf {
	this := NotifyAckStateChangedAllOf{}
	return &this
}

// GetAlarmId returns the AlarmId field value
func (o *NotifyAckStateChangedAllOf) GetAlarmId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlarmId
}

// GetAlarmIdOk returns a tuple with the AlarmId field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChangedAllOf) GetAlarmIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlarmId, true
}

// SetAlarmId sets field value
func (o *NotifyAckStateChangedAllOf) SetAlarmId(v string) {
	o.AlarmId = v
}

// GetAlarmType returns the AlarmType field value
func (o *NotifyAckStateChangedAllOf) GetAlarmType() AlarmType {
	if o == nil {
		var ret AlarmType
		return ret
	}

	return o.AlarmType
}

// GetAlarmTypeOk returns a tuple with the AlarmType field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChangedAllOf) GetAlarmTypeOk() (*AlarmType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlarmType, true
}

// SetAlarmType sets field value
func (o *NotifyAckStateChangedAllOf) SetAlarmType(v AlarmType) {
	o.AlarmType = v
}

// GetProbableCause returns the ProbableCause field value
func (o *NotifyAckStateChangedAllOf) GetProbableCause() ProbableCause {
	if o == nil {
		var ret ProbableCause
		return ret
	}

	return o.ProbableCause
}

// GetProbableCauseOk returns a tuple with the ProbableCause field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChangedAllOf) GetProbableCauseOk() (*ProbableCause, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProbableCause, true
}

// SetProbableCause sets field value
func (o *NotifyAckStateChangedAllOf) SetProbableCause(v ProbableCause) {
	o.ProbableCause = v
}

// GetPerceivedSeverity returns the PerceivedSeverity field value
func (o *NotifyAckStateChangedAllOf) GetPerceivedSeverity() PerceivedSeverity {
	if o == nil {
		var ret PerceivedSeverity
		return ret
	}

	return o.PerceivedSeverity
}

// GetPerceivedSeverityOk returns a tuple with the PerceivedSeverity field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChangedAllOf) GetPerceivedSeverityOk() (*PerceivedSeverity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerceivedSeverity, true
}

// SetPerceivedSeverity sets field value
func (o *NotifyAckStateChangedAllOf) SetPerceivedSeverity(v PerceivedSeverity) {
	o.PerceivedSeverity = v
}

// GetAckState returns the AckState field value
func (o *NotifyAckStateChangedAllOf) GetAckState() AckState {
	if o == nil {
		var ret AckState
		return ret
	}

	return o.AckState
}

// GetAckStateOk returns a tuple with the AckState field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChangedAllOf) GetAckStateOk() (*AckState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AckState, true
}

// SetAckState sets field value
func (o *NotifyAckStateChangedAllOf) SetAckState(v AckState) {
	o.AckState = v
}

// GetAckUserId returns the AckUserId field value
func (o *NotifyAckStateChangedAllOf) GetAckUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AckUserId
}

// GetAckUserIdOk returns a tuple with the AckUserId field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChangedAllOf) GetAckUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AckUserId, true
}

// SetAckUserId sets field value
func (o *NotifyAckStateChangedAllOf) SetAckUserId(v string) {
	o.AckUserId = v
}

// GetAckSystemId returns the AckSystemId field value if set, zero value otherwise.
func (o *NotifyAckStateChangedAllOf) GetAckSystemId() string {
	if o == nil || IsNil(o.AckSystemId) {
		var ret string
		return ret
	}
	return *o.AckSystemId
}

// GetAckSystemIdOk returns a tuple with the AckSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChangedAllOf) GetAckSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.AckSystemId) {
		return nil, false
	}
	return o.AckSystemId, true
}

// HasAckSystemId returns a boolean if a field has been set.
func (o *NotifyAckStateChangedAllOf) HasAckSystemId() bool {
	if o != nil && !IsNil(o.AckSystemId) {
		return true
	}

	return false
}

// SetAckSystemId gets a reference to the given string and assigns it to the AckSystemId field.
func (o *NotifyAckStateChangedAllOf) SetAckSystemId(v string) {
	o.AckSystemId = &v
}

func (o NotifyAckStateChangedAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyAckStateChangedAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alarmId"] = o.AlarmId
	toSerialize["alarmType"] = o.AlarmType
	toSerialize["probableCause"] = o.ProbableCause
	toSerialize["perceivedSeverity"] = o.PerceivedSeverity
	toSerialize["ackState"] = o.AckState
	toSerialize["ackUserId"] = o.AckUserId
	if !IsNil(o.AckSystemId) {
		toSerialize["ackSystemId"] = o.AckSystemId
	}
	return toSerialize, nil
}

type NullableNotifyAckStateChangedAllOf struct {
	value *NotifyAckStateChangedAllOf
	isSet bool
}

func (v NullableNotifyAckStateChangedAllOf) Get() *NotifyAckStateChangedAllOf {
	return v.value
}

func (v *NullableNotifyAckStateChangedAllOf) Set(val *NotifyAckStateChangedAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyAckStateChangedAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyAckStateChangedAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyAckStateChangedAllOf(val *NotifyAckStateChangedAllOf) *NullableNotifyAckStateChangedAllOf {
	return &NullableNotifyAckStateChangedAllOf{value: val, isSet: true}
}

func (v NullableNotifyAckStateChangedAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyAckStateChangedAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


