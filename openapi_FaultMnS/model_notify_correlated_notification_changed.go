/*
Fault Supervision MnS

OAS 3.0.1 definition of the Fault Supervision MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_FaultMnS

import (
	"encoding/json"
)

// checks if the NotifyCorrelatedNotificationChanged type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyCorrelatedNotificationChanged{}

// NotifyCorrelatedNotificationChanged struct for NotifyCorrelatedNotificationChanged
type NotifyCorrelatedNotificationChanged struct {
	NotificationHeader
	AlarmId                 string                   `json:"alarmId"`
	CorrelatedNotifications []CorrelatedNotification `json:"correlatedNotifications"`
	RootCauseIndicator      *bool                    `json:"rootCauseIndicator,omitempty"`
}

// NewNotifyCorrelatedNotificationChanged instantiates a new NotifyCorrelatedNotificationChanged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyCorrelatedNotificationChanged(alarmId string, correlatedNotifications []CorrelatedNotification, href string, notificationId int32, notificationType NotificationType, eventTime time.Time, systemDN string) *NotifyCorrelatedNotificationChanged {
	this := NotifyCorrelatedNotificationChanged{}
	this.Href = href
	this.NotificationId = notificationId
	this.NotificationType = notificationType
	this.EventTime = eventTime
	this.SystemDN = systemDN
	this.AlarmId = alarmId
	this.CorrelatedNotifications = correlatedNotifications
	return &this
}

// NewNotifyCorrelatedNotificationChangedWithDefaults instantiates a new NotifyCorrelatedNotificationChanged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyCorrelatedNotificationChangedWithDefaults() *NotifyCorrelatedNotificationChanged {
	this := NotifyCorrelatedNotificationChanged{}
	return &this
}

// GetAlarmId returns the AlarmId field value
func (o *NotifyCorrelatedNotificationChanged) GetAlarmId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlarmId
}

// GetAlarmIdOk returns a tuple with the AlarmId field value
// and a boolean to check if the value has been set.
func (o *NotifyCorrelatedNotificationChanged) GetAlarmIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlarmId, true
}

// SetAlarmId sets field value
func (o *NotifyCorrelatedNotificationChanged) SetAlarmId(v string) {
	o.AlarmId = v
}

// GetCorrelatedNotifications returns the CorrelatedNotifications field value
func (o *NotifyCorrelatedNotificationChanged) GetCorrelatedNotifications() []CorrelatedNotification {
	if o == nil {
		var ret []CorrelatedNotification
		return ret
	}

	return o.CorrelatedNotifications
}

// GetCorrelatedNotificationsOk returns a tuple with the CorrelatedNotifications field value
// and a boolean to check if the value has been set.
func (o *NotifyCorrelatedNotificationChanged) GetCorrelatedNotificationsOk() ([]CorrelatedNotification, bool) {
	if o == nil {
		return nil, false
	}
	return o.CorrelatedNotifications, true
}

// SetCorrelatedNotifications sets field value
func (o *NotifyCorrelatedNotificationChanged) SetCorrelatedNotifications(v []CorrelatedNotification) {
	o.CorrelatedNotifications = v
}

// GetRootCauseIndicator returns the RootCauseIndicator field value if set, zero value otherwise.
func (o *NotifyCorrelatedNotificationChanged) GetRootCauseIndicator() bool {
	if o == nil || IsNil(o.RootCauseIndicator) {
		var ret bool
		return ret
	}
	return *o.RootCauseIndicator
}

// GetRootCauseIndicatorOk returns a tuple with the RootCauseIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyCorrelatedNotificationChanged) GetRootCauseIndicatorOk() (*bool, bool) {
	if o == nil || IsNil(o.RootCauseIndicator) {
		return nil, false
	}
	return o.RootCauseIndicator, true
}

// HasRootCauseIndicator returns a boolean if a field has been set.
func (o *NotifyCorrelatedNotificationChanged) HasRootCauseIndicator() bool {
	if o != nil && !IsNil(o.RootCauseIndicator) {
		return true
	}

	return false
}

// SetRootCauseIndicator gets a reference to the given bool and assigns it to the RootCauseIndicator field.
func (o *NotifyCorrelatedNotificationChanged) SetRootCauseIndicator(v bool) {
	o.RootCauseIndicator = &v
}

func (o NotifyCorrelatedNotificationChanged) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyCorrelatedNotificationChanged) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedNotificationHeader, errNotificationHeader := json.Marshal(o.NotificationHeader)
	if errNotificationHeader != nil {
		return map[string]interface{}{}, errNotificationHeader
	}
	errNotificationHeader = json.Unmarshal([]byte(serializedNotificationHeader), &toSerialize)
	if errNotificationHeader != nil {
		return map[string]interface{}{}, errNotificationHeader
	}
	toSerialize["alarmId"] = o.AlarmId
	toSerialize["correlatedNotifications"] = o.CorrelatedNotifications
	if !IsNil(o.RootCauseIndicator) {
		toSerialize["rootCauseIndicator"] = o.RootCauseIndicator
	}
	return toSerialize, nil
}

type NullableNotifyCorrelatedNotificationChanged struct {
	value *NotifyCorrelatedNotificationChanged
	isSet bool
}

func (v NullableNotifyCorrelatedNotificationChanged) Get() *NotifyCorrelatedNotificationChanged {
	return v.value
}

func (v *NullableNotifyCorrelatedNotificationChanged) Set(val *NotifyCorrelatedNotificationChanged) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyCorrelatedNotificationChanged) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyCorrelatedNotificationChanged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyCorrelatedNotificationChanged(val *NotifyCorrelatedNotificationChanged) *NullableNotifyCorrelatedNotificationChanged {
	return &NullableNotifyCorrelatedNotificationChanged{value: val, isSet: true}
}

func (v NullableNotifyCorrelatedNotificationChanged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyCorrelatedNotificationChanged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
