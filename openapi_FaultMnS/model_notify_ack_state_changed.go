/*
Fault Supervision MnS

OAS 3.0.1 definition of the Fault Supervision MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_FaultMnS

import (
	"encoding/json"
)

// checks if the NotifyAckStateChanged type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyAckStateChanged{}

// NotifyAckStateChanged struct for NotifyAckStateChanged
type NotifyAckStateChanged struct {
	Href string `json:"href"`
	NotificationId int32 `json:"notificationId"`
	NotificationType NotificationType `json:"notificationType"`
	EventTime time.Time `json:"eventTime"`
	SystemDN string `json:"systemDN"`
	AlarmId string `json:"alarmId"`
	AlarmType AlarmType `json:"alarmType"`
	ProbableCause ProbableCause `json:"probableCause"`
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`
	AckState AckState `json:"ackState"`
	AckUserId string `json:"ackUserId"`
	AckSystemId *string `json:"ackSystemId,omitempty"`
}

// NewNotifyAckStateChanged instantiates a new NotifyAckStateChanged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyAckStateChanged(href string, notificationId int32, notificationType NotificationType, eventTime time.Time, systemDN string, alarmId string, alarmType AlarmType, probableCause ProbableCause, perceivedSeverity PerceivedSeverity, ackState AckState, ackUserId string) *NotifyAckStateChanged {
	this := NotifyAckStateChanged{}
	this.Href = href
	this.NotificationId = notificationId
	this.NotificationType = notificationType
	this.EventTime = eventTime
	this.SystemDN = systemDN
	this.AlarmId = alarmId
	this.AlarmType = alarmType
	this.ProbableCause = probableCause
	this.PerceivedSeverity = perceivedSeverity
	this.AckState = ackState
	this.AckUserId = ackUserId
	return &this
}

// NewNotifyAckStateChangedWithDefaults instantiates a new NotifyAckStateChanged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyAckStateChangedWithDefaults() *NotifyAckStateChanged {
	this := NotifyAckStateChanged{}
	return &this
}

// GetHref returns the Href field value
func (o *NotifyAckStateChanged) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *NotifyAckStateChanged) SetHref(v string) {
	o.Href = v
}

// GetNotificationId returns the NotificationId field value
func (o *NotifyAckStateChanged) GetNotificationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NotificationId
}

// GetNotificationIdOk returns a tuple with the NotificationId field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetNotificationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationId, true
}

// SetNotificationId sets field value
func (o *NotifyAckStateChanged) SetNotificationId(v int32) {
	o.NotificationId = v
}

// GetNotificationType returns the NotificationType field value
func (o *NotifyAckStateChanged) GetNotificationType() NotificationType {
	if o == nil {
		var ret NotificationType
		return ret
	}

	return o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetNotificationTypeOk() (*NotificationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationType, true
}

// SetNotificationType sets field value
func (o *NotifyAckStateChanged) SetNotificationType(v NotificationType) {
	o.NotificationType = v
}

// GetEventTime returns the EventTime field value
func (o *NotifyAckStateChanged) GetEventTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetEventTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTime, true
}

// SetEventTime sets field value
func (o *NotifyAckStateChanged) SetEventTime(v time.Time) {
	o.EventTime = v
}

// GetSystemDN returns the SystemDN field value
func (o *NotifyAckStateChanged) GetSystemDN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SystemDN
}

// GetSystemDNOk returns a tuple with the SystemDN field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetSystemDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemDN, true
}

// SetSystemDN sets field value
func (o *NotifyAckStateChanged) SetSystemDN(v string) {
	o.SystemDN = v
}

// GetAlarmId returns the AlarmId field value
func (o *NotifyAckStateChanged) GetAlarmId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlarmId
}

// GetAlarmIdOk returns a tuple with the AlarmId field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetAlarmIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlarmId, true
}

// SetAlarmId sets field value
func (o *NotifyAckStateChanged) SetAlarmId(v string) {
	o.AlarmId = v
}

// GetAlarmType returns the AlarmType field value
func (o *NotifyAckStateChanged) GetAlarmType() AlarmType {
	if o == nil {
		var ret AlarmType
		return ret
	}

	return o.AlarmType
}

// GetAlarmTypeOk returns a tuple with the AlarmType field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetAlarmTypeOk() (*AlarmType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlarmType, true
}

// SetAlarmType sets field value
func (o *NotifyAckStateChanged) SetAlarmType(v AlarmType) {
	o.AlarmType = v
}

// GetProbableCause returns the ProbableCause field value
func (o *NotifyAckStateChanged) GetProbableCause() ProbableCause {
	if o == nil {
		var ret ProbableCause
		return ret
	}

	return o.ProbableCause
}

// GetProbableCauseOk returns a tuple with the ProbableCause field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetProbableCauseOk() (*ProbableCause, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProbableCause, true
}

// SetProbableCause sets field value
func (o *NotifyAckStateChanged) SetProbableCause(v ProbableCause) {
	o.ProbableCause = v
}

// GetPerceivedSeverity returns the PerceivedSeverity field value
func (o *NotifyAckStateChanged) GetPerceivedSeverity() PerceivedSeverity {
	if o == nil {
		var ret PerceivedSeverity
		return ret
	}

	return o.PerceivedSeverity
}

// GetPerceivedSeverityOk returns a tuple with the PerceivedSeverity field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetPerceivedSeverityOk() (*PerceivedSeverity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerceivedSeverity, true
}

// SetPerceivedSeverity sets field value
func (o *NotifyAckStateChanged) SetPerceivedSeverity(v PerceivedSeverity) {
	o.PerceivedSeverity = v
}

// GetAckState returns the AckState field value
func (o *NotifyAckStateChanged) GetAckState() AckState {
	if o == nil {
		var ret AckState
		return ret
	}

	return o.AckState
}

// GetAckStateOk returns a tuple with the AckState field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetAckStateOk() (*AckState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AckState, true
}

// SetAckState sets field value
func (o *NotifyAckStateChanged) SetAckState(v AckState) {
	o.AckState = v
}

// GetAckUserId returns the AckUserId field value
func (o *NotifyAckStateChanged) GetAckUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AckUserId
}

// GetAckUserIdOk returns a tuple with the AckUserId field value
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetAckUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AckUserId, true
}

// SetAckUserId sets field value
func (o *NotifyAckStateChanged) SetAckUserId(v string) {
	o.AckUserId = v
}

// GetAckSystemId returns the AckSystemId field value if set, zero value otherwise.
func (o *NotifyAckStateChanged) GetAckSystemId() string {
	if o == nil || isNil(o.AckSystemId) {
		var ret string
		return ret
	}
	return *o.AckSystemId
}

// GetAckSystemIdOk returns a tuple with the AckSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyAckStateChanged) GetAckSystemIdOk() (*string, bool) {
	if o == nil || isNil(o.AckSystemId) {
		return nil, false
	}
	return o.AckSystemId, true
}

// HasAckSystemId returns a boolean if a field has been set.
func (o *NotifyAckStateChanged) HasAckSystemId() bool {
	if o != nil && !isNil(o.AckSystemId) {
		return true
	}

	return false
}

// SetAckSystemId gets a reference to the given string and assigns it to the AckSystemId field.
func (o *NotifyAckStateChanged) SetAckSystemId(v string) {
	o.AckSystemId = &v
}

func (o NotifyAckStateChanged) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyAckStateChanged) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	toSerialize["notificationId"] = o.NotificationId
	toSerialize["notificationType"] = o.NotificationType
	toSerialize["eventTime"] = o.EventTime
	toSerialize["systemDN"] = o.SystemDN
	toSerialize["alarmId"] = o.AlarmId
	toSerialize["alarmType"] = o.AlarmType
	toSerialize["probableCause"] = o.ProbableCause
	toSerialize["perceivedSeverity"] = o.PerceivedSeverity
	toSerialize["ackState"] = o.AckState
	toSerialize["ackUserId"] = o.AckUserId
	if !isNil(o.AckSystemId) {
		toSerialize["ackSystemId"] = o.AckSystemId
	}
	return toSerialize, nil
}

type NullableNotifyAckStateChanged struct {
	value *NotifyAckStateChanged
	isSet bool
}

func (v NullableNotifyAckStateChanged) Get() *NotifyAckStateChanged {
	return v.value
}

func (v *NullableNotifyAckStateChanged) Set(val *NotifyAckStateChanged) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyAckStateChanged) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyAckStateChanged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyAckStateChanged(val *NotifyAckStateChanged) *NullableNotifyAckStateChanged {
	return &NullableNotifyAckStateChanged{value: val, isSet: true}
}

func (v NullableNotifyAckStateChanged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyAckStateChanged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


