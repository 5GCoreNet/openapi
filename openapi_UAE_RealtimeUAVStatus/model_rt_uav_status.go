/*
UAE Server Real-time UAV Status Service

UAE Server Real-time UAV Status Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_UAE_RealtimeUAVStatus

import (
	"encoding/json"
)

// checks if the RTUavStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RTUavStatus{}

// RTUavStatus Represents real-time UAV status information.
type RTUavStatus struct {
	UavId *UavId `json:"uavId,omitempty"`
	UavNetConnStatus *UavNetConnStatus `json:"uavNetConnStatus,omitempty"`
	UavLocInfo *LocationInfo `json:"uavLocInfo,omitempty"`
}

// NewRTUavStatus instantiates a new RTUavStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRTUavStatus() *RTUavStatus {
	this := RTUavStatus{}
	return &this
}

// NewRTUavStatusWithDefaults instantiates a new RTUavStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRTUavStatusWithDefaults() *RTUavStatus {
	this := RTUavStatus{}
	return &this
}

// GetUavId returns the UavId field value if set, zero value otherwise.
func (o *RTUavStatus) GetUavId() UavId {
	if o == nil || isNil(o.UavId) {
		var ret UavId
		return ret
	}
	return *o.UavId
}

// GetUavIdOk returns a tuple with the UavId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RTUavStatus) GetUavIdOk() (*UavId, bool) {
	if o == nil || isNil(o.UavId) {
		return nil, false
	}
	return o.UavId, true
}

// HasUavId returns a boolean if a field has been set.
func (o *RTUavStatus) HasUavId() bool {
	if o != nil && !isNil(o.UavId) {
		return true
	}

	return false
}

// SetUavId gets a reference to the given UavId and assigns it to the UavId field.
func (o *RTUavStatus) SetUavId(v UavId) {
	o.UavId = &v
}

// GetUavNetConnStatus returns the UavNetConnStatus field value if set, zero value otherwise.
func (o *RTUavStatus) GetUavNetConnStatus() UavNetConnStatus {
	if o == nil || isNil(o.UavNetConnStatus) {
		var ret UavNetConnStatus
		return ret
	}
	return *o.UavNetConnStatus
}

// GetUavNetConnStatusOk returns a tuple with the UavNetConnStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RTUavStatus) GetUavNetConnStatusOk() (*UavNetConnStatus, bool) {
	if o == nil || isNil(o.UavNetConnStatus) {
		return nil, false
	}
	return o.UavNetConnStatus, true
}

// HasUavNetConnStatus returns a boolean if a field has been set.
func (o *RTUavStatus) HasUavNetConnStatus() bool {
	if o != nil && !isNil(o.UavNetConnStatus) {
		return true
	}

	return false
}

// SetUavNetConnStatus gets a reference to the given UavNetConnStatus and assigns it to the UavNetConnStatus field.
func (o *RTUavStatus) SetUavNetConnStatus(v UavNetConnStatus) {
	o.UavNetConnStatus = &v
}

// GetUavLocInfo returns the UavLocInfo field value if set, zero value otherwise.
func (o *RTUavStatus) GetUavLocInfo() LocationInfo {
	if o == nil || isNil(o.UavLocInfo) {
		var ret LocationInfo
		return ret
	}
	return *o.UavLocInfo
}

// GetUavLocInfoOk returns a tuple with the UavLocInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RTUavStatus) GetUavLocInfoOk() (*LocationInfo, bool) {
	if o == nil || isNil(o.UavLocInfo) {
		return nil, false
	}
	return o.UavLocInfo, true
}

// HasUavLocInfo returns a boolean if a field has been set.
func (o *RTUavStatus) HasUavLocInfo() bool {
	if o != nil && !isNil(o.UavLocInfo) {
		return true
	}

	return false
}

// SetUavLocInfo gets a reference to the given LocationInfo and assigns it to the UavLocInfo field.
func (o *RTUavStatus) SetUavLocInfo(v LocationInfo) {
	o.UavLocInfo = &v
}

func (o RTUavStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RTUavStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UavId) {
		toSerialize["uavId"] = o.UavId
	}
	if !isNil(o.UavNetConnStatus) {
		toSerialize["uavNetConnStatus"] = o.UavNetConnStatus
	}
	if !isNil(o.UavLocInfo) {
		toSerialize["uavLocInfo"] = o.UavLocInfo
	}
	return toSerialize, nil
}

type NullableRTUavStatus struct {
	value *RTUavStatus
	isSet bool
}

func (v NullableRTUavStatus) Get() *RTUavStatus {
	return v.value
}

func (v *NullableRTUavStatus) Set(val *RTUavStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRTUavStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRTUavStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRTUavStatus(val *RTUavStatus) *NullableRTUavStatus {
	return &NullableRTUavStatus{value: val, isSet: true}
}

func (v NullableRTUavStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRTUavStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


