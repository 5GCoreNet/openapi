/*
UAE Server Real-time UAV Status Service

UAE Server Real-time UAV Status Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_UAE_RealtimeUAVStatus

import (
	"encoding/json"
)

// checks if the RTUavStatusSubsc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RTUavStatusSubsc{}

// RTUavStatusSubsc Represents the parameters to request the creation or update of a subscription to real-time UAV status reporting. 
type RTUavStatusSubsc struct {
	// string providing an URI formatted according to IETF RFC 3986.
	UassId string `json:"uassId"`
	UavIds []UavId `json:"uavIds"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationUri string `json:"notificationUri"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewRTUavStatusSubsc instantiates a new RTUavStatusSubsc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRTUavStatusSubsc(uassId string, uavIds []UavId, notificationUri string) *RTUavStatusSubsc {
	this := RTUavStatusSubsc{}
	this.UassId = uassId
	this.UavIds = uavIds
	this.NotificationUri = notificationUri
	return &this
}

// NewRTUavStatusSubscWithDefaults instantiates a new RTUavStatusSubsc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRTUavStatusSubscWithDefaults() *RTUavStatusSubsc {
	this := RTUavStatusSubsc{}
	return &this
}

// GetUassId returns the UassId field value
func (o *RTUavStatusSubsc) GetUassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UassId
}

// GetUassIdOk returns a tuple with the UassId field value
// and a boolean to check if the value has been set.
func (o *RTUavStatusSubsc) GetUassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UassId, true
}

// SetUassId sets field value
func (o *RTUavStatusSubsc) SetUassId(v string) {
	o.UassId = v
}

// GetUavIds returns the UavIds field value
func (o *RTUavStatusSubsc) GetUavIds() []UavId {
	if o == nil {
		var ret []UavId
		return ret
	}

	return o.UavIds
}

// GetUavIdsOk returns a tuple with the UavIds field value
// and a boolean to check if the value has been set.
func (o *RTUavStatusSubsc) GetUavIdsOk() ([]UavId, bool) {
	if o == nil {
		return nil, false
	}
	return o.UavIds, true
}

// SetUavIds sets field value
func (o *RTUavStatusSubsc) SetUavIds(v []UavId) {
	o.UavIds = v
}

// GetNotificationUri returns the NotificationUri field value
func (o *RTUavStatusSubsc) GetNotificationUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationUri
}

// GetNotificationUriOk returns a tuple with the NotificationUri field value
// and a boolean to check if the value has been set.
func (o *RTUavStatusSubsc) GetNotificationUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationUri, true
}

// SetNotificationUri sets field value
func (o *RTUavStatusSubsc) SetNotificationUri(v string) {
	o.NotificationUri = v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *RTUavStatusSubsc) GetSuppFeat() string {
	if o == nil || isNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RTUavStatusSubsc) GetSuppFeatOk() (*string, bool) {
	if o == nil || isNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *RTUavStatusSubsc) HasSuppFeat() bool {
	if o != nil && !isNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *RTUavStatusSubsc) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o RTUavStatusSubsc) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RTUavStatusSubsc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uassId"] = o.UassId
	toSerialize["uavIds"] = o.UavIds
	toSerialize["notificationUri"] = o.NotificationUri
	if !isNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableRTUavStatusSubsc struct {
	value *RTUavStatusSubsc
	isSet bool
}

func (v NullableRTUavStatusSubsc) Get() *RTUavStatusSubsc {
	return v.value
}

func (v *NullableRTUavStatusSubsc) Set(val *RTUavStatusSubsc) {
	v.value = val
	v.isSet = true
}

func (v NullableRTUavStatusSubsc) IsSet() bool {
	return v.isSet
}

func (v *NullableRTUavStatusSubsc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRTUavStatusSubsc(val *RTUavStatusSubsc) *NullableRTUavStatusSubsc {
	return &NullableRTUavStatusSubsc{value: val, isSet: true}
}

func (v NullableRTUavStatusSubsc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRTUavStatusSubsc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


