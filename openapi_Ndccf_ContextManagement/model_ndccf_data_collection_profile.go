/*
Ndccf_ContextManagement

DCCF Context Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ndccf_ContextManagement

import (
	"encoding/json"
)

// checks if the NdccfDataCollectionProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NdccfDataCollectionProfile{}

// NdccfDataCollectionProfile Represents an Individual DCCF Data Collection Profile.
type NdccfDataCollectionProfile struct {
	AnaSub *NnwdafEventsSubscription `json:"anaSub,omitempty"`
	DataSub *DataNotification `json:"dataSub,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NwdafId *string `json:"nwdafId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	NwdafSetId *string `json:"nwdafSetId,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	AdrfId *string `json:"adrfId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	AdrfSetId *string `json:"adrfSetId,omitempty"`
}

// NewNdccfDataCollectionProfile instantiates a new NdccfDataCollectionProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNdccfDataCollectionProfile() *NdccfDataCollectionProfile {
	this := NdccfDataCollectionProfile{}
	return &this
}

// NewNdccfDataCollectionProfileWithDefaults instantiates a new NdccfDataCollectionProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNdccfDataCollectionProfileWithDefaults() *NdccfDataCollectionProfile {
	this := NdccfDataCollectionProfile{}
	return &this
}

// GetAnaSub returns the AnaSub field value if set, zero value otherwise.
func (o *NdccfDataCollectionProfile) GetAnaSub() NnwdafEventsSubscription {
	if o == nil || isNil(o.AnaSub) {
		var ret NnwdafEventsSubscription
		return ret
	}
	return *o.AnaSub
}

// GetAnaSubOk returns a tuple with the AnaSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NdccfDataCollectionProfile) GetAnaSubOk() (*NnwdafEventsSubscription, bool) {
	if o == nil || isNil(o.AnaSub) {
		return nil, false
	}
	return o.AnaSub, true
}

// HasAnaSub returns a boolean if a field has been set.
func (o *NdccfDataCollectionProfile) HasAnaSub() bool {
	if o != nil && !isNil(o.AnaSub) {
		return true
	}

	return false
}

// SetAnaSub gets a reference to the given NnwdafEventsSubscription and assigns it to the AnaSub field.
func (o *NdccfDataCollectionProfile) SetAnaSub(v NnwdafEventsSubscription) {
	o.AnaSub = &v
}

// GetDataSub returns the DataSub field value if set, zero value otherwise.
func (o *NdccfDataCollectionProfile) GetDataSub() DataNotification {
	if o == nil || isNil(o.DataSub) {
		var ret DataNotification
		return ret
	}
	return *o.DataSub
}

// GetDataSubOk returns a tuple with the DataSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NdccfDataCollectionProfile) GetDataSubOk() (*DataNotification, bool) {
	if o == nil || isNil(o.DataSub) {
		return nil, false
	}
	return o.DataSub, true
}

// HasDataSub returns a boolean if a field has been set.
func (o *NdccfDataCollectionProfile) HasDataSub() bool {
	if o != nil && !isNil(o.DataSub) {
		return true
	}

	return false
}

// SetDataSub gets a reference to the given DataNotification and assigns it to the DataSub field.
func (o *NdccfDataCollectionProfile) SetDataSub(v DataNotification) {
	o.DataSub = &v
}

// GetNwdafId returns the NwdafId field value if set, zero value otherwise.
func (o *NdccfDataCollectionProfile) GetNwdafId() string {
	if o == nil || isNil(o.NwdafId) {
		var ret string
		return ret
	}
	return *o.NwdafId
}

// GetNwdafIdOk returns a tuple with the NwdafId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NdccfDataCollectionProfile) GetNwdafIdOk() (*string, bool) {
	if o == nil || isNil(o.NwdafId) {
		return nil, false
	}
	return o.NwdafId, true
}

// HasNwdafId returns a boolean if a field has been set.
func (o *NdccfDataCollectionProfile) HasNwdafId() bool {
	if o != nil && !isNil(o.NwdafId) {
		return true
	}

	return false
}

// SetNwdafId gets a reference to the given string and assigns it to the NwdafId field.
func (o *NdccfDataCollectionProfile) SetNwdafId(v string) {
	o.NwdafId = &v
}

// GetNwdafSetId returns the NwdafSetId field value if set, zero value otherwise.
func (o *NdccfDataCollectionProfile) GetNwdafSetId() string {
	if o == nil || isNil(o.NwdafSetId) {
		var ret string
		return ret
	}
	return *o.NwdafSetId
}

// GetNwdafSetIdOk returns a tuple with the NwdafSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NdccfDataCollectionProfile) GetNwdafSetIdOk() (*string, bool) {
	if o == nil || isNil(o.NwdafSetId) {
		return nil, false
	}
	return o.NwdafSetId, true
}

// HasNwdafSetId returns a boolean if a field has been set.
func (o *NdccfDataCollectionProfile) HasNwdafSetId() bool {
	if o != nil && !isNil(o.NwdafSetId) {
		return true
	}

	return false
}

// SetNwdafSetId gets a reference to the given string and assigns it to the NwdafSetId field.
func (o *NdccfDataCollectionProfile) SetNwdafSetId(v string) {
	o.NwdafSetId = &v
}

// GetAdrfId returns the AdrfId field value if set, zero value otherwise.
func (o *NdccfDataCollectionProfile) GetAdrfId() string {
	if o == nil || isNil(o.AdrfId) {
		var ret string
		return ret
	}
	return *o.AdrfId
}

// GetAdrfIdOk returns a tuple with the AdrfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NdccfDataCollectionProfile) GetAdrfIdOk() (*string, bool) {
	if o == nil || isNil(o.AdrfId) {
		return nil, false
	}
	return o.AdrfId, true
}

// HasAdrfId returns a boolean if a field has been set.
func (o *NdccfDataCollectionProfile) HasAdrfId() bool {
	if o != nil && !isNil(o.AdrfId) {
		return true
	}

	return false
}

// SetAdrfId gets a reference to the given string and assigns it to the AdrfId field.
func (o *NdccfDataCollectionProfile) SetAdrfId(v string) {
	o.AdrfId = &v
}

// GetAdrfSetId returns the AdrfSetId field value if set, zero value otherwise.
func (o *NdccfDataCollectionProfile) GetAdrfSetId() string {
	if o == nil || isNil(o.AdrfSetId) {
		var ret string
		return ret
	}
	return *o.AdrfSetId
}

// GetAdrfSetIdOk returns a tuple with the AdrfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NdccfDataCollectionProfile) GetAdrfSetIdOk() (*string, bool) {
	if o == nil || isNil(o.AdrfSetId) {
		return nil, false
	}
	return o.AdrfSetId, true
}

// HasAdrfSetId returns a boolean if a field has been set.
func (o *NdccfDataCollectionProfile) HasAdrfSetId() bool {
	if o != nil && !isNil(o.AdrfSetId) {
		return true
	}

	return false
}

// SetAdrfSetId gets a reference to the given string and assigns it to the AdrfSetId field.
func (o *NdccfDataCollectionProfile) SetAdrfSetId(v string) {
	o.AdrfSetId = &v
}

func (o NdccfDataCollectionProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NdccfDataCollectionProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AnaSub) {
		toSerialize["anaSub"] = o.AnaSub
	}
	if !isNil(o.DataSub) {
		toSerialize["dataSub"] = o.DataSub
	}
	if !isNil(o.NwdafId) {
		toSerialize["nwdafId"] = o.NwdafId
	}
	if !isNil(o.NwdafSetId) {
		toSerialize["nwdafSetId"] = o.NwdafSetId
	}
	if !isNil(o.AdrfId) {
		toSerialize["adrfId"] = o.AdrfId
	}
	if !isNil(o.AdrfSetId) {
		toSerialize["adrfSetId"] = o.AdrfSetId
	}
	return toSerialize, nil
}

type NullableNdccfDataCollectionProfile struct {
	value *NdccfDataCollectionProfile
	isSet bool
}

func (v NullableNdccfDataCollectionProfile) Get() *NdccfDataCollectionProfile {
	return v.value
}

func (v *NullableNdccfDataCollectionProfile) Set(val *NdccfDataCollectionProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableNdccfDataCollectionProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableNdccfDataCollectionProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNdccfDataCollectionProfile(val *NdccfDataCollectionProfile) *NullableNdccfDataCollectionProfile {
	return &NullableNdccfDataCollectionProfile{value: val, isSet: true}
}

func (v NullableNdccfDataCollectionProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNdccfDataCollectionProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


