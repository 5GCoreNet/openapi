/*
Ntsctsf_QoSandTSCAssistance Service API

TSCTSF QoS and TSC Assistance Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ntsctsf_QoSandTSCAssistance

import (
	"encoding/json"
)

// checks if the EventsSubscReqData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsSubscReqData{}

// EventsSubscReqData Identifies the events the application subscribes to.
type EventsSubscReqData struct {
	Events []TscEvent `json:"events"`
	// String providing an URI formatted according to RFC 3986.
	NotifUri     string                    `json:"notifUri"`
	QosMon       *QosMonitoringInformation `json:"qosMon,omitempty"`
	UsgThres     *UsageThreshold           `json:"usgThres,omitempty"`
	NotifCorreId string                    `json:"notifCorreId"`
}

// NewEventsSubscReqData instantiates a new EventsSubscReqData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsSubscReqData(events []TscEvent, notifUri string, notifCorreId string) *EventsSubscReqData {
	this := EventsSubscReqData{}
	this.Events = events
	this.NotifUri = notifUri
	this.NotifCorreId = notifCorreId
	return &this
}

// NewEventsSubscReqDataWithDefaults instantiates a new EventsSubscReqData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsSubscReqDataWithDefaults() *EventsSubscReqData {
	this := EventsSubscReqData{}
	return &this
}

// GetEvents returns the Events field value
func (o *EventsSubscReqData) GetEvents() []TscEvent {
	if o == nil {
		var ret []TscEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventsSubscReqData) GetEventsOk() ([]TscEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *EventsSubscReqData) SetEvents(v []TscEvent) {
	o.Events = v
}

// GetNotifUri returns the NotifUri field value
func (o *EventsSubscReqData) GetNotifUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifUri
}

// GetNotifUriOk returns a tuple with the NotifUri field value
// and a boolean to check if the value has been set.
func (o *EventsSubscReqData) GetNotifUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifUri, true
}

// SetNotifUri sets field value
func (o *EventsSubscReqData) SetNotifUri(v string) {
	o.NotifUri = v
}

// GetQosMon returns the QosMon field value if set, zero value otherwise.
func (o *EventsSubscReqData) GetQosMon() QosMonitoringInformation {
	if o == nil || IsNil(o.QosMon) {
		var ret QosMonitoringInformation
		return ret
	}
	return *o.QosMon
}

// GetQosMonOk returns a tuple with the QosMon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsSubscReqData) GetQosMonOk() (*QosMonitoringInformation, bool) {
	if o == nil || IsNil(o.QosMon) {
		return nil, false
	}
	return o.QosMon, true
}

// HasQosMon returns a boolean if a field has been set.
func (o *EventsSubscReqData) HasQosMon() bool {
	if o != nil && !IsNil(o.QosMon) {
		return true
	}

	return false
}

// SetQosMon gets a reference to the given QosMonitoringInformation and assigns it to the QosMon field.
func (o *EventsSubscReqData) SetQosMon(v QosMonitoringInformation) {
	o.QosMon = &v
}

// GetUsgThres returns the UsgThres field value if set, zero value otherwise.
func (o *EventsSubscReqData) GetUsgThres() UsageThreshold {
	if o == nil || IsNil(o.UsgThres) {
		var ret UsageThreshold
		return ret
	}
	return *o.UsgThres
}

// GetUsgThresOk returns a tuple with the UsgThres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsSubscReqData) GetUsgThresOk() (*UsageThreshold, bool) {
	if o == nil || IsNil(o.UsgThres) {
		return nil, false
	}
	return o.UsgThres, true
}

// HasUsgThres returns a boolean if a field has been set.
func (o *EventsSubscReqData) HasUsgThres() bool {
	if o != nil && !IsNil(o.UsgThres) {
		return true
	}

	return false
}

// SetUsgThres gets a reference to the given UsageThreshold and assigns it to the UsgThres field.
func (o *EventsSubscReqData) SetUsgThres(v UsageThreshold) {
	o.UsgThres = &v
}

// GetNotifCorreId returns the NotifCorreId field value
func (o *EventsSubscReqData) GetNotifCorreId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifCorreId
}

// GetNotifCorreIdOk returns a tuple with the NotifCorreId field value
// and a boolean to check if the value has been set.
func (o *EventsSubscReqData) GetNotifCorreIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifCorreId, true
}

// SetNotifCorreId sets field value
func (o *EventsSubscReqData) SetNotifCorreId(v string) {
	o.NotifCorreId = v
}

func (o EventsSubscReqData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsSubscReqData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	toSerialize["notifUri"] = o.NotifUri
	if !IsNil(o.QosMon) {
		toSerialize["qosMon"] = o.QosMon
	}
	if !IsNil(o.UsgThres) {
		toSerialize["usgThres"] = o.UsgThres
	}
	toSerialize["notifCorreId"] = o.NotifCorreId
	return toSerialize, nil
}

type NullableEventsSubscReqData struct {
	value *EventsSubscReqData
	isSet bool
}

func (v NullableEventsSubscReqData) Get() *EventsSubscReqData {
	return v.value
}

func (v *NullableEventsSubscReqData) Set(val *EventsSubscReqData) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsSubscReqData) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsSubscReqData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsSubscReqData(val *EventsSubscReqData) *NullableEventsSubscReqData {
	return &NullableEventsSubscReqData{value: val, isSet: true}
}

func (v NullableEventsSubscReqData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsSubscReqData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
