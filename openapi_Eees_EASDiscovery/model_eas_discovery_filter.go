/*
Eees_EASDiscovery

API for EAS Discovery. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EASDiscovery

import (
	"encoding/json"
)

// checks if the EasDiscoveryFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EasDiscoveryFilter{}

// EasDiscoveryFilter Represents the EAS characteristics.
type EasDiscoveryFilter struct {
	// AC description for which an EAS is needed.
	AcChars []ACCharacteristics `json:"acChars,omitempty"`
	// Required EAS chararcteristics.
	EasChars []EasCharacteristics `json:"easChars,omitempty"`
}

// NewEasDiscoveryFilter instantiates a new EasDiscoveryFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEasDiscoveryFilter() *EasDiscoveryFilter {
	this := EasDiscoveryFilter{}
	return &this
}

// NewEasDiscoveryFilterWithDefaults instantiates a new EasDiscoveryFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEasDiscoveryFilterWithDefaults() *EasDiscoveryFilter {
	this := EasDiscoveryFilter{}
	return &this
}

// GetAcChars returns the AcChars field value if set, zero value otherwise.
func (o *EasDiscoveryFilter) GetAcChars() []ACCharacteristics {
	if o == nil || IsNil(o.AcChars) {
		var ret []ACCharacteristics
		return ret
	}
	return o.AcChars
}

// GetAcCharsOk returns a tuple with the AcChars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDiscoveryFilter) GetAcCharsOk() ([]ACCharacteristics, bool) {
	if o == nil || IsNil(o.AcChars) {
		return nil, false
	}
	return o.AcChars, true
}

// HasAcChars returns a boolean if a field has been set.
func (o *EasDiscoveryFilter) HasAcChars() bool {
	if o != nil && !IsNil(o.AcChars) {
		return true
	}

	return false
}

// SetAcChars gets a reference to the given []ACCharacteristics and assigns it to the AcChars field.
func (o *EasDiscoveryFilter) SetAcChars(v []ACCharacteristics) {
	o.AcChars = v
}

// GetEasChars returns the EasChars field value if set, zero value otherwise.
func (o *EasDiscoveryFilter) GetEasChars() []EasCharacteristics {
	if o == nil || IsNil(o.EasChars) {
		var ret []EasCharacteristics
		return ret
	}
	return o.EasChars
}

// GetEasCharsOk returns a tuple with the EasChars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDiscoveryFilter) GetEasCharsOk() ([]EasCharacteristics, bool) {
	if o == nil || IsNil(o.EasChars) {
		return nil, false
	}
	return o.EasChars, true
}

// HasEasChars returns a boolean if a field has been set.
func (o *EasDiscoveryFilter) HasEasChars() bool {
	if o != nil && !IsNil(o.EasChars) {
		return true
	}

	return false
}

// SetEasChars gets a reference to the given []EasCharacteristics and assigns it to the EasChars field.
func (o *EasDiscoveryFilter) SetEasChars(v []EasCharacteristics) {
	o.EasChars = v
}

func (o EasDiscoveryFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EasDiscoveryFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcChars) {
		toSerialize["acChars"] = o.AcChars
	}
	if !IsNil(o.EasChars) {
		toSerialize["easChars"] = o.EasChars
	}
	return toSerialize, nil
}

type NullableEasDiscoveryFilter struct {
	value *EasDiscoveryFilter
	isSet bool
}

func (v NullableEasDiscoveryFilter) Get() *EasDiscoveryFilter {
	return v.value
}

func (v *NullableEasDiscoveryFilter) Set(val *EasDiscoveryFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableEasDiscoveryFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableEasDiscoveryFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEasDiscoveryFilter(val *EasDiscoveryFilter) *NullableEasDiscoveryFilter {
	return &NullableEasDiscoveryFilter{value: val, isSet: true}
}

func (v NullableEasDiscoveryFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEasDiscoveryFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


