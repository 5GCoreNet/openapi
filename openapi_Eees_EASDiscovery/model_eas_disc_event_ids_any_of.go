/*
Eees_EASDiscovery

API for EAS Discovery. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EASDiscovery

import (
	"encoding/json"
	"fmt"
)

// EASDiscEventIDsAnyOf the model 'EASDiscEventIDsAnyOf'
type EASDiscEventIDsAnyOf string

// List of EASDiscEventIDs_anyOf
const (
	AVAILABILITY_CHANGE EASDiscEventIDsAnyOf = "EAS_AVAILABILITY_CHANGE"
	DYNAMIC_INFO_CHANGE EASDiscEventIDsAnyOf = "EAS_DYNAMIC_INFO_CHANGE"
)

// All allowed values of EASDiscEventIDsAnyOf enum
var AllowedEASDiscEventIDsAnyOfEnumValues = []EASDiscEventIDsAnyOf{
	"EAS_AVAILABILITY_CHANGE",
	"EAS_DYNAMIC_INFO_CHANGE",
}

func (v *EASDiscEventIDsAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EASDiscEventIDsAnyOf(value)
	for _, existing := range AllowedEASDiscEventIDsAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EASDiscEventIDsAnyOf", value)
}

// NewEASDiscEventIDsAnyOfFromValue returns a pointer to a valid EASDiscEventIDsAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEASDiscEventIDsAnyOfFromValue(v string) (*EASDiscEventIDsAnyOf, error) {
	ev := EASDiscEventIDsAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EASDiscEventIDsAnyOf: valid values are %v", v, AllowedEASDiscEventIDsAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EASDiscEventIDsAnyOf) IsValid() bool {
	for _, existing := range AllowedEASDiscEventIDsAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EASDiscEventIDs_anyOf value
func (v EASDiscEventIDsAnyOf) Ptr() *EASDiscEventIDsAnyOf {
	return &v
}

type NullableEASDiscEventIDsAnyOf struct {
	value *EASDiscEventIDsAnyOf
	isSet bool
}

func (v NullableEASDiscEventIDsAnyOf) Get() *EASDiscEventIDsAnyOf {
	return v.value
}

func (v *NullableEASDiscEventIDsAnyOf) Set(val *EASDiscEventIDsAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEASDiscEventIDsAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEASDiscEventIDsAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEASDiscEventIDsAnyOf(val *EASDiscEventIDsAnyOf) *NullableEASDiscEventIDsAnyOf {
	return &NullableEASDiscEventIDsAnyOf{value: val, isSet: true}
}

func (v NullableEASDiscEventIDsAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEASDiscEventIDsAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

