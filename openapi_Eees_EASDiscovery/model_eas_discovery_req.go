/*
Eees_EASDiscovery

API for EAS Discovery. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EASDiscovery

import (
	"encoding/json"
)

// checks if the EasDiscoveryReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EasDiscoveryReq{}

// EasDiscoveryReq ECS service provisioning request information.
type EasDiscoveryReq struct {
	RequestorId RequestorId `json:"requestorId"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	UeId *string `json:"ueId,omitempty"`
	EasDiscoveryFilter *EasDiscoveryFilter `json:"easDiscoveryFilter,omitempty"`
	// Indicates if the EEC supports service continuity or not, also indicates which ACR scenarios are supported by the EEC.
	EecSvcContinuity []ACRScenario `json:"eecSvcContinuity,omitempty"`
	// Indicates if the EEC supports service continuity or not, also indicates which ACR scenarios are supported by the EEC.
	EesSvcContinuity []ACRScenario `json:"eesSvcContinuity,omitempty"`
	// Indicates if the EEC supports service continuity or not, also indicates which ACR scenarios are supported by the EEC.
	EasSvcContinuity []ACRScenario `json:"easSvcContinuity,omitempty"`
	LocInf *LocationInfo `json:"locInf,omitempty"`
	// DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
	EasTDnai *string `json:"easTDnai,omitempty"`
}

// NewEasDiscoveryReq instantiates a new EasDiscoveryReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEasDiscoveryReq(requestorId RequestorId) *EasDiscoveryReq {
	this := EasDiscoveryReq{}
	this.RequestorId = requestorId
	return &this
}

// NewEasDiscoveryReqWithDefaults instantiates a new EasDiscoveryReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEasDiscoveryReqWithDefaults() *EasDiscoveryReq {
	this := EasDiscoveryReq{}
	return &this
}

// GetRequestorId returns the RequestorId field value
func (o *EasDiscoveryReq) GetRequestorId() RequestorId {
	if o == nil {
		var ret RequestorId
		return ret
	}

	return o.RequestorId
}

// GetRequestorIdOk returns a tuple with the RequestorId field value
// and a boolean to check if the value has been set.
func (o *EasDiscoveryReq) GetRequestorIdOk() (*RequestorId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestorId, true
}

// SetRequestorId sets field value
func (o *EasDiscoveryReq) SetRequestorId(v RequestorId) {
	o.RequestorId = v
}

// GetUeId returns the UeId field value if set, zero value otherwise.
func (o *EasDiscoveryReq) GetUeId() string {
	if o == nil || IsNil(o.UeId) {
		var ret string
		return ret
	}
	return *o.UeId
}

// GetUeIdOk returns a tuple with the UeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDiscoveryReq) GetUeIdOk() (*string, bool) {
	if o == nil || IsNil(o.UeId) {
		return nil, false
	}
	return o.UeId, true
}

// HasUeId returns a boolean if a field has been set.
func (o *EasDiscoveryReq) HasUeId() bool {
	if o != nil && !IsNil(o.UeId) {
		return true
	}

	return false
}

// SetUeId gets a reference to the given string and assigns it to the UeId field.
func (o *EasDiscoveryReq) SetUeId(v string) {
	o.UeId = &v
}

// GetEasDiscoveryFilter returns the EasDiscoveryFilter field value if set, zero value otherwise.
func (o *EasDiscoveryReq) GetEasDiscoveryFilter() EasDiscoveryFilter {
	if o == nil || IsNil(o.EasDiscoveryFilter) {
		var ret EasDiscoveryFilter
		return ret
	}
	return *o.EasDiscoveryFilter
}

// GetEasDiscoveryFilterOk returns a tuple with the EasDiscoveryFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDiscoveryReq) GetEasDiscoveryFilterOk() (*EasDiscoveryFilter, bool) {
	if o == nil || IsNil(o.EasDiscoveryFilter) {
		return nil, false
	}
	return o.EasDiscoveryFilter, true
}

// HasEasDiscoveryFilter returns a boolean if a field has been set.
func (o *EasDiscoveryReq) HasEasDiscoveryFilter() bool {
	if o != nil && !IsNil(o.EasDiscoveryFilter) {
		return true
	}

	return false
}

// SetEasDiscoveryFilter gets a reference to the given EasDiscoveryFilter and assigns it to the EasDiscoveryFilter field.
func (o *EasDiscoveryReq) SetEasDiscoveryFilter(v EasDiscoveryFilter) {
	o.EasDiscoveryFilter = &v
}

// GetEecSvcContinuity returns the EecSvcContinuity field value if set, zero value otherwise.
func (o *EasDiscoveryReq) GetEecSvcContinuity() []ACRScenario {
	if o == nil || IsNil(o.EecSvcContinuity) {
		var ret []ACRScenario
		return ret
	}
	return o.EecSvcContinuity
}

// GetEecSvcContinuityOk returns a tuple with the EecSvcContinuity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDiscoveryReq) GetEecSvcContinuityOk() ([]ACRScenario, bool) {
	if o == nil || IsNil(o.EecSvcContinuity) {
		return nil, false
	}
	return o.EecSvcContinuity, true
}

// HasEecSvcContinuity returns a boolean if a field has been set.
func (o *EasDiscoveryReq) HasEecSvcContinuity() bool {
	if o != nil && !IsNil(o.EecSvcContinuity) {
		return true
	}

	return false
}

// SetEecSvcContinuity gets a reference to the given []ACRScenario and assigns it to the EecSvcContinuity field.
func (o *EasDiscoveryReq) SetEecSvcContinuity(v []ACRScenario) {
	o.EecSvcContinuity = v
}

// GetEesSvcContinuity returns the EesSvcContinuity field value if set, zero value otherwise.
func (o *EasDiscoveryReq) GetEesSvcContinuity() []ACRScenario {
	if o == nil || IsNil(o.EesSvcContinuity) {
		var ret []ACRScenario
		return ret
	}
	return o.EesSvcContinuity
}

// GetEesSvcContinuityOk returns a tuple with the EesSvcContinuity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDiscoveryReq) GetEesSvcContinuityOk() ([]ACRScenario, bool) {
	if o == nil || IsNil(o.EesSvcContinuity) {
		return nil, false
	}
	return o.EesSvcContinuity, true
}

// HasEesSvcContinuity returns a boolean if a field has been set.
func (o *EasDiscoveryReq) HasEesSvcContinuity() bool {
	if o != nil && !IsNil(o.EesSvcContinuity) {
		return true
	}

	return false
}

// SetEesSvcContinuity gets a reference to the given []ACRScenario and assigns it to the EesSvcContinuity field.
func (o *EasDiscoveryReq) SetEesSvcContinuity(v []ACRScenario) {
	o.EesSvcContinuity = v
}

// GetEasSvcContinuity returns the EasSvcContinuity field value if set, zero value otherwise.
func (o *EasDiscoveryReq) GetEasSvcContinuity() []ACRScenario {
	if o == nil || IsNil(o.EasSvcContinuity) {
		var ret []ACRScenario
		return ret
	}
	return o.EasSvcContinuity
}

// GetEasSvcContinuityOk returns a tuple with the EasSvcContinuity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDiscoveryReq) GetEasSvcContinuityOk() ([]ACRScenario, bool) {
	if o == nil || IsNil(o.EasSvcContinuity) {
		return nil, false
	}
	return o.EasSvcContinuity, true
}

// HasEasSvcContinuity returns a boolean if a field has been set.
func (o *EasDiscoveryReq) HasEasSvcContinuity() bool {
	if o != nil && !IsNil(o.EasSvcContinuity) {
		return true
	}

	return false
}

// SetEasSvcContinuity gets a reference to the given []ACRScenario and assigns it to the EasSvcContinuity field.
func (o *EasDiscoveryReq) SetEasSvcContinuity(v []ACRScenario) {
	o.EasSvcContinuity = v
}

// GetLocInf returns the LocInf field value if set, zero value otherwise.
func (o *EasDiscoveryReq) GetLocInf() LocationInfo {
	if o == nil || IsNil(o.LocInf) {
		var ret LocationInfo
		return ret
	}
	return *o.LocInf
}

// GetLocInfOk returns a tuple with the LocInf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDiscoveryReq) GetLocInfOk() (*LocationInfo, bool) {
	if o == nil || IsNil(o.LocInf) {
		return nil, false
	}
	return o.LocInf, true
}

// HasLocInf returns a boolean if a field has been set.
func (o *EasDiscoveryReq) HasLocInf() bool {
	if o != nil && !IsNil(o.LocInf) {
		return true
	}

	return false
}

// SetLocInf gets a reference to the given LocationInfo and assigns it to the LocInf field.
func (o *EasDiscoveryReq) SetLocInf(v LocationInfo) {
	o.LocInf = &v
}

// GetEasTDnai returns the EasTDnai field value if set, zero value otherwise.
func (o *EasDiscoveryReq) GetEasTDnai() string {
	if o == nil || IsNil(o.EasTDnai) {
		var ret string
		return ret
	}
	return *o.EasTDnai
}

// GetEasTDnaiOk returns a tuple with the EasTDnai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDiscoveryReq) GetEasTDnaiOk() (*string, bool) {
	if o == nil || IsNil(o.EasTDnai) {
		return nil, false
	}
	return o.EasTDnai, true
}

// HasEasTDnai returns a boolean if a field has been set.
func (o *EasDiscoveryReq) HasEasTDnai() bool {
	if o != nil && !IsNil(o.EasTDnai) {
		return true
	}

	return false
}

// SetEasTDnai gets a reference to the given string and assigns it to the EasTDnai field.
func (o *EasDiscoveryReq) SetEasTDnai(v string) {
	o.EasTDnai = &v
}

func (o EasDiscoveryReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EasDiscoveryReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["requestorId"] = o.RequestorId
	if !IsNil(o.UeId) {
		toSerialize["ueId"] = o.UeId
	}
	if !IsNil(o.EasDiscoveryFilter) {
		toSerialize["easDiscoveryFilter"] = o.EasDiscoveryFilter
	}
	if !IsNil(o.EecSvcContinuity) {
		toSerialize["eecSvcContinuity"] = o.EecSvcContinuity
	}
	if !IsNil(o.EesSvcContinuity) {
		toSerialize["eesSvcContinuity"] = o.EesSvcContinuity
	}
	if !IsNil(o.EasSvcContinuity) {
		toSerialize["easSvcContinuity"] = o.EasSvcContinuity
	}
	if !IsNil(o.LocInf) {
		toSerialize["locInf"] = o.LocInf
	}
	if !IsNil(o.EasTDnai) {
		toSerialize["easTDnai"] = o.EasTDnai
	}
	return toSerialize, nil
}

type NullableEasDiscoveryReq struct {
	value *EasDiscoveryReq
	isSet bool
}

func (v NullableEasDiscoveryReq) Get() *EasDiscoveryReq {
	return v.value
}

func (v *NullableEasDiscoveryReq) Set(val *EasDiscoveryReq) {
	v.value = val
	v.isSet = true
}

func (v NullableEasDiscoveryReq) IsSet() bool {
	return v.isSet
}

func (v *NullableEasDiscoveryReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEasDiscoveryReq(val *EasDiscoveryReq) *NullableEasDiscoveryReq {
	return &NullableEasDiscoveryReq{value: val, isSet: true}
}

func (v NullableEasDiscoveryReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEasDiscoveryReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


