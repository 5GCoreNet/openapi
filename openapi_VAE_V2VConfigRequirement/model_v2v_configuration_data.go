/*
VAE_V2VConfigRequirement

API for VAE_V2VConfigRequirement   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_VAE_V2VConfigRequirement

import (
	"encoding/json"
)

// checks if the V2vConfigurationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2vConfigurationData{}

// V2vConfigurationData Contains the V2V configuration data.
type V2vConfigurationData struct {
	// Represents the group ID for which a V2X message is addressed.
	GroupId *string `json:"groupId,omitempty"`
	// Represents the V2X service ID to which a V2X message belongs.
	ServiceId *string `json:"serviceId,omitempty"`
	CanUeIds []string `json:"canUeIds,omitempty"`
	AppQosReq *AppplicationQosRequirement `json:"appQosReq,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewV2vConfigurationData instantiates a new V2vConfigurationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2vConfigurationData() *V2vConfigurationData {
	this := V2vConfigurationData{}
	return &this
}

// NewV2vConfigurationDataWithDefaults instantiates a new V2vConfigurationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2vConfigurationDataWithDefaults() *V2vConfigurationData {
	this := V2vConfigurationData{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *V2vConfigurationData) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2vConfigurationData) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *V2vConfigurationData) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *V2vConfigurationData) SetGroupId(v string) {
	o.GroupId = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *V2vConfigurationData) GetServiceId() string {
	if o == nil || isNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2vConfigurationData) GetServiceIdOk() (*string, bool) {
	if o == nil || isNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *V2vConfigurationData) HasServiceId() bool {
	if o != nil && !isNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *V2vConfigurationData) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetCanUeIds returns the CanUeIds field value if set, zero value otherwise.
func (o *V2vConfigurationData) GetCanUeIds() []string {
	if o == nil || isNil(o.CanUeIds) {
		var ret []string
		return ret
	}
	return o.CanUeIds
}

// GetCanUeIdsOk returns a tuple with the CanUeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2vConfigurationData) GetCanUeIdsOk() ([]string, bool) {
	if o == nil || isNil(o.CanUeIds) {
		return nil, false
	}
	return o.CanUeIds, true
}

// HasCanUeIds returns a boolean if a field has been set.
func (o *V2vConfigurationData) HasCanUeIds() bool {
	if o != nil && !isNil(o.CanUeIds) {
		return true
	}

	return false
}

// SetCanUeIds gets a reference to the given []string and assigns it to the CanUeIds field.
func (o *V2vConfigurationData) SetCanUeIds(v []string) {
	o.CanUeIds = v
}

// GetAppQosReq returns the AppQosReq field value if set, zero value otherwise.
func (o *V2vConfigurationData) GetAppQosReq() AppplicationQosRequirement {
	if o == nil || isNil(o.AppQosReq) {
		var ret AppplicationQosRequirement
		return ret
	}
	return *o.AppQosReq
}

// GetAppQosReqOk returns a tuple with the AppQosReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2vConfigurationData) GetAppQosReqOk() (*AppplicationQosRequirement, bool) {
	if o == nil || isNil(o.AppQosReq) {
		return nil, false
	}
	return o.AppQosReq, true
}

// HasAppQosReq returns a boolean if a field has been set.
func (o *V2vConfigurationData) HasAppQosReq() bool {
	if o != nil && !isNil(o.AppQosReq) {
		return true
	}

	return false
}

// SetAppQosReq gets a reference to the given AppplicationQosRequirement and assigns it to the AppQosReq field.
func (o *V2vConfigurationData) SetAppQosReq(v AppplicationQosRequirement) {
	o.AppQosReq = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *V2vConfigurationData) GetSuppFeat() string {
	if o == nil || isNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2vConfigurationData) GetSuppFeatOk() (*string, bool) {
	if o == nil || isNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *V2vConfigurationData) HasSuppFeat() bool {
	if o != nil && !isNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *V2vConfigurationData) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o V2vConfigurationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2vConfigurationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !isNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !isNil(o.CanUeIds) {
		toSerialize["canUeIds"] = o.CanUeIds
	}
	if !isNil(o.AppQosReq) {
		toSerialize["appQosReq"] = o.AppQosReq
	}
	if !isNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableV2vConfigurationData struct {
	value *V2vConfigurationData
	isSet bool
}

func (v NullableV2vConfigurationData) Get() *V2vConfigurationData {
	return v.value
}

func (v *NullableV2vConfigurationData) Set(val *V2vConfigurationData) {
	v.value = val
	v.isSet = true
}

func (v NullableV2vConfigurationData) IsSet() bool {
	return v.isSet
}

func (v *NullableV2vConfigurationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2vConfigurationData(val *V2vConfigurationData) *NullableV2vConfigurationData {
	return &NullableV2vConfigurationData{value: val, isSet: true}
}

func (v NullableV2vConfigurationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2vConfigurationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


