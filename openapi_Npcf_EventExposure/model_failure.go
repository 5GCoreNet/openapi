/*
Npcf_EventExposure

PCF Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_EventExposure

import (
	"encoding/json"
	"fmt"
)

// Failure - Possible values are: - UNSPECIFIED: Indicates the PCF received the UE sent UE policy delivery service cause #111   (Protocol error, unspecified). - UE_NOT_REACHABLE: Indicates the PCF received the notification from the AMF that the UE is   not reachable. - UNKNOWN: Indicates unknown reasons upon no response from the UE, e.g. UPDS message type is   not defined or not implemented by the UE, or not compatible with the UPDS state, in which   the UE shall ignore the UPDS message. - UE_TEMP_UNREACHABLE: Indicates the PCF received the notification from the AMF that the UE   is not reachable but the PCF will retry again. 
type Failure struct {
	FailureOneOf *FailureOneOf
	String *string
}

// FailureOneOfAsFailure is a convenience function that returns FailureOneOf wrapped in Failure
func FailureOneOfAsFailure(v *FailureOneOf) Failure {
	return Failure{
		FailureOneOf: v,
	}
}

// stringAsFailure is a convenience function that returns string wrapped in Failure
func StringAsFailure(v *string) Failure {
	return Failure{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Failure) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FailureOneOf
	err = newStrictDecoder(data).Decode(&dst.FailureOneOf)
	if err == nil {
		jsonFailureOneOf, _ := json.Marshal(dst.FailureOneOf)
		if string(jsonFailureOneOf) == "{}" { // empty struct
			dst.FailureOneOf = nil
		} else {
			match++
		}
	} else {
		dst.FailureOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FailureOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Failure)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Failure)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Failure) MarshalJSON() ([]byte, error) {
	if src.FailureOneOf != nil {
		return json.Marshal(&src.FailureOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Failure) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FailureOneOf != nil {
		return obj.FailureOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableFailure struct {
	value *Failure
	isSet bool
}

func (v NullableFailure) Get() *Failure {
	return v.value
}

func (v *NullableFailure) Set(val *Failure) {
	v.value = val
	v.isSet = true
}

func (v NullableFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailure(val *Failure) *NullableFailure {
	return &NullableFailure{value: val, isSet: true}
}

func (v NullableFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


