/*
Npcf_EventExposure

PCF Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_EventExposure

import (
	"encoding/json"
	"fmt"
)

// PcEventAnyOf the model 'PcEventAnyOf'
type PcEventAnyOf string

// List of PcEvent_anyOf
const (
	AC_TY_CH PcEventAnyOf = "AC_TY_CH"
	PLMN_CH PcEventAnyOf = "PLMN_CH"
	SAC_CH PcEventAnyOf = "SAC_CH"
	SAT_CATEGORY_CH PcEventAnyOf = "SAT_CATEGORY_CH"
	SUCCESS_UE_POL_DEL_SP PcEventAnyOf = "SUCCESS_UE_POL_DEL_SP"
	UNSUCCESS_UE_POL_DEL_SP PcEventAnyOf = "UNSUCCESS_UE_POL_DEL_SP"
)

// All allowed values of PcEventAnyOf enum
var AllowedPcEventAnyOfEnumValues = []PcEventAnyOf{
	"AC_TY_CH",
	"PLMN_CH",
	"SAC_CH",
	"SAT_CATEGORY_CH",
	"SUCCESS_UE_POL_DEL_SP",
	"UNSUCCESS_UE_POL_DEL_SP",
}

func (v *PcEventAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PcEventAnyOf(value)
	for _, existing := range AllowedPcEventAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PcEventAnyOf", value)
}

// NewPcEventAnyOfFromValue returns a pointer to a valid PcEventAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPcEventAnyOfFromValue(v string) (*PcEventAnyOf, error) {
	ev := PcEventAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PcEventAnyOf: valid values are %v", v, AllowedPcEventAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PcEventAnyOf) IsValid() bool {
	for _, existing := range AllowedPcEventAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PcEvent_anyOf value
func (v PcEventAnyOf) Ptr() *PcEventAnyOf {
	return &v
}

type NullablePcEventAnyOf struct {
	value *PcEventAnyOf
	isSet bool
}

func (v NullablePcEventAnyOf) Get() *PcEventAnyOf {
	return v.value
}

func (v *NullablePcEventAnyOf) Set(val *PcEventAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePcEventAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePcEventAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePcEventAnyOf(val *PcEventAnyOf) *NullablePcEventAnyOf {
	return &NullablePcEventAnyOf{value: val, isSet: true}
}

func (v NullablePcEventAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePcEventAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

