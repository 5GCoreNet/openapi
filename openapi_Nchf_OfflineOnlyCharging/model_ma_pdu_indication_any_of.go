/*
Nchf_OfflineOnlyCharging

OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_OfflineOnlyCharging

import (
	"encoding/json"
	"fmt"
)

// MaPduIndicationAnyOf the model 'MaPduIndicationAnyOf'
type MaPduIndicationAnyOf string

// List of MaPduIndication_anyOf
const (
	REQUEST MaPduIndicationAnyOf = "MA_PDU_REQUEST"
	NETWORK_UPGRADE_ALLOWED MaPduIndicationAnyOf = "MA_PDU_NETWORK_UPGRADE_ALLOWED"
)

// All allowed values of MaPduIndicationAnyOf enum
var AllowedMaPduIndicationAnyOfEnumValues = []MaPduIndicationAnyOf{
	"MA_PDU_REQUEST",
	"MA_PDU_NETWORK_UPGRADE_ALLOWED",
}

func (v *MaPduIndicationAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MaPduIndicationAnyOf(value)
	for _, existing := range AllowedMaPduIndicationAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MaPduIndicationAnyOf", value)
}

// NewMaPduIndicationAnyOfFromValue returns a pointer to a valid MaPduIndicationAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMaPduIndicationAnyOfFromValue(v string) (*MaPduIndicationAnyOf, error) {
	ev := MaPduIndicationAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MaPduIndicationAnyOf: valid values are %v", v, AllowedMaPduIndicationAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MaPduIndicationAnyOf) IsValid() bool {
	for _, existing := range AllowedMaPduIndicationAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MaPduIndication_anyOf value
func (v MaPduIndicationAnyOf) Ptr() *MaPduIndicationAnyOf {
	return &v
}

type NullableMaPduIndicationAnyOf struct {
	value *MaPduIndicationAnyOf
	isSet bool
}

func (v NullableMaPduIndicationAnyOf) Get() *MaPduIndicationAnyOf {
	return v.value
}

func (v *NullableMaPduIndicationAnyOf) Set(val *MaPduIndicationAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMaPduIndicationAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMaPduIndicationAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaPduIndicationAnyOf(val *MaPduIndicationAnyOf) *NullableMaPduIndicationAnyOf {
	return &NullableMaPduIndicationAnyOf{value: val, isSet: true}
}

func (v NullableMaPduIndicationAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaPduIndicationAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

