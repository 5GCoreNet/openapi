/*
Nchf_OfflineOnlyCharging

OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_OfflineOnlyCharging

import (
	"encoding/json"
	"fmt"
)

// RoamerInOutAnyOf the model 'RoamerInOutAnyOf'
type RoamerInOutAnyOf string

// List of RoamerInOut_anyOf
const (
	IN_BOUND RoamerInOutAnyOf = "IN_BOUND"
	OUT_BOUND RoamerInOutAnyOf = "OUT_BOUND"
)

// All allowed values of RoamerInOutAnyOf enum
var AllowedRoamerInOutAnyOfEnumValues = []RoamerInOutAnyOf{
	"IN_BOUND",
	"OUT_BOUND",
}

func (v *RoamerInOutAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoamerInOutAnyOf(value)
	for _, existing := range AllowedRoamerInOutAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoamerInOutAnyOf", value)
}

// NewRoamerInOutAnyOfFromValue returns a pointer to a valid RoamerInOutAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoamerInOutAnyOfFromValue(v string) (*RoamerInOutAnyOf, error) {
	ev := RoamerInOutAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoamerInOutAnyOf: valid values are %v", v, AllowedRoamerInOutAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoamerInOutAnyOf) IsValid() bool {
	for _, existing := range AllowedRoamerInOutAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoamerInOut_anyOf value
func (v RoamerInOutAnyOf) Ptr() *RoamerInOutAnyOf {
	return &v
}

type NullableRoamerInOutAnyOf struct {
	value *RoamerInOutAnyOf
	isSet bool
}

func (v NullableRoamerInOutAnyOf) Get() *RoamerInOutAnyOf {
	return v.value
}

func (v *NullableRoamerInOutAnyOf) Set(val *RoamerInOutAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoamerInOutAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoamerInOutAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoamerInOutAnyOf(val *RoamerInOutAnyOf) *NullableRoamerInOutAnyOf {
	return &NullableRoamerInOutAnyOf{value: val, isSet: true}
}

func (v NullableRoamerInOutAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoamerInOutAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

