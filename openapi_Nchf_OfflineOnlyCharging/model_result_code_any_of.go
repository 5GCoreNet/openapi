/*
Nchf_OfflineOnlyCharging

OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_OfflineOnlyCharging

import (
	"encoding/json"
	"fmt"
)

// ResultCodeAnyOf the model 'ResultCodeAnyOf'
type ResultCodeAnyOf string

// List of ResultCode_anyOf
const (
	SUCCESS ResultCodeAnyOf = "SUCCESS"
	END_USER_SERVICE_DENIED ResultCodeAnyOf = "END_USER_SERVICE_DENIED"
)

// All allowed values of ResultCodeAnyOf enum
var AllowedResultCodeAnyOfEnumValues = []ResultCodeAnyOf{
	"SUCCESS",
	"END_USER_SERVICE_DENIED",
}

func (v *ResultCodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResultCodeAnyOf(value)
	for _, existing := range AllowedResultCodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResultCodeAnyOf", value)
}

// NewResultCodeAnyOfFromValue returns a pointer to a valid ResultCodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResultCodeAnyOfFromValue(v string) (*ResultCodeAnyOf, error) {
	ev := ResultCodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResultCodeAnyOf: valid values are %v", v, AllowedResultCodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResultCodeAnyOf) IsValid() bool {
	for _, existing := range AllowedResultCodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResultCode_anyOf value
func (v ResultCodeAnyOf) Ptr() *ResultCodeAnyOf {
	return &v
}

type NullableResultCodeAnyOf struct {
	value *ResultCodeAnyOf
	isSet bool
}

func (v NullableResultCodeAnyOf) Get() *ResultCodeAnyOf {
	return v.value
}

func (v *NullableResultCodeAnyOf) Set(val *ResultCodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableResultCodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableResultCodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultCodeAnyOf(val *ResultCodeAnyOf) *NullableResultCodeAnyOf {
	return &NullableResultCodeAnyOf{value: val, isSet: true}
}

func (v NullableResultCodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultCodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

