/*
3gpp-analyticsexposure

API for Analytics Exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AnalyticsExposure

import (
	"encoding/json"
)

// checks if the AnalyticsEventNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsEventNotification{}

// AnalyticsEventNotification Represents an analytics event(s) notification.
type AnalyticsEventNotification struct {
	NotifId string `json:"notifId"`
	AnalyEventNotifs []AnalyticsEventNotif `json:"analyEventNotifs"`
	TermCause *TermCause `json:"termCause,omitempty"`
}

// NewAnalyticsEventNotification instantiates a new AnalyticsEventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsEventNotification(notifId string, analyEventNotifs []AnalyticsEventNotif) *AnalyticsEventNotification {
	this := AnalyticsEventNotification{}
	this.NotifId = notifId
	this.AnalyEventNotifs = analyEventNotifs
	return &this
}

// NewAnalyticsEventNotificationWithDefaults instantiates a new AnalyticsEventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsEventNotificationWithDefaults() *AnalyticsEventNotification {
	this := AnalyticsEventNotification{}
	return &this
}

// GetNotifId returns the NotifId field value
func (o *AnalyticsEventNotification) GetNotifId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifId
}

// GetNotifIdOk returns a tuple with the NotifId field value
// and a boolean to check if the value has been set.
func (o *AnalyticsEventNotification) GetNotifIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifId, true
}

// SetNotifId sets field value
func (o *AnalyticsEventNotification) SetNotifId(v string) {
	o.NotifId = v
}

// GetAnalyEventNotifs returns the AnalyEventNotifs field value
func (o *AnalyticsEventNotification) GetAnalyEventNotifs() []AnalyticsEventNotif {
	if o == nil {
		var ret []AnalyticsEventNotif
		return ret
	}

	return o.AnalyEventNotifs
}

// GetAnalyEventNotifsOk returns a tuple with the AnalyEventNotifs field value
// and a boolean to check if the value has been set.
func (o *AnalyticsEventNotification) GetAnalyEventNotifsOk() ([]AnalyticsEventNotif, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnalyEventNotifs, true
}

// SetAnalyEventNotifs sets field value
func (o *AnalyticsEventNotification) SetAnalyEventNotifs(v []AnalyticsEventNotif) {
	o.AnalyEventNotifs = v
}

// GetTermCause returns the TermCause field value if set, zero value otherwise.
func (o *AnalyticsEventNotification) GetTermCause() TermCause {
	if o == nil || IsNil(o.TermCause) {
		var ret TermCause
		return ret
	}
	return *o.TermCause
}

// GetTermCauseOk returns a tuple with the TermCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsEventNotification) GetTermCauseOk() (*TermCause, bool) {
	if o == nil || IsNil(o.TermCause) {
		return nil, false
	}
	return o.TermCause, true
}

// HasTermCause returns a boolean if a field has been set.
func (o *AnalyticsEventNotification) HasTermCause() bool {
	if o != nil && !IsNil(o.TermCause) {
		return true
	}

	return false
}

// SetTermCause gets a reference to the given TermCause and assigns it to the TermCause field.
func (o *AnalyticsEventNotification) SetTermCause(v TermCause) {
	o.TermCause = &v
}

func (o AnalyticsEventNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsEventNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notifId"] = o.NotifId
	toSerialize["analyEventNotifs"] = o.AnalyEventNotifs
	if !IsNil(o.TermCause) {
		toSerialize["termCause"] = o.TermCause
	}
	return toSerialize, nil
}

type NullableAnalyticsEventNotification struct {
	value *AnalyticsEventNotification
	isSet bool
}

func (v NullableAnalyticsEventNotification) Get() *AnalyticsEventNotification {
	return v.value
}

func (v *NullableAnalyticsEventNotification) Set(val *AnalyticsEventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsEventNotification(val *AnalyticsEventNotification) *NullableAnalyticsEventNotification {
	return &NullableAnalyticsEventNotification{value: val, isSet: true}
}

func (v NullableAnalyticsEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


