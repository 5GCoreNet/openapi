/*
3gpp-analyticsexposure

API for Analytics Exposure.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AnalyticsExposure

import (
	"encoding/json"
	"time"
)

// checks if the AnalyticsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsData{}

// AnalyticsData Represents analytics data.
type AnalyticsData struct {
	// string with format 'date-time' as defined in OpenAPI.
	Start *time.Time `json:"start,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	Expiry *time.Time `json:"expiry,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	TimeStampGen    *time.Time                  `json:"timeStampGen,omitempty"`
	UeMobilityInfos []UeMobilityExposure        `json:"ueMobilityInfos,omitempty"`
	UeCommInfos     []UeCommunication           `json:"ueCommInfos,omitempty"`
	NwPerfInfos     []NetworkPerfExposure       `json:"nwPerfInfos,omitempty"`
	AbnormalInfos   []AbnormalExposure          `json:"abnormalInfos,omitempty"`
	CongestInfos    []CongestInfo               `json:"congestInfos,omitempty"`
	QosSustainInfos []QosSustainabilityExposure `json:"qosSustainInfos,omitempty"`
	DisperInfos     []DispersionInfo            `json:"disperInfos,omitempty"`
	DnPerfInfos     []DnPerfInfo                `json:"dnPerfInfos,omitempty"`
	SvcExps         []ServiceExperienceInfo     `json:"svcExps,omitempty"`
	DisperReqs      []DispersionRequirement     `json:"disperReqs,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SuppFeat string `json:"suppFeat"`
}

// NewAnalyticsData instantiates a new AnalyticsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsData(suppFeat string) *AnalyticsData {
	this := AnalyticsData{}
	this.SuppFeat = suppFeat
	return &this
}

// NewAnalyticsDataWithDefaults instantiates a new AnalyticsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsDataWithDefaults() *AnalyticsData {
	this := AnalyticsData{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *AnalyticsData) GetStart() time.Time {
	if o == nil || IsNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *AnalyticsData) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *AnalyticsData) SetStart(v time.Time) {
	o.Start = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *AnalyticsData) GetExpiry() time.Time {
	if o == nil || IsNil(o.Expiry) {
		var ret time.Time
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetExpiryOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *AnalyticsData) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given time.Time and assigns it to the Expiry field.
func (o *AnalyticsData) SetExpiry(v time.Time) {
	o.Expiry = &v
}

// GetTimeStampGen returns the TimeStampGen field value if set, zero value otherwise.
func (o *AnalyticsData) GetTimeStampGen() time.Time {
	if o == nil || IsNil(o.TimeStampGen) {
		var ret time.Time
		return ret
	}
	return *o.TimeStampGen
}

// GetTimeStampGenOk returns a tuple with the TimeStampGen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetTimeStampGenOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeStampGen) {
		return nil, false
	}
	return o.TimeStampGen, true
}

// HasTimeStampGen returns a boolean if a field has been set.
func (o *AnalyticsData) HasTimeStampGen() bool {
	if o != nil && !IsNil(o.TimeStampGen) {
		return true
	}

	return false
}

// SetTimeStampGen gets a reference to the given time.Time and assigns it to the TimeStampGen field.
func (o *AnalyticsData) SetTimeStampGen(v time.Time) {
	o.TimeStampGen = &v
}

// GetUeMobilityInfos returns the UeMobilityInfos field value if set, zero value otherwise.
func (o *AnalyticsData) GetUeMobilityInfos() []UeMobilityExposure {
	if o == nil || IsNil(o.UeMobilityInfos) {
		var ret []UeMobilityExposure
		return ret
	}
	return o.UeMobilityInfos
}

// GetUeMobilityInfosOk returns a tuple with the UeMobilityInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetUeMobilityInfosOk() ([]UeMobilityExposure, bool) {
	if o == nil || IsNil(o.UeMobilityInfos) {
		return nil, false
	}
	return o.UeMobilityInfos, true
}

// HasUeMobilityInfos returns a boolean if a field has been set.
func (o *AnalyticsData) HasUeMobilityInfos() bool {
	if o != nil && !IsNil(o.UeMobilityInfos) {
		return true
	}

	return false
}

// SetUeMobilityInfos gets a reference to the given []UeMobilityExposure and assigns it to the UeMobilityInfos field.
func (o *AnalyticsData) SetUeMobilityInfos(v []UeMobilityExposure) {
	o.UeMobilityInfos = v
}

// GetUeCommInfos returns the UeCommInfos field value if set, zero value otherwise.
func (o *AnalyticsData) GetUeCommInfos() []UeCommunication {
	if o == nil || IsNil(o.UeCommInfos) {
		var ret []UeCommunication
		return ret
	}
	return o.UeCommInfos
}

// GetUeCommInfosOk returns a tuple with the UeCommInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetUeCommInfosOk() ([]UeCommunication, bool) {
	if o == nil || IsNil(o.UeCommInfos) {
		return nil, false
	}
	return o.UeCommInfos, true
}

// HasUeCommInfos returns a boolean if a field has been set.
func (o *AnalyticsData) HasUeCommInfos() bool {
	if o != nil && !IsNil(o.UeCommInfos) {
		return true
	}

	return false
}

// SetUeCommInfos gets a reference to the given []UeCommunication and assigns it to the UeCommInfos field.
func (o *AnalyticsData) SetUeCommInfos(v []UeCommunication) {
	o.UeCommInfos = v
}

// GetNwPerfInfos returns the NwPerfInfos field value if set, zero value otherwise.
func (o *AnalyticsData) GetNwPerfInfos() []NetworkPerfExposure {
	if o == nil || IsNil(o.NwPerfInfos) {
		var ret []NetworkPerfExposure
		return ret
	}
	return o.NwPerfInfos
}

// GetNwPerfInfosOk returns a tuple with the NwPerfInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetNwPerfInfosOk() ([]NetworkPerfExposure, bool) {
	if o == nil || IsNil(o.NwPerfInfos) {
		return nil, false
	}
	return o.NwPerfInfos, true
}

// HasNwPerfInfos returns a boolean if a field has been set.
func (o *AnalyticsData) HasNwPerfInfos() bool {
	if o != nil && !IsNil(o.NwPerfInfos) {
		return true
	}

	return false
}

// SetNwPerfInfos gets a reference to the given []NetworkPerfExposure and assigns it to the NwPerfInfos field.
func (o *AnalyticsData) SetNwPerfInfos(v []NetworkPerfExposure) {
	o.NwPerfInfos = v
}

// GetAbnormalInfos returns the AbnormalInfos field value if set, zero value otherwise.
func (o *AnalyticsData) GetAbnormalInfos() []AbnormalExposure {
	if o == nil || IsNil(o.AbnormalInfos) {
		var ret []AbnormalExposure
		return ret
	}
	return o.AbnormalInfos
}

// GetAbnormalInfosOk returns a tuple with the AbnormalInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetAbnormalInfosOk() ([]AbnormalExposure, bool) {
	if o == nil || IsNil(o.AbnormalInfos) {
		return nil, false
	}
	return o.AbnormalInfos, true
}

// HasAbnormalInfos returns a boolean if a field has been set.
func (o *AnalyticsData) HasAbnormalInfos() bool {
	if o != nil && !IsNil(o.AbnormalInfos) {
		return true
	}

	return false
}

// SetAbnormalInfos gets a reference to the given []AbnormalExposure and assigns it to the AbnormalInfos field.
func (o *AnalyticsData) SetAbnormalInfos(v []AbnormalExposure) {
	o.AbnormalInfos = v
}

// GetCongestInfos returns the CongestInfos field value if set, zero value otherwise.
func (o *AnalyticsData) GetCongestInfos() []CongestInfo {
	if o == nil || IsNil(o.CongestInfos) {
		var ret []CongestInfo
		return ret
	}
	return o.CongestInfos
}

// GetCongestInfosOk returns a tuple with the CongestInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetCongestInfosOk() ([]CongestInfo, bool) {
	if o == nil || IsNil(o.CongestInfos) {
		return nil, false
	}
	return o.CongestInfos, true
}

// HasCongestInfos returns a boolean if a field has been set.
func (o *AnalyticsData) HasCongestInfos() bool {
	if o != nil && !IsNil(o.CongestInfos) {
		return true
	}

	return false
}

// SetCongestInfos gets a reference to the given []CongestInfo and assigns it to the CongestInfos field.
func (o *AnalyticsData) SetCongestInfos(v []CongestInfo) {
	o.CongestInfos = v
}

// GetQosSustainInfos returns the QosSustainInfos field value if set, zero value otherwise.
func (o *AnalyticsData) GetQosSustainInfos() []QosSustainabilityExposure {
	if o == nil || IsNil(o.QosSustainInfos) {
		var ret []QosSustainabilityExposure
		return ret
	}
	return o.QosSustainInfos
}

// GetQosSustainInfosOk returns a tuple with the QosSustainInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetQosSustainInfosOk() ([]QosSustainabilityExposure, bool) {
	if o == nil || IsNil(o.QosSustainInfos) {
		return nil, false
	}
	return o.QosSustainInfos, true
}

// HasQosSustainInfos returns a boolean if a field has been set.
func (o *AnalyticsData) HasQosSustainInfos() bool {
	if o != nil && !IsNil(o.QosSustainInfos) {
		return true
	}

	return false
}

// SetQosSustainInfos gets a reference to the given []QosSustainabilityExposure and assigns it to the QosSustainInfos field.
func (o *AnalyticsData) SetQosSustainInfos(v []QosSustainabilityExposure) {
	o.QosSustainInfos = v
}

// GetDisperInfos returns the DisperInfos field value if set, zero value otherwise.
func (o *AnalyticsData) GetDisperInfos() []DispersionInfo {
	if o == nil || IsNil(o.DisperInfos) {
		var ret []DispersionInfo
		return ret
	}
	return o.DisperInfos
}

// GetDisperInfosOk returns a tuple with the DisperInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetDisperInfosOk() ([]DispersionInfo, bool) {
	if o == nil || IsNil(o.DisperInfos) {
		return nil, false
	}
	return o.DisperInfos, true
}

// HasDisperInfos returns a boolean if a field has been set.
func (o *AnalyticsData) HasDisperInfos() bool {
	if o != nil && !IsNil(o.DisperInfos) {
		return true
	}

	return false
}

// SetDisperInfos gets a reference to the given []DispersionInfo and assigns it to the DisperInfos field.
func (o *AnalyticsData) SetDisperInfos(v []DispersionInfo) {
	o.DisperInfos = v
}

// GetDnPerfInfos returns the DnPerfInfos field value if set, zero value otherwise.
func (o *AnalyticsData) GetDnPerfInfos() []DnPerfInfo {
	if o == nil || IsNil(o.DnPerfInfos) {
		var ret []DnPerfInfo
		return ret
	}
	return o.DnPerfInfos
}

// GetDnPerfInfosOk returns a tuple with the DnPerfInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetDnPerfInfosOk() ([]DnPerfInfo, bool) {
	if o == nil || IsNil(o.DnPerfInfos) {
		return nil, false
	}
	return o.DnPerfInfos, true
}

// HasDnPerfInfos returns a boolean if a field has been set.
func (o *AnalyticsData) HasDnPerfInfos() bool {
	if o != nil && !IsNil(o.DnPerfInfos) {
		return true
	}

	return false
}

// SetDnPerfInfos gets a reference to the given []DnPerfInfo and assigns it to the DnPerfInfos field.
func (o *AnalyticsData) SetDnPerfInfos(v []DnPerfInfo) {
	o.DnPerfInfos = v
}

// GetSvcExps returns the SvcExps field value if set, zero value otherwise.
func (o *AnalyticsData) GetSvcExps() []ServiceExperienceInfo {
	if o == nil || IsNil(o.SvcExps) {
		var ret []ServiceExperienceInfo
		return ret
	}
	return o.SvcExps
}

// GetSvcExpsOk returns a tuple with the SvcExps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetSvcExpsOk() ([]ServiceExperienceInfo, bool) {
	if o == nil || IsNil(o.SvcExps) {
		return nil, false
	}
	return o.SvcExps, true
}

// HasSvcExps returns a boolean if a field has been set.
func (o *AnalyticsData) HasSvcExps() bool {
	if o != nil && !IsNil(o.SvcExps) {
		return true
	}

	return false
}

// SetSvcExps gets a reference to the given []ServiceExperienceInfo and assigns it to the SvcExps field.
func (o *AnalyticsData) SetSvcExps(v []ServiceExperienceInfo) {
	o.SvcExps = v
}

// GetDisperReqs returns the DisperReqs field value if set, zero value otherwise.
func (o *AnalyticsData) GetDisperReqs() []DispersionRequirement {
	if o == nil || IsNil(o.DisperReqs) {
		var ret []DispersionRequirement
		return ret
	}
	return o.DisperReqs
}

// GetDisperReqsOk returns a tuple with the DisperReqs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetDisperReqsOk() ([]DispersionRequirement, bool) {
	if o == nil || IsNil(o.DisperReqs) {
		return nil, false
	}
	return o.DisperReqs, true
}

// HasDisperReqs returns a boolean if a field has been set.
func (o *AnalyticsData) HasDisperReqs() bool {
	if o != nil && !IsNil(o.DisperReqs) {
		return true
	}

	return false
}

// SetDisperReqs gets a reference to the given []DispersionRequirement and assigns it to the DisperReqs field.
func (o *AnalyticsData) SetDisperReqs(v []DispersionRequirement) {
	o.DisperReqs = v
}

// GetSuppFeat returns the SuppFeat field value
func (o *AnalyticsData) GetSuppFeat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value
// and a boolean to check if the value has been set.
func (o *AnalyticsData) GetSuppFeatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuppFeat, true
}

// SetSuppFeat sets field value
func (o *AnalyticsData) SetSuppFeat(v string) {
	o.SuppFeat = v
}

func (o AnalyticsData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	if !IsNil(o.TimeStampGen) {
		toSerialize["timeStampGen"] = o.TimeStampGen
	}
	if !IsNil(o.UeMobilityInfos) {
		toSerialize["ueMobilityInfos"] = o.UeMobilityInfos
	}
	if !IsNil(o.UeCommInfos) {
		toSerialize["ueCommInfos"] = o.UeCommInfos
	}
	if !IsNil(o.NwPerfInfos) {
		toSerialize["nwPerfInfos"] = o.NwPerfInfos
	}
	if !IsNil(o.AbnormalInfos) {
		toSerialize["abnormalInfos"] = o.AbnormalInfos
	}
	if !IsNil(o.CongestInfos) {
		toSerialize["congestInfos"] = o.CongestInfos
	}
	if !IsNil(o.QosSustainInfos) {
		toSerialize["qosSustainInfos"] = o.QosSustainInfos
	}
	if !IsNil(o.DisperInfos) {
		toSerialize["disperInfos"] = o.DisperInfos
	}
	if !IsNil(o.DnPerfInfos) {
		toSerialize["dnPerfInfos"] = o.DnPerfInfos
	}
	if !IsNil(o.SvcExps) {
		toSerialize["svcExps"] = o.SvcExps
	}
	if !IsNil(o.DisperReqs) {
		toSerialize["disperReqs"] = o.DisperReqs
	}
	toSerialize["suppFeat"] = o.SuppFeat
	return toSerialize, nil
}

type NullableAnalyticsData struct {
	value *AnalyticsData
	isSet bool
}

func (v NullableAnalyticsData) Get() *AnalyticsData {
	return v.value
}

func (v *NullableAnalyticsData) Set(val *AnalyticsData) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsData) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsData(val *AnalyticsData) *NullableAnalyticsData {
	return &NullableAnalyticsData{value: val, isSet: true}
}

func (v NullableAnalyticsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
