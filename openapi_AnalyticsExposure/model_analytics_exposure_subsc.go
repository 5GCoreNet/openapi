/*
3gpp-analyticsexposure

API for Analytics Exposure.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AnalyticsExposure

import (
	"encoding/json"
)

// checks if the AnalyticsExposureSubsc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsExposureSubsc{}

// AnalyticsExposureSubsc Represents an analytics exposure subscription.
type AnalyticsExposureSubsc struct {
	AnalyEventsSubs []AnalyticsEventSubsc `json:"analyEventsSubs"`
	AnalyRepInfo *ReportingInformation `json:"analyRepInfo,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	NotifUri string `json:"notifUri"`
	NotifId string `json:"notifId"`
	EventNotifis []AnalyticsEventNotif `json:"eventNotifis,omitempty"`
	FailEventReports []AnalyticsFailureEventInfo `json:"failEventReports,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self *string `json:"self,omitempty"`
	// Set to true by the AF to request the NEF to send a test notification as defined in clause 5.2.5.3 of 3GPP TS 29.122. Set to false or omitted otherwise. 
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
}

// NewAnalyticsExposureSubsc instantiates a new AnalyticsExposureSubsc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsExposureSubsc(analyEventsSubs []AnalyticsEventSubsc, notifUri string, notifId string) *AnalyticsExposureSubsc {
	this := AnalyticsExposureSubsc{}
	this.AnalyEventsSubs = analyEventsSubs
	this.NotifUri = notifUri
	this.NotifId = notifId
	return &this
}

// NewAnalyticsExposureSubscWithDefaults instantiates a new AnalyticsExposureSubsc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsExposureSubscWithDefaults() *AnalyticsExposureSubsc {
	this := AnalyticsExposureSubsc{}
	return &this
}

// GetAnalyEventsSubs returns the AnalyEventsSubs field value
func (o *AnalyticsExposureSubsc) GetAnalyEventsSubs() []AnalyticsEventSubsc {
	if o == nil {
		var ret []AnalyticsEventSubsc
		return ret
	}

	return o.AnalyEventsSubs
}

// GetAnalyEventsSubsOk returns a tuple with the AnalyEventsSubs field value
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetAnalyEventsSubsOk() ([]AnalyticsEventSubsc, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnalyEventsSubs, true
}

// SetAnalyEventsSubs sets field value
func (o *AnalyticsExposureSubsc) SetAnalyEventsSubs(v []AnalyticsEventSubsc) {
	o.AnalyEventsSubs = v
}

// GetAnalyRepInfo returns the AnalyRepInfo field value if set, zero value otherwise.
func (o *AnalyticsExposureSubsc) GetAnalyRepInfo() ReportingInformation {
	if o == nil || isNil(o.AnalyRepInfo) {
		var ret ReportingInformation
		return ret
	}
	return *o.AnalyRepInfo
}

// GetAnalyRepInfoOk returns a tuple with the AnalyRepInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetAnalyRepInfoOk() (*ReportingInformation, bool) {
	if o == nil || isNil(o.AnalyRepInfo) {
		return nil, false
	}
	return o.AnalyRepInfo, true
}

// HasAnalyRepInfo returns a boolean if a field has been set.
func (o *AnalyticsExposureSubsc) HasAnalyRepInfo() bool {
	if o != nil && !isNil(o.AnalyRepInfo) {
		return true
	}

	return false
}

// SetAnalyRepInfo gets a reference to the given ReportingInformation and assigns it to the AnalyRepInfo field.
func (o *AnalyticsExposureSubsc) SetAnalyRepInfo(v ReportingInformation) {
	o.AnalyRepInfo = &v
}

// GetNotifUri returns the NotifUri field value
func (o *AnalyticsExposureSubsc) GetNotifUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifUri
}

// GetNotifUriOk returns a tuple with the NotifUri field value
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetNotifUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifUri, true
}

// SetNotifUri sets field value
func (o *AnalyticsExposureSubsc) SetNotifUri(v string) {
	o.NotifUri = v
}

// GetNotifId returns the NotifId field value
func (o *AnalyticsExposureSubsc) GetNotifId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifId
}

// GetNotifIdOk returns a tuple with the NotifId field value
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetNotifIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifId, true
}

// SetNotifId sets field value
func (o *AnalyticsExposureSubsc) SetNotifId(v string) {
	o.NotifId = v
}

// GetEventNotifis returns the EventNotifis field value if set, zero value otherwise.
func (o *AnalyticsExposureSubsc) GetEventNotifis() []AnalyticsEventNotif {
	if o == nil || isNil(o.EventNotifis) {
		var ret []AnalyticsEventNotif
		return ret
	}
	return o.EventNotifis
}

// GetEventNotifisOk returns a tuple with the EventNotifis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetEventNotifisOk() ([]AnalyticsEventNotif, bool) {
	if o == nil || isNil(o.EventNotifis) {
		return nil, false
	}
	return o.EventNotifis, true
}

// HasEventNotifis returns a boolean if a field has been set.
func (o *AnalyticsExposureSubsc) HasEventNotifis() bool {
	if o != nil && !isNil(o.EventNotifis) {
		return true
	}

	return false
}

// SetEventNotifis gets a reference to the given []AnalyticsEventNotif and assigns it to the EventNotifis field.
func (o *AnalyticsExposureSubsc) SetEventNotifis(v []AnalyticsEventNotif) {
	o.EventNotifis = v
}

// GetFailEventReports returns the FailEventReports field value if set, zero value otherwise.
func (o *AnalyticsExposureSubsc) GetFailEventReports() []AnalyticsFailureEventInfo {
	if o == nil || isNil(o.FailEventReports) {
		var ret []AnalyticsFailureEventInfo
		return ret
	}
	return o.FailEventReports
}

// GetFailEventReportsOk returns a tuple with the FailEventReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetFailEventReportsOk() ([]AnalyticsFailureEventInfo, bool) {
	if o == nil || isNil(o.FailEventReports) {
		return nil, false
	}
	return o.FailEventReports, true
}

// HasFailEventReports returns a boolean if a field has been set.
func (o *AnalyticsExposureSubsc) HasFailEventReports() bool {
	if o != nil && !isNil(o.FailEventReports) {
		return true
	}

	return false
}

// SetFailEventReports gets a reference to the given []AnalyticsFailureEventInfo and assigns it to the FailEventReports field.
func (o *AnalyticsExposureSubsc) SetFailEventReports(v []AnalyticsFailureEventInfo) {
	o.FailEventReports = v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *AnalyticsExposureSubsc) GetSuppFeat() string {
	if o == nil || isNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetSuppFeatOk() (*string, bool) {
	if o == nil || isNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *AnalyticsExposureSubsc) HasSuppFeat() bool {
	if o != nil && !isNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *AnalyticsExposureSubsc) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *AnalyticsExposureSubsc) GetSelf() string {
	if o == nil || isNil(o.Self) {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetSelfOk() (*string, bool) {
	if o == nil || isNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *AnalyticsExposureSubsc) HasSelf() bool {
	if o != nil && !isNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *AnalyticsExposureSubsc) SetSelf(v string) {
	o.Self = &v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *AnalyticsExposureSubsc) GetRequestTestNotification() bool {
	if o == nil || isNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || isNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *AnalyticsExposureSubsc) HasRequestTestNotification() bool {
	if o != nil && !isNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *AnalyticsExposureSubsc) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *AnalyticsExposureSubsc) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || isNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsExposureSubsc) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || isNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *AnalyticsExposureSubsc) HasWebsockNotifConfig() bool {
	if o != nil && !isNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *AnalyticsExposureSubsc) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

func (o AnalyticsExposureSubsc) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsExposureSubsc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["analyEventsSubs"] = o.AnalyEventsSubs
	if !isNil(o.AnalyRepInfo) {
		toSerialize["analyRepInfo"] = o.AnalyRepInfo
	}
	toSerialize["notifUri"] = o.NotifUri
	toSerialize["notifId"] = o.NotifId
	if !isNil(o.EventNotifis) {
		toSerialize["eventNotifis"] = o.EventNotifis
	}
	if !isNil(o.FailEventReports) {
		toSerialize["failEventReports"] = o.FailEventReports
	}
	if !isNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	if !isNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	if !isNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !isNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	return toSerialize, nil
}

type NullableAnalyticsExposureSubsc struct {
	value *AnalyticsExposureSubsc
	isSet bool
}

func (v NullableAnalyticsExposureSubsc) Get() *AnalyticsExposureSubsc {
	return v.value
}

func (v *NullableAnalyticsExposureSubsc) Set(val *AnalyticsExposureSubsc) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsExposureSubsc) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsExposureSubsc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsExposureSubsc(val *AnalyticsExposureSubsc) *NullableAnalyticsExposureSubsc {
	return &NullableAnalyticsExposureSubsc{value: val, isSet: true}
}

func (v NullableAnalyticsExposureSubsc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsExposureSubsc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


