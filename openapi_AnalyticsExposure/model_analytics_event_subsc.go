/*
3gpp-analyticsexposure

API for Analytics Exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AnalyticsExposure

import (
	"encoding/json"
)

// checks if the AnalyticsEventSubsc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsEventSubsc{}

// AnalyticsEventSubsc Represents a subscribed analytics event.
type AnalyticsEventSubsc struct {
	AnalyEvent       AnalyticsEvent             `json:"analyEvent"`
	AnalyEventFilter *AnalyticsEventFilterSubsc `json:"analyEventFilter,omitempty"`
	TgtUe            *TargetUeId                `json:"tgtUe,omitempty"`
}

// NewAnalyticsEventSubsc instantiates a new AnalyticsEventSubsc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsEventSubsc(analyEvent AnalyticsEvent) *AnalyticsEventSubsc {
	this := AnalyticsEventSubsc{}
	this.AnalyEvent = analyEvent
	return &this
}

// NewAnalyticsEventSubscWithDefaults instantiates a new AnalyticsEventSubsc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsEventSubscWithDefaults() *AnalyticsEventSubsc {
	this := AnalyticsEventSubsc{}
	return &this
}

// GetAnalyEvent returns the AnalyEvent field value
func (o *AnalyticsEventSubsc) GetAnalyEvent() AnalyticsEvent {
	if o == nil {
		var ret AnalyticsEvent
		return ret
	}

	return o.AnalyEvent
}

// GetAnalyEventOk returns a tuple with the AnalyEvent field value
// and a boolean to check if the value has been set.
func (o *AnalyticsEventSubsc) GetAnalyEventOk() (*AnalyticsEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnalyEvent, true
}

// SetAnalyEvent sets field value
func (o *AnalyticsEventSubsc) SetAnalyEvent(v AnalyticsEvent) {
	o.AnalyEvent = v
}

// GetAnalyEventFilter returns the AnalyEventFilter field value if set, zero value otherwise.
func (o *AnalyticsEventSubsc) GetAnalyEventFilter() AnalyticsEventFilterSubsc {
	if o == nil || IsNil(o.AnalyEventFilter) {
		var ret AnalyticsEventFilterSubsc
		return ret
	}
	return *o.AnalyEventFilter
}

// GetAnalyEventFilterOk returns a tuple with the AnalyEventFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsEventSubsc) GetAnalyEventFilterOk() (*AnalyticsEventFilterSubsc, bool) {
	if o == nil || IsNil(o.AnalyEventFilter) {
		return nil, false
	}
	return o.AnalyEventFilter, true
}

// HasAnalyEventFilter returns a boolean if a field has been set.
func (o *AnalyticsEventSubsc) HasAnalyEventFilter() bool {
	if o != nil && !IsNil(o.AnalyEventFilter) {
		return true
	}

	return false
}

// SetAnalyEventFilter gets a reference to the given AnalyticsEventFilterSubsc and assigns it to the AnalyEventFilter field.
func (o *AnalyticsEventSubsc) SetAnalyEventFilter(v AnalyticsEventFilterSubsc) {
	o.AnalyEventFilter = &v
}

// GetTgtUe returns the TgtUe field value if set, zero value otherwise.
func (o *AnalyticsEventSubsc) GetTgtUe() TargetUeId {
	if o == nil || IsNil(o.TgtUe) {
		var ret TargetUeId
		return ret
	}
	return *o.TgtUe
}

// GetTgtUeOk returns a tuple with the TgtUe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsEventSubsc) GetTgtUeOk() (*TargetUeId, bool) {
	if o == nil || IsNil(o.TgtUe) {
		return nil, false
	}
	return o.TgtUe, true
}

// HasTgtUe returns a boolean if a field has been set.
func (o *AnalyticsEventSubsc) HasTgtUe() bool {
	if o != nil && !IsNil(o.TgtUe) {
		return true
	}

	return false
}

// SetTgtUe gets a reference to the given TargetUeId and assigns it to the TgtUe field.
func (o *AnalyticsEventSubsc) SetTgtUe(v TargetUeId) {
	o.TgtUe = &v
}

func (o AnalyticsEventSubsc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsEventSubsc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["analyEvent"] = o.AnalyEvent
	if !IsNil(o.AnalyEventFilter) {
		toSerialize["analyEventFilter"] = o.AnalyEventFilter
	}
	if !IsNil(o.TgtUe) {
		toSerialize["tgtUe"] = o.TgtUe
	}
	return toSerialize, nil
}

type NullableAnalyticsEventSubsc struct {
	value *AnalyticsEventSubsc
	isSet bool
}

func (v NullableAnalyticsEventSubsc) Get() *AnalyticsEventSubsc {
	return v.value
}

func (v *NullableAnalyticsEventSubsc) Set(val *AnalyticsEventSubsc) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsEventSubsc) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsEventSubsc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsEventSubsc(val *AnalyticsEventSubsc) *NullableAnalyticsEventSubsc {
	return &NullableAnalyticsEventSubsc{value: val, isSet: true}
}

func (v NullableAnalyticsEventSubsc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsEventSubsc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
