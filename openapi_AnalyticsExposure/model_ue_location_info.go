/*
3gpp-analyticsexposure

API for Analytics Exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AnalyticsExposure

import (
	"encoding/json"
)

// checks if the UeLocationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UeLocationInfo{}

// UeLocationInfo Represents a UE location information.
type UeLocationInfo struct {
	Loc LocationArea5G `json:"loc"`
	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	Ratio *int32 `json:"ratio,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence *int32 `json:"confidence,omitempty"`
}

// NewUeLocationInfo instantiates a new UeLocationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeLocationInfo(loc LocationArea5G) *UeLocationInfo {
	this := UeLocationInfo{}
	this.Loc = loc
	return &this
}

// NewUeLocationInfoWithDefaults instantiates a new UeLocationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeLocationInfoWithDefaults() *UeLocationInfo {
	this := UeLocationInfo{}
	return &this
}

// GetLoc returns the Loc field value
func (o *UeLocationInfo) GetLoc() LocationArea5G {
	if o == nil {
		var ret LocationArea5G
		return ret
	}

	return o.Loc
}

// GetLocOk returns a tuple with the Loc field value
// and a boolean to check if the value has been set.
func (o *UeLocationInfo) GetLocOk() (*LocationArea5G, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Loc, true
}

// SetLoc sets field value
func (o *UeLocationInfo) SetLoc(v LocationArea5G) {
	o.Loc = v
}

// GetRatio returns the Ratio field value if set, zero value otherwise.
func (o *UeLocationInfo) GetRatio() int32 {
	if o == nil || IsNil(o.Ratio) {
		var ret int32
		return ret
	}
	return *o.Ratio
}

// GetRatioOk returns a tuple with the Ratio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeLocationInfo) GetRatioOk() (*int32, bool) {
	if o == nil || IsNil(o.Ratio) {
		return nil, false
	}
	return o.Ratio, true
}

// HasRatio returns a boolean if a field has been set.
func (o *UeLocationInfo) HasRatio() bool {
	if o != nil && !IsNil(o.Ratio) {
		return true
	}

	return false
}

// SetRatio gets a reference to the given int32 and assigns it to the Ratio field.
func (o *UeLocationInfo) SetRatio(v int32) {
	o.Ratio = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *UeLocationInfo) GetConfidence() int32 {
	if o == nil || IsNil(o.Confidence) {
		var ret int32
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeLocationInfo) GetConfidenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *UeLocationInfo) HasConfidence() bool {
	if o != nil && !IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given int32 and assigns it to the Confidence field.
func (o *UeLocationInfo) SetConfidence(v int32) {
	o.Confidence = &v
}

func (o UeLocationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UeLocationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["loc"] = o.Loc
	if !IsNil(o.Ratio) {
		toSerialize["ratio"] = o.Ratio
	}
	if !IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	return toSerialize, nil
}

type NullableUeLocationInfo struct {
	value *UeLocationInfo
	isSet bool
}

func (v NullableUeLocationInfo) Get() *UeLocationInfo {
	return v.value
}

func (v *NullableUeLocationInfo) Set(val *UeLocationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUeLocationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUeLocationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeLocationInfo(val *UeLocationInfo) *NullableUeLocationInfo {
	return &NullableUeLocationInfo{value: val, isSet: true}
}

func (v NullableUeLocationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeLocationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


