/*
3gpp-analyticsexposure

API for Analytics Exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AnalyticsExposure

import (
	"encoding/json"
	"fmt"
)

// AnalyticsFailureCodeAnyOf the model 'AnalyticsFailureCodeAnyOf'
type AnalyticsFailureCodeAnyOf string

// List of AnalyticsFailureCode_anyOf
const (
	UNAVAILABLE_DATA AnalyticsFailureCodeAnyOf = "UNAVAILABLE_DATA"
	BOTH_STAT_PRED_NOT_ALLOWED AnalyticsFailureCodeAnyOf = "BOTH_STAT_PRED_NOT_ALLOWED"
	UNSATISFIED_REQUESTED_ANALYTICS_TIME AnalyticsFailureCodeAnyOf = "UNSATISFIED_REQUESTED_ANALYTICS_TIME"
	OTHER AnalyticsFailureCodeAnyOf = "OTHER"
)

// All allowed values of AnalyticsFailureCodeAnyOf enum
var AllowedAnalyticsFailureCodeAnyOfEnumValues = []AnalyticsFailureCodeAnyOf{
	"UNAVAILABLE_DATA",
	"BOTH_STAT_PRED_NOT_ALLOWED",
	"UNSATISFIED_REQUESTED_ANALYTICS_TIME",
	"OTHER",
}

func (v *AnalyticsFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsFailureCodeAnyOf(value)
	for _, existing := range AllowedAnalyticsFailureCodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsFailureCodeAnyOf", value)
}

// NewAnalyticsFailureCodeAnyOfFromValue returns a pointer to a valid AnalyticsFailureCodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsFailureCodeAnyOfFromValue(v string) (*AnalyticsFailureCodeAnyOf, error) {
	ev := AnalyticsFailureCodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsFailureCodeAnyOf: valid values are %v", v, AllowedAnalyticsFailureCodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsFailureCodeAnyOf) IsValid() bool {
	for _, existing := range AllowedAnalyticsFailureCodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsFailureCode_anyOf value
func (v AnalyticsFailureCodeAnyOf) Ptr() *AnalyticsFailureCodeAnyOf {
	return &v
}

type NullableAnalyticsFailureCodeAnyOf struct {
	value *AnalyticsFailureCodeAnyOf
	isSet bool
}

func (v NullableAnalyticsFailureCodeAnyOf) Get() *AnalyticsFailureCodeAnyOf {
	return v.value
}

func (v *NullableAnalyticsFailureCodeAnyOf) Set(val *AnalyticsFailureCodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsFailureCodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsFailureCodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsFailureCodeAnyOf(val *AnalyticsFailureCodeAnyOf) *NullableAnalyticsFailureCodeAnyOf {
	return &NullableAnalyticsFailureCodeAnyOf{value: val, isSet: true}
}

func (v NullableAnalyticsFailureCodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

