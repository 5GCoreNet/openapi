/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnwdaf_AnalyticsInfo

import (
	"encoding/json"
	"time"
)

// checks if the AmfEventReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmfEventReport{}

// AmfEventReport Represents a report triggered by a subscribed event type
type AmfEventReport struct {
	Type  AmfEventType  `json:"type"`
	State AmfEventState `json:"state"`
	// string with format 'date-time' as defined in OpenAPI.
	TimeStamp time.Time `json:"timeStamp"`
	// String providing an URI formatted according to RFC 3986.
	SubscriptionId *string `json:"subscriptionId,omitempty"`
	AnyUe          *bool   `json:"anyUe,omitempty"`
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.
	Supi     *string        `json:"supi,omitempty"`
	AreaList []AmfEventArea `json:"areaList,omitempty"`
	RefId    *int32         `json:"refId,omitempty"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.
	Gpsi *string `json:"gpsi,omitempty"`
	// String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.
	Pei                *string       `json:"pei,omitempty"`
	Location           *UserLocation `json:"location,omitempty"`
	AdditionalLocation *UserLocation `json:"additionalLocation,omitempty"`
	// String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time.
	Timezone            *string                   `json:"timezone,omitempty"`
	AccessTypeList      []AccessType              `json:"accessTypeList,omitempty"`
	RmInfoList          []RmInfo                  `json:"rmInfoList,omitempty"`
	CmInfoList          []CmInfo                  `json:"cmInfoList,omitempty"`
	Reachability        *UeReachability           `json:"reachability,omitempty"`
	CommFailure         *CommunicationFailure     `json:"commFailure,omitempty"`
	LossOfConnectReason *LossOfConnectivityReason `json:"lossOfConnectReason,omitempty"`
	NumberOfUes         *int32                    `json:"numberOfUes,omitempty"`
	Var5gsUserStateList []Model5GsUserStateInfo   `json:"5gsUserStateList,omitempty"`
	TypeCode            *string                   `json:"typeCode,omitempty"`
	RegistrationNumber  *int32                    `json:"registrationNumber,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	MaxAvailabilityTime       *time.Time                        `json:"maxAvailabilityTime,omitempty"`
	UeIdExt                   []UEIdExt                         `json:"ueIdExt,omitempty"`
	SnssaiTaiList             []SnssaiTaiMapping                `json:"snssaiTaiList,omitempty"`
	IdleStatusIndication      *IdleStatusIndication             `json:"idleStatusIndication,omitempty"`
	UeAccessBehaviorTrends    []UeAccessBehaviorReportItem      `json:"ueAccessBehaviorTrends,omitempty"`
	UeLocationTrends          []UeLocationTrendsReportItem      `json:"ueLocationTrends,omitempty"`
	MmTransLocationReportList []MmTransactionLocationReportItem `json:"mmTransLocationReportList,omitempty"`
	MmTransSliceReportList    []MmTransactionSliceReportItem    `json:"mmTransSliceReportList,omitempty"`
	TermReason                *SubTerminationReason             `json:"termReason,omitempty"`
}

// NewAmfEventReport instantiates a new AmfEventReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmfEventReport(type_ AmfEventType, state AmfEventState, timeStamp time.Time) *AmfEventReport {
	this := AmfEventReport{}
	this.Type = type_
	this.State = state
	this.TimeStamp = timeStamp
	return &this
}

// NewAmfEventReportWithDefaults instantiates a new AmfEventReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmfEventReportWithDefaults() *AmfEventReport {
	this := AmfEventReport{}
	return &this
}

// GetType returns the Type field value
func (o *AmfEventReport) GetType() AmfEventType {
	if o == nil {
		var ret AmfEventType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetTypeOk() (*AmfEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AmfEventReport) SetType(v AmfEventType) {
	o.Type = v
}

// GetState returns the State field value
func (o *AmfEventReport) GetState() AmfEventState {
	if o == nil {
		var ret AmfEventState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetStateOk() (*AmfEventState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *AmfEventReport) SetState(v AmfEventState) {
	o.State = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *AmfEventReport) GetTimeStamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetTimeStampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *AmfEventReport) SetTimeStamp(v time.Time) {
	o.TimeStamp = v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *AmfEventReport) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *AmfEventReport) HasSubscriptionId() bool {
	if o != nil && !IsNil(o.SubscriptionId) {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *AmfEventReport) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetAnyUe returns the AnyUe field value if set, zero value otherwise.
func (o *AmfEventReport) GetAnyUe() bool {
	if o == nil || IsNil(o.AnyUe) {
		var ret bool
		return ret
	}
	return *o.AnyUe
}

// GetAnyUeOk returns a tuple with the AnyUe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetAnyUeOk() (*bool, bool) {
	if o == nil || IsNil(o.AnyUe) {
		return nil, false
	}
	return o.AnyUe, true
}

// HasAnyUe returns a boolean if a field has been set.
func (o *AmfEventReport) HasAnyUe() bool {
	if o != nil && !IsNil(o.AnyUe) {
		return true
	}

	return false
}

// SetAnyUe gets a reference to the given bool and assigns it to the AnyUe field.
func (o *AmfEventReport) SetAnyUe(v bool) {
	o.AnyUe = &v
}

// GetSupi returns the Supi field value if set, zero value otherwise.
func (o *AmfEventReport) GetSupi() string {
	if o == nil || IsNil(o.Supi) {
		var ret string
		return ret
	}
	return *o.Supi
}

// GetSupiOk returns a tuple with the Supi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetSupiOk() (*string, bool) {
	if o == nil || IsNil(o.Supi) {
		return nil, false
	}
	return o.Supi, true
}

// HasSupi returns a boolean if a field has been set.
func (o *AmfEventReport) HasSupi() bool {
	if o != nil && !IsNil(o.Supi) {
		return true
	}

	return false
}

// SetSupi gets a reference to the given string and assigns it to the Supi field.
func (o *AmfEventReport) SetSupi(v string) {
	o.Supi = &v
}

// GetAreaList returns the AreaList field value if set, zero value otherwise.
func (o *AmfEventReport) GetAreaList() []AmfEventArea {
	if o == nil || IsNil(o.AreaList) {
		var ret []AmfEventArea
		return ret
	}
	return o.AreaList
}

// GetAreaListOk returns a tuple with the AreaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetAreaListOk() ([]AmfEventArea, bool) {
	if o == nil || IsNil(o.AreaList) {
		return nil, false
	}
	return o.AreaList, true
}

// HasAreaList returns a boolean if a field has been set.
func (o *AmfEventReport) HasAreaList() bool {
	if o != nil && !IsNil(o.AreaList) {
		return true
	}

	return false
}

// SetAreaList gets a reference to the given []AmfEventArea and assigns it to the AreaList field.
func (o *AmfEventReport) SetAreaList(v []AmfEventArea) {
	o.AreaList = v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *AmfEventReport) GetRefId() int32 {
	if o == nil || IsNil(o.RefId) {
		var ret int32
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetRefIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *AmfEventReport) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int32 and assigns it to the RefId field.
func (o *AmfEventReport) SetRefId(v int32) {
	o.RefId = &v
}

// GetGpsi returns the Gpsi field value if set, zero value otherwise.
func (o *AmfEventReport) GetGpsi() string {
	if o == nil || IsNil(o.Gpsi) {
		var ret string
		return ret
	}
	return *o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetGpsiOk() (*string, bool) {
	if o == nil || IsNil(o.Gpsi) {
		return nil, false
	}
	return o.Gpsi, true
}

// HasGpsi returns a boolean if a field has been set.
func (o *AmfEventReport) HasGpsi() bool {
	if o != nil && !IsNil(o.Gpsi) {
		return true
	}

	return false
}

// SetGpsi gets a reference to the given string and assigns it to the Gpsi field.
func (o *AmfEventReport) SetGpsi(v string) {
	o.Gpsi = &v
}

// GetPei returns the Pei field value if set, zero value otherwise.
func (o *AmfEventReport) GetPei() string {
	if o == nil || IsNil(o.Pei) {
		var ret string
		return ret
	}
	return *o.Pei
}

// GetPeiOk returns a tuple with the Pei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetPeiOk() (*string, bool) {
	if o == nil || IsNil(o.Pei) {
		return nil, false
	}
	return o.Pei, true
}

// HasPei returns a boolean if a field has been set.
func (o *AmfEventReport) HasPei() bool {
	if o != nil && !IsNil(o.Pei) {
		return true
	}

	return false
}

// SetPei gets a reference to the given string and assigns it to the Pei field.
func (o *AmfEventReport) SetPei(v string) {
	o.Pei = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *AmfEventReport) GetLocation() UserLocation {
	if o == nil || IsNil(o.Location) {
		var ret UserLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetLocationOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *AmfEventReport) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given UserLocation and assigns it to the Location field.
func (o *AmfEventReport) SetLocation(v UserLocation) {
	o.Location = &v
}

// GetAdditionalLocation returns the AdditionalLocation field value if set, zero value otherwise.
func (o *AmfEventReport) GetAdditionalLocation() UserLocation {
	if o == nil || IsNil(o.AdditionalLocation) {
		var ret UserLocation
		return ret
	}
	return *o.AdditionalLocation
}

// GetAdditionalLocationOk returns a tuple with the AdditionalLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetAdditionalLocationOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.AdditionalLocation) {
		return nil, false
	}
	return o.AdditionalLocation, true
}

// HasAdditionalLocation returns a boolean if a field has been set.
func (o *AmfEventReport) HasAdditionalLocation() bool {
	if o != nil && !IsNil(o.AdditionalLocation) {
		return true
	}

	return false
}

// SetAdditionalLocation gets a reference to the given UserLocation and assigns it to the AdditionalLocation field.
func (o *AmfEventReport) SetAdditionalLocation(v UserLocation) {
	o.AdditionalLocation = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *AmfEventReport) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *AmfEventReport) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *AmfEventReport) SetTimezone(v string) {
	o.Timezone = &v
}

// GetAccessTypeList returns the AccessTypeList field value if set, zero value otherwise.
func (o *AmfEventReport) GetAccessTypeList() []AccessType {
	if o == nil || IsNil(o.AccessTypeList) {
		var ret []AccessType
		return ret
	}
	return o.AccessTypeList
}

// GetAccessTypeListOk returns a tuple with the AccessTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetAccessTypeListOk() ([]AccessType, bool) {
	if o == nil || IsNil(o.AccessTypeList) {
		return nil, false
	}
	return o.AccessTypeList, true
}

// HasAccessTypeList returns a boolean if a field has been set.
func (o *AmfEventReport) HasAccessTypeList() bool {
	if o != nil && !IsNil(o.AccessTypeList) {
		return true
	}

	return false
}

// SetAccessTypeList gets a reference to the given []AccessType and assigns it to the AccessTypeList field.
func (o *AmfEventReport) SetAccessTypeList(v []AccessType) {
	o.AccessTypeList = v
}

// GetRmInfoList returns the RmInfoList field value if set, zero value otherwise.
func (o *AmfEventReport) GetRmInfoList() []RmInfo {
	if o == nil || IsNil(o.RmInfoList) {
		var ret []RmInfo
		return ret
	}
	return o.RmInfoList
}

// GetRmInfoListOk returns a tuple with the RmInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetRmInfoListOk() ([]RmInfo, bool) {
	if o == nil || IsNil(o.RmInfoList) {
		return nil, false
	}
	return o.RmInfoList, true
}

// HasRmInfoList returns a boolean if a field has been set.
func (o *AmfEventReport) HasRmInfoList() bool {
	if o != nil && !IsNil(o.RmInfoList) {
		return true
	}

	return false
}

// SetRmInfoList gets a reference to the given []RmInfo and assigns it to the RmInfoList field.
func (o *AmfEventReport) SetRmInfoList(v []RmInfo) {
	o.RmInfoList = v
}

// GetCmInfoList returns the CmInfoList field value if set, zero value otherwise.
func (o *AmfEventReport) GetCmInfoList() []CmInfo {
	if o == nil || IsNil(o.CmInfoList) {
		var ret []CmInfo
		return ret
	}
	return o.CmInfoList
}

// GetCmInfoListOk returns a tuple with the CmInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetCmInfoListOk() ([]CmInfo, bool) {
	if o == nil || IsNil(o.CmInfoList) {
		return nil, false
	}
	return o.CmInfoList, true
}

// HasCmInfoList returns a boolean if a field has been set.
func (o *AmfEventReport) HasCmInfoList() bool {
	if o != nil && !IsNil(o.CmInfoList) {
		return true
	}

	return false
}

// SetCmInfoList gets a reference to the given []CmInfo and assigns it to the CmInfoList field.
func (o *AmfEventReport) SetCmInfoList(v []CmInfo) {
	o.CmInfoList = v
}

// GetReachability returns the Reachability field value if set, zero value otherwise.
func (o *AmfEventReport) GetReachability() UeReachability {
	if o == nil || IsNil(o.Reachability) {
		var ret UeReachability
		return ret
	}
	return *o.Reachability
}

// GetReachabilityOk returns a tuple with the Reachability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetReachabilityOk() (*UeReachability, bool) {
	if o == nil || IsNil(o.Reachability) {
		return nil, false
	}
	return o.Reachability, true
}

// HasReachability returns a boolean if a field has been set.
func (o *AmfEventReport) HasReachability() bool {
	if o != nil && !IsNil(o.Reachability) {
		return true
	}

	return false
}

// SetReachability gets a reference to the given UeReachability and assigns it to the Reachability field.
func (o *AmfEventReport) SetReachability(v UeReachability) {
	o.Reachability = &v
}

// GetCommFailure returns the CommFailure field value if set, zero value otherwise.
func (o *AmfEventReport) GetCommFailure() CommunicationFailure {
	if o == nil || IsNil(o.CommFailure) {
		var ret CommunicationFailure
		return ret
	}
	return *o.CommFailure
}

// GetCommFailureOk returns a tuple with the CommFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetCommFailureOk() (*CommunicationFailure, bool) {
	if o == nil || IsNil(o.CommFailure) {
		return nil, false
	}
	return o.CommFailure, true
}

// HasCommFailure returns a boolean if a field has been set.
func (o *AmfEventReport) HasCommFailure() bool {
	if o != nil && !IsNil(o.CommFailure) {
		return true
	}

	return false
}

// SetCommFailure gets a reference to the given CommunicationFailure and assigns it to the CommFailure field.
func (o *AmfEventReport) SetCommFailure(v CommunicationFailure) {
	o.CommFailure = &v
}

// GetLossOfConnectReason returns the LossOfConnectReason field value if set, zero value otherwise.
func (o *AmfEventReport) GetLossOfConnectReason() LossOfConnectivityReason {
	if o == nil || IsNil(o.LossOfConnectReason) {
		var ret LossOfConnectivityReason
		return ret
	}
	return *o.LossOfConnectReason
}

// GetLossOfConnectReasonOk returns a tuple with the LossOfConnectReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetLossOfConnectReasonOk() (*LossOfConnectivityReason, bool) {
	if o == nil || IsNil(o.LossOfConnectReason) {
		return nil, false
	}
	return o.LossOfConnectReason, true
}

// HasLossOfConnectReason returns a boolean if a field has been set.
func (o *AmfEventReport) HasLossOfConnectReason() bool {
	if o != nil && !IsNil(o.LossOfConnectReason) {
		return true
	}

	return false
}

// SetLossOfConnectReason gets a reference to the given LossOfConnectivityReason and assigns it to the LossOfConnectReason field.
func (o *AmfEventReport) SetLossOfConnectReason(v LossOfConnectivityReason) {
	o.LossOfConnectReason = &v
}

// GetNumberOfUes returns the NumberOfUes field value if set, zero value otherwise.
func (o *AmfEventReport) GetNumberOfUes() int32 {
	if o == nil || IsNil(o.NumberOfUes) {
		var ret int32
		return ret
	}
	return *o.NumberOfUes
}

// GetNumberOfUesOk returns a tuple with the NumberOfUes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetNumberOfUesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfUes) {
		return nil, false
	}
	return o.NumberOfUes, true
}

// HasNumberOfUes returns a boolean if a field has been set.
func (o *AmfEventReport) HasNumberOfUes() bool {
	if o != nil && !IsNil(o.NumberOfUes) {
		return true
	}

	return false
}

// SetNumberOfUes gets a reference to the given int32 and assigns it to the NumberOfUes field.
func (o *AmfEventReport) SetNumberOfUes(v int32) {
	o.NumberOfUes = &v
}

// GetVar5gsUserStateList returns the Var5gsUserStateList field value if set, zero value otherwise.
func (o *AmfEventReport) GetVar5gsUserStateList() []Model5GsUserStateInfo {
	if o == nil || IsNil(o.Var5gsUserStateList) {
		var ret []Model5GsUserStateInfo
		return ret
	}
	return o.Var5gsUserStateList
}

// GetVar5gsUserStateListOk returns a tuple with the Var5gsUserStateList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetVar5gsUserStateListOk() ([]Model5GsUserStateInfo, bool) {
	if o == nil || IsNil(o.Var5gsUserStateList) {
		return nil, false
	}
	return o.Var5gsUserStateList, true
}

// HasVar5gsUserStateList returns a boolean if a field has been set.
func (o *AmfEventReport) HasVar5gsUserStateList() bool {
	if o != nil && !IsNil(o.Var5gsUserStateList) {
		return true
	}

	return false
}

// SetVar5gsUserStateList gets a reference to the given []Model5GsUserStateInfo and assigns it to the Var5gsUserStateList field.
func (o *AmfEventReport) SetVar5gsUserStateList(v []Model5GsUserStateInfo) {
	o.Var5gsUserStateList = v
}

// GetTypeCode returns the TypeCode field value if set, zero value otherwise.
func (o *AmfEventReport) GetTypeCode() string {
	if o == nil || IsNil(o.TypeCode) {
		var ret string
		return ret
	}
	return *o.TypeCode
}

// GetTypeCodeOk returns a tuple with the TypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TypeCode) {
		return nil, false
	}
	return o.TypeCode, true
}

// HasTypeCode returns a boolean if a field has been set.
func (o *AmfEventReport) HasTypeCode() bool {
	if o != nil && !IsNil(o.TypeCode) {
		return true
	}

	return false
}

// SetTypeCode gets a reference to the given string and assigns it to the TypeCode field.
func (o *AmfEventReport) SetTypeCode(v string) {
	o.TypeCode = &v
}

// GetRegistrationNumber returns the RegistrationNumber field value if set, zero value otherwise.
func (o *AmfEventReport) GetRegistrationNumber() int32 {
	if o == nil || IsNil(o.RegistrationNumber) {
		var ret int32
		return ret
	}
	return *o.RegistrationNumber
}

// GetRegistrationNumberOk returns a tuple with the RegistrationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetRegistrationNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.RegistrationNumber) {
		return nil, false
	}
	return o.RegistrationNumber, true
}

// HasRegistrationNumber returns a boolean if a field has been set.
func (o *AmfEventReport) HasRegistrationNumber() bool {
	if o != nil && !IsNil(o.RegistrationNumber) {
		return true
	}

	return false
}

// SetRegistrationNumber gets a reference to the given int32 and assigns it to the RegistrationNumber field.
func (o *AmfEventReport) SetRegistrationNumber(v int32) {
	o.RegistrationNumber = &v
}

// GetMaxAvailabilityTime returns the MaxAvailabilityTime field value if set, zero value otherwise.
func (o *AmfEventReport) GetMaxAvailabilityTime() time.Time {
	if o == nil || IsNil(o.MaxAvailabilityTime) {
		var ret time.Time
		return ret
	}
	return *o.MaxAvailabilityTime
}

// GetMaxAvailabilityTimeOk returns a tuple with the MaxAvailabilityTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetMaxAvailabilityTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MaxAvailabilityTime) {
		return nil, false
	}
	return o.MaxAvailabilityTime, true
}

// HasMaxAvailabilityTime returns a boolean if a field has been set.
func (o *AmfEventReport) HasMaxAvailabilityTime() bool {
	if o != nil && !IsNil(o.MaxAvailabilityTime) {
		return true
	}

	return false
}

// SetMaxAvailabilityTime gets a reference to the given time.Time and assigns it to the MaxAvailabilityTime field.
func (o *AmfEventReport) SetMaxAvailabilityTime(v time.Time) {
	o.MaxAvailabilityTime = &v
}

// GetUeIdExt returns the UeIdExt field value if set, zero value otherwise.
func (o *AmfEventReport) GetUeIdExt() []UEIdExt {
	if o == nil || IsNil(o.UeIdExt) {
		var ret []UEIdExt
		return ret
	}
	return o.UeIdExt
}

// GetUeIdExtOk returns a tuple with the UeIdExt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetUeIdExtOk() ([]UEIdExt, bool) {
	if o == nil || IsNil(o.UeIdExt) {
		return nil, false
	}
	return o.UeIdExt, true
}

// HasUeIdExt returns a boolean if a field has been set.
func (o *AmfEventReport) HasUeIdExt() bool {
	if o != nil && !IsNil(o.UeIdExt) {
		return true
	}

	return false
}

// SetUeIdExt gets a reference to the given []UEIdExt and assigns it to the UeIdExt field.
func (o *AmfEventReport) SetUeIdExt(v []UEIdExt) {
	o.UeIdExt = v
}

// GetSnssaiTaiList returns the SnssaiTaiList field value if set, zero value otherwise.
func (o *AmfEventReport) GetSnssaiTaiList() []SnssaiTaiMapping {
	if o == nil || IsNil(o.SnssaiTaiList) {
		var ret []SnssaiTaiMapping
		return ret
	}
	return o.SnssaiTaiList
}

// GetSnssaiTaiListOk returns a tuple with the SnssaiTaiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetSnssaiTaiListOk() ([]SnssaiTaiMapping, bool) {
	if o == nil || IsNil(o.SnssaiTaiList) {
		return nil, false
	}
	return o.SnssaiTaiList, true
}

// HasSnssaiTaiList returns a boolean if a field has been set.
func (o *AmfEventReport) HasSnssaiTaiList() bool {
	if o != nil && !IsNil(o.SnssaiTaiList) {
		return true
	}

	return false
}

// SetSnssaiTaiList gets a reference to the given []SnssaiTaiMapping and assigns it to the SnssaiTaiList field.
func (o *AmfEventReport) SetSnssaiTaiList(v []SnssaiTaiMapping) {
	o.SnssaiTaiList = v
}

// GetIdleStatusIndication returns the IdleStatusIndication field value if set, zero value otherwise.
func (o *AmfEventReport) GetIdleStatusIndication() IdleStatusIndication {
	if o == nil || IsNil(o.IdleStatusIndication) {
		var ret IdleStatusIndication
		return ret
	}
	return *o.IdleStatusIndication
}

// GetIdleStatusIndicationOk returns a tuple with the IdleStatusIndication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetIdleStatusIndicationOk() (*IdleStatusIndication, bool) {
	if o == nil || IsNil(o.IdleStatusIndication) {
		return nil, false
	}
	return o.IdleStatusIndication, true
}

// HasIdleStatusIndication returns a boolean if a field has been set.
func (o *AmfEventReport) HasIdleStatusIndication() bool {
	if o != nil && !IsNil(o.IdleStatusIndication) {
		return true
	}

	return false
}

// SetIdleStatusIndication gets a reference to the given IdleStatusIndication and assigns it to the IdleStatusIndication field.
func (o *AmfEventReport) SetIdleStatusIndication(v IdleStatusIndication) {
	o.IdleStatusIndication = &v
}

// GetUeAccessBehaviorTrends returns the UeAccessBehaviorTrends field value if set, zero value otherwise.
func (o *AmfEventReport) GetUeAccessBehaviorTrends() []UeAccessBehaviorReportItem {
	if o == nil || IsNil(o.UeAccessBehaviorTrends) {
		var ret []UeAccessBehaviorReportItem
		return ret
	}
	return o.UeAccessBehaviorTrends
}

// GetUeAccessBehaviorTrendsOk returns a tuple with the UeAccessBehaviorTrends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetUeAccessBehaviorTrendsOk() ([]UeAccessBehaviorReportItem, bool) {
	if o == nil || IsNil(o.UeAccessBehaviorTrends) {
		return nil, false
	}
	return o.UeAccessBehaviorTrends, true
}

// HasUeAccessBehaviorTrends returns a boolean if a field has been set.
func (o *AmfEventReport) HasUeAccessBehaviorTrends() bool {
	if o != nil && !IsNil(o.UeAccessBehaviorTrends) {
		return true
	}

	return false
}

// SetUeAccessBehaviorTrends gets a reference to the given []UeAccessBehaviorReportItem and assigns it to the UeAccessBehaviorTrends field.
func (o *AmfEventReport) SetUeAccessBehaviorTrends(v []UeAccessBehaviorReportItem) {
	o.UeAccessBehaviorTrends = v
}

// GetUeLocationTrends returns the UeLocationTrends field value if set, zero value otherwise.
func (o *AmfEventReport) GetUeLocationTrends() []UeLocationTrendsReportItem {
	if o == nil || IsNil(o.UeLocationTrends) {
		var ret []UeLocationTrendsReportItem
		return ret
	}
	return o.UeLocationTrends
}

// GetUeLocationTrendsOk returns a tuple with the UeLocationTrends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetUeLocationTrendsOk() ([]UeLocationTrendsReportItem, bool) {
	if o == nil || IsNil(o.UeLocationTrends) {
		return nil, false
	}
	return o.UeLocationTrends, true
}

// HasUeLocationTrends returns a boolean if a field has been set.
func (o *AmfEventReport) HasUeLocationTrends() bool {
	if o != nil && !IsNil(o.UeLocationTrends) {
		return true
	}

	return false
}

// SetUeLocationTrends gets a reference to the given []UeLocationTrendsReportItem and assigns it to the UeLocationTrends field.
func (o *AmfEventReport) SetUeLocationTrends(v []UeLocationTrendsReportItem) {
	o.UeLocationTrends = v
}

// GetMmTransLocationReportList returns the MmTransLocationReportList field value if set, zero value otherwise.
func (o *AmfEventReport) GetMmTransLocationReportList() []MmTransactionLocationReportItem {
	if o == nil || IsNil(o.MmTransLocationReportList) {
		var ret []MmTransactionLocationReportItem
		return ret
	}
	return o.MmTransLocationReportList
}

// GetMmTransLocationReportListOk returns a tuple with the MmTransLocationReportList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetMmTransLocationReportListOk() ([]MmTransactionLocationReportItem, bool) {
	if o == nil || IsNil(o.MmTransLocationReportList) {
		return nil, false
	}
	return o.MmTransLocationReportList, true
}

// HasMmTransLocationReportList returns a boolean if a field has been set.
func (o *AmfEventReport) HasMmTransLocationReportList() bool {
	if o != nil && !IsNil(o.MmTransLocationReportList) {
		return true
	}

	return false
}

// SetMmTransLocationReportList gets a reference to the given []MmTransactionLocationReportItem and assigns it to the MmTransLocationReportList field.
func (o *AmfEventReport) SetMmTransLocationReportList(v []MmTransactionLocationReportItem) {
	o.MmTransLocationReportList = v
}

// GetMmTransSliceReportList returns the MmTransSliceReportList field value if set, zero value otherwise.
func (o *AmfEventReport) GetMmTransSliceReportList() []MmTransactionSliceReportItem {
	if o == nil || IsNil(o.MmTransSliceReportList) {
		var ret []MmTransactionSliceReportItem
		return ret
	}
	return o.MmTransSliceReportList
}

// GetMmTransSliceReportListOk returns a tuple with the MmTransSliceReportList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetMmTransSliceReportListOk() ([]MmTransactionSliceReportItem, bool) {
	if o == nil || IsNil(o.MmTransSliceReportList) {
		return nil, false
	}
	return o.MmTransSliceReportList, true
}

// HasMmTransSliceReportList returns a boolean if a field has been set.
func (o *AmfEventReport) HasMmTransSliceReportList() bool {
	if o != nil && !IsNil(o.MmTransSliceReportList) {
		return true
	}

	return false
}

// SetMmTransSliceReportList gets a reference to the given []MmTransactionSliceReportItem and assigns it to the MmTransSliceReportList field.
func (o *AmfEventReport) SetMmTransSliceReportList(v []MmTransactionSliceReportItem) {
	o.MmTransSliceReportList = v
}

// GetTermReason returns the TermReason field value if set, zero value otherwise.
func (o *AmfEventReport) GetTermReason() SubTerminationReason {
	if o == nil || IsNil(o.TermReason) {
		var ret SubTerminationReason
		return ret
	}
	return *o.TermReason
}

// GetTermReasonOk returns a tuple with the TermReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfEventReport) GetTermReasonOk() (*SubTerminationReason, bool) {
	if o == nil || IsNil(o.TermReason) {
		return nil, false
	}
	return o.TermReason, true
}

// HasTermReason returns a boolean if a field has been set.
func (o *AmfEventReport) HasTermReason() bool {
	if o != nil && !IsNil(o.TermReason) {
		return true
	}

	return false
}

// SetTermReason gets a reference to the given SubTerminationReason and assigns it to the TermReason field.
func (o *AmfEventReport) SetTermReason(v SubTerminationReason) {
	o.TermReason = &v
}

func (o AmfEventReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmfEventReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["state"] = o.State
	toSerialize["timeStamp"] = o.TimeStamp
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if !IsNil(o.AnyUe) {
		toSerialize["anyUe"] = o.AnyUe
	}
	if !IsNil(o.Supi) {
		toSerialize["supi"] = o.Supi
	}
	if !IsNil(o.AreaList) {
		toSerialize["areaList"] = o.AreaList
	}
	if !IsNil(o.RefId) {
		toSerialize["refId"] = o.RefId
	}
	if !IsNil(o.Gpsi) {
		toSerialize["gpsi"] = o.Gpsi
	}
	if !IsNil(o.Pei) {
		toSerialize["pei"] = o.Pei
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.AdditionalLocation) {
		toSerialize["additionalLocation"] = o.AdditionalLocation
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.AccessTypeList) {
		toSerialize["accessTypeList"] = o.AccessTypeList
	}
	if !IsNil(o.RmInfoList) {
		toSerialize["rmInfoList"] = o.RmInfoList
	}
	if !IsNil(o.CmInfoList) {
		toSerialize["cmInfoList"] = o.CmInfoList
	}
	if !IsNil(o.Reachability) {
		toSerialize["reachability"] = o.Reachability
	}
	if !IsNil(o.CommFailure) {
		toSerialize["commFailure"] = o.CommFailure
	}
	if !IsNil(o.LossOfConnectReason) {
		toSerialize["lossOfConnectReason"] = o.LossOfConnectReason
	}
	if !IsNil(o.NumberOfUes) {
		toSerialize["numberOfUes"] = o.NumberOfUes
	}
	if !IsNil(o.Var5gsUserStateList) {
		toSerialize["5gsUserStateList"] = o.Var5gsUserStateList
	}
	if !IsNil(o.TypeCode) {
		toSerialize["typeCode"] = o.TypeCode
	}
	if !IsNil(o.RegistrationNumber) {
		toSerialize["registrationNumber"] = o.RegistrationNumber
	}
	if !IsNil(o.MaxAvailabilityTime) {
		toSerialize["maxAvailabilityTime"] = o.MaxAvailabilityTime
	}
	if !IsNil(o.UeIdExt) {
		toSerialize["ueIdExt"] = o.UeIdExt
	}
	if !IsNil(o.SnssaiTaiList) {
		toSerialize["snssaiTaiList"] = o.SnssaiTaiList
	}
	if !IsNil(o.IdleStatusIndication) {
		toSerialize["idleStatusIndication"] = o.IdleStatusIndication
	}
	if !IsNil(o.UeAccessBehaviorTrends) {
		toSerialize["ueAccessBehaviorTrends"] = o.UeAccessBehaviorTrends
	}
	if !IsNil(o.UeLocationTrends) {
		toSerialize["ueLocationTrends"] = o.UeLocationTrends
	}
	if !IsNil(o.MmTransLocationReportList) {
		toSerialize["mmTransLocationReportList"] = o.MmTransLocationReportList
	}
	if !IsNil(o.MmTransSliceReportList) {
		toSerialize["mmTransSliceReportList"] = o.MmTransSliceReportList
	}
	if !IsNil(o.TermReason) {
		toSerialize["termReason"] = o.TermReason
	}
	return toSerialize, nil
}

type NullableAmfEventReport struct {
	value *AmfEventReport
	isSet bool
}

func (v NullableAmfEventReport) Get() *AmfEventReport {
	return v.value
}

func (v *NullableAmfEventReport) Set(val *AmfEventReport) {
	v.value = val
	v.isSet = true
}

func (v NullableAmfEventReport) IsSet() bool {
	return v.isSet
}

func (v *NullableAmfEventReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmfEventReport(val *AmfEventReport) *NullableAmfEventReport {
	return &NullableAmfEventReport{value: val, isSet: true}
}

func (v NullableAmfEventReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmfEventReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
