/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnwdaf_AnalyticsInfo

import (
	"encoding/json"
)

// checks if the RmInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RmInfo{}

// RmInfo Represents the registration state of a UE for an access type
type RmInfo struct {
	RmState RmState `json:"rmState"`
	AccessType AccessType `json:"accessType"`
}

// NewRmInfo instantiates a new RmInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRmInfo(rmState RmState, accessType AccessType) *RmInfo {
	this := RmInfo{}
	this.RmState = rmState
	this.AccessType = accessType
	return &this
}

// NewRmInfoWithDefaults instantiates a new RmInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRmInfoWithDefaults() *RmInfo {
	this := RmInfo{}
	return &this
}

// GetRmState returns the RmState field value
func (o *RmInfo) GetRmState() RmState {
	if o == nil {
		var ret RmState
		return ret
	}

	return o.RmState
}

// GetRmStateOk returns a tuple with the RmState field value
// and a boolean to check if the value has been set.
func (o *RmInfo) GetRmStateOk() (*RmState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RmState, true
}

// SetRmState sets field value
func (o *RmInfo) SetRmState(v RmState) {
	o.RmState = v
}

// GetAccessType returns the AccessType field value
func (o *RmInfo) GetAccessType() AccessType {
	if o == nil {
		var ret AccessType
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *RmInfo) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *RmInfo) SetAccessType(v AccessType) {
	o.AccessType = v
}

func (o RmInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RmInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rmState"] = o.RmState
	toSerialize["accessType"] = o.AccessType
	return toSerialize, nil
}

type NullableRmInfo struct {
	value *RmInfo
	isSet bool
}

func (v NullableRmInfo) Get() *RmInfo {
	return v.value
}

func (v *NullableRmInfo) Set(val *RmInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRmInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRmInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRmInfo(val *RmInfo) *NullableRmInfo {
	return &NullableRmInfo{value: val, isSet: true}
}

func (v NullableRmInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRmInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


