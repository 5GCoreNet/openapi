/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnwdaf_AnalyticsInfo

import (
	"encoding/json"
)

// checks if the SpecificDataSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecificDataSubscription{}

// SpecificDataSubscription Represents an existing subscription for data collection to a specific data source NF. 
type SpecificDataSubscription struct {
	SubscriptionId *string `json:"subscriptionId,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	ProducerId *string `json:"producerId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	ProducerSetId *string `json:"producerSetId,omitempty"`
	DataSub *DataSubscription `json:"dataSub,omitempty"`
}

// NewSpecificDataSubscription instantiates a new SpecificDataSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecificDataSubscription() *SpecificDataSubscription {
	this := SpecificDataSubscription{}
	return &this
}

// NewSpecificDataSubscriptionWithDefaults instantiates a new SpecificDataSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecificDataSubscriptionWithDefaults() *SpecificDataSubscription {
	this := SpecificDataSubscription{}
	return &this
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *SpecificDataSubscription) GetSubscriptionId() string {
	if o == nil || isNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecificDataSubscription) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || isNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *SpecificDataSubscription) HasSubscriptionId() bool {
	if o != nil && !isNil(o.SubscriptionId) {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *SpecificDataSubscription) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetProducerId returns the ProducerId field value if set, zero value otherwise.
func (o *SpecificDataSubscription) GetProducerId() string {
	if o == nil || isNil(o.ProducerId) {
		var ret string
		return ret
	}
	return *o.ProducerId
}

// GetProducerIdOk returns a tuple with the ProducerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecificDataSubscription) GetProducerIdOk() (*string, bool) {
	if o == nil || isNil(o.ProducerId) {
		return nil, false
	}
	return o.ProducerId, true
}

// HasProducerId returns a boolean if a field has been set.
func (o *SpecificDataSubscription) HasProducerId() bool {
	if o != nil && !isNil(o.ProducerId) {
		return true
	}

	return false
}

// SetProducerId gets a reference to the given string and assigns it to the ProducerId field.
func (o *SpecificDataSubscription) SetProducerId(v string) {
	o.ProducerId = &v
}

// GetProducerSetId returns the ProducerSetId field value if set, zero value otherwise.
func (o *SpecificDataSubscription) GetProducerSetId() string {
	if o == nil || isNil(o.ProducerSetId) {
		var ret string
		return ret
	}
	return *o.ProducerSetId
}

// GetProducerSetIdOk returns a tuple with the ProducerSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecificDataSubscription) GetProducerSetIdOk() (*string, bool) {
	if o == nil || isNil(o.ProducerSetId) {
		return nil, false
	}
	return o.ProducerSetId, true
}

// HasProducerSetId returns a boolean if a field has been set.
func (o *SpecificDataSubscription) HasProducerSetId() bool {
	if o != nil && !isNil(o.ProducerSetId) {
		return true
	}

	return false
}

// SetProducerSetId gets a reference to the given string and assigns it to the ProducerSetId field.
func (o *SpecificDataSubscription) SetProducerSetId(v string) {
	o.ProducerSetId = &v
}

// GetDataSub returns the DataSub field value if set, zero value otherwise.
func (o *SpecificDataSubscription) GetDataSub() DataSubscription {
	if o == nil || isNil(o.DataSub) {
		var ret DataSubscription
		return ret
	}
	return *o.DataSub
}

// GetDataSubOk returns a tuple with the DataSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecificDataSubscription) GetDataSubOk() (*DataSubscription, bool) {
	if o == nil || isNil(o.DataSub) {
		return nil, false
	}
	return o.DataSub, true
}

// HasDataSub returns a boolean if a field has been set.
func (o *SpecificDataSubscription) HasDataSub() bool {
	if o != nil && !isNil(o.DataSub) {
		return true
	}

	return false
}

// SetDataSub gets a reference to the given DataSubscription and assigns it to the DataSub field.
func (o *SpecificDataSubscription) SetDataSub(v DataSubscription) {
	o.DataSub = &v
}

func (o SpecificDataSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecificDataSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SubscriptionId) {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if !isNil(o.ProducerId) {
		toSerialize["producerId"] = o.ProducerId
	}
	if !isNil(o.ProducerSetId) {
		toSerialize["producerSetId"] = o.ProducerSetId
	}
	if !isNil(o.DataSub) {
		toSerialize["dataSub"] = o.DataSub
	}
	return toSerialize, nil
}

type NullableSpecificDataSubscription struct {
	value *SpecificDataSubscription
	isSet bool
}

func (v NullableSpecificDataSubscription) Get() *SpecificDataSubscription {
	return v.value
}

func (v *NullableSpecificDataSubscription) Set(val *SpecificDataSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecificDataSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecificDataSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecificDataSubscription(val *SpecificDataSubscription) *NullableSpecificDataSubscription {
	return &NullableSpecificDataSubscription{value: val, isSet: true}
}

func (v NullableSpecificDataSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecificDataSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


