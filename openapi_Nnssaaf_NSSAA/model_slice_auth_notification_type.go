/*
Nnssaaf_NSSAA

Network Slice-Specific Authentication and Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnssaaf_NSSAA

import (
	"encoding/json"
	"fmt"
)

// SliceAuthNotificationType the model 'SliceAuthNotificationType'
type SliceAuthNotificationType string

// List of SliceAuthNotificationType
const (
	RE_AUTH SliceAuthNotificationType = "SLICE_RE_AUTH"
	REVOCATION SliceAuthNotificationType = "SLICE_REVOCATION"
)

// All allowed values of SliceAuthNotificationType enum
var AllowedSliceAuthNotificationTypeEnumValues = []SliceAuthNotificationType{
	"SLICE_RE_AUTH",
	"SLICE_REVOCATION",
}

func (v *SliceAuthNotificationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SliceAuthNotificationType(value)
	for _, existing := range AllowedSliceAuthNotificationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SliceAuthNotificationType", value)
}

// NewSliceAuthNotificationTypeFromValue returns a pointer to a valid SliceAuthNotificationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSliceAuthNotificationTypeFromValue(v string) (*SliceAuthNotificationType, error) {
	ev := SliceAuthNotificationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SliceAuthNotificationType: valid values are %v", v, AllowedSliceAuthNotificationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SliceAuthNotificationType) IsValid() bool {
	for _, existing := range AllowedSliceAuthNotificationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SliceAuthNotificationType value
func (v SliceAuthNotificationType) Ptr() *SliceAuthNotificationType {
	return &v
}

type NullableSliceAuthNotificationType struct {
	value *SliceAuthNotificationType
	isSet bool
}

func (v NullableSliceAuthNotificationType) Get() *SliceAuthNotificationType {
	return v.value
}

func (v *NullableSliceAuthNotificationType) Set(val *SliceAuthNotificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSliceAuthNotificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSliceAuthNotificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliceAuthNotificationType(val *SliceAuthNotificationType) *NullableSliceAuthNotificationType {
	return &NullableSliceAuthNotificationType{value: val, isSet: true}
}

func (v NullableSliceAuthNotificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliceAuthNotificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

