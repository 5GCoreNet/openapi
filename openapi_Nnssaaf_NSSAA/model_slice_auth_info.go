/*
Nnssaaf_NSSAA

Network Slice-Specific Authentication and Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnssaaf_NSSAA

import (
	"encoding/json"
)

// checks if the SliceAuthInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SliceAuthInfo{}

// SliceAuthInfo struct for SliceAuthInfo
type SliceAuthInfo struct {
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	Gpsi string `json:"gpsi"`
	Snssai Snssai `json:"snssai"`
	// contains an EAP packet
	EapIdRsp NullableString `json:"eapIdRsp"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	AmfInstanceId *string `json:"amfInstanceId,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	ReauthNotifUri *string `json:"reauthNotifUri,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	RevocNotifUri *string `json:"revocNotifUri,omitempty"`
}

// NewSliceAuthInfo instantiates a new SliceAuthInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliceAuthInfo(gpsi string, snssai Snssai, eapIdRsp NullableString) *SliceAuthInfo {
	this := SliceAuthInfo{}
	this.Gpsi = gpsi
	this.Snssai = snssai
	this.EapIdRsp = eapIdRsp
	return &this
}

// NewSliceAuthInfoWithDefaults instantiates a new SliceAuthInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliceAuthInfoWithDefaults() *SliceAuthInfo {
	this := SliceAuthInfo{}
	return &this
}

// GetGpsi returns the Gpsi field value
func (o *SliceAuthInfo) GetGpsi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value
// and a boolean to check if the value has been set.
func (o *SliceAuthInfo) GetGpsiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gpsi, true
}

// SetGpsi sets field value
func (o *SliceAuthInfo) SetGpsi(v string) {
	o.Gpsi = v
}

// GetSnssai returns the Snssai field value
func (o *SliceAuthInfo) GetSnssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value
// and a boolean to check if the value has been set.
func (o *SliceAuthInfo) GetSnssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snssai, true
}

// SetSnssai sets field value
func (o *SliceAuthInfo) SetSnssai(v Snssai) {
	o.Snssai = v
}

// GetEapIdRsp returns the EapIdRsp field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SliceAuthInfo) GetEapIdRsp() string {
	if o == nil || o.EapIdRsp.Get() == nil {
		var ret string
		return ret
	}

	return *o.EapIdRsp.Get()
}

// GetEapIdRspOk returns a tuple with the EapIdRsp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SliceAuthInfo) GetEapIdRspOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EapIdRsp.Get(), o.EapIdRsp.IsSet()
}

// SetEapIdRsp sets field value
func (o *SliceAuthInfo) SetEapIdRsp(v string) {
	o.EapIdRsp.Set(&v)
}

// GetAmfInstanceId returns the AmfInstanceId field value if set, zero value otherwise.
func (o *SliceAuthInfo) GetAmfInstanceId() string {
	if o == nil || IsNil(o.AmfInstanceId) {
		var ret string
		return ret
	}
	return *o.AmfInstanceId
}

// GetAmfInstanceIdOk returns a tuple with the AmfInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceAuthInfo) GetAmfInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.AmfInstanceId) {
		return nil, false
	}
	return o.AmfInstanceId, true
}

// HasAmfInstanceId returns a boolean if a field has been set.
func (o *SliceAuthInfo) HasAmfInstanceId() bool {
	if o != nil && !IsNil(o.AmfInstanceId) {
		return true
	}

	return false
}

// SetAmfInstanceId gets a reference to the given string and assigns it to the AmfInstanceId field.
func (o *SliceAuthInfo) SetAmfInstanceId(v string) {
	o.AmfInstanceId = &v
}

// GetReauthNotifUri returns the ReauthNotifUri field value if set, zero value otherwise.
func (o *SliceAuthInfo) GetReauthNotifUri() string {
	if o == nil || IsNil(o.ReauthNotifUri) {
		var ret string
		return ret
	}
	return *o.ReauthNotifUri
}

// GetReauthNotifUriOk returns a tuple with the ReauthNotifUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceAuthInfo) GetReauthNotifUriOk() (*string, bool) {
	if o == nil || IsNil(o.ReauthNotifUri) {
		return nil, false
	}
	return o.ReauthNotifUri, true
}

// HasReauthNotifUri returns a boolean if a field has been set.
func (o *SliceAuthInfo) HasReauthNotifUri() bool {
	if o != nil && !IsNil(o.ReauthNotifUri) {
		return true
	}

	return false
}

// SetReauthNotifUri gets a reference to the given string and assigns it to the ReauthNotifUri field.
func (o *SliceAuthInfo) SetReauthNotifUri(v string) {
	o.ReauthNotifUri = &v
}

// GetRevocNotifUri returns the RevocNotifUri field value if set, zero value otherwise.
func (o *SliceAuthInfo) GetRevocNotifUri() string {
	if o == nil || IsNil(o.RevocNotifUri) {
		var ret string
		return ret
	}
	return *o.RevocNotifUri
}

// GetRevocNotifUriOk returns a tuple with the RevocNotifUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceAuthInfo) GetRevocNotifUriOk() (*string, bool) {
	if o == nil || IsNil(o.RevocNotifUri) {
		return nil, false
	}
	return o.RevocNotifUri, true
}

// HasRevocNotifUri returns a boolean if a field has been set.
func (o *SliceAuthInfo) HasRevocNotifUri() bool {
	if o != nil && !IsNil(o.RevocNotifUri) {
		return true
	}

	return false
}

// SetRevocNotifUri gets a reference to the given string and assigns it to the RevocNotifUri field.
func (o *SliceAuthInfo) SetRevocNotifUri(v string) {
	o.RevocNotifUri = &v
}

func (o SliceAuthInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SliceAuthInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gpsi"] = o.Gpsi
	toSerialize["snssai"] = o.Snssai
	toSerialize["eapIdRsp"] = o.EapIdRsp.Get()
	if !IsNil(o.AmfInstanceId) {
		toSerialize["amfInstanceId"] = o.AmfInstanceId
	}
	if !IsNil(o.ReauthNotifUri) {
		toSerialize["reauthNotifUri"] = o.ReauthNotifUri
	}
	if !IsNil(o.RevocNotifUri) {
		toSerialize["revocNotifUri"] = o.RevocNotifUri
	}
	return toSerialize, nil
}

type NullableSliceAuthInfo struct {
	value *SliceAuthInfo
	isSet bool
}

func (v NullableSliceAuthInfo) Get() *SliceAuthInfo {
	return v.value
}

func (v *NullableSliceAuthInfo) Set(val *SliceAuthInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSliceAuthInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSliceAuthInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliceAuthInfo(val *SliceAuthInfo) *NullableSliceAuthInfo {
	return &NullableSliceAuthInfo{value: val, isSet: true}
}

func (v NullableSliceAuthInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliceAuthInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


