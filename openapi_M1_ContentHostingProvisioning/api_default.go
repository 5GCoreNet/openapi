/*
M1_ContentHostingProvisioning

5GMS AF M1 Content Hosting Provisioning API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_M1_ContentHostingProvisioning

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiCreateContentHostingConfigurationRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	provisioningSessionId       string
	contentHostingConfiguration *ContentHostingConfiguration
}

// A JSON representation of a Content Hosting Configuration
func (r ApiCreateContentHostingConfigurationRequest) ContentHostingConfiguration(contentHostingConfiguration ContentHostingConfiguration) ApiCreateContentHostingConfigurationRequest {
	r.contentHostingConfiguration = &contentHostingConfiguration
	return r
}

func (r ApiCreateContentHostingConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateContentHostingConfigurationExecute(r)
}

/*
CreateContentHostingConfiguration Create (and optionally upload) the Content Hosting Configuration for the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@return ApiCreateContentHostingConfigurationRequest
*/
func (a *DefaultApiService) CreateContentHostingConfiguration(ctx context.Context, provisioningSessionId string) ApiCreateContentHostingConfigurationRequest {
	return ApiCreateContentHostingConfigurationRequest{
		ApiService:            a,
		ctx:                   ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
func (a *DefaultApiService) CreateContentHostingConfigurationExecute(r ApiCreateContentHostingConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateContentHostingConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentHostingConfiguration == nil {
		return nil, reportError("contentHostingConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentHostingConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDestroyContentHostingConfigurationRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	provisioningSessionId string
}

func (r ApiDestroyContentHostingConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DestroyContentHostingConfigurationExecute(r)
}

/*
DestroyContentHostingConfiguration Destroy the current Content Hosting Configuration of the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@return ApiDestroyContentHostingConfigurationRequest
*/
func (a *DefaultApiService) DestroyContentHostingConfiguration(ctx context.Context, provisioningSessionId string) ApiDestroyContentHostingConfigurationRequest {
	return ApiDestroyContentHostingConfigurationRequest{
		ApiService:            a,
		ctx:                   ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DestroyContentHostingConfigurationExecute(r ApiDestroyContentHostingConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DestroyContentHostingConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPatchContentHostingConfigurationRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	provisioningSessionId       string
	contentHostingConfiguration *ContentHostingConfiguration
}

// A JSON representation of a Content Hosting Configuration
func (r ApiPatchContentHostingConfigurationRequest) ContentHostingConfiguration(contentHostingConfiguration ContentHostingConfiguration) ApiPatchContentHostingConfigurationRequest {
	r.contentHostingConfiguration = &contentHostingConfiguration
	return r
}

func (r ApiPatchContentHostingConfigurationRequest) Execute() (*ContentHostingConfiguration, *http.Response, error) {
	return r.ApiService.PatchContentHostingConfigurationExecute(r)
}

/*
PatchContentHostingConfiguration Patch the Content Hosting Configuration for the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@return ApiPatchContentHostingConfigurationRequest
*/
func (a *DefaultApiService) PatchContentHostingConfiguration(ctx context.Context, provisioningSessionId string) ApiPatchContentHostingConfigurationRequest {
	return ApiPatchContentHostingConfigurationRequest{
		ApiService:            a,
		ctx:                   ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
//
//	@return ContentHostingConfiguration
func (a *DefaultApiService) PatchContentHostingConfigurationExecute(r ApiPatchContentHostingConfigurationRequest) (*ContentHostingConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentHostingConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchContentHostingConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentHostingConfiguration == nil {
		return localVarReturnValue, nil, reportError("contentHostingConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json", "application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentHostingConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPurgeContentHostingCacheRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	provisioningSessionId string
	pattern               *string
	value                 *string
}

// Keyword
func (r ApiPurgeContentHostingCacheRequest) Pattern(pattern string) ApiPurgeContentHostingCacheRequest {
	r.pattern = &pattern
	return r
}

// The regular expression
func (r ApiPurgeContentHostingCacheRequest) Value(value string) ApiPurgeContentHostingCacheRequest {
	r.value = &value
	return r
}

func (r ApiPurgeContentHostingCacheRequest) Execute() (*http.Response, error) {
	return r.ApiService.PurgeContentHostingCacheExecute(r)
}

/*
PurgeContentHostingCache Purge the content of the cache for the Content Hosting Configuration of the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId A unique identifier of the Provisioning
	@return ApiPurgeContentHostingCacheRequest
*/
func (a *DefaultApiService) PurgeContentHostingCache(ctx context.Context, provisioningSessionId string) ApiPurgeContentHostingCacheRequest {
	return ApiPurgeContentHostingCacheRequest{
		ApiService:            a,
		ctx:                   ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
func (a *DefaultApiService) PurgeContentHostingCacheExecute(r ApiPurgeContentHostingCacheRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PurgeContentHostingCache")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration/purge"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.pattern != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pattern", r.pattern, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "value", r.value, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRetrieveContentHostingConfigurationRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	provisioningSessionId string
}

func (r ApiRetrieveContentHostingConfigurationRequest) Execute() (*ContentHostingConfiguration, *http.Response, error) {
	return r.ApiService.RetrieveContentHostingConfigurationExecute(r)
}

/*
RetrieveContentHostingConfiguration Retrieve the Content Hosting Configuration of the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@return ApiRetrieveContentHostingConfigurationRequest
*/
func (a *DefaultApiService) RetrieveContentHostingConfiguration(ctx context.Context, provisioningSessionId string) ApiRetrieveContentHostingConfigurationRequest {
	return ApiRetrieveContentHostingConfigurationRequest{
		ApiService:            a,
		ctx:                   ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
//
//	@return ContentHostingConfiguration
func (a *DefaultApiService) RetrieveContentHostingConfigurationExecute(r ApiRetrieveContentHostingConfigurationRequest) (*ContentHostingConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContentHostingConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RetrieveContentHostingConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateContentHostingConfigurationRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	provisioningSessionId       string
	contentHostingConfiguration *ContentHostingConfiguration
}

// A JSON representation of a Content Hosting Configuration
func (r ApiUpdateContentHostingConfigurationRequest) ContentHostingConfiguration(contentHostingConfiguration ContentHostingConfiguration) ApiUpdateContentHostingConfigurationRequest {
	r.contentHostingConfiguration = &contentHostingConfiguration
	return r
}

func (r ApiUpdateContentHostingConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateContentHostingConfigurationExecute(r)
}

/*
UpdateContentHostingConfiguration Update the Content Hosting Configuration for the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@return ApiUpdateContentHostingConfigurationRequest
*/
func (a *DefaultApiService) UpdateContentHostingConfiguration(ctx context.Context, provisioningSessionId string) ApiUpdateContentHostingConfigurationRequest {
	return ApiUpdateContentHostingConfigurationRequest{
		ApiService:            a,
		ctx:                   ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
func (a *DefaultApiService) UpdateContentHostingConfigurationExecute(r ApiUpdateContentHostingConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdateContentHostingConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentHostingConfiguration == nil {
		return nil, reportError("contentHostingConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentHostingConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
