/*
M1_ContentHostingProvisioning

5GMS AF M1 Content Hosting Provisioning API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_M1_ContentHostingProvisioning

import (
	"encoding/json"
)

// checks if the ContentHostingConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentHostingConfiguration{}

// ContentHostingConfiguration A representation of a Content Hosting Configuration resource.
type ContentHostingConfiguration struct {
	Name string `json:"name"`
	// Uniform Resource Locator, comforming with the URI Generic Syntax specified in IETF RFC 3986.
	EntryPointPath             *string                     `json:"entryPointPath,omitempty"`
	IngestConfiguration        IngestConfiguration         `json:"ingestConfiguration"`
	DistributionConfigurations []DistributionConfiguration `json:"distributionConfigurations"`
}

// NewContentHostingConfiguration instantiates a new ContentHostingConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentHostingConfiguration(name string, ingestConfiguration IngestConfiguration, distributionConfigurations []DistributionConfiguration) *ContentHostingConfiguration {
	this := ContentHostingConfiguration{}
	this.Name = name
	this.IngestConfiguration = ingestConfiguration
	this.DistributionConfigurations = distributionConfigurations
	return &this
}

// NewContentHostingConfigurationWithDefaults instantiates a new ContentHostingConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentHostingConfigurationWithDefaults() *ContentHostingConfiguration {
	this := ContentHostingConfiguration{}
	return &this
}

// GetName returns the Name field value
func (o *ContentHostingConfiguration) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContentHostingConfiguration) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContentHostingConfiguration) SetName(v string) {
	o.Name = v
}

// GetEntryPointPath returns the EntryPointPath field value if set, zero value otherwise.
func (o *ContentHostingConfiguration) GetEntryPointPath() string {
	if o == nil || IsNil(o.EntryPointPath) {
		var ret string
		return ret
	}
	return *o.EntryPointPath
}

// GetEntryPointPathOk returns a tuple with the EntryPointPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentHostingConfiguration) GetEntryPointPathOk() (*string, bool) {
	if o == nil || IsNil(o.EntryPointPath) {
		return nil, false
	}
	return o.EntryPointPath, true
}

// HasEntryPointPath returns a boolean if a field has been set.
func (o *ContentHostingConfiguration) HasEntryPointPath() bool {
	if o != nil && !IsNil(o.EntryPointPath) {
		return true
	}

	return false
}

// SetEntryPointPath gets a reference to the given string and assigns it to the EntryPointPath field.
func (o *ContentHostingConfiguration) SetEntryPointPath(v string) {
	o.EntryPointPath = &v
}

// GetIngestConfiguration returns the IngestConfiguration field value
func (o *ContentHostingConfiguration) GetIngestConfiguration() IngestConfiguration {
	if o == nil {
		var ret IngestConfiguration
		return ret
	}

	return o.IngestConfiguration
}

// GetIngestConfigurationOk returns a tuple with the IngestConfiguration field value
// and a boolean to check if the value has been set.
func (o *ContentHostingConfiguration) GetIngestConfigurationOk() (*IngestConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IngestConfiguration, true
}

// SetIngestConfiguration sets field value
func (o *ContentHostingConfiguration) SetIngestConfiguration(v IngestConfiguration) {
	o.IngestConfiguration = v
}

// GetDistributionConfigurations returns the DistributionConfigurations field value
func (o *ContentHostingConfiguration) GetDistributionConfigurations() []DistributionConfiguration {
	if o == nil {
		var ret []DistributionConfiguration
		return ret
	}

	return o.DistributionConfigurations
}

// GetDistributionConfigurationsOk returns a tuple with the DistributionConfigurations field value
// and a boolean to check if the value has been set.
func (o *ContentHostingConfiguration) GetDistributionConfigurationsOk() ([]DistributionConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistributionConfigurations, true
}

// SetDistributionConfigurations sets field value
func (o *ContentHostingConfiguration) SetDistributionConfigurations(v []DistributionConfiguration) {
	o.DistributionConfigurations = v
}

func (o ContentHostingConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentHostingConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.EntryPointPath) {
		toSerialize["entryPointPath"] = o.EntryPointPath
	}
	toSerialize["ingestConfiguration"] = o.IngestConfiguration
	toSerialize["distributionConfigurations"] = o.DistributionConfigurations
	return toSerialize, nil
}

type NullableContentHostingConfiguration struct {
	value *ContentHostingConfiguration
	isSet bool
}

func (v NullableContentHostingConfiguration) Get() *ContentHostingConfiguration {
	return v.value
}

func (v *NullableContentHostingConfiguration) Set(val *ContentHostingConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableContentHostingConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableContentHostingConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentHostingConfiguration(val *ContentHostingConfiguration) *NullableContentHostingConfiguration {
	return &NullableContentHostingConfiguration{value: val, isSet: true}
}

func (v NullableContentHostingConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentHostingConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
