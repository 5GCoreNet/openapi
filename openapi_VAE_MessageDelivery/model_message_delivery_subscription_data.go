/*
VAE_MessageDelivery

API for VAE Message Delivery Service   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_VAE_MessageDelivery

import (
	"encoding/json"
)

// checks if the MessageDeliverySubscriptionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageDeliverySubscriptionData{}

// MessageDeliverySubscriptionData Represents the V2X message delivery subscription data.
type MessageDeliverySubscriptionData struct {
	// Represents the V2X application specific server identifier.
	AppSerId string `json:"appSerId"`
	// Represents the V2X service ID to which a V2X message belongs.
	ServiceId string `json:"serviceId"`
	// Represents a geographical area identifier.
	GeoId *string `json:"geoId,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	NotifUri string `json:"notifUri"`
	// Set to true by the NF service consumer to request the VAE server to send a test notification as defined in clause 6.1.5.3. Set to false or omitted otherwise. 
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewMessageDeliverySubscriptionData instantiates a new MessageDeliverySubscriptionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageDeliverySubscriptionData(appSerId string, serviceId string, notifUri string) *MessageDeliverySubscriptionData {
	this := MessageDeliverySubscriptionData{}
	this.AppSerId = appSerId
	this.ServiceId = serviceId
	this.NotifUri = notifUri
	return &this
}

// NewMessageDeliverySubscriptionDataWithDefaults instantiates a new MessageDeliverySubscriptionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageDeliverySubscriptionDataWithDefaults() *MessageDeliverySubscriptionData {
	this := MessageDeliverySubscriptionData{}
	return &this
}

// GetAppSerId returns the AppSerId field value
func (o *MessageDeliverySubscriptionData) GetAppSerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppSerId
}

// GetAppSerIdOk returns a tuple with the AppSerId field value
// and a boolean to check if the value has been set.
func (o *MessageDeliverySubscriptionData) GetAppSerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppSerId, true
}

// SetAppSerId sets field value
func (o *MessageDeliverySubscriptionData) SetAppSerId(v string) {
	o.AppSerId = v
}

// GetServiceId returns the ServiceId field value
func (o *MessageDeliverySubscriptionData) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *MessageDeliverySubscriptionData) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *MessageDeliverySubscriptionData) SetServiceId(v string) {
	o.ServiceId = v
}

// GetGeoId returns the GeoId field value if set, zero value otherwise.
func (o *MessageDeliverySubscriptionData) GetGeoId() string {
	if o == nil || isNil(o.GeoId) {
		var ret string
		return ret
	}
	return *o.GeoId
}

// GetGeoIdOk returns a tuple with the GeoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDeliverySubscriptionData) GetGeoIdOk() (*string, bool) {
	if o == nil || isNil(o.GeoId) {
		return nil, false
	}
	return o.GeoId, true
}

// HasGeoId returns a boolean if a field has been set.
func (o *MessageDeliverySubscriptionData) HasGeoId() bool {
	if o != nil && !isNil(o.GeoId) {
		return true
	}

	return false
}

// SetGeoId gets a reference to the given string and assigns it to the GeoId field.
func (o *MessageDeliverySubscriptionData) SetGeoId(v string) {
	o.GeoId = &v
}

// GetNotifUri returns the NotifUri field value
func (o *MessageDeliverySubscriptionData) GetNotifUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifUri
}

// GetNotifUriOk returns a tuple with the NotifUri field value
// and a boolean to check if the value has been set.
func (o *MessageDeliverySubscriptionData) GetNotifUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifUri, true
}

// SetNotifUri sets field value
func (o *MessageDeliverySubscriptionData) SetNotifUri(v string) {
	o.NotifUri = v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *MessageDeliverySubscriptionData) GetRequestTestNotification() bool {
	if o == nil || isNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDeliverySubscriptionData) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || isNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *MessageDeliverySubscriptionData) HasRequestTestNotification() bool {
	if o != nil && !isNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *MessageDeliverySubscriptionData) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *MessageDeliverySubscriptionData) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || isNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDeliverySubscriptionData) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || isNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *MessageDeliverySubscriptionData) HasWebsockNotifConfig() bool {
	if o != nil && !isNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *MessageDeliverySubscriptionData) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *MessageDeliverySubscriptionData) GetSuppFeat() string {
	if o == nil || isNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDeliverySubscriptionData) GetSuppFeatOk() (*string, bool) {
	if o == nil || isNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *MessageDeliverySubscriptionData) HasSuppFeat() bool {
	if o != nil && !isNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *MessageDeliverySubscriptionData) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o MessageDeliverySubscriptionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageDeliverySubscriptionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appSerId"] = o.AppSerId
	toSerialize["serviceId"] = o.ServiceId
	if !isNil(o.GeoId) {
		toSerialize["geoId"] = o.GeoId
	}
	toSerialize["notifUri"] = o.NotifUri
	if !isNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !isNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	if !isNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableMessageDeliverySubscriptionData struct {
	value *MessageDeliverySubscriptionData
	isSet bool
}

func (v NullableMessageDeliverySubscriptionData) Get() *MessageDeliverySubscriptionData {
	return v.value
}

func (v *NullableMessageDeliverySubscriptionData) Set(val *MessageDeliverySubscriptionData) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageDeliverySubscriptionData) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageDeliverySubscriptionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageDeliverySubscriptionData(val *MessageDeliverySubscriptionData) *NullableMessageDeliverySubscriptionData {
	return &NullableMessageDeliverySubscriptionData{value: val, isSet: true}
}

func (v NullableMessageDeliverySubscriptionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageDeliverySubscriptionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


