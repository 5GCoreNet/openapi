/*
UPF Event Exposure Service

UPF Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nupf_EventExposure

import (
	"encoding/json"
)

// checks if the NotificationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationData{}

// NotificationData the list of NotificationItems
type NotificationData struct {
	NotificationItems []NotificationItem `json:"notificationItems"`
	CorrelationId *string `json:"correlationId,omitempty"`
}

// NewNotificationData instantiates a new NotificationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationData(notificationItems []NotificationItem) *NotificationData {
	this := NotificationData{}
	this.NotificationItems = notificationItems
	return &this
}

// NewNotificationDataWithDefaults instantiates a new NotificationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationDataWithDefaults() *NotificationData {
	this := NotificationData{}
	return &this
}

// GetNotificationItems returns the NotificationItems field value
func (o *NotificationData) GetNotificationItems() []NotificationItem {
	if o == nil {
		var ret []NotificationItem
		return ret
	}

	return o.NotificationItems
}

// GetNotificationItemsOk returns a tuple with the NotificationItems field value
// and a boolean to check if the value has been set.
func (o *NotificationData) GetNotificationItemsOk() ([]NotificationItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationItems, true
}

// SetNotificationItems sets field value
func (o *NotificationData) SetNotificationItems(v []NotificationItem) {
	o.NotificationItems = v
}

// GetCorrelationId returns the CorrelationId field value if set, zero value otherwise.
func (o *NotificationData) GetCorrelationId() string {
	if o == nil || isNil(o.CorrelationId) {
		var ret string
		return ret
	}
	return *o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationData) GetCorrelationIdOk() (*string, bool) {
	if o == nil || isNil(o.CorrelationId) {
		return nil, false
	}
	return o.CorrelationId, true
}

// HasCorrelationId returns a boolean if a field has been set.
func (o *NotificationData) HasCorrelationId() bool {
	if o != nil && !isNil(o.CorrelationId) {
		return true
	}

	return false
}

// SetCorrelationId gets a reference to the given string and assigns it to the CorrelationId field.
func (o *NotificationData) SetCorrelationId(v string) {
	o.CorrelationId = &v
}

func (o NotificationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notificationItems"] = o.NotificationItems
	if !isNil(o.CorrelationId) {
		toSerialize["correlationId"] = o.CorrelationId
	}
	return toSerialize, nil
}

type NullableNotificationData struct {
	value *NotificationData
	isSet bool
}

func (v NullableNotificationData) Get() *NotificationData {
	return v.value
}

func (v *NullableNotificationData) Set(val *NotificationData) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationData) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationData(val *NotificationData) *NullableNotificationData {
	return &NullableNotificationData{value: val, isSet: true}
}

func (v NullableNotificationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


