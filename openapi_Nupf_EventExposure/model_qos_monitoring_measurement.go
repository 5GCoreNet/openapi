/*
UPF Event Exposure Service

UPF Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nupf_EventExposure

import (
	"encoding/json"
)

// checks if the QosMonitoringMeasurement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QosMonitoringMeasurement{}

// QosMonitoringMeasurement QoS Monitoring Measurement information
type QosMonitoringMeasurement struct {
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	DlPacketDelay *int32 `json:"dlPacketDelay,omitempty"`
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	UlPacketDelay *int32 `json:"ulPacketDelay,omitempty"`
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	RtrPacketDelay *int32 `json:"rtrPacketDelay,omitempty"`
	MeasureFailure *bool `json:"measureFailure,omitempty"`
}

// NewQosMonitoringMeasurement instantiates a new QosMonitoringMeasurement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQosMonitoringMeasurement() *QosMonitoringMeasurement {
	this := QosMonitoringMeasurement{}
	return &this
}

// NewQosMonitoringMeasurementWithDefaults instantiates a new QosMonitoringMeasurement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQosMonitoringMeasurementWithDefaults() *QosMonitoringMeasurement {
	this := QosMonitoringMeasurement{}
	return &this
}

// GetDlPacketDelay returns the DlPacketDelay field value if set, zero value otherwise.
func (o *QosMonitoringMeasurement) GetDlPacketDelay() int32 {
	if o == nil || isNil(o.DlPacketDelay) {
		var ret int32
		return ret
	}
	return *o.DlPacketDelay
}

// GetDlPacketDelayOk returns a tuple with the DlPacketDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QosMonitoringMeasurement) GetDlPacketDelayOk() (*int32, bool) {
	if o == nil || isNil(o.DlPacketDelay) {
		return nil, false
	}
	return o.DlPacketDelay, true
}

// HasDlPacketDelay returns a boolean if a field has been set.
func (o *QosMonitoringMeasurement) HasDlPacketDelay() bool {
	if o != nil && !isNil(o.DlPacketDelay) {
		return true
	}

	return false
}

// SetDlPacketDelay gets a reference to the given int32 and assigns it to the DlPacketDelay field.
func (o *QosMonitoringMeasurement) SetDlPacketDelay(v int32) {
	o.DlPacketDelay = &v
}

// GetUlPacketDelay returns the UlPacketDelay field value if set, zero value otherwise.
func (o *QosMonitoringMeasurement) GetUlPacketDelay() int32 {
	if o == nil || isNil(o.UlPacketDelay) {
		var ret int32
		return ret
	}
	return *o.UlPacketDelay
}

// GetUlPacketDelayOk returns a tuple with the UlPacketDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QosMonitoringMeasurement) GetUlPacketDelayOk() (*int32, bool) {
	if o == nil || isNil(o.UlPacketDelay) {
		return nil, false
	}
	return o.UlPacketDelay, true
}

// HasUlPacketDelay returns a boolean if a field has been set.
func (o *QosMonitoringMeasurement) HasUlPacketDelay() bool {
	if o != nil && !isNil(o.UlPacketDelay) {
		return true
	}

	return false
}

// SetUlPacketDelay gets a reference to the given int32 and assigns it to the UlPacketDelay field.
func (o *QosMonitoringMeasurement) SetUlPacketDelay(v int32) {
	o.UlPacketDelay = &v
}

// GetRtrPacketDelay returns the RtrPacketDelay field value if set, zero value otherwise.
func (o *QosMonitoringMeasurement) GetRtrPacketDelay() int32 {
	if o == nil || isNil(o.RtrPacketDelay) {
		var ret int32
		return ret
	}
	return *o.RtrPacketDelay
}

// GetRtrPacketDelayOk returns a tuple with the RtrPacketDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QosMonitoringMeasurement) GetRtrPacketDelayOk() (*int32, bool) {
	if o == nil || isNil(o.RtrPacketDelay) {
		return nil, false
	}
	return o.RtrPacketDelay, true
}

// HasRtrPacketDelay returns a boolean if a field has been set.
func (o *QosMonitoringMeasurement) HasRtrPacketDelay() bool {
	if o != nil && !isNil(o.RtrPacketDelay) {
		return true
	}

	return false
}

// SetRtrPacketDelay gets a reference to the given int32 and assigns it to the RtrPacketDelay field.
func (o *QosMonitoringMeasurement) SetRtrPacketDelay(v int32) {
	o.RtrPacketDelay = &v
}

// GetMeasureFailure returns the MeasureFailure field value if set, zero value otherwise.
func (o *QosMonitoringMeasurement) GetMeasureFailure() bool {
	if o == nil || isNil(o.MeasureFailure) {
		var ret bool
		return ret
	}
	return *o.MeasureFailure
}

// GetMeasureFailureOk returns a tuple with the MeasureFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QosMonitoringMeasurement) GetMeasureFailureOk() (*bool, bool) {
	if o == nil || isNil(o.MeasureFailure) {
		return nil, false
	}
	return o.MeasureFailure, true
}

// HasMeasureFailure returns a boolean if a field has been set.
func (o *QosMonitoringMeasurement) HasMeasureFailure() bool {
	if o != nil && !isNil(o.MeasureFailure) {
		return true
	}

	return false
}

// SetMeasureFailure gets a reference to the given bool and assigns it to the MeasureFailure field.
func (o *QosMonitoringMeasurement) SetMeasureFailure(v bool) {
	o.MeasureFailure = &v
}

func (o QosMonitoringMeasurement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QosMonitoringMeasurement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DlPacketDelay) {
		toSerialize["dlPacketDelay"] = o.DlPacketDelay
	}
	if !isNil(o.UlPacketDelay) {
		toSerialize["ulPacketDelay"] = o.UlPacketDelay
	}
	if !isNil(o.RtrPacketDelay) {
		toSerialize["rtrPacketDelay"] = o.RtrPacketDelay
	}
	if !isNil(o.MeasureFailure) {
		toSerialize["measureFailure"] = o.MeasureFailure
	}
	return toSerialize, nil
}

type NullableQosMonitoringMeasurement struct {
	value *QosMonitoringMeasurement
	isSet bool
}

func (v NullableQosMonitoringMeasurement) Get() *QosMonitoringMeasurement {
	return v.value
}

func (v *NullableQosMonitoringMeasurement) Set(val *QosMonitoringMeasurement) {
	v.value = val
	v.isSet = true
}

func (v NullableQosMonitoringMeasurement) IsSet() bool {
	return v.isSet
}

func (v *NullableQosMonitoringMeasurement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQosMonitoringMeasurement(val *QosMonitoringMeasurement) *NullableQosMonitoringMeasurement {
	return &NullableQosMonitoringMeasurement{value: val, isSet: true}
}

func (v NullableQosMonitoringMeasurement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQosMonitoringMeasurement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


