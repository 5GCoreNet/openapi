/*
Nsmf_PDUSession

SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
	"fmt"
)

// MaReleaseIndicationAnyOf the model 'MaReleaseIndicationAnyOf'
type MaReleaseIndicationAnyOf string

// List of MaReleaseIndication_anyOf
const (
	_3_GPP MaReleaseIndicationAnyOf = "REL_MAPDU_OVER_3GPP"
	N3_GPP MaReleaseIndicationAnyOf = "REL_MAPDU_OVER_N3GPP"
)

// All allowed values of MaReleaseIndicationAnyOf enum
var AllowedMaReleaseIndicationAnyOfEnumValues = []MaReleaseIndicationAnyOf{
	"REL_MAPDU_OVER_3GPP",
	"REL_MAPDU_OVER_N3GPP",
}

func (v *MaReleaseIndicationAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MaReleaseIndicationAnyOf(value)
	for _, existing := range AllowedMaReleaseIndicationAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MaReleaseIndicationAnyOf", value)
}

// NewMaReleaseIndicationAnyOfFromValue returns a pointer to a valid MaReleaseIndicationAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMaReleaseIndicationAnyOfFromValue(v string) (*MaReleaseIndicationAnyOf, error) {
	ev := MaReleaseIndicationAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MaReleaseIndicationAnyOf: valid values are %v", v, AllowedMaReleaseIndicationAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MaReleaseIndicationAnyOf) IsValid() bool {
	for _, existing := range AllowedMaReleaseIndicationAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MaReleaseIndication_anyOf value
func (v MaReleaseIndicationAnyOf) Ptr() *MaReleaseIndicationAnyOf {
	return &v
}

type NullableMaReleaseIndicationAnyOf struct {
	value *MaReleaseIndicationAnyOf
	isSet bool
}

func (v NullableMaReleaseIndicationAnyOf) Get() *MaReleaseIndicationAnyOf {
	return v.value
}

func (v *NullableMaReleaseIndicationAnyOf) Set(val *MaReleaseIndicationAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMaReleaseIndicationAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMaReleaseIndicationAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaReleaseIndicationAnyOf(val *MaReleaseIndicationAnyOf) *NullableMaReleaseIndicationAnyOf {
	return &NullableMaReleaseIndicationAnyOf{value: val, isSet: true}
}

func (v NullableMaReleaseIndicationAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaReleaseIndicationAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

