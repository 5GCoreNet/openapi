/*
Nsmf_PDUSession

SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
	"fmt"
)

// SmContextTypeAnyOf the model 'SmContextTypeAnyOf'
type SmContextTypeAnyOf string

// List of SmContextType_anyOf
const (
	EPS_PDN_CONNECTION SmContextTypeAnyOf = "EPS_PDN_CONNECTION"
	SM_CONTEXT SmContextTypeAnyOf = "SM_CONTEXT"
	AF_COORDINATION_INFO SmContextTypeAnyOf = "AF_COORDINATION_INFO"
)

// All allowed values of SmContextTypeAnyOf enum
var AllowedSmContextTypeAnyOfEnumValues = []SmContextTypeAnyOf{
	"EPS_PDN_CONNECTION",
	"SM_CONTEXT",
	"AF_COORDINATION_INFO",
}

func (v *SmContextTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmContextTypeAnyOf(value)
	for _, existing := range AllowedSmContextTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmContextTypeAnyOf", value)
}

// NewSmContextTypeAnyOfFromValue returns a pointer to a valid SmContextTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmContextTypeAnyOfFromValue(v string) (*SmContextTypeAnyOf, error) {
	ev := SmContextTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmContextTypeAnyOf: valid values are %v", v, AllowedSmContextTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmContextTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedSmContextTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmContextType_anyOf value
func (v SmContextTypeAnyOf) Ptr() *SmContextTypeAnyOf {
	return &v
}

type NullableSmContextTypeAnyOf struct {
	value *SmContextTypeAnyOf
	isSet bool
}

func (v NullableSmContextTypeAnyOf) Get() *SmContextTypeAnyOf {
	return v.value
}

func (v *NullableSmContextTypeAnyOf) Set(val *SmContextTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSmContextTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSmContextTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmContextTypeAnyOf(val *SmContextTypeAnyOf) *NullableSmContextTypeAnyOf {
	return &NullableSmContextTypeAnyOf{value: val, isSet: true}
}

func (v NullableSmContextTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmContextTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

