/*
Nsmf_PDUSession

SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
	"fmt"
)

// RsnAnyOf the model 'RsnAnyOf'
type RsnAnyOf string

// List of Rsn_anyOf
const (
	V1 RsnAnyOf = "V1"
	V2 RsnAnyOf = "V2"
	NONE RsnAnyOf = "NONE"
)

// All allowed values of RsnAnyOf enum
var AllowedRsnAnyOfEnumValues = []RsnAnyOf{
	"V1",
	"V2",
	"NONE",
}

func (v *RsnAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RsnAnyOf(value)
	for _, existing := range AllowedRsnAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RsnAnyOf", value)
}

// NewRsnAnyOfFromValue returns a pointer to a valid RsnAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRsnAnyOfFromValue(v string) (*RsnAnyOf, error) {
	ev := RsnAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RsnAnyOf: valid values are %v", v, AllowedRsnAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RsnAnyOf) IsValid() bool {
	for _, existing := range AllowedRsnAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Rsn_anyOf value
func (v RsnAnyOf) Ptr() *RsnAnyOf {
	return &v
}

type NullableRsnAnyOf struct {
	value *RsnAnyOf
	isSet bool
}

func (v NullableRsnAnyOf) Get() *RsnAnyOf {
	return v.value
}

func (v *NullableRsnAnyOf) Set(val *RsnAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRsnAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRsnAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRsnAnyOf(val *RsnAnyOf) *NullableRsnAnyOf {
	return &NullableRsnAnyOf{value: val, isSet: true}
}

func (v NullableRsnAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRsnAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

