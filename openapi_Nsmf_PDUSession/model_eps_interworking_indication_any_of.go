/*
Nsmf_PDUSession

SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
	"fmt"
)

// EpsInterworkingIndicationAnyOf the model 'EpsInterworkingIndicationAnyOf'
type EpsInterworkingIndicationAnyOf string

// List of EpsInterworkingIndication_anyOf
const (
	NONE EpsInterworkingIndicationAnyOf = "NONE"
	WITH_N26 EpsInterworkingIndicationAnyOf = "WITH_N26"
	WITHOUT_N26 EpsInterworkingIndicationAnyOf = "WITHOUT_N26"
	IWK_NON_3_GPP EpsInterworkingIndicationAnyOf = "IWK_NON_3GPP"
)

// All allowed values of EpsInterworkingIndicationAnyOf enum
var AllowedEpsInterworkingIndicationAnyOfEnumValues = []EpsInterworkingIndicationAnyOf{
	"NONE",
	"WITH_N26",
	"WITHOUT_N26",
	"IWK_NON_3GPP",
}

func (v *EpsInterworkingIndicationAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EpsInterworkingIndicationAnyOf(value)
	for _, existing := range AllowedEpsInterworkingIndicationAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EpsInterworkingIndicationAnyOf", value)
}

// NewEpsInterworkingIndicationAnyOfFromValue returns a pointer to a valid EpsInterworkingIndicationAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEpsInterworkingIndicationAnyOfFromValue(v string) (*EpsInterworkingIndicationAnyOf, error) {
	ev := EpsInterworkingIndicationAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EpsInterworkingIndicationAnyOf: valid values are %v", v, AllowedEpsInterworkingIndicationAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EpsInterworkingIndicationAnyOf) IsValid() bool {
	for _, existing := range AllowedEpsInterworkingIndicationAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EpsInterworkingIndication_anyOf value
func (v EpsInterworkingIndicationAnyOf) Ptr() *EpsInterworkingIndicationAnyOf {
	return &v
}

type NullableEpsInterworkingIndicationAnyOf struct {
	value *EpsInterworkingIndicationAnyOf
	isSet bool
}

func (v NullableEpsInterworkingIndicationAnyOf) Get() *EpsInterworkingIndicationAnyOf {
	return v.value
}

func (v *NullableEpsInterworkingIndicationAnyOf) Set(val *EpsInterworkingIndicationAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEpsInterworkingIndicationAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEpsInterworkingIndicationAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpsInterworkingIndicationAnyOf(val *EpsInterworkingIndicationAnyOf) *NullableEpsInterworkingIndicationAnyOf {
	return &NullableEpsInterworkingIndicationAnyOf{value: val, isSet: true}
}

func (v NullableEpsInterworkingIndicationAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpsInterworkingIndicationAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

