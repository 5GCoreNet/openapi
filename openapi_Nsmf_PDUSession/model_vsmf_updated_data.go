/*
Nsmf_PDUSession

SMF PDU Session Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
)

// checks if the VsmfUpdatedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VsmfUpdatedData{}

// VsmfUpdatedData Data within Update Response from V-SMF, or from I-SMF to SMF
type VsmfUpdatedData struct {
	QosFlowsAddModList []QosFlowItem `json:"qosFlowsAddModList,omitempty"`
	QosFlowsRelList []QosFlowItem `json:"qosFlowsRelList,omitempty"`
	QosFlowsFailedtoAddModList []QosFlowItem `json:"qosFlowsFailedtoAddModList,omitempty"`
	QosFlowsFailedtoRelList []QosFlowItem `json:"qosFlowsFailedtoRelList,omitempty"`
	N1SmInfoFromUe *RefToBinaryData `json:"n1SmInfoFromUe,omitempty"`
	UnknownN1SmInfo *RefToBinaryData `json:"unknownN1SmInfo,omitempty"`
	UeLocation *UserLocation `json:"ueLocation,omitempty"`
	// String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time. 
	UeTimeZone *string `json:"ueTimeZone,omitempty"`
	AddUeLocation *UserLocation `json:"addUeLocation,omitempty"`
	AssignedEbiList []EbiArpMapping `json:"assignedEbiList,omitempty"`
	FailedToAssignEbiList []Arp `json:"failedToAssignEbiList,omitempty"`
	ReleasedEbiList []int32 `json:"releasedEbiList,omitempty"`
	SecondaryRatUsageReport []SecondaryRatUsageReport `json:"secondaryRatUsageReport,omitempty"`
	SecondaryRatUsageInfo []SecondaryRatUsageInfo `json:"secondaryRatUsageInfo,omitempty"`
	N4Info *N4Information `json:"n4Info,omitempty"`
	N4InfoExt1 *N4Information `json:"n4InfoExt1,omitempty"`
	N4InfoExt2 *N4Information `json:"n4InfoExt2,omitempty"`
	N4InfoExt3 *N4Information `json:"n4InfoExt3,omitempty"`
}

// NewVsmfUpdatedData instantiates a new VsmfUpdatedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVsmfUpdatedData() *VsmfUpdatedData {
	this := VsmfUpdatedData{}
	return &this
}

// NewVsmfUpdatedDataWithDefaults instantiates a new VsmfUpdatedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVsmfUpdatedDataWithDefaults() *VsmfUpdatedData {
	this := VsmfUpdatedData{}
	return &this
}

// GetQosFlowsAddModList returns the QosFlowsAddModList field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetQosFlowsAddModList() []QosFlowItem {
	if o == nil || isNil(o.QosFlowsAddModList) {
		var ret []QosFlowItem
		return ret
	}
	return o.QosFlowsAddModList
}

// GetQosFlowsAddModListOk returns a tuple with the QosFlowsAddModList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetQosFlowsAddModListOk() ([]QosFlowItem, bool) {
	if o == nil || isNil(o.QosFlowsAddModList) {
		return nil, false
	}
	return o.QosFlowsAddModList, true
}

// HasQosFlowsAddModList returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasQosFlowsAddModList() bool {
	if o != nil && !isNil(o.QosFlowsAddModList) {
		return true
	}

	return false
}

// SetQosFlowsAddModList gets a reference to the given []QosFlowItem and assigns it to the QosFlowsAddModList field.
func (o *VsmfUpdatedData) SetQosFlowsAddModList(v []QosFlowItem) {
	o.QosFlowsAddModList = v
}

// GetQosFlowsRelList returns the QosFlowsRelList field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetQosFlowsRelList() []QosFlowItem {
	if o == nil || isNil(o.QosFlowsRelList) {
		var ret []QosFlowItem
		return ret
	}
	return o.QosFlowsRelList
}

// GetQosFlowsRelListOk returns a tuple with the QosFlowsRelList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetQosFlowsRelListOk() ([]QosFlowItem, bool) {
	if o == nil || isNil(o.QosFlowsRelList) {
		return nil, false
	}
	return o.QosFlowsRelList, true
}

// HasQosFlowsRelList returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasQosFlowsRelList() bool {
	if o != nil && !isNil(o.QosFlowsRelList) {
		return true
	}

	return false
}

// SetQosFlowsRelList gets a reference to the given []QosFlowItem and assigns it to the QosFlowsRelList field.
func (o *VsmfUpdatedData) SetQosFlowsRelList(v []QosFlowItem) {
	o.QosFlowsRelList = v
}

// GetQosFlowsFailedtoAddModList returns the QosFlowsFailedtoAddModList field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetQosFlowsFailedtoAddModList() []QosFlowItem {
	if o == nil || isNil(o.QosFlowsFailedtoAddModList) {
		var ret []QosFlowItem
		return ret
	}
	return o.QosFlowsFailedtoAddModList
}

// GetQosFlowsFailedtoAddModListOk returns a tuple with the QosFlowsFailedtoAddModList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetQosFlowsFailedtoAddModListOk() ([]QosFlowItem, bool) {
	if o == nil || isNil(o.QosFlowsFailedtoAddModList) {
		return nil, false
	}
	return o.QosFlowsFailedtoAddModList, true
}

// HasQosFlowsFailedtoAddModList returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasQosFlowsFailedtoAddModList() bool {
	if o != nil && !isNil(o.QosFlowsFailedtoAddModList) {
		return true
	}

	return false
}

// SetQosFlowsFailedtoAddModList gets a reference to the given []QosFlowItem and assigns it to the QosFlowsFailedtoAddModList field.
func (o *VsmfUpdatedData) SetQosFlowsFailedtoAddModList(v []QosFlowItem) {
	o.QosFlowsFailedtoAddModList = v
}

// GetQosFlowsFailedtoRelList returns the QosFlowsFailedtoRelList field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetQosFlowsFailedtoRelList() []QosFlowItem {
	if o == nil || isNil(o.QosFlowsFailedtoRelList) {
		var ret []QosFlowItem
		return ret
	}
	return o.QosFlowsFailedtoRelList
}

// GetQosFlowsFailedtoRelListOk returns a tuple with the QosFlowsFailedtoRelList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetQosFlowsFailedtoRelListOk() ([]QosFlowItem, bool) {
	if o == nil || isNil(o.QosFlowsFailedtoRelList) {
		return nil, false
	}
	return o.QosFlowsFailedtoRelList, true
}

// HasQosFlowsFailedtoRelList returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasQosFlowsFailedtoRelList() bool {
	if o != nil && !isNil(o.QosFlowsFailedtoRelList) {
		return true
	}

	return false
}

// SetQosFlowsFailedtoRelList gets a reference to the given []QosFlowItem and assigns it to the QosFlowsFailedtoRelList field.
func (o *VsmfUpdatedData) SetQosFlowsFailedtoRelList(v []QosFlowItem) {
	o.QosFlowsFailedtoRelList = v
}

// GetN1SmInfoFromUe returns the N1SmInfoFromUe field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetN1SmInfoFromUe() RefToBinaryData {
	if o == nil || isNil(o.N1SmInfoFromUe) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N1SmInfoFromUe
}

// GetN1SmInfoFromUeOk returns a tuple with the N1SmInfoFromUe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetN1SmInfoFromUeOk() (*RefToBinaryData, bool) {
	if o == nil || isNil(o.N1SmInfoFromUe) {
		return nil, false
	}
	return o.N1SmInfoFromUe, true
}

// HasN1SmInfoFromUe returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasN1SmInfoFromUe() bool {
	if o != nil && !isNil(o.N1SmInfoFromUe) {
		return true
	}

	return false
}

// SetN1SmInfoFromUe gets a reference to the given RefToBinaryData and assigns it to the N1SmInfoFromUe field.
func (o *VsmfUpdatedData) SetN1SmInfoFromUe(v RefToBinaryData) {
	o.N1SmInfoFromUe = &v
}

// GetUnknownN1SmInfo returns the UnknownN1SmInfo field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetUnknownN1SmInfo() RefToBinaryData {
	if o == nil || isNil(o.UnknownN1SmInfo) {
		var ret RefToBinaryData
		return ret
	}
	return *o.UnknownN1SmInfo
}

// GetUnknownN1SmInfoOk returns a tuple with the UnknownN1SmInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetUnknownN1SmInfoOk() (*RefToBinaryData, bool) {
	if o == nil || isNil(o.UnknownN1SmInfo) {
		return nil, false
	}
	return o.UnknownN1SmInfo, true
}

// HasUnknownN1SmInfo returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasUnknownN1SmInfo() bool {
	if o != nil && !isNil(o.UnknownN1SmInfo) {
		return true
	}

	return false
}

// SetUnknownN1SmInfo gets a reference to the given RefToBinaryData and assigns it to the UnknownN1SmInfo field.
func (o *VsmfUpdatedData) SetUnknownN1SmInfo(v RefToBinaryData) {
	o.UnknownN1SmInfo = &v
}

// GetUeLocation returns the UeLocation field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetUeLocation() UserLocation {
	if o == nil || isNil(o.UeLocation) {
		var ret UserLocation
		return ret
	}
	return *o.UeLocation
}

// GetUeLocationOk returns a tuple with the UeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetUeLocationOk() (*UserLocation, bool) {
	if o == nil || isNil(o.UeLocation) {
		return nil, false
	}
	return o.UeLocation, true
}

// HasUeLocation returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasUeLocation() bool {
	if o != nil && !isNil(o.UeLocation) {
		return true
	}

	return false
}

// SetUeLocation gets a reference to the given UserLocation and assigns it to the UeLocation field.
func (o *VsmfUpdatedData) SetUeLocation(v UserLocation) {
	o.UeLocation = &v
}

// GetUeTimeZone returns the UeTimeZone field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetUeTimeZone() string {
	if o == nil || isNil(o.UeTimeZone) {
		var ret string
		return ret
	}
	return *o.UeTimeZone
}

// GetUeTimeZoneOk returns a tuple with the UeTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetUeTimeZoneOk() (*string, bool) {
	if o == nil || isNil(o.UeTimeZone) {
		return nil, false
	}
	return o.UeTimeZone, true
}

// HasUeTimeZone returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasUeTimeZone() bool {
	if o != nil && !isNil(o.UeTimeZone) {
		return true
	}

	return false
}

// SetUeTimeZone gets a reference to the given string and assigns it to the UeTimeZone field.
func (o *VsmfUpdatedData) SetUeTimeZone(v string) {
	o.UeTimeZone = &v
}

// GetAddUeLocation returns the AddUeLocation field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetAddUeLocation() UserLocation {
	if o == nil || isNil(o.AddUeLocation) {
		var ret UserLocation
		return ret
	}
	return *o.AddUeLocation
}

// GetAddUeLocationOk returns a tuple with the AddUeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetAddUeLocationOk() (*UserLocation, bool) {
	if o == nil || isNil(o.AddUeLocation) {
		return nil, false
	}
	return o.AddUeLocation, true
}

// HasAddUeLocation returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasAddUeLocation() bool {
	if o != nil && !isNil(o.AddUeLocation) {
		return true
	}

	return false
}

// SetAddUeLocation gets a reference to the given UserLocation and assigns it to the AddUeLocation field.
func (o *VsmfUpdatedData) SetAddUeLocation(v UserLocation) {
	o.AddUeLocation = &v
}

// GetAssignedEbiList returns the AssignedEbiList field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetAssignedEbiList() []EbiArpMapping {
	if o == nil || isNil(o.AssignedEbiList) {
		var ret []EbiArpMapping
		return ret
	}
	return o.AssignedEbiList
}

// GetAssignedEbiListOk returns a tuple with the AssignedEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetAssignedEbiListOk() ([]EbiArpMapping, bool) {
	if o == nil || isNil(o.AssignedEbiList) {
		return nil, false
	}
	return o.AssignedEbiList, true
}

// HasAssignedEbiList returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasAssignedEbiList() bool {
	if o != nil && !isNil(o.AssignedEbiList) {
		return true
	}

	return false
}

// SetAssignedEbiList gets a reference to the given []EbiArpMapping and assigns it to the AssignedEbiList field.
func (o *VsmfUpdatedData) SetAssignedEbiList(v []EbiArpMapping) {
	o.AssignedEbiList = v
}

// GetFailedToAssignEbiList returns the FailedToAssignEbiList field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetFailedToAssignEbiList() []Arp {
	if o == nil || isNil(o.FailedToAssignEbiList) {
		var ret []Arp
		return ret
	}
	return o.FailedToAssignEbiList
}

// GetFailedToAssignEbiListOk returns a tuple with the FailedToAssignEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetFailedToAssignEbiListOk() ([]Arp, bool) {
	if o == nil || isNil(o.FailedToAssignEbiList) {
		return nil, false
	}
	return o.FailedToAssignEbiList, true
}

// HasFailedToAssignEbiList returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasFailedToAssignEbiList() bool {
	if o != nil && !isNil(o.FailedToAssignEbiList) {
		return true
	}

	return false
}

// SetFailedToAssignEbiList gets a reference to the given []Arp and assigns it to the FailedToAssignEbiList field.
func (o *VsmfUpdatedData) SetFailedToAssignEbiList(v []Arp) {
	o.FailedToAssignEbiList = v
}

// GetReleasedEbiList returns the ReleasedEbiList field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetReleasedEbiList() []int32 {
	if o == nil || isNil(o.ReleasedEbiList) {
		var ret []int32
		return ret
	}
	return o.ReleasedEbiList
}

// GetReleasedEbiListOk returns a tuple with the ReleasedEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetReleasedEbiListOk() ([]int32, bool) {
	if o == nil || isNil(o.ReleasedEbiList) {
		return nil, false
	}
	return o.ReleasedEbiList, true
}

// HasReleasedEbiList returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasReleasedEbiList() bool {
	if o != nil && !isNil(o.ReleasedEbiList) {
		return true
	}

	return false
}

// SetReleasedEbiList gets a reference to the given []int32 and assigns it to the ReleasedEbiList field.
func (o *VsmfUpdatedData) SetReleasedEbiList(v []int32) {
	o.ReleasedEbiList = v
}

// GetSecondaryRatUsageReport returns the SecondaryRatUsageReport field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetSecondaryRatUsageReport() []SecondaryRatUsageReport {
	if o == nil || isNil(o.SecondaryRatUsageReport) {
		var ret []SecondaryRatUsageReport
		return ret
	}
	return o.SecondaryRatUsageReport
}

// GetSecondaryRatUsageReportOk returns a tuple with the SecondaryRatUsageReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetSecondaryRatUsageReportOk() ([]SecondaryRatUsageReport, bool) {
	if o == nil || isNil(o.SecondaryRatUsageReport) {
		return nil, false
	}
	return o.SecondaryRatUsageReport, true
}

// HasSecondaryRatUsageReport returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasSecondaryRatUsageReport() bool {
	if o != nil && !isNil(o.SecondaryRatUsageReport) {
		return true
	}

	return false
}

// SetSecondaryRatUsageReport gets a reference to the given []SecondaryRatUsageReport and assigns it to the SecondaryRatUsageReport field.
func (o *VsmfUpdatedData) SetSecondaryRatUsageReport(v []SecondaryRatUsageReport) {
	o.SecondaryRatUsageReport = v
}

// GetSecondaryRatUsageInfo returns the SecondaryRatUsageInfo field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetSecondaryRatUsageInfo() []SecondaryRatUsageInfo {
	if o == nil || isNil(o.SecondaryRatUsageInfo) {
		var ret []SecondaryRatUsageInfo
		return ret
	}
	return o.SecondaryRatUsageInfo
}

// GetSecondaryRatUsageInfoOk returns a tuple with the SecondaryRatUsageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetSecondaryRatUsageInfoOk() ([]SecondaryRatUsageInfo, bool) {
	if o == nil || isNil(o.SecondaryRatUsageInfo) {
		return nil, false
	}
	return o.SecondaryRatUsageInfo, true
}

// HasSecondaryRatUsageInfo returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasSecondaryRatUsageInfo() bool {
	if o != nil && !isNil(o.SecondaryRatUsageInfo) {
		return true
	}

	return false
}

// SetSecondaryRatUsageInfo gets a reference to the given []SecondaryRatUsageInfo and assigns it to the SecondaryRatUsageInfo field.
func (o *VsmfUpdatedData) SetSecondaryRatUsageInfo(v []SecondaryRatUsageInfo) {
	o.SecondaryRatUsageInfo = v
}

// GetN4Info returns the N4Info field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetN4Info() N4Information {
	if o == nil || isNil(o.N4Info) {
		var ret N4Information
		return ret
	}
	return *o.N4Info
}

// GetN4InfoOk returns a tuple with the N4Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetN4InfoOk() (*N4Information, bool) {
	if o == nil || isNil(o.N4Info) {
		return nil, false
	}
	return o.N4Info, true
}

// HasN4Info returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasN4Info() bool {
	if o != nil && !isNil(o.N4Info) {
		return true
	}

	return false
}

// SetN4Info gets a reference to the given N4Information and assigns it to the N4Info field.
func (o *VsmfUpdatedData) SetN4Info(v N4Information) {
	o.N4Info = &v
}

// GetN4InfoExt1 returns the N4InfoExt1 field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetN4InfoExt1() N4Information {
	if o == nil || isNil(o.N4InfoExt1) {
		var ret N4Information
		return ret
	}
	return *o.N4InfoExt1
}

// GetN4InfoExt1Ok returns a tuple with the N4InfoExt1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetN4InfoExt1Ok() (*N4Information, bool) {
	if o == nil || isNil(o.N4InfoExt1) {
		return nil, false
	}
	return o.N4InfoExt1, true
}

// HasN4InfoExt1 returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasN4InfoExt1() bool {
	if o != nil && !isNil(o.N4InfoExt1) {
		return true
	}

	return false
}

// SetN4InfoExt1 gets a reference to the given N4Information and assigns it to the N4InfoExt1 field.
func (o *VsmfUpdatedData) SetN4InfoExt1(v N4Information) {
	o.N4InfoExt1 = &v
}

// GetN4InfoExt2 returns the N4InfoExt2 field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetN4InfoExt2() N4Information {
	if o == nil || isNil(o.N4InfoExt2) {
		var ret N4Information
		return ret
	}
	return *o.N4InfoExt2
}

// GetN4InfoExt2Ok returns a tuple with the N4InfoExt2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetN4InfoExt2Ok() (*N4Information, bool) {
	if o == nil || isNil(o.N4InfoExt2) {
		return nil, false
	}
	return o.N4InfoExt2, true
}

// HasN4InfoExt2 returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasN4InfoExt2() bool {
	if o != nil && !isNil(o.N4InfoExt2) {
		return true
	}

	return false
}

// SetN4InfoExt2 gets a reference to the given N4Information and assigns it to the N4InfoExt2 field.
func (o *VsmfUpdatedData) SetN4InfoExt2(v N4Information) {
	o.N4InfoExt2 = &v
}

// GetN4InfoExt3 returns the N4InfoExt3 field value if set, zero value otherwise.
func (o *VsmfUpdatedData) GetN4InfoExt3() N4Information {
	if o == nil || isNil(o.N4InfoExt3) {
		var ret N4Information
		return ret
	}
	return *o.N4InfoExt3
}

// GetN4InfoExt3Ok returns a tuple with the N4InfoExt3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsmfUpdatedData) GetN4InfoExt3Ok() (*N4Information, bool) {
	if o == nil || isNil(o.N4InfoExt3) {
		return nil, false
	}
	return o.N4InfoExt3, true
}

// HasN4InfoExt3 returns a boolean if a field has been set.
func (o *VsmfUpdatedData) HasN4InfoExt3() bool {
	if o != nil && !isNil(o.N4InfoExt3) {
		return true
	}

	return false
}

// SetN4InfoExt3 gets a reference to the given N4Information and assigns it to the N4InfoExt3 field.
func (o *VsmfUpdatedData) SetN4InfoExt3(v N4Information) {
	o.N4InfoExt3 = &v
}

func (o VsmfUpdatedData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VsmfUpdatedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.QosFlowsAddModList) {
		toSerialize["qosFlowsAddModList"] = o.QosFlowsAddModList
	}
	if !isNil(o.QosFlowsRelList) {
		toSerialize["qosFlowsRelList"] = o.QosFlowsRelList
	}
	if !isNil(o.QosFlowsFailedtoAddModList) {
		toSerialize["qosFlowsFailedtoAddModList"] = o.QosFlowsFailedtoAddModList
	}
	if !isNil(o.QosFlowsFailedtoRelList) {
		toSerialize["qosFlowsFailedtoRelList"] = o.QosFlowsFailedtoRelList
	}
	if !isNil(o.N1SmInfoFromUe) {
		toSerialize["n1SmInfoFromUe"] = o.N1SmInfoFromUe
	}
	if !isNil(o.UnknownN1SmInfo) {
		toSerialize["unknownN1SmInfo"] = o.UnknownN1SmInfo
	}
	if !isNil(o.UeLocation) {
		toSerialize["ueLocation"] = o.UeLocation
	}
	if !isNil(o.UeTimeZone) {
		toSerialize["ueTimeZone"] = o.UeTimeZone
	}
	if !isNil(o.AddUeLocation) {
		toSerialize["addUeLocation"] = o.AddUeLocation
	}
	if !isNil(o.AssignedEbiList) {
		toSerialize["assignedEbiList"] = o.AssignedEbiList
	}
	if !isNil(o.FailedToAssignEbiList) {
		toSerialize["failedToAssignEbiList"] = o.FailedToAssignEbiList
	}
	if !isNil(o.ReleasedEbiList) {
		toSerialize["releasedEbiList"] = o.ReleasedEbiList
	}
	if !isNil(o.SecondaryRatUsageReport) {
		toSerialize["secondaryRatUsageReport"] = o.SecondaryRatUsageReport
	}
	if !isNil(o.SecondaryRatUsageInfo) {
		toSerialize["secondaryRatUsageInfo"] = o.SecondaryRatUsageInfo
	}
	if !isNil(o.N4Info) {
		toSerialize["n4Info"] = o.N4Info
	}
	if !isNil(o.N4InfoExt1) {
		toSerialize["n4InfoExt1"] = o.N4InfoExt1
	}
	if !isNil(o.N4InfoExt2) {
		toSerialize["n4InfoExt2"] = o.N4InfoExt2
	}
	if !isNil(o.N4InfoExt3) {
		toSerialize["n4InfoExt3"] = o.N4InfoExt3
	}
	return toSerialize, nil
}

type NullableVsmfUpdatedData struct {
	value *VsmfUpdatedData
	isSet bool
}

func (v NullableVsmfUpdatedData) Get() *VsmfUpdatedData {
	return v.value
}

func (v *NullableVsmfUpdatedData) Set(val *VsmfUpdatedData) {
	v.value = val
	v.isSet = true
}

func (v NullableVsmfUpdatedData) IsSet() bool {
	return v.isSet
}

func (v *NullableVsmfUpdatedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVsmfUpdatedData(val *VsmfUpdatedData) *NullableVsmfUpdatedData {
	return &NullableVsmfUpdatedData{value: val, isSet: true}
}

func (v NullableVsmfUpdatedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVsmfUpdatedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


