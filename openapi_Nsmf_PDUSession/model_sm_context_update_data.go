/*
Nsmf_PDUSession

SMF PDU Session Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
)

// checks if the SmContextUpdateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmContextUpdateData{}

// SmContextUpdateData Data within Update SM Context Request
type SmContextUpdateData struct {
	// String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.  
	Pei *string `json:"pei,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	ServingNfId *string `json:"servingNfId,omitempty"`
	Guami *Guami `json:"guami,omitempty"`
	ServingNetwork *PlmnIdNid `json:"servingNetwork,omitempty"`
	BackupAmfInfo []BackupAmfInfo `json:"backupAmfInfo,omitempty"`
	AnType *AccessType `json:"anType,omitempty"`
	AdditionalAnType *AccessType `json:"additionalAnType,omitempty"`
	AnTypeToReactivate *AccessType `json:"anTypeToReactivate,omitempty"`
	RatType *RatType `json:"ratType,omitempty"`
	PresenceInLadn *PresenceState `json:"presenceInLadn,omitempty"`
	UeLocation *UserLocation `json:"ueLocation,omitempty"`
	// String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time. 
	UeTimeZone *string `json:"ueTimeZone,omitempty"`
	AddUeLocation *UserLocation `json:"addUeLocation,omitempty"`
	UpCnxState *UpCnxState `json:"upCnxState,omitempty"`
	HoState *HoState `json:"hoState,omitempty"`
	ToBeSwitched *bool `json:"toBeSwitched,omitempty"`
	FailedToBeSwitched *bool `json:"failedToBeSwitched,omitempty"`
	N1SmMsg *RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo *RefToBinaryData `json:"n2SmInfo,omitempty"`
	N2SmInfoType *N2SmInfoType `json:"n2SmInfoType,omitempty"`
	TargetId *NgRanTargetId `json:"targetId,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	TargetServingNfId *string `json:"targetServingNfId,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	SmContextStatusUri *string `json:"smContextStatusUri,omitempty"`
	DataForwarding *bool `json:"dataForwarding,omitempty"`
	N9ForwardingTunnel *TunnelInfo `json:"n9ForwardingTunnel,omitempty"`
	N9DlForwardingTnlList []IndirectDataForwardingTunnelInfo `json:"n9DlForwardingTnlList,omitempty"`
	N9UlForwardingTnlList []IndirectDataForwardingTunnelInfo `json:"n9UlForwardingTnlList,omitempty"`
	N9DlForwardingTunnel *TunnelInfo `json:"n9DlForwardingTunnel,omitempty"`
	// indicating a time in seconds.
	N9InactivityTimer *int32 `json:"n9InactivityTimer,omitempty"`
	EpsBearerSetup []string `json:"epsBearerSetup,omitempty"`
	RevokeEbiList []int32 `json:"revokeEbiList,omitempty"`
	Release *bool `json:"release,omitempty"`
	Cause *Cause `json:"cause,omitempty"`
	NgApCause *NgApCause `json:"ngApCause,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Var5gMmCauseValue *int32 `json:"5gMmCauseValue,omitempty"`
	SNssai *Snssai `json:"sNssai,omitempty"`
	TraceData NullableTraceData `json:"traceData,omitempty"`
	EpsInterworkingInd *EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`
	AnTypeCanBeChanged *bool `json:"anTypeCanBeChanged,omitempty"`
	N2SmInfoExt1 *RefToBinaryData `json:"n2SmInfoExt1,omitempty"`
	N2SmInfoTypeExt1 *N2SmInfoType `json:"n2SmInfoTypeExt1,omitempty"`
	MaReleaseInd *MaReleaseIndication `json:"maReleaseInd,omitempty"`
	MaNwUpgradeInd *bool `json:"maNwUpgradeInd,omitempty"`
	MaRequestInd *bool `json:"maRequestInd,omitempty"`
	ExemptionInd *ExemptionInd `json:"exemptionInd,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	MoExpDataCounter *MoExpDataCounter `json:"moExpDataCounter,omitempty"`
	ExtendedNasSmTimerInd *bool `json:"extendedNasSmTimerInd,omitempty"`
	// string with format 'bytes' as defined in OpenAPI
	ForwardingFTeid *string `json:"forwardingFTeid,omitempty"`
	ForwardingBearerContexts []string `json:"forwardingBearerContexts,omitempty"`
	DdnFailureSubs *DdnFailureSubs `json:"ddnFailureSubs,omitempty"`
	SkipN2PduSessionResRelInd *bool `json:"skipN2PduSessionResRelInd,omitempty"`
	SecondaryRatUsageDataReportContainer []string `json:"secondaryRatUsageDataReportContainer,omitempty"`
	SmPolicyNotifyInd *bool `json:"smPolicyNotifyInd,omitempty"`
	PcfUeCallbackInfo NullablePcfUeCallbackInfo `json:"pcfUeCallbackInfo,omitempty"`
	SatelliteBackhaulCat *SatelliteBackhaulCategory `json:"satelliteBackhaulCat,omitempty"`
	CnBasedMt *bool `json:"cnBasedMt,omitempty"`
}

// NewSmContextUpdateData instantiates a new SmContextUpdateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmContextUpdateData() *SmContextUpdateData {
	this := SmContextUpdateData{}
	var toBeSwitched bool = false
	this.ToBeSwitched = &toBeSwitched
	var dataForwarding bool = false
	this.DataForwarding = &dataForwarding
	var release bool = false
	this.Release = &release
	var anTypeCanBeChanged bool = false
	this.AnTypeCanBeChanged = &anTypeCanBeChanged
	var maNwUpgradeInd bool = false
	this.MaNwUpgradeInd = &maNwUpgradeInd
	var maRequestInd bool = false
	this.MaRequestInd = &maRequestInd
	var skipN2PduSessionResRelInd bool = false
	this.SkipN2PduSessionResRelInd = &skipN2PduSessionResRelInd
	return &this
}

// NewSmContextUpdateDataWithDefaults instantiates a new SmContextUpdateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmContextUpdateDataWithDefaults() *SmContextUpdateData {
	this := SmContextUpdateData{}
	var toBeSwitched bool = false
	this.ToBeSwitched = &toBeSwitched
	var dataForwarding bool = false
	this.DataForwarding = &dataForwarding
	var release bool = false
	this.Release = &release
	var anTypeCanBeChanged bool = false
	this.AnTypeCanBeChanged = &anTypeCanBeChanged
	var maNwUpgradeInd bool = false
	this.MaNwUpgradeInd = &maNwUpgradeInd
	var maRequestInd bool = false
	this.MaRequestInd = &maRequestInd
	var skipN2PduSessionResRelInd bool = false
	this.SkipN2PduSessionResRelInd = &skipN2PduSessionResRelInd
	return &this
}

// GetPei returns the Pei field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetPei() string {
	if o == nil || isNil(o.Pei) {
		var ret string
		return ret
	}
	return *o.Pei
}

// GetPeiOk returns a tuple with the Pei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetPeiOk() (*string, bool) {
	if o == nil || isNil(o.Pei) {
		return nil, false
	}
	return o.Pei, true
}

// HasPei returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasPei() bool {
	if o != nil && !isNil(o.Pei) {
		return true
	}

	return false
}

// SetPei gets a reference to the given string and assigns it to the Pei field.
func (o *SmContextUpdateData) SetPei(v string) {
	o.Pei = &v
}

// GetServingNfId returns the ServingNfId field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetServingNfId() string {
	if o == nil || isNil(o.ServingNfId) {
		var ret string
		return ret
	}
	return *o.ServingNfId
}

// GetServingNfIdOk returns a tuple with the ServingNfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetServingNfIdOk() (*string, bool) {
	if o == nil || isNil(o.ServingNfId) {
		return nil, false
	}
	return o.ServingNfId, true
}

// HasServingNfId returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasServingNfId() bool {
	if o != nil && !isNil(o.ServingNfId) {
		return true
	}

	return false
}

// SetServingNfId gets a reference to the given string and assigns it to the ServingNfId field.
func (o *SmContextUpdateData) SetServingNfId(v string) {
	o.ServingNfId = &v
}

// GetGuami returns the Guami field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetGuami() Guami {
	if o == nil || isNil(o.Guami) {
		var ret Guami
		return ret
	}
	return *o.Guami
}

// GetGuamiOk returns a tuple with the Guami field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetGuamiOk() (*Guami, bool) {
	if o == nil || isNil(o.Guami) {
		return nil, false
	}
	return o.Guami, true
}

// HasGuami returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasGuami() bool {
	if o != nil && !isNil(o.Guami) {
		return true
	}

	return false
}

// SetGuami gets a reference to the given Guami and assigns it to the Guami field.
func (o *SmContextUpdateData) SetGuami(v Guami) {
	o.Guami = &v
}

// GetServingNetwork returns the ServingNetwork field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetServingNetwork() PlmnIdNid {
	if o == nil || isNil(o.ServingNetwork) {
		var ret PlmnIdNid
		return ret
	}
	return *o.ServingNetwork
}

// GetServingNetworkOk returns a tuple with the ServingNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetServingNetworkOk() (*PlmnIdNid, bool) {
	if o == nil || isNil(o.ServingNetwork) {
		return nil, false
	}
	return o.ServingNetwork, true
}

// HasServingNetwork returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasServingNetwork() bool {
	if o != nil && !isNil(o.ServingNetwork) {
		return true
	}

	return false
}

// SetServingNetwork gets a reference to the given PlmnIdNid and assigns it to the ServingNetwork field.
func (o *SmContextUpdateData) SetServingNetwork(v PlmnIdNid) {
	o.ServingNetwork = &v
}

// GetBackupAmfInfo returns the BackupAmfInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmContextUpdateData) GetBackupAmfInfo() []BackupAmfInfo {
	if o == nil {
		var ret []BackupAmfInfo
		return ret
	}
	return o.BackupAmfInfo
}

// GetBackupAmfInfoOk returns a tuple with the BackupAmfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmContextUpdateData) GetBackupAmfInfoOk() ([]BackupAmfInfo, bool) {
	if o == nil || isNil(o.BackupAmfInfo) {
		return nil, false
	}
	return o.BackupAmfInfo, true
}

// HasBackupAmfInfo returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasBackupAmfInfo() bool {
	if o != nil && isNil(o.BackupAmfInfo) {
		return true
	}

	return false
}

// SetBackupAmfInfo gets a reference to the given []BackupAmfInfo and assigns it to the BackupAmfInfo field.
func (o *SmContextUpdateData) SetBackupAmfInfo(v []BackupAmfInfo) {
	o.BackupAmfInfo = v
}

// GetAnType returns the AnType field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetAnType() AccessType {
	if o == nil || isNil(o.AnType) {
		var ret AccessType
		return ret
	}
	return *o.AnType
}

// GetAnTypeOk returns a tuple with the AnType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetAnTypeOk() (*AccessType, bool) {
	if o == nil || isNil(o.AnType) {
		return nil, false
	}
	return o.AnType, true
}

// HasAnType returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasAnType() bool {
	if o != nil && !isNil(o.AnType) {
		return true
	}

	return false
}

// SetAnType gets a reference to the given AccessType and assigns it to the AnType field.
func (o *SmContextUpdateData) SetAnType(v AccessType) {
	o.AnType = &v
}

// GetAdditionalAnType returns the AdditionalAnType field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetAdditionalAnType() AccessType {
	if o == nil || isNil(o.AdditionalAnType) {
		var ret AccessType
		return ret
	}
	return *o.AdditionalAnType
}

// GetAdditionalAnTypeOk returns a tuple with the AdditionalAnType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetAdditionalAnTypeOk() (*AccessType, bool) {
	if o == nil || isNil(o.AdditionalAnType) {
		return nil, false
	}
	return o.AdditionalAnType, true
}

// HasAdditionalAnType returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasAdditionalAnType() bool {
	if o != nil && !isNil(o.AdditionalAnType) {
		return true
	}

	return false
}

// SetAdditionalAnType gets a reference to the given AccessType and assigns it to the AdditionalAnType field.
func (o *SmContextUpdateData) SetAdditionalAnType(v AccessType) {
	o.AdditionalAnType = &v
}

// GetAnTypeToReactivate returns the AnTypeToReactivate field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetAnTypeToReactivate() AccessType {
	if o == nil || isNil(o.AnTypeToReactivate) {
		var ret AccessType
		return ret
	}
	return *o.AnTypeToReactivate
}

// GetAnTypeToReactivateOk returns a tuple with the AnTypeToReactivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetAnTypeToReactivateOk() (*AccessType, bool) {
	if o == nil || isNil(o.AnTypeToReactivate) {
		return nil, false
	}
	return o.AnTypeToReactivate, true
}

// HasAnTypeToReactivate returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasAnTypeToReactivate() bool {
	if o != nil && !isNil(o.AnTypeToReactivate) {
		return true
	}

	return false
}

// SetAnTypeToReactivate gets a reference to the given AccessType and assigns it to the AnTypeToReactivate field.
func (o *SmContextUpdateData) SetAnTypeToReactivate(v AccessType) {
	o.AnTypeToReactivate = &v
}

// GetRatType returns the RatType field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetRatType() RatType {
	if o == nil || isNil(o.RatType) {
		var ret RatType
		return ret
	}
	return *o.RatType
}

// GetRatTypeOk returns a tuple with the RatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetRatTypeOk() (*RatType, bool) {
	if o == nil || isNil(o.RatType) {
		return nil, false
	}
	return o.RatType, true
}

// HasRatType returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasRatType() bool {
	if o != nil && !isNil(o.RatType) {
		return true
	}

	return false
}

// SetRatType gets a reference to the given RatType and assigns it to the RatType field.
func (o *SmContextUpdateData) SetRatType(v RatType) {
	o.RatType = &v
}

// GetPresenceInLadn returns the PresenceInLadn field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetPresenceInLadn() PresenceState {
	if o == nil || isNil(o.PresenceInLadn) {
		var ret PresenceState
		return ret
	}
	return *o.PresenceInLadn
}

// GetPresenceInLadnOk returns a tuple with the PresenceInLadn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetPresenceInLadnOk() (*PresenceState, bool) {
	if o == nil || isNil(o.PresenceInLadn) {
		return nil, false
	}
	return o.PresenceInLadn, true
}

// HasPresenceInLadn returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasPresenceInLadn() bool {
	if o != nil && !isNil(o.PresenceInLadn) {
		return true
	}

	return false
}

// SetPresenceInLadn gets a reference to the given PresenceState and assigns it to the PresenceInLadn field.
func (o *SmContextUpdateData) SetPresenceInLadn(v PresenceState) {
	o.PresenceInLadn = &v
}

// GetUeLocation returns the UeLocation field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetUeLocation() UserLocation {
	if o == nil || isNil(o.UeLocation) {
		var ret UserLocation
		return ret
	}
	return *o.UeLocation
}

// GetUeLocationOk returns a tuple with the UeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetUeLocationOk() (*UserLocation, bool) {
	if o == nil || isNil(o.UeLocation) {
		return nil, false
	}
	return o.UeLocation, true
}

// HasUeLocation returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasUeLocation() bool {
	if o != nil && !isNil(o.UeLocation) {
		return true
	}

	return false
}

// SetUeLocation gets a reference to the given UserLocation and assigns it to the UeLocation field.
func (o *SmContextUpdateData) SetUeLocation(v UserLocation) {
	o.UeLocation = &v
}

// GetUeTimeZone returns the UeTimeZone field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetUeTimeZone() string {
	if o == nil || isNil(o.UeTimeZone) {
		var ret string
		return ret
	}
	return *o.UeTimeZone
}

// GetUeTimeZoneOk returns a tuple with the UeTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetUeTimeZoneOk() (*string, bool) {
	if o == nil || isNil(o.UeTimeZone) {
		return nil, false
	}
	return o.UeTimeZone, true
}

// HasUeTimeZone returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasUeTimeZone() bool {
	if o != nil && !isNil(o.UeTimeZone) {
		return true
	}

	return false
}

// SetUeTimeZone gets a reference to the given string and assigns it to the UeTimeZone field.
func (o *SmContextUpdateData) SetUeTimeZone(v string) {
	o.UeTimeZone = &v
}

// GetAddUeLocation returns the AddUeLocation field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetAddUeLocation() UserLocation {
	if o == nil || isNil(o.AddUeLocation) {
		var ret UserLocation
		return ret
	}
	return *o.AddUeLocation
}

// GetAddUeLocationOk returns a tuple with the AddUeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetAddUeLocationOk() (*UserLocation, bool) {
	if o == nil || isNil(o.AddUeLocation) {
		return nil, false
	}
	return o.AddUeLocation, true
}

// HasAddUeLocation returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasAddUeLocation() bool {
	if o != nil && !isNil(o.AddUeLocation) {
		return true
	}

	return false
}

// SetAddUeLocation gets a reference to the given UserLocation and assigns it to the AddUeLocation field.
func (o *SmContextUpdateData) SetAddUeLocation(v UserLocation) {
	o.AddUeLocation = &v
}

// GetUpCnxState returns the UpCnxState field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetUpCnxState() UpCnxState {
	if o == nil || isNil(o.UpCnxState) {
		var ret UpCnxState
		return ret
	}
	return *o.UpCnxState
}

// GetUpCnxStateOk returns a tuple with the UpCnxState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetUpCnxStateOk() (*UpCnxState, bool) {
	if o == nil || isNil(o.UpCnxState) {
		return nil, false
	}
	return o.UpCnxState, true
}

// HasUpCnxState returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasUpCnxState() bool {
	if o != nil && !isNil(o.UpCnxState) {
		return true
	}

	return false
}

// SetUpCnxState gets a reference to the given UpCnxState and assigns it to the UpCnxState field.
func (o *SmContextUpdateData) SetUpCnxState(v UpCnxState) {
	o.UpCnxState = &v
}

// GetHoState returns the HoState field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetHoState() HoState {
	if o == nil || isNil(o.HoState) {
		var ret HoState
		return ret
	}
	return *o.HoState
}

// GetHoStateOk returns a tuple with the HoState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetHoStateOk() (*HoState, bool) {
	if o == nil || isNil(o.HoState) {
		return nil, false
	}
	return o.HoState, true
}

// HasHoState returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasHoState() bool {
	if o != nil && !isNil(o.HoState) {
		return true
	}

	return false
}

// SetHoState gets a reference to the given HoState and assigns it to the HoState field.
func (o *SmContextUpdateData) SetHoState(v HoState) {
	o.HoState = &v
}

// GetToBeSwitched returns the ToBeSwitched field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetToBeSwitched() bool {
	if o == nil || isNil(o.ToBeSwitched) {
		var ret bool
		return ret
	}
	return *o.ToBeSwitched
}

// GetToBeSwitchedOk returns a tuple with the ToBeSwitched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetToBeSwitchedOk() (*bool, bool) {
	if o == nil || isNil(o.ToBeSwitched) {
		return nil, false
	}
	return o.ToBeSwitched, true
}

// HasToBeSwitched returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasToBeSwitched() bool {
	if o != nil && !isNil(o.ToBeSwitched) {
		return true
	}

	return false
}

// SetToBeSwitched gets a reference to the given bool and assigns it to the ToBeSwitched field.
func (o *SmContextUpdateData) SetToBeSwitched(v bool) {
	o.ToBeSwitched = &v
}

// GetFailedToBeSwitched returns the FailedToBeSwitched field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetFailedToBeSwitched() bool {
	if o == nil || isNil(o.FailedToBeSwitched) {
		var ret bool
		return ret
	}
	return *o.FailedToBeSwitched
}

// GetFailedToBeSwitchedOk returns a tuple with the FailedToBeSwitched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetFailedToBeSwitchedOk() (*bool, bool) {
	if o == nil || isNil(o.FailedToBeSwitched) {
		return nil, false
	}
	return o.FailedToBeSwitched, true
}

// HasFailedToBeSwitched returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasFailedToBeSwitched() bool {
	if o != nil && !isNil(o.FailedToBeSwitched) {
		return true
	}

	return false
}

// SetFailedToBeSwitched gets a reference to the given bool and assigns it to the FailedToBeSwitched field.
func (o *SmContextUpdateData) SetFailedToBeSwitched(v bool) {
	o.FailedToBeSwitched = &v
}

// GetN1SmMsg returns the N1SmMsg field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN1SmMsg() RefToBinaryData {
	if o == nil || isNil(o.N1SmMsg) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N1SmMsg
}

// GetN1SmMsgOk returns a tuple with the N1SmMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN1SmMsgOk() (*RefToBinaryData, bool) {
	if o == nil || isNil(o.N1SmMsg) {
		return nil, false
	}
	return o.N1SmMsg, true
}

// HasN1SmMsg returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN1SmMsg() bool {
	if o != nil && !isNil(o.N1SmMsg) {
		return true
	}

	return false
}

// SetN1SmMsg gets a reference to the given RefToBinaryData and assigns it to the N1SmMsg field.
func (o *SmContextUpdateData) SetN1SmMsg(v RefToBinaryData) {
	o.N1SmMsg = &v
}

// GetN2SmInfo returns the N2SmInfo field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN2SmInfo() RefToBinaryData {
	if o == nil || isNil(o.N2SmInfo) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N2SmInfo
}

// GetN2SmInfoOk returns a tuple with the N2SmInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN2SmInfoOk() (*RefToBinaryData, bool) {
	if o == nil || isNil(o.N2SmInfo) {
		return nil, false
	}
	return o.N2SmInfo, true
}

// HasN2SmInfo returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN2SmInfo() bool {
	if o != nil && !isNil(o.N2SmInfo) {
		return true
	}

	return false
}

// SetN2SmInfo gets a reference to the given RefToBinaryData and assigns it to the N2SmInfo field.
func (o *SmContextUpdateData) SetN2SmInfo(v RefToBinaryData) {
	o.N2SmInfo = &v
}

// GetN2SmInfoType returns the N2SmInfoType field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN2SmInfoType() N2SmInfoType {
	if o == nil || isNil(o.N2SmInfoType) {
		var ret N2SmInfoType
		return ret
	}
	return *o.N2SmInfoType
}

// GetN2SmInfoTypeOk returns a tuple with the N2SmInfoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN2SmInfoTypeOk() (*N2SmInfoType, bool) {
	if o == nil || isNil(o.N2SmInfoType) {
		return nil, false
	}
	return o.N2SmInfoType, true
}

// HasN2SmInfoType returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN2SmInfoType() bool {
	if o != nil && !isNil(o.N2SmInfoType) {
		return true
	}

	return false
}

// SetN2SmInfoType gets a reference to the given N2SmInfoType and assigns it to the N2SmInfoType field.
func (o *SmContextUpdateData) SetN2SmInfoType(v N2SmInfoType) {
	o.N2SmInfoType = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetTargetId() NgRanTargetId {
	if o == nil || isNil(o.TargetId) {
		var ret NgRanTargetId
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetTargetIdOk() (*NgRanTargetId, bool) {
	if o == nil || isNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasTargetId() bool {
	if o != nil && !isNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given NgRanTargetId and assigns it to the TargetId field.
func (o *SmContextUpdateData) SetTargetId(v NgRanTargetId) {
	o.TargetId = &v
}

// GetTargetServingNfId returns the TargetServingNfId field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetTargetServingNfId() string {
	if o == nil || isNil(o.TargetServingNfId) {
		var ret string
		return ret
	}
	return *o.TargetServingNfId
}

// GetTargetServingNfIdOk returns a tuple with the TargetServingNfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetTargetServingNfIdOk() (*string, bool) {
	if o == nil || isNil(o.TargetServingNfId) {
		return nil, false
	}
	return o.TargetServingNfId, true
}

// HasTargetServingNfId returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasTargetServingNfId() bool {
	if o != nil && !isNil(o.TargetServingNfId) {
		return true
	}

	return false
}

// SetTargetServingNfId gets a reference to the given string and assigns it to the TargetServingNfId field.
func (o *SmContextUpdateData) SetTargetServingNfId(v string) {
	o.TargetServingNfId = &v
}

// GetSmContextStatusUri returns the SmContextStatusUri field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetSmContextStatusUri() string {
	if o == nil || isNil(o.SmContextStatusUri) {
		var ret string
		return ret
	}
	return *o.SmContextStatusUri
}

// GetSmContextStatusUriOk returns a tuple with the SmContextStatusUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetSmContextStatusUriOk() (*string, bool) {
	if o == nil || isNil(o.SmContextStatusUri) {
		return nil, false
	}
	return o.SmContextStatusUri, true
}

// HasSmContextStatusUri returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasSmContextStatusUri() bool {
	if o != nil && !isNil(o.SmContextStatusUri) {
		return true
	}

	return false
}

// SetSmContextStatusUri gets a reference to the given string and assigns it to the SmContextStatusUri field.
func (o *SmContextUpdateData) SetSmContextStatusUri(v string) {
	o.SmContextStatusUri = &v
}

// GetDataForwarding returns the DataForwarding field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetDataForwarding() bool {
	if o == nil || isNil(o.DataForwarding) {
		var ret bool
		return ret
	}
	return *o.DataForwarding
}

// GetDataForwardingOk returns a tuple with the DataForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetDataForwardingOk() (*bool, bool) {
	if o == nil || isNil(o.DataForwarding) {
		return nil, false
	}
	return o.DataForwarding, true
}

// HasDataForwarding returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasDataForwarding() bool {
	if o != nil && !isNil(o.DataForwarding) {
		return true
	}

	return false
}

// SetDataForwarding gets a reference to the given bool and assigns it to the DataForwarding field.
func (o *SmContextUpdateData) SetDataForwarding(v bool) {
	o.DataForwarding = &v
}

// GetN9ForwardingTunnel returns the N9ForwardingTunnel field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN9ForwardingTunnel() TunnelInfo {
	if o == nil || isNil(o.N9ForwardingTunnel) {
		var ret TunnelInfo
		return ret
	}
	return *o.N9ForwardingTunnel
}

// GetN9ForwardingTunnelOk returns a tuple with the N9ForwardingTunnel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN9ForwardingTunnelOk() (*TunnelInfo, bool) {
	if o == nil || isNil(o.N9ForwardingTunnel) {
		return nil, false
	}
	return o.N9ForwardingTunnel, true
}

// HasN9ForwardingTunnel returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN9ForwardingTunnel() bool {
	if o != nil && !isNil(o.N9ForwardingTunnel) {
		return true
	}

	return false
}

// SetN9ForwardingTunnel gets a reference to the given TunnelInfo and assigns it to the N9ForwardingTunnel field.
func (o *SmContextUpdateData) SetN9ForwardingTunnel(v TunnelInfo) {
	o.N9ForwardingTunnel = &v
}

// GetN9DlForwardingTnlList returns the N9DlForwardingTnlList field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN9DlForwardingTnlList() []IndirectDataForwardingTunnelInfo {
	if o == nil || isNil(o.N9DlForwardingTnlList) {
		var ret []IndirectDataForwardingTunnelInfo
		return ret
	}
	return o.N9DlForwardingTnlList
}

// GetN9DlForwardingTnlListOk returns a tuple with the N9DlForwardingTnlList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN9DlForwardingTnlListOk() ([]IndirectDataForwardingTunnelInfo, bool) {
	if o == nil || isNil(o.N9DlForwardingTnlList) {
		return nil, false
	}
	return o.N9DlForwardingTnlList, true
}

// HasN9DlForwardingTnlList returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN9DlForwardingTnlList() bool {
	if o != nil && !isNil(o.N9DlForwardingTnlList) {
		return true
	}

	return false
}

// SetN9DlForwardingTnlList gets a reference to the given []IndirectDataForwardingTunnelInfo and assigns it to the N9DlForwardingTnlList field.
func (o *SmContextUpdateData) SetN9DlForwardingTnlList(v []IndirectDataForwardingTunnelInfo) {
	o.N9DlForwardingTnlList = v
}

// GetN9UlForwardingTnlList returns the N9UlForwardingTnlList field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN9UlForwardingTnlList() []IndirectDataForwardingTunnelInfo {
	if o == nil || isNil(o.N9UlForwardingTnlList) {
		var ret []IndirectDataForwardingTunnelInfo
		return ret
	}
	return o.N9UlForwardingTnlList
}

// GetN9UlForwardingTnlListOk returns a tuple with the N9UlForwardingTnlList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN9UlForwardingTnlListOk() ([]IndirectDataForwardingTunnelInfo, bool) {
	if o == nil || isNil(o.N9UlForwardingTnlList) {
		return nil, false
	}
	return o.N9UlForwardingTnlList, true
}

// HasN9UlForwardingTnlList returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN9UlForwardingTnlList() bool {
	if o != nil && !isNil(o.N9UlForwardingTnlList) {
		return true
	}

	return false
}

// SetN9UlForwardingTnlList gets a reference to the given []IndirectDataForwardingTunnelInfo and assigns it to the N9UlForwardingTnlList field.
func (o *SmContextUpdateData) SetN9UlForwardingTnlList(v []IndirectDataForwardingTunnelInfo) {
	o.N9UlForwardingTnlList = v
}

// GetN9DlForwardingTunnel returns the N9DlForwardingTunnel field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN9DlForwardingTunnel() TunnelInfo {
	if o == nil || isNil(o.N9DlForwardingTunnel) {
		var ret TunnelInfo
		return ret
	}
	return *o.N9DlForwardingTunnel
}

// GetN9DlForwardingTunnelOk returns a tuple with the N9DlForwardingTunnel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN9DlForwardingTunnelOk() (*TunnelInfo, bool) {
	if o == nil || isNil(o.N9DlForwardingTunnel) {
		return nil, false
	}
	return o.N9DlForwardingTunnel, true
}

// HasN9DlForwardingTunnel returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN9DlForwardingTunnel() bool {
	if o != nil && !isNil(o.N9DlForwardingTunnel) {
		return true
	}

	return false
}

// SetN9DlForwardingTunnel gets a reference to the given TunnelInfo and assigns it to the N9DlForwardingTunnel field.
func (o *SmContextUpdateData) SetN9DlForwardingTunnel(v TunnelInfo) {
	o.N9DlForwardingTunnel = &v
}

// GetN9InactivityTimer returns the N9InactivityTimer field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN9InactivityTimer() int32 {
	if o == nil || isNil(o.N9InactivityTimer) {
		var ret int32
		return ret
	}
	return *o.N9InactivityTimer
}

// GetN9InactivityTimerOk returns a tuple with the N9InactivityTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN9InactivityTimerOk() (*int32, bool) {
	if o == nil || isNil(o.N9InactivityTimer) {
		return nil, false
	}
	return o.N9InactivityTimer, true
}

// HasN9InactivityTimer returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN9InactivityTimer() bool {
	if o != nil && !isNil(o.N9InactivityTimer) {
		return true
	}

	return false
}

// SetN9InactivityTimer gets a reference to the given int32 and assigns it to the N9InactivityTimer field.
func (o *SmContextUpdateData) SetN9InactivityTimer(v int32) {
	o.N9InactivityTimer = &v
}

// GetEpsBearerSetup returns the EpsBearerSetup field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetEpsBearerSetup() []string {
	if o == nil || isNil(o.EpsBearerSetup) {
		var ret []string
		return ret
	}
	return o.EpsBearerSetup
}

// GetEpsBearerSetupOk returns a tuple with the EpsBearerSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetEpsBearerSetupOk() ([]string, bool) {
	if o == nil || isNil(o.EpsBearerSetup) {
		return nil, false
	}
	return o.EpsBearerSetup, true
}

// HasEpsBearerSetup returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasEpsBearerSetup() bool {
	if o != nil && !isNil(o.EpsBearerSetup) {
		return true
	}

	return false
}

// SetEpsBearerSetup gets a reference to the given []string and assigns it to the EpsBearerSetup field.
func (o *SmContextUpdateData) SetEpsBearerSetup(v []string) {
	o.EpsBearerSetup = v
}

// GetRevokeEbiList returns the RevokeEbiList field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetRevokeEbiList() []int32 {
	if o == nil || isNil(o.RevokeEbiList) {
		var ret []int32
		return ret
	}
	return o.RevokeEbiList
}

// GetRevokeEbiListOk returns a tuple with the RevokeEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetRevokeEbiListOk() ([]int32, bool) {
	if o == nil || isNil(o.RevokeEbiList) {
		return nil, false
	}
	return o.RevokeEbiList, true
}

// HasRevokeEbiList returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasRevokeEbiList() bool {
	if o != nil && !isNil(o.RevokeEbiList) {
		return true
	}

	return false
}

// SetRevokeEbiList gets a reference to the given []int32 and assigns it to the RevokeEbiList field.
func (o *SmContextUpdateData) SetRevokeEbiList(v []int32) {
	o.RevokeEbiList = v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetRelease() bool {
	if o == nil || isNil(o.Release) {
		var ret bool
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetReleaseOk() (*bool, bool) {
	if o == nil || isNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasRelease() bool {
	if o != nil && !isNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given bool and assigns it to the Release field.
func (o *SmContextUpdateData) SetRelease(v bool) {
	o.Release = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetCause() Cause {
	if o == nil || isNil(o.Cause) {
		var ret Cause
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetCauseOk() (*Cause, bool) {
	if o == nil || isNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasCause() bool {
	if o != nil && !isNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given Cause and assigns it to the Cause field.
func (o *SmContextUpdateData) SetCause(v Cause) {
	o.Cause = &v
}

// GetNgApCause returns the NgApCause field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetNgApCause() NgApCause {
	if o == nil || isNil(o.NgApCause) {
		var ret NgApCause
		return ret
	}
	return *o.NgApCause
}

// GetNgApCauseOk returns a tuple with the NgApCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetNgApCauseOk() (*NgApCause, bool) {
	if o == nil || isNil(o.NgApCause) {
		return nil, false
	}
	return o.NgApCause, true
}

// HasNgApCause returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasNgApCause() bool {
	if o != nil && !isNil(o.NgApCause) {
		return true
	}

	return false
}

// SetNgApCause gets a reference to the given NgApCause and assigns it to the NgApCause field.
func (o *SmContextUpdateData) SetNgApCause(v NgApCause) {
	o.NgApCause = &v
}

// GetVar5gMmCauseValue returns the Var5gMmCauseValue field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetVar5gMmCauseValue() int32 {
	if o == nil || isNil(o.Var5gMmCauseValue) {
		var ret int32
		return ret
	}
	return *o.Var5gMmCauseValue
}

// GetVar5gMmCauseValueOk returns a tuple with the Var5gMmCauseValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetVar5gMmCauseValueOk() (*int32, bool) {
	if o == nil || isNil(o.Var5gMmCauseValue) {
		return nil, false
	}
	return o.Var5gMmCauseValue, true
}

// HasVar5gMmCauseValue returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasVar5gMmCauseValue() bool {
	if o != nil && !isNil(o.Var5gMmCauseValue) {
		return true
	}

	return false
}

// SetVar5gMmCauseValue gets a reference to the given int32 and assigns it to the Var5gMmCauseValue field.
func (o *SmContextUpdateData) SetVar5gMmCauseValue(v int32) {
	o.Var5gMmCauseValue = &v
}

// GetSNssai returns the SNssai field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetSNssai() Snssai {
	if o == nil || isNil(o.SNssai) {
		var ret Snssai
		return ret
	}
	return *o.SNssai
}

// GetSNssaiOk returns a tuple with the SNssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetSNssaiOk() (*Snssai, bool) {
	if o == nil || isNil(o.SNssai) {
		return nil, false
	}
	return o.SNssai, true
}

// HasSNssai returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasSNssai() bool {
	if o != nil && !isNil(o.SNssai) {
		return true
	}

	return false
}

// SetSNssai gets a reference to the given Snssai and assigns it to the SNssai field.
func (o *SmContextUpdateData) SetSNssai(v Snssai) {
	o.SNssai = &v
}

// GetTraceData returns the TraceData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmContextUpdateData) GetTraceData() TraceData {
	if o == nil || isNil(o.TraceData.Get()) {
		var ret TraceData
		return ret
	}
	return *o.TraceData.Get()
}

// GetTraceDataOk returns a tuple with the TraceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmContextUpdateData) GetTraceDataOk() (*TraceData, bool) {
	if o == nil {
		return nil, false
	}
	return o.TraceData.Get(), o.TraceData.IsSet()
}

// HasTraceData returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasTraceData() bool {
	if o != nil && o.TraceData.IsSet() {
		return true
	}

	return false
}

// SetTraceData gets a reference to the given NullableTraceData and assigns it to the TraceData field.
func (o *SmContextUpdateData) SetTraceData(v TraceData) {
	o.TraceData.Set(&v)
}
// SetTraceDataNil sets the value for TraceData to be an explicit nil
func (o *SmContextUpdateData) SetTraceDataNil() {
	o.TraceData.Set(nil)
}

// UnsetTraceData ensures that no value is present for TraceData, not even an explicit nil
func (o *SmContextUpdateData) UnsetTraceData() {
	o.TraceData.Unset()
}

// GetEpsInterworkingInd returns the EpsInterworkingInd field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetEpsInterworkingInd() EpsInterworkingIndication {
	if o == nil || isNil(o.EpsInterworkingInd) {
		var ret EpsInterworkingIndication
		return ret
	}
	return *o.EpsInterworkingInd
}

// GetEpsInterworkingIndOk returns a tuple with the EpsInterworkingInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetEpsInterworkingIndOk() (*EpsInterworkingIndication, bool) {
	if o == nil || isNil(o.EpsInterworkingInd) {
		return nil, false
	}
	return o.EpsInterworkingInd, true
}

// HasEpsInterworkingInd returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasEpsInterworkingInd() bool {
	if o != nil && !isNil(o.EpsInterworkingInd) {
		return true
	}

	return false
}

// SetEpsInterworkingInd gets a reference to the given EpsInterworkingIndication and assigns it to the EpsInterworkingInd field.
func (o *SmContextUpdateData) SetEpsInterworkingInd(v EpsInterworkingIndication) {
	o.EpsInterworkingInd = &v
}

// GetAnTypeCanBeChanged returns the AnTypeCanBeChanged field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetAnTypeCanBeChanged() bool {
	if o == nil || isNil(o.AnTypeCanBeChanged) {
		var ret bool
		return ret
	}
	return *o.AnTypeCanBeChanged
}

// GetAnTypeCanBeChangedOk returns a tuple with the AnTypeCanBeChanged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetAnTypeCanBeChangedOk() (*bool, bool) {
	if o == nil || isNil(o.AnTypeCanBeChanged) {
		return nil, false
	}
	return o.AnTypeCanBeChanged, true
}

// HasAnTypeCanBeChanged returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasAnTypeCanBeChanged() bool {
	if o != nil && !isNil(o.AnTypeCanBeChanged) {
		return true
	}

	return false
}

// SetAnTypeCanBeChanged gets a reference to the given bool and assigns it to the AnTypeCanBeChanged field.
func (o *SmContextUpdateData) SetAnTypeCanBeChanged(v bool) {
	o.AnTypeCanBeChanged = &v
}

// GetN2SmInfoExt1 returns the N2SmInfoExt1 field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN2SmInfoExt1() RefToBinaryData {
	if o == nil || isNil(o.N2SmInfoExt1) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N2SmInfoExt1
}

// GetN2SmInfoExt1Ok returns a tuple with the N2SmInfoExt1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN2SmInfoExt1Ok() (*RefToBinaryData, bool) {
	if o == nil || isNil(o.N2SmInfoExt1) {
		return nil, false
	}
	return o.N2SmInfoExt1, true
}

// HasN2SmInfoExt1 returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN2SmInfoExt1() bool {
	if o != nil && !isNil(o.N2SmInfoExt1) {
		return true
	}

	return false
}

// SetN2SmInfoExt1 gets a reference to the given RefToBinaryData and assigns it to the N2SmInfoExt1 field.
func (o *SmContextUpdateData) SetN2SmInfoExt1(v RefToBinaryData) {
	o.N2SmInfoExt1 = &v
}

// GetN2SmInfoTypeExt1 returns the N2SmInfoTypeExt1 field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN2SmInfoTypeExt1() N2SmInfoType {
	if o == nil || isNil(o.N2SmInfoTypeExt1) {
		var ret N2SmInfoType
		return ret
	}
	return *o.N2SmInfoTypeExt1
}

// GetN2SmInfoTypeExt1Ok returns a tuple with the N2SmInfoTypeExt1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN2SmInfoTypeExt1Ok() (*N2SmInfoType, bool) {
	if o == nil || isNil(o.N2SmInfoTypeExt1) {
		return nil, false
	}
	return o.N2SmInfoTypeExt1, true
}

// HasN2SmInfoTypeExt1 returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN2SmInfoTypeExt1() bool {
	if o != nil && !isNil(o.N2SmInfoTypeExt1) {
		return true
	}

	return false
}

// SetN2SmInfoTypeExt1 gets a reference to the given N2SmInfoType and assigns it to the N2SmInfoTypeExt1 field.
func (o *SmContextUpdateData) SetN2SmInfoTypeExt1(v N2SmInfoType) {
	o.N2SmInfoTypeExt1 = &v
}

// GetMaReleaseInd returns the MaReleaseInd field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetMaReleaseInd() MaReleaseIndication {
	if o == nil || isNil(o.MaReleaseInd) {
		var ret MaReleaseIndication
		return ret
	}
	return *o.MaReleaseInd
}

// GetMaReleaseIndOk returns a tuple with the MaReleaseInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetMaReleaseIndOk() (*MaReleaseIndication, bool) {
	if o == nil || isNil(o.MaReleaseInd) {
		return nil, false
	}
	return o.MaReleaseInd, true
}

// HasMaReleaseInd returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasMaReleaseInd() bool {
	if o != nil && !isNil(o.MaReleaseInd) {
		return true
	}

	return false
}

// SetMaReleaseInd gets a reference to the given MaReleaseIndication and assigns it to the MaReleaseInd field.
func (o *SmContextUpdateData) SetMaReleaseInd(v MaReleaseIndication) {
	o.MaReleaseInd = &v
}

// GetMaNwUpgradeInd returns the MaNwUpgradeInd field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetMaNwUpgradeInd() bool {
	if o == nil || isNil(o.MaNwUpgradeInd) {
		var ret bool
		return ret
	}
	return *o.MaNwUpgradeInd
}

// GetMaNwUpgradeIndOk returns a tuple with the MaNwUpgradeInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetMaNwUpgradeIndOk() (*bool, bool) {
	if o == nil || isNil(o.MaNwUpgradeInd) {
		return nil, false
	}
	return o.MaNwUpgradeInd, true
}

// HasMaNwUpgradeInd returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasMaNwUpgradeInd() bool {
	if o != nil && !isNil(o.MaNwUpgradeInd) {
		return true
	}

	return false
}

// SetMaNwUpgradeInd gets a reference to the given bool and assigns it to the MaNwUpgradeInd field.
func (o *SmContextUpdateData) SetMaNwUpgradeInd(v bool) {
	o.MaNwUpgradeInd = &v
}

// GetMaRequestInd returns the MaRequestInd field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetMaRequestInd() bool {
	if o == nil || isNil(o.MaRequestInd) {
		var ret bool
		return ret
	}
	return *o.MaRequestInd
}

// GetMaRequestIndOk returns a tuple with the MaRequestInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetMaRequestIndOk() (*bool, bool) {
	if o == nil || isNil(o.MaRequestInd) {
		return nil, false
	}
	return o.MaRequestInd, true
}

// HasMaRequestInd returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasMaRequestInd() bool {
	if o != nil && !isNil(o.MaRequestInd) {
		return true
	}

	return false
}

// SetMaRequestInd gets a reference to the given bool and assigns it to the MaRequestInd field.
func (o *SmContextUpdateData) SetMaRequestInd(v bool) {
	o.MaRequestInd = &v
}

// GetExemptionInd returns the ExemptionInd field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetExemptionInd() ExemptionInd {
	if o == nil || isNil(o.ExemptionInd) {
		var ret ExemptionInd
		return ret
	}
	return *o.ExemptionInd
}

// GetExemptionIndOk returns a tuple with the ExemptionInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetExemptionIndOk() (*ExemptionInd, bool) {
	if o == nil || isNil(o.ExemptionInd) {
		return nil, false
	}
	return o.ExemptionInd, true
}

// HasExemptionInd returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasExemptionInd() bool {
	if o != nil && !isNil(o.ExemptionInd) {
		return true
	}

	return false
}

// SetExemptionInd gets a reference to the given ExemptionInd and assigns it to the ExemptionInd field.
func (o *SmContextUpdateData) SetExemptionInd(v ExemptionInd) {
	o.ExemptionInd = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetSupportedFeatures() string {
	if o == nil || isNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || isNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasSupportedFeatures() bool {
	if o != nil && !isNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *SmContextUpdateData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetMoExpDataCounter returns the MoExpDataCounter field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetMoExpDataCounter() MoExpDataCounter {
	if o == nil || isNil(o.MoExpDataCounter) {
		var ret MoExpDataCounter
		return ret
	}
	return *o.MoExpDataCounter
}

// GetMoExpDataCounterOk returns a tuple with the MoExpDataCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetMoExpDataCounterOk() (*MoExpDataCounter, bool) {
	if o == nil || isNil(o.MoExpDataCounter) {
		return nil, false
	}
	return o.MoExpDataCounter, true
}

// HasMoExpDataCounter returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasMoExpDataCounter() bool {
	if o != nil && !isNil(o.MoExpDataCounter) {
		return true
	}

	return false
}

// SetMoExpDataCounter gets a reference to the given MoExpDataCounter and assigns it to the MoExpDataCounter field.
func (o *SmContextUpdateData) SetMoExpDataCounter(v MoExpDataCounter) {
	o.MoExpDataCounter = &v
}

// GetExtendedNasSmTimerInd returns the ExtendedNasSmTimerInd field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetExtendedNasSmTimerInd() bool {
	if o == nil || isNil(o.ExtendedNasSmTimerInd) {
		var ret bool
		return ret
	}
	return *o.ExtendedNasSmTimerInd
}

// GetExtendedNasSmTimerIndOk returns a tuple with the ExtendedNasSmTimerInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetExtendedNasSmTimerIndOk() (*bool, bool) {
	if o == nil || isNil(o.ExtendedNasSmTimerInd) {
		return nil, false
	}
	return o.ExtendedNasSmTimerInd, true
}

// HasExtendedNasSmTimerInd returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasExtendedNasSmTimerInd() bool {
	if o != nil && !isNil(o.ExtendedNasSmTimerInd) {
		return true
	}

	return false
}

// SetExtendedNasSmTimerInd gets a reference to the given bool and assigns it to the ExtendedNasSmTimerInd field.
func (o *SmContextUpdateData) SetExtendedNasSmTimerInd(v bool) {
	o.ExtendedNasSmTimerInd = &v
}

// GetForwardingFTeid returns the ForwardingFTeid field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetForwardingFTeid() string {
	if o == nil || isNil(o.ForwardingFTeid) {
		var ret string
		return ret
	}
	return *o.ForwardingFTeid
}

// GetForwardingFTeidOk returns a tuple with the ForwardingFTeid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetForwardingFTeidOk() (*string, bool) {
	if o == nil || isNil(o.ForwardingFTeid) {
		return nil, false
	}
	return o.ForwardingFTeid, true
}

// HasForwardingFTeid returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasForwardingFTeid() bool {
	if o != nil && !isNil(o.ForwardingFTeid) {
		return true
	}

	return false
}

// SetForwardingFTeid gets a reference to the given string and assigns it to the ForwardingFTeid field.
func (o *SmContextUpdateData) SetForwardingFTeid(v string) {
	o.ForwardingFTeid = &v
}

// GetForwardingBearerContexts returns the ForwardingBearerContexts field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetForwardingBearerContexts() []string {
	if o == nil || isNil(o.ForwardingBearerContexts) {
		var ret []string
		return ret
	}
	return o.ForwardingBearerContexts
}

// GetForwardingBearerContextsOk returns a tuple with the ForwardingBearerContexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetForwardingBearerContextsOk() ([]string, bool) {
	if o == nil || isNil(o.ForwardingBearerContexts) {
		return nil, false
	}
	return o.ForwardingBearerContexts, true
}

// HasForwardingBearerContexts returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasForwardingBearerContexts() bool {
	if o != nil && !isNil(o.ForwardingBearerContexts) {
		return true
	}

	return false
}

// SetForwardingBearerContexts gets a reference to the given []string and assigns it to the ForwardingBearerContexts field.
func (o *SmContextUpdateData) SetForwardingBearerContexts(v []string) {
	o.ForwardingBearerContexts = v
}

// GetDdnFailureSubs returns the DdnFailureSubs field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetDdnFailureSubs() DdnFailureSubs {
	if o == nil || isNil(o.DdnFailureSubs) {
		var ret DdnFailureSubs
		return ret
	}
	return *o.DdnFailureSubs
}

// GetDdnFailureSubsOk returns a tuple with the DdnFailureSubs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetDdnFailureSubsOk() (*DdnFailureSubs, bool) {
	if o == nil || isNil(o.DdnFailureSubs) {
		return nil, false
	}
	return o.DdnFailureSubs, true
}

// HasDdnFailureSubs returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasDdnFailureSubs() bool {
	if o != nil && !isNil(o.DdnFailureSubs) {
		return true
	}

	return false
}

// SetDdnFailureSubs gets a reference to the given DdnFailureSubs and assigns it to the DdnFailureSubs field.
func (o *SmContextUpdateData) SetDdnFailureSubs(v DdnFailureSubs) {
	o.DdnFailureSubs = &v
}

// GetSkipN2PduSessionResRelInd returns the SkipN2PduSessionResRelInd field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetSkipN2PduSessionResRelInd() bool {
	if o == nil || isNil(o.SkipN2PduSessionResRelInd) {
		var ret bool
		return ret
	}
	return *o.SkipN2PduSessionResRelInd
}

// GetSkipN2PduSessionResRelIndOk returns a tuple with the SkipN2PduSessionResRelInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetSkipN2PduSessionResRelIndOk() (*bool, bool) {
	if o == nil || isNil(o.SkipN2PduSessionResRelInd) {
		return nil, false
	}
	return o.SkipN2PduSessionResRelInd, true
}

// HasSkipN2PduSessionResRelInd returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasSkipN2PduSessionResRelInd() bool {
	if o != nil && !isNil(o.SkipN2PduSessionResRelInd) {
		return true
	}

	return false
}

// SetSkipN2PduSessionResRelInd gets a reference to the given bool and assigns it to the SkipN2PduSessionResRelInd field.
func (o *SmContextUpdateData) SetSkipN2PduSessionResRelInd(v bool) {
	o.SkipN2PduSessionResRelInd = &v
}

// GetSecondaryRatUsageDataReportContainer returns the SecondaryRatUsageDataReportContainer field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetSecondaryRatUsageDataReportContainer() []string {
	if o == nil || isNil(o.SecondaryRatUsageDataReportContainer) {
		var ret []string
		return ret
	}
	return o.SecondaryRatUsageDataReportContainer
}

// GetSecondaryRatUsageDataReportContainerOk returns a tuple with the SecondaryRatUsageDataReportContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetSecondaryRatUsageDataReportContainerOk() ([]string, bool) {
	if o == nil || isNil(o.SecondaryRatUsageDataReportContainer) {
		return nil, false
	}
	return o.SecondaryRatUsageDataReportContainer, true
}

// HasSecondaryRatUsageDataReportContainer returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasSecondaryRatUsageDataReportContainer() bool {
	if o != nil && !isNil(o.SecondaryRatUsageDataReportContainer) {
		return true
	}

	return false
}

// SetSecondaryRatUsageDataReportContainer gets a reference to the given []string and assigns it to the SecondaryRatUsageDataReportContainer field.
func (o *SmContextUpdateData) SetSecondaryRatUsageDataReportContainer(v []string) {
	o.SecondaryRatUsageDataReportContainer = v
}

// GetSmPolicyNotifyInd returns the SmPolicyNotifyInd field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetSmPolicyNotifyInd() bool {
	if o == nil || isNil(o.SmPolicyNotifyInd) {
		var ret bool
		return ret
	}
	return *o.SmPolicyNotifyInd
}

// GetSmPolicyNotifyIndOk returns a tuple with the SmPolicyNotifyInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetSmPolicyNotifyIndOk() (*bool, bool) {
	if o == nil || isNil(o.SmPolicyNotifyInd) {
		return nil, false
	}
	return o.SmPolicyNotifyInd, true
}

// HasSmPolicyNotifyInd returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasSmPolicyNotifyInd() bool {
	if o != nil && !isNil(o.SmPolicyNotifyInd) {
		return true
	}

	return false
}

// SetSmPolicyNotifyInd gets a reference to the given bool and assigns it to the SmPolicyNotifyInd field.
func (o *SmContextUpdateData) SetSmPolicyNotifyInd(v bool) {
	o.SmPolicyNotifyInd = &v
}

// GetPcfUeCallbackInfo returns the PcfUeCallbackInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmContextUpdateData) GetPcfUeCallbackInfo() PcfUeCallbackInfo {
	if o == nil || isNil(o.PcfUeCallbackInfo.Get()) {
		var ret PcfUeCallbackInfo
		return ret
	}
	return *o.PcfUeCallbackInfo.Get()
}

// GetPcfUeCallbackInfoOk returns a tuple with the PcfUeCallbackInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmContextUpdateData) GetPcfUeCallbackInfoOk() (*PcfUeCallbackInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.PcfUeCallbackInfo.Get(), o.PcfUeCallbackInfo.IsSet()
}

// HasPcfUeCallbackInfo returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasPcfUeCallbackInfo() bool {
	if o != nil && o.PcfUeCallbackInfo.IsSet() {
		return true
	}

	return false
}

// SetPcfUeCallbackInfo gets a reference to the given NullablePcfUeCallbackInfo and assigns it to the PcfUeCallbackInfo field.
func (o *SmContextUpdateData) SetPcfUeCallbackInfo(v PcfUeCallbackInfo) {
	o.PcfUeCallbackInfo.Set(&v)
}
// SetPcfUeCallbackInfoNil sets the value for PcfUeCallbackInfo to be an explicit nil
func (o *SmContextUpdateData) SetPcfUeCallbackInfoNil() {
	o.PcfUeCallbackInfo.Set(nil)
}

// UnsetPcfUeCallbackInfo ensures that no value is present for PcfUeCallbackInfo, not even an explicit nil
func (o *SmContextUpdateData) UnsetPcfUeCallbackInfo() {
	o.PcfUeCallbackInfo.Unset()
}

// GetSatelliteBackhaulCat returns the SatelliteBackhaulCat field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetSatelliteBackhaulCat() SatelliteBackhaulCategory {
	if o == nil || isNil(o.SatelliteBackhaulCat) {
		var ret SatelliteBackhaulCategory
		return ret
	}
	return *o.SatelliteBackhaulCat
}

// GetSatelliteBackhaulCatOk returns a tuple with the SatelliteBackhaulCat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetSatelliteBackhaulCatOk() (*SatelliteBackhaulCategory, bool) {
	if o == nil || isNil(o.SatelliteBackhaulCat) {
		return nil, false
	}
	return o.SatelliteBackhaulCat, true
}

// HasSatelliteBackhaulCat returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasSatelliteBackhaulCat() bool {
	if o != nil && !isNil(o.SatelliteBackhaulCat) {
		return true
	}

	return false
}

// SetSatelliteBackhaulCat gets a reference to the given SatelliteBackhaulCategory and assigns it to the SatelliteBackhaulCat field.
func (o *SmContextUpdateData) SetSatelliteBackhaulCat(v SatelliteBackhaulCategory) {
	o.SatelliteBackhaulCat = &v
}

// GetCnBasedMt returns the CnBasedMt field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetCnBasedMt() bool {
	if o == nil || isNil(o.CnBasedMt) {
		var ret bool
		return ret
	}
	return *o.CnBasedMt
}

// GetCnBasedMtOk returns a tuple with the CnBasedMt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetCnBasedMtOk() (*bool, bool) {
	if o == nil || isNil(o.CnBasedMt) {
		return nil, false
	}
	return o.CnBasedMt, true
}

// HasCnBasedMt returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasCnBasedMt() bool {
	if o != nil && !isNil(o.CnBasedMt) {
		return true
	}

	return false
}

// SetCnBasedMt gets a reference to the given bool and assigns it to the CnBasedMt field.
func (o *SmContextUpdateData) SetCnBasedMt(v bool) {
	o.CnBasedMt = &v
}

func (o SmContextUpdateData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmContextUpdateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Pei) {
		toSerialize["pei"] = o.Pei
	}
	if !isNil(o.ServingNfId) {
		toSerialize["servingNfId"] = o.ServingNfId
	}
	if !isNil(o.Guami) {
		toSerialize["guami"] = o.Guami
	}
	if !isNil(o.ServingNetwork) {
		toSerialize["servingNetwork"] = o.ServingNetwork
	}
	if o.BackupAmfInfo != nil {
		toSerialize["backupAmfInfo"] = o.BackupAmfInfo
	}
	if !isNil(o.AnType) {
		toSerialize["anType"] = o.AnType
	}
	if !isNil(o.AdditionalAnType) {
		toSerialize["additionalAnType"] = o.AdditionalAnType
	}
	if !isNil(o.AnTypeToReactivate) {
		toSerialize["anTypeToReactivate"] = o.AnTypeToReactivate
	}
	if !isNil(o.RatType) {
		toSerialize["ratType"] = o.RatType
	}
	if !isNil(o.PresenceInLadn) {
		toSerialize["presenceInLadn"] = o.PresenceInLadn
	}
	if !isNil(o.UeLocation) {
		toSerialize["ueLocation"] = o.UeLocation
	}
	if !isNil(o.UeTimeZone) {
		toSerialize["ueTimeZone"] = o.UeTimeZone
	}
	if !isNil(o.AddUeLocation) {
		toSerialize["addUeLocation"] = o.AddUeLocation
	}
	if !isNil(o.UpCnxState) {
		toSerialize["upCnxState"] = o.UpCnxState
	}
	if !isNil(o.HoState) {
		toSerialize["hoState"] = o.HoState
	}
	if !isNil(o.ToBeSwitched) {
		toSerialize["toBeSwitched"] = o.ToBeSwitched
	}
	if !isNil(o.FailedToBeSwitched) {
		toSerialize["failedToBeSwitched"] = o.FailedToBeSwitched
	}
	if !isNil(o.N1SmMsg) {
		toSerialize["n1SmMsg"] = o.N1SmMsg
	}
	if !isNil(o.N2SmInfo) {
		toSerialize["n2SmInfo"] = o.N2SmInfo
	}
	if !isNil(o.N2SmInfoType) {
		toSerialize["n2SmInfoType"] = o.N2SmInfoType
	}
	if !isNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !isNil(o.TargetServingNfId) {
		toSerialize["targetServingNfId"] = o.TargetServingNfId
	}
	if !isNil(o.SmContextStatusUri) {
		toSerialize["smContextStatusUri"] = o.SmContextStatusUri
	}
	if !isNil(o.DataForwarding) {
		toSerialize["dataForwarding"] = o.DataForwarding
	}
	if !isNil(o.N9ForwardingTunnel) {
		toSerialize["n9ForwardingTunnel"] = o.N9ForwardingTunnel
	}
	if !isNil(o.N9DlForwardingTnlList) {
		toSerialize["n9DlForwardingTnlList"] = o.N9DlForwardingTnlList
	}
	if !isNil(o.N9UlForwardingTnlList) {
		toSerialize["n9UlForwardingTnlList"] = o.N9UlForwardingTnlList
	}
	if !isNil(o.N9DlForwardingTunnel) {
		toSerialize["n9DlForwardingTunnel"] = o.N9DlForwardingTunnel
	}
	if !isNil(o.N9InactivityTimer) {
		toSerialize["n9InactivityTimer"] = o.N9InactivityTimer
	}
	if !isNil(o.EpsBearerSetup) {
		toSerialize["epsBearerSetup"] = o.EpsBearerSetup
	}
	if !isNil(o.RevokeEbiList) {
		toSerialize["revokeEbiList"] = o.RevokeEbiList
	}
	if !isNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !isNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !isNil(o.NgApCause) {
		toSerialize["ngApCause"] = o.NgApCause
	}
	if !isNil(o.Var5gMmCauseValue) {
		toSerialize["5gMmCauseValue"] = o.Var5gMmCauseValue
	}
	if !isNil(o.SNssai) {
		toSerialize["sNssai"] = o.SNssai
	}
	if o.TraceData.IsSet() {
		toSerialize["traceData"] = o.TraceData.Get()
	}
	if !isNil(o.EpsInterworkingInd) {
		toSerialize["epsInterworkingInd"] = o.EpsInterworkingInd
	}
	if !isNil(o.AnTypeCanBeChanged) {
		toSerialize["anTypeCanBeChanged"] = o.AnTypeCanBeChanged
	}
	if !isNil(o.N2SmInfoExt1) {
		toSerialize["n2SmInfoExt1"] = o.N2SmInfoExt1
	}
	if !isNil(o.N2SmInfoTypeExt1) {
		toSerialize["n2SmInfoTypeExt1"] = o.N2SmInfoTypeExt1
	}
	if !isNil(o.MaReleaseInd) {
		toSerialize["maReleaseInd"] = o.MaReleaseInd
	}
	if !isNil(o.MaNwUpgradeInd) {
		toSerialize["maNwUpgradeInd"] = o.MaNwUpgradeInd
	}
	if !isNil(o.MaRequestInd) {
		toSerialize["maRequestInd"] = o.MaRequestInd
	}
	if !isNil(o.ExemptionInd) {
		toSerialize["exemptionInd"] = o.ExemptionInd
	}
	if !isNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !isNil(o.MoExpDataCounter) {
		toSerialize["moExpDataCounter"] = o.MoExpDataCounter
	}
	if !isNil(o.ExtendedNasSmTimerInd) {
		toSerialize["extendedNasSmTimerInd"] = o.ExtendedNasSmTimerInd
	}
	if !isNil(o.ForwardingFTeid) {
		toSerialize["forwardingFTeid"] = o.ForwardingFTeid
	}
	if !isNil(o.ForwardingBearerContexts) {
		toSerialize["forwardingBearerContexts"] = o.ForwardingBearerContexts
	}
	if !isNil(o.DdnFailureSubs) {
		toSerialize["ddnFailureSubs"] = o.DdnFailureSubs
	}
	if !isNil(o.SkipN2PduSessionResRelInd) {
		toSerialize["skipN2PduSessionResRelInd"] = o.SkipN2PduSessionResRelInd
	}
	if !isNil(o.SecondaryRatUsageDataReportContainer) {
		toSerialize["secondaryRatUsageDataReportContainer"] = o.SecondaryRatUsageDataReportContainer
	}
	if !isNil(o.SmPolicyNotifyInd) {
		toSerialize["smPolicyNotifyInd"] = o.SmPolicyNotifyInd
	}
	if o.PcfUeCallbackInfo.IsSet() {
		toSerialize["pcfUeCallbackInfo"] = o.PcfUeCallbackInfo.Get()
	}
	if !isNil(o.SatelliteBackhaulCat) {
		toSerialize["satelliteBackhaulCat"] = o.SatelliteBackhaulCat
	}
	if !isNil(o.CnBasedMt) {
		toSerialize["cnBasedMt"] = o.CnBasedMt
	}
	return toSerialize, nil
}

type NullableSmContextUpdateData struct {
	value *SmContextUpdateData
	isSet bool
}

func (v NullableSmContextUpdateData) Get() *SmContextUpdateData {
	return v.value
}

func (v *NullableSmContextUpdateData) Set(val *SmContextUpdateData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmContextUpdateData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmContextUpdateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmContextUpdateData(val *SmContextUpdateData) *NullableSmContextUpdateData {
	return &NullableSmContextUpdateData{value: val, isSet: true}
}

func (v NullableSmContextUpdateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmContextUpdateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


