/*
Nsmf_PDUSession

SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
	"fmt"
)

// QosFlowAccessTypeAnyOf the model 'QosFlowAccessTypeAnyOf'
type QosFlowAccessTypeAnyOf string

// List of QosFlowAccessType_anyOf
const (
	_3_GPP QosFlowAccessTypeAnyOf = "3GPP"
	NON_3_GPP QosFlowAccessTypeAnyOf = "NON_3GPP"
	_3_GPP_AND_NON_3_GPP QosFlowAccessTypeAnyOf = "3GPP_AND_NON_3GPP"
)

// All allowed values of QosFlowAccessTypeAnyOf enum
var AllowedQosFlowAccessTypeAnyOfEnumValues = []QosFlowAccessTypeAnyOf{
	"3GPP",
	"NON_3GPP",
	"3GPP_AND_NON_3GPP",
}

func (v *QosFlowAccessTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QosFlowAccessTypeAnyOf(value)
	for _, existing := range AllowedQosFlowAccessTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QosFlowAccessTypeAnyOf", value)
}

// NewQosFlowAccessTypeAnyOfFromValue returns a pointer to a valid QosFlowAccessTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQosFlowAccessTypeAnyOfFromValue(v string) (*QosFlowAccessTypeAnyOf, error) {
	ev := QosFlowAccessTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QosFlowAccessTypeAnyOf: valid values are %v", v, AllowedQosFlowAccessTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QosFlowAccessTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedQosFlowAccessTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QosFlowAccessType_anyOf value
func (v QosFlowAccessTypeAnyOf) Ptr() *QosFlowAccessTypeAnyOf {
	return &v
}

type NullableQosFlowAccessTypeAnyOf struct {
	value *QosFlowAccessTypeAnyOf
	isSet bool
}

func (v NullableQosFlowAccessTypeAnyOf) Get() *QosFlowAccessTypeAnyOf {
	return v.value
}

func (v *NullableQosFlowAccessTypeAnyOf) Set(val *QosFlowAccessTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableQosFlowAccessTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableQosFlowAccessTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQosFlowAccessTypeAnyOf(val *QosFlowAccessTypeAnyOf) *NullableQosFlowAccessTypeAnyOf {
	return &NullableQosFlowAccessTypeAnyOf{value: val, isSet: true}
}

func (v NullableQosFlowAccessTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQosFlowAccessTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

