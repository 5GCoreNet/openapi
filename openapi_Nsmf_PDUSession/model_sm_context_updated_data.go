/*
Nsmf_PDUSession

SMF PDU Session Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
)

// checks if the SmContextUpdatedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmContextUpdatedData{}

// SmContextUpdatedData Data within Update SM Context Response
type SmContextUpdatedData struct {
	UpCnxState *UpCnxState `json:"upCnxState,omitempty"`
	HoState *HoState `json:"hoState,omitempty"`
	ReleaseEbiList []int32 `json:"releaseEbiList,omitempty"`
	AllocatedEbiList []EbiArpMapping `json:"allocatedEbiList,omitempty"`
	ModifiedEbiList []EbiArpMapping `json:"modifiedEbiList,omitempty"`
	N1SmMsg *RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo *RefToBinaryData `json:"n2SmInfo,omitempty"`
	N2SmInfoType *N2SmInfoType `json:"n2SmInfoType,omitempty"`
	EpsBearerSetup []string `json:"epsBearerSetup,omitempty"`
	DataForwarding *bool `json:"dataForwarding,omitempty"`
	N3DlForwardingTnlList []IndirectDataForwardingTunnelInfo `json:"n3DlForwardingTnlList,omitempty"`
	N3UlForwardingTnlList []IndirectDataForwardingTunnelInfo `json:"n3UlForwardingTnlList,omitempty"`
	N9UlForwardingTunnel *TunnelInfo `json:"n9UlForwardingTunnel,omitempty"`
	Cause *Cause `json:"cause,omitempty"`
	MaAcceptedInd *bool `json:"maAcceptedInd,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	// string with format 'bytes' as defined in OpenAPI
	ForwardingFTeid *string `json:"forwardingFTeid,omitempty"`
	ForwardingBearerContexts []string `json:"forwardingBearerContexts,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	SelectedSmfId *string `json:"selectedSmfId,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	SelectedOldSmfId *string `json:"selectedOldSmfId,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	InterPlmnApiRoot *string `json:"interPlmnApiRoot,omitempty"`
	AnchorSmfFeatures *AnchorSmfFeatures `json:"anchorSmfFeatures,omitempty"`
}

// NewSmContextUpdatedData instantiates a new SmContextUpdatedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmContextUpdatedData() *SmContextUpdatedData {
	this := SmContextUpdatedData{}
	var maAcceptedInd bool = false
	this.MaAcceptedInd = &maAcceptedInd
	return &this
}

// NewSmContextUpdatedDataWithDefaults instantiates a new SmContextUpdatedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmContextUpdatedDataWithDefaults() *SmContextUpdatedData {
	this := SmContextUpdatedData{}
	var maAcceptedInd bool = false
	this.MaAcceptedInd = &maAcceptedInd
	return &this
}

// GetUpCnxState returns the UpCnxState field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetUpCnxState() UpCnxState {
	if o == nil || IsNil(o.UpCnxState) {
		var ret UpCnxState
		return ret
	}
	return *o.UpCnxState
}

// GetUpCnxStateOk returns a tuple with the UpCnxState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetUpCnxStateOk() (*UpCnxState, bool) {
	if o == nil || IsNil(o.UpCnxState) {
		return nil, false
	}
	return o.UpCnxState, true
}

// HasUpCnxState returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasUpCnxState() bool {
	if o != nil && !IsNil(o.UpCnxState) {
		return true
	}

	return false
}

// SetUpCnxState gets a reference to the given UpCnxState and assigns it to the UpCnxState field.
func (o *SmContextUpdatedData) SetUpCnxState(v UpCnxState) {
	o.UpCnxState = &v
}

// GetHoState returns the HoState field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetHoState() HoState {
	if o == nil || IsNil(o.HoState) {
		var ret HoState
		return ret
	}
	return *o.HoState
}

// GetHoStateOk returns a tuple with the HoState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetHoStateOk() (*HoState, bool) {
	if o == nil || IsNil(o.HoState) {
		return nil, false
	}
	return o.HoState, true
}

// HasHoState returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasHoState() bool {
	if o != nil && !IsNil(o.HoState) {
		return true
	}

	return false
}

// SetHoState gets a reference to the given HoState and assigns it to the HoState field.
func (o *SmContextUpdatedData) SetHoState(v HoState) {
	o.HoState = &v
}

// GetReleaseEbiList returns the ReleaseEbiList field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetReleaseEbiList() []int32 {
	if o == nil || IsNil(o.ReleaseEbiList) {
		var ret []int32
		return ret
	}
	return o.ReleaseEbiList
}

// GetReleaseEbiListOk returns a tuple with the ReleaseEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetReleaseEbiListOk() ([]int32, bool) {
	if o == nil || IsNil(o.ReleaseEbiList) {
		return nil, false
	}
	return o.ReleaseEbiList, true
}

// HasReleaseEbiList returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasReleaseEbiList() bool {
	if o != nil && !IsNil(o.ReleaseEbiList) {
		return true
	}

	return false
}

// SetReleaseEbiList gets a reference to the given []int32 and assigns it to the ReleaseEbiList field.
func (o *SmContextUpdatedData) SetReleaseEbiList(v []int32) {
	o.ReleaseEbiList = v
}

// GetAllocatedEbiList returns the AllocatedEbiList field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetAllocatedEbiList() []EbiArpMapping {
	if o == nil || IsNil(o.AllocatedEbiList) {
		var ret []EbiArpMapping
		return ret
	}
	return o.AllocatedEbiList
}

// GetAllocatedEbiListOk returns a tuple with the AllocatedEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetAllocatedEbiListOk() ([]EbiArpMapping, bool) {
	if o == nil || IsNil(o.AllocatedEbiList) {
		return nil, false
	}
	return o.AllocatedEbiList, true
}

// HasAllocatedEbiList returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasAllocatedEbiList() bool {
	if o != nil && !IsNil(o.AllocatedEbiList) {
		return true
	}

	return false
}

// SetAllocatedEbiList gets a reference to the given []EbiArpMapping and assigns it to the AllocatedEbiList field.
func (o *SmContextUpdatedData) SetAllocatedEbiList(v []EbiArpMapping) {
	o.AllocatedEbiList = v
}

// GetModifiedEbiList returns the ModifiedEbiList field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetModifiedEbiList() []EbiArpMapping {
	if o == nil || IsNil(o.ModifiedEbiList) {
		var ret []EbiArpMapping
		return ret
	}
	return o.ModifiedEbiList
}

// GetModifiedEbiListOk returns a tuple with the ModifiedEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetModifiedEbiListOk() ([]EbiArpMapping, bool) {
	if o == nil || IsNil(o.ModifiedEbiList) {
		return nil, false
	}
	return o.ModifiedEbiList, true
}

// HasModifiedEbiList returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasModifiedEbiList() bool {
	if o != nil && !IsNil(o.ModifiedEbiList) {
		return true
	}

	return false
}

// SetModifiedEbiList gets a reference to the given []EbiArpMapping and assigns it to the ModifiedEbiList field.
func (o *SmContextUpdatedData) SetModifiedEbiList(v []EbiArpMapping) {
	o.ModifiedEbiList = v
}

// GetN1SmMsg returns the N1SmMsg field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetN1SmMsg() RefToBinaryData {
	if o == nil || IsNil(o.N1SmMsg) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N1SmMsg
}

// GetN1SmMsgOk returns a tuple with the N1SmMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetN1SmMsgOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.N1SmMsg) {
		return nil, false
	}
	return o.N1SmMsg, true
}

// HasN1SmMsg returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasN1SmMsg() bool {
	if o != nil && !IsNil(o.N1SmMsg) {
		return true
	}

	return false
}

// SetN1SmMsg gets a reference to the given RefToBinaryData and assigns it to the N1SmMsg field.
func (o *SmContextUpdatedData) SetN1SmMsg(v RefToBinaryData) {
	o.N1SmMsg = &v
}

// GetN2SmInfo returns the N2SmInfo field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetN2SmInfo() RefToBinaryData {
	if o == nil || IsNil(o.N2SmInfo) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N2SmInfo
}

// GetN2SmInfoOk returns a tuple with the N2SmInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetN2SmInfoOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.N2SmInfo) {
		return nil, false
	}
	return o.N2SmInfo, true
}

// HasN2SmInfo returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasN2SmInfo() bool {
	if o != nil && !IsNil(o.N2SmInfo) {
		return true
	}

	return false
}

// SetN2SmInfo gets a reference to the given RefToBinaryData and assigns it to the N2SmInfo field.
func (o *SmContextUpdatedData) SetN2SmInfo(v RefToBinaryData) {
	o.N2SmInfo = &v
}

// GetN2SmInfoType returns the N2SmInfoType field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetN2SmInfoType() N2SmInfoType {
	if o == nil || IsNil(o.N2SmInfoType) {
		var ret N2SmInfoType
		return ret
	}
	return *o.N2SmInfoType
}

// GetN2SmInfoTypeOk returns a tuple with the N2SmInfoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetN2SmInfoTypeOk() (*N2SmInfoType, bool) {
	if o == nil || IsNil(o.N2SmInfoType) {
		return nil, false
	}
	return o.N2SmInfoType, true
}

// HasN2SmInfoType returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasN2SmInfoType() bool {
	if o != nil && !IsNil(o.N2SmInfoType) {
		return true
	}

	return false
}

// SetN2SmInfoType gets a reference to the given N2SmInfoType and assigns it to the N2SmInfoType field.
func (o *SmContextUpdatedData) SetN2SmInfoType(v N2SmInfoType) {
	o.N2SmInfoType = &v
}

// GetEpsBearerSetup returns the EpsBearerSetup field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetEpsBearerSetup() []string {
	if o == nil || IsNil(o.EpsBearerSetup) {
		var ret []string
		return ret
	}
	return o.EpsBearerSetup
}

// GetEpsBearerSetupOk returns a tuple with the EpsBearerSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetEpsBearerSetupOk() ([]string, bool) {
	if o == nil || IsNil(o.EpsBearerSetup) {
		return nil, false
	}
	return o.EpsBearerSetup, true
}

// HasEpsBearerSetup returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasEpsBearerSetup() bool {
	if o != nil && !IsNil(o.EpsBearerSetup) {
		return true
	}

	return false
}

// SetEpsBearerSetup gets a reference to the given []string and assigns it to the EpsBearerSetup field.
func (o *SmContextUpdatedData) SetEpsBearerSetup(v []string) {
	o.EpsBearerSetup = v
}

// GetDataForwarding returns the DataForwarding field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetDataForwarding() bool {
	if o == nil || IsNil(o.DataForwarding) {
		var ret bool
		return ret
	}
	return *o.DataForwarding
}

// GetDataForwardingOk returns a tuple with the DataForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetDataForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.DataForwarding) {
		return nil, false
	}
	return o.DataForwarding, true
}

// HasDataForwarding returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasDataForwarding() bool {
	if o != nil && !IsNil(o.DataForwarding) {
		return true
	}

	return false
}

// SetDataForwarding gets a reference to the given bool and assigns it to the DataForwarding field.
func (o *SmContextUpdatedData) SetDataForwarding(v bool) {
	o.DataForwarding = &v
}

// GetN3DlForwardingTnlList returns the N3DlForwardingTnlList field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetN3DlForwardingTnlList() []IndirectDataForwardingTunnelInfo {
	if o == nil || IsNil(o.N3DlForwardingTnlList) {
		var ret []IndirectDataForwardingTunnelInfo
		return ret
	}
	return o.N3DlForwardingTnlList
}

// GetN3DlForwardingTnlListOk returns a tuple with the N3DlForwardingTnlList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetN3DlForwardingTnlListOk() ([]IndirectDataForwardingTunnelInfo, bool) {
	if o == nil || IsNil(o.N3DlForwardingTnlList) {
		return nil, false
	}
	return o.N3DlForwardingTnlList, true
}

// HasN3DlForwardingTnlList returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasN3DlForwardingTnlList() bool {
	if o != nil && !IsNil(o.N3DlForwardingTnlList) {
		return true
	}

	return false
}

// SetN3DlForwardingTnlList gets a reference to the given []IndirectDataForwardingTunnelInfo and assigns it to the N3DlForwardingTnlList field.
func (o *SmContextUpdatedData) SetN3DlForwardingTnlList(v []IndirectDataForwardingTunnelInfo) {
	o.N3DlForwardingTnlList = v
}

// GetN3UlForwardingTnlList returns the N3UlForwardingTnlList field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetN3UlForwardingTnlList() []IndirectDataForwardingTunnelInfo {
	if o == nil || IsNil(o.N3UlForwardingTnlList) {
		var ret []IndirectDataForwardingTunnelInfo
		return ret
	}
	return o.N3UlForwardingTnlList
}

// GetN3UlForwardingTnlListOk returns a tuple with the N3UlForwardingTnlList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetN3UlForwardingTnlListOk() ([]IndirectDataForwardingTunnelInfo, bool) {
	if o == nil || IsNil(o.N3UlForwardingTnlList) {
		return nil, false
	}
	return o.N3UlForwardingTnlList, true
}

// HasN3UlForwardingTnlList returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasN3UlForwardingTnlList() bool {
	if o != nil && !IsNil(o.N3UlForwardingTnlList) {
		return true
	}

	return false
}

// SetN3UlForwardingTnlList gets a reference to the given []IndirectDataForwardingTunnelInfo and assigns it to the N3UlForwardingTnlList field.
func (o *SmContextUpdatedData) SetN3UlForwardingTnlList(v []IndirectDataForwardingTunnelInfo) {
	o.N3UlForwardingTnlList = v
}

// GetN9UlForwardingTunnel returns the N9UlForwardingTunnel field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetN9UlForwardingTunnel() TunnelInfo {
	if o == nil || IsNil(o.N9UlForwardingTunnel) {
		var ret TunnelInfo
		return ret
	}
	return *o.N9UlForwardingTunnel
}

// GetN9UlForwardingTunnelOk returns a tuple with the N9UlForwardingTunnel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetN9UlForwardingTunnelOk() (*TunnelInfo, bool) {
	if o == nil || IsNil(o.N9UlForwardingTunnel) {
		return nil, false
	}
	return o.N9UlForwardingTunnel, true
}

// HasN9UlForwardingTunnel returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasN9UlForwardingTunnel() bool {
	if o != nil && !IsNil(o.N9UlForwardingTunnel) {
		return true
	}

	return false
}

// SetN9UlForwardingTunnel gets a reference to the given TunnelInfo and assigns it to the N9UlForwardingTunnel field.
func (o *SmContextUpdatedData) SetN9UlForwardingTunnel(v TunnelInfo) {
	o.N9UlForwardingTunnel = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetCause() Cause {
	if o == nil || IsNil(o.Cause) {
		var ret Cause
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetCauseOk() (*Cause, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given Cause and assigns it to the Cause field.
func (o *SmContextUpdatedData) SetCause(v Cause) {
	o.Cause = &v
}

// GetMaAcceptedInd returns the MaAcceptedInd field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetMaAcceptedInd() bool {
	if o == nil || IsNil(o.MaAcceptedInd) {
		var ret bool
		return ret
	}
	return *o.MaAcceptedInd
}

// GetMaAcceptedIndOk returns a tuple with the MaAcceptedInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetMaAcceptedIndOk() (*bool, bool) {
	if o == nil || IsNil(o.MaAcceptedInd) {
		return nil, false
	}
	return o.MaAcceptedInd, true
}

// HasMaAcceptedInd returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasMaAcceptedInd() bool {
	if o != nil && !IsNil(o.MaAcceptedInd) {
		return true
	}

	return false
}

// SetMaAcceptedInd gets a reference to the given bool and assigns it to the MaAcceptedInd field.
func (o *SmContextUpdatedData) SetMaAcceptedInd(v bool) {
	o.MaAcceptedInd = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *SmContextUpdatedData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetForwardingFTeid returns the ForwardingFTeid field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetForwardingFTeid() string {
	if o == nil || IsNil(o.ForwardingFTeid) {
		var ret string
		return ret
	}
	return *o.ForwardingFTeid
}

// GetForwardingFTeidOk returns a tuple with the ForwardingFTeid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetForwardingFTeidOk() (*string, bool) {
	if o == nil || IsNil(o.ForwardingFTeid) {
		return nil, false
	}
	return o.ForwardingFTeid, true
}

// HasForwardingFTeid returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasForwardingFTeid() bool {
	if o != nil && !IsNil(o.ForwardingFTeid) {
		return true
	}

	return false
}

// SetForwardingFTeid gets a reference to the given string and assigns it to the ForwardingFTeid field.
func (o *SmContextUpdatedData) SetForwardingFTeid(v string) {
	o.ForwardingFTeid = &v
}

// GetForwardingBearerContexts returns the ForwardingBearerContexts field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetForwardingBearerContexts() []string {
	if o == nil || IsNil(o.ForwardingBearerContexts) {
		var ret []string
		return ret
	}
	return o.ForwardingBearerContexts
}

// GetForwardingBearerContextsOk returns a tuple with the ForwardingBearerContexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetForwardingBearerContextsOk() ([]string, bool) {
	if o == nil || IsNil(o.ForwardingBearerContexts) {
		return nil, false
	}
	return o.ForwardingBearerContexts, true
}

// HasForwardingBearerContexts returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasForwardingBearerContexts() bool {
	if o != nil && !IsNil(o.ForwardingBearerContexts) {
		return true
	}

	return false
}

// SetForwardingBearerContexts gets a reference to the given []string and assigns it to the ForwardingBearerContexts field.
func (o *SmContextUpdatedData) SetForwardingBearerContexts(v []string) {
	o.ForwardingBearerContexts = v
}

// GetSelectedSmfId returns the SelectedSmfId field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetSelectedSmfId() string {
	if o == nil || IsNil(o.SelectedSmfId) {
		var ret string
		return ret
	}
	return *o.SelectedSmfId
}

// GetSelectedSmfIdOk returns a tuple with the SelectedSmfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetSelectedSmfIdOk() (*string, bool) {
	if o == nil || IsNil(o.SelectedSmfId) {
		return nil, false
	}
	return o.SelectedSmfId, true
}

// HasSelectedSmfId returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasSelectedSmfId() bool {
	if o != nil && !IsNil(o.SelectedSmfId) {
		return true
	}

	return false
}

// SetSelectedSmfId gets a reference to the given string and assigns it to the SelectedSmfId field.
func (o *SmContextUpdatedData) SetSelectedSmfId(v string) {
	o.SelectedSmfId = &v
}

// GetSelectedOldSmfId returns the SelectedOldSmfId field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetSelectedOldSmfId() string {
	if o == nil || IsNil(o.SelectedOldSmfId) {
		var ret string
		return ret
	}
	return *o.SelectedOldSmfId
}

// GetSelectedOldSmfIdOk returns a tuple with the SelectedOldSmfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetSelectedOldSmfIdOk() (*string, bool) {
	if o == nil || IsNil(o.SelectedOldSmfId) {
		return nil, false
	}
	return o.SelectedOldSmfId, true
}

// HasSelectedOldSmfId returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasSelectedOldSmfId() bool {
	if o != nil && !IsNil(o.SelectedOldSmfId) {
		return true
	}

	return false
}

// SetSelectedOldSmfId gets a reference to the given string and assigns it to the SelectedOldSmfId field.
func (o *SmContextUpdatedData) SetSelectedOldSmfId(v string) {
	o.SelectedOldSmfId = &v
}

// GetInterPlmnApiRoot returns the InterPlmnApiRoot field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetInterPlmnApiRoot() string {
	if o == nil || IsNil(o.InterPlmnApiRoot) {
		var ret string
		return ret
	}
	return *o.InterPlmnApiRoot
}

// GetInterPlmnApiRootOk returns a tuple with the InterPlmnApiRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetInterPlmnApiRootOk() (*string, bool) {
	if o == nil || IsNil(o.InterPlmnApiRoot) {
		return nil, false
	}
	return o.InterPlmnApiRoot, true
}

// HasInterPlmnApiRoot returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasInterPlmnApiRoot() bool {
	if o != nil && !IsNil(o.InterPlmnApiRoot) {
		return true
	}

	return false
}

// SetInterPlmnApiRoot gets a reference to the given string and assigns it to the InterPlmnApiRoot field.
func (o *SmContextUpdatedData) SetInterPlmnApiRoot(v string) {
	o.InterPlmnApiRoot = &v
}

// GetAnchorSmfFeatures returns the AnchorSmfFeatures field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetAnchorSmfFeatures() AnchorSmfFeatures {
	if o == nil || IsNil(o.AnchorSmfFeatures) {
		var ret AnchorSmfFeatures
		return ret
	}
	return *o.AnchorSmfFeatures
}

// GetAnchorSmfFeaturesOk returns a tuple with the AnchorSmfFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetAnchorSmfFeaturesOk() (*AnchorSmfFeatures, bool) {
	if o == nil || IsNil(o.AnchorSmfFeatures) {
		return nil, false
	}
	return o.AnchorSmfFeatures, true
}

// HasAnchorSmfFeatures returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasAnchorSmfFeatures() bool {
	if o != nil && !IsNil(o.AnchorSmfFeatures) {
		return true
	}

	return false
}

// SetAnchorSmfFeatures gets a reference to the given AnchorSmfFeatures and assigns it to the AnchorSmfFeatures field.
func (o *SmContextUpdatedData) SetAnchorSmfFeatures(v AnchorSmfFeatures) {
	o.AnchorSmfFeatures = &v
}

func (o SmContextUpdatedData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmContextUpdatedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpCnxState) {
		toSerialize["upCnxState"] = o.UpCnxState
	}
	if !IsNil(o.HoState) {
		toSerialize["hoState"] = o.HoState
	}
	if !IsNil(o.ReleaseEbiList) {
		toSerialize["releaseEbiList"] = o.ReleaseEbiList
	}
	if !IsNil(o.AllocatedEbiList) {
		toSerialize["allocatedEbiList"] = o.AllocatedEbiList
	}
	if !IsNil(o.ModifiedEbiList) {
		toSerialize["modifiedEbiList"] = o.ModifiedEbiList
	}
	if !IsNil(o.N1SmMsg) {
		toSerialize["n1SmMsg"] = o.N1SmMsg
	}
	if !IsNil(o.N2SmInfo) {
		toSerialize["n2SmInfo"] = o.N2SmInfo
	}
	if !IsNil(o.N2SmInfoType) {
		toSerialize["n2SmInfoType"] = o.N2SmInfoType
	}
	if !IsNil(o.EpsBearerSetup) {
		toSerialize["epsBearerSetup"] = o.EpsBearerSetup
	}
	if !IsNil(o.DataForwarding) {
		toSerialize["dataForwarding"] = o.DataForwarding
	}
	if !IsNil(o.N3DlForwardingTnlList) {
		toSerialize["n3DlForwardingTnlList"] = o.N3DlForwardingTnlList
	}
	if !IsNil(o.N3UlForwardingTnlList) {
		toSerialize["n3UlForwardingTnlList"] = o.N3UlForwardingTnlList
	}
	if !IsNil(o.N9UlForwardingTunnel) {
		toSerialize["n9UlForwardingTunnel"] = o.N9UlForwardingTunnel
	}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !IsNil(o.MaAcceptedInd) {
		toSerialize["maAcceptedInd"] = o.MaAcceptedInd
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !IsNil(o.ForwardingFTeid) {
		toSerialize["forwardingFTeid"] = o.ForwardingFTeid
	}
	if !IsNil(o.ForwardingBearerContexts) {
		toSerialize["forwardingBearerContexts"] = o.ForwardingBearerContexts
	}
	if !IsNil(o.SelectedSmfId) {
		toSerialize["selectedSmfId"] = o.SelectedSmfId
	}
	if !IsNil(o.SelectedOldSmfId) {
		toSerialize["selectedOldSmfId"] = o.SelectedOldSmfId
	}
	if !IsNil(o.InterPlmnApiRoot) {
		toSerialize["interPlmnApiRoot"] = o.InterPlmnApiRoot
	}
	if !IsNil(o.AnchorSmfFeatures) {
		toSerialize["anchorSmfFeatures"] = o.AnchorSmfFeatures
	}
	return toSerialize, nil
}

type NullableSmContextUpdatedData struct {
	value *SmContextUpdatedData
	isSet bool
}

func (v NullableSmContextUpdatedData) Get() *SmContextUpdatedData {
	return v.value
}

func (v *NullableSmContextUpdatedData) Set(val *SmContextUpdatedData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmContextUpdatedData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmContextUpdatedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmContextUpdatedData(val *SmContextUpdatedData) *NullableSmContextUpdatedData {
	return &NullableSmContextUpdatedData{value: val, isSet: true}
}

func (v NullableSmContextUpdatedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmContextUpdatedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


