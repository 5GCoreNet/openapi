/*
Nsmf_PDUSession

SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
	"fmt"
)

// CauseAnyOf the model 'CauseAnyOf'
type CauseAnyOf string

// List of Cause_anyOf
const (
	REL_DUE_TO_HO CauseAnyOf = "REL_DUE_TO_HO"
	EPS_FALLBACK CauseAnyOf = "EPS_FALLBACK"
	REL_DUE_TO_UP_SEC CauseAnyOf = "REL_DUE_TO_UP_SEC"
	DNN_CONGESTION CauseAnyOf = "DNN_CONGESTION"
	S_NSSAI_CONGESTION CauseAnyOf = "S_NSSAI_CONGESTION"
	REL_DUE_TO_REACTIVATION CauseAnyOf = "REL_DUE_TO_REACTIVATION"
	_5_G_AN_NOT_RESPONDING CauseAnyOf = "5G_AN_NOT_RESPONDING"
	REL_DUE_TO_SLICE_NOT_AVAILABLE CauseAnyOf = "REL_DUE_TO_SLICE_NOT_AVAILABLE"
	REL_DUE_TO_DUPLICATE_SESSION_ID CauseAnyOf = "REL_DUE_TO_DUPLICATE_SESSION_ID"
	PDU_SESSION_STATUS_MISMATCH CauseAnyOf = "PDU_SESSION_STATUS_MISMATCH"
	HO_FAILURE CauseAnyOf = "HO_FAILURE"
	INSUFFICIENT_UP_RESOURCES CauseAnyOf = "INSUFFICIENT_UP_RESOURCES"
	PDU_SESSION_HANDED_OVER CauseAnyOf = "PDU_SESSION_HANDED_OVER"
	PDU_SESSION_RESUMED CauseAnyOf = "PDU_SESSION_RESUMED"
	CN_ASSISTED_RAN_PARAMETER_TUNING CauseAnyOf = "CN_ASSISTED_RAN_PARAMETER_TUNING"
	ISMF_CONTEXT_TRANSFER CauseAnyOf = "ISMF_CONTEXT_TRANSFER"
	SMF_CONTEXT_TRANSFER CauseAnyOf = "SMF_CONTEXT_TRANSFER"
	REL_DUE_TO_PS_TO_CS_HO CauseAnyOf = "REL_DUE_TO_PS_TO_CS_HO"
	REL_DUE_TO_SUBSCRIPTION_CHANGE CauseAnyOf = "REL_DUE_TO_SUBSCRIPTION_CHANGE"
	HO_CANCEL CauseAnyOf = "HO_CANCEL"
	REL_DUE_TO_SLICE_NOT_AUTHORIZED CauseAnyOf = "REL_DUE_TO_SLICE_NOT_AUTHORIZED"
	PDU_SESSION_HAND_OVER_FAILURE CauseAnyOf = "PDU_SESSION_HAND_OVER_FAILURE"
	DDN_FAILURE_STATUS CauseAnyOf = "DDN_FAILURE_STATUS"
	REL_DUE_TO_CP_ONLY_NOT_APPLICABLE CauseAnyOf = "REL_DUE_TO_CP_ONLY_NOT_APPLICABLE"
	NOT_SUPPORTED_WITH_ISMF CauseAnyOf = "NOT_SUPPORTED_WITH_ISMF"
	CHANGED_ANCHOR_SMF CauseAnyOf = "CHANGED_ANCHOR_SMF"
	CHANGED_INTERMEDIATE_SMF CauseAnyOf = "CHANGED_INTERMEDIATE_SMF"
	TARGET_DNAI_NOTIFICATION CauseAnyOf = "TARGET_DNAI_NOTIFICATION"
	REL_DUE_TO_VPLMN_QOS_FAILURE CauseAnyOf = "REL_DUE_TO_VPLMN_QOS_FAILURE"
	REL_DUE_TO_SMF_NOT_SUPPORT_PSETR CauseAnyOf = "REL_DUE_TO_SMF_NOT_SUPPORT_PSETR"
	REL_DUE_TO_SNPN_SNPN_MOBILITY CauseAnyOf = "REL_DUE_TO_SNPN_SNPN_MOBILITY"
	REL_DUE_TO_NO_HR_AGREEMENT CauseAnyOf = "REL_DUE_TO_NO_HR_AGREEMENT"
	REL_DUE_TO_UNSPECIFIED_REASON CauseAnyOf = "REL_DUE_TO_UNSPECIFIED_REASON"
)

// All allowed values of CauseAnyOf enum
var AllowedCauseAnyOfEnumValues = []CauseAnyOf{
	"REL_DUE_TO_HO",
	"EPS_FALLBACK",
	"REL_DUE_TO_UP_SEC",
	"DNN_CONGESTION",
	"S_NSSAI_CONGESTION",
	"REL_DUE_TO_REACTIVATION",
	"5G_AN_NOT_RESPONDING",
	"REL_DUE_TO_SLICE_NOT_AVAILABLE",
	"REL_DUE_TO_DUPLICATE_SESSION_ID",
	"PDU_SESSION_STATUS_MISMATCH",
	"HO_FAILURE",
	"INSUFFICIENT_UP_RESOURCES",
	"PDU_SESSION_HANDED_OVER",
	"PDU_SESSION_RESUMED",
	"CN_ASSISTED_RAN_PARAMETER_TUNING",
	"ISMF_CONTEXT_TRANSFER",
	"SMF_CONTEXT_TRANSFER",
	"REL_DUE_TO_PS_TO_CS_HO",
	"REL_DUE_TO_SUBSCRIPTION_CHANGE",
	"HO_CANCEL",
	"REL_DUE_TO_SLICE_NOT_AUTHORIZED",
	"PDU_SESSION_HAND_OVER_FAILURE",
	"DDN_FAILURE_STATUS",
	"REL_DUE_TO_CP_ONLY_NOT_APPLICABLE",
	"NOT_SUPPORTED_WITH_ISMF",
	"CHANGED_ANCHOR_SMF",
	"CHANGED_INTERMEDIATE_SMF",
	"TARGET_DNAI_NOTIFICATION",
	"REL_DUE_TO_VPLMN_QOS_FAILURE",
	"REL_DUE_TO_SMF_NOT_SUPPORT_PSETR",
	"REL_DUE_TO_SNPN_SNPN_MOBILITY",
	"REL_DUE_TO_NO_HR_AGREEMENT",
	"REL_DUE_TO_UNSPECIFIED_REASON",
}

func (v *CauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CauseAnyOf(value)
	for _, existing := range AllowedCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CauseAnyOf", value)
}

// NewCauseAnyOfFromValue returns a pointer to a valid CauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCauseAnyOfFromValue(v string) (*CauseAnyOf, error) {
	ev := CauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CauseAnyOf: valid values are %v", v, AllowedCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CauseAnyOf) IsValid() bool {
	for _, existing := range AllowedCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Cause_anyOf value
func (v CauseAnyOf) Ptr() *CauseAnyOf {
	return &v
}

type NullableCauseAnyOf struct {
	value *CauseAnyOf
	isSet bool
}

func (v NullableCauseAnyOf) Get() *CauseAnyOf {
	return v.value
}

func (v *NullableCauseAnyOf) Set(val *CauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCauseAnyOf(val *CauseAnyOf) *NullableCauseAnyOf {
	return &NullableCauseAnyOf{value: val, isSet: true}
}

func (v NullableCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

