/*
Nsmf_PDUSession

SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
)

// checks if the TargetDnaiInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetDnaiInfo{}

// TargetDnaiInfo Target DNAI Information
type TargetDnaiInfo struct {
	// DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
	TargetDnai       *string          `json:"targetDnai,omitempty"`
	SmfSelectionType SmfSelectionType `json:"smfSelectionType"`
}

// NewTargetDnaiInfo instantiates a new TargetDnaiInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetDnaiInfo(smfSelectionType SmfSelectionType) *TargetDnaiInfo {
	this := TargetDnaiInfo{}
	this.SmfSelectionType = smfSelectionType
	return &this
}

// NewTargetDnaiInfoWithDefaults instantiates a new TargetDnaiInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetDnaiInfoWithDefaults() *TargetDnaiInfo {
	this := TargetDnaiInfo{}
	return &this
}

// GetTargetDnai returns the TargetDnai field value if set, zero value otherwise.
func (o *TargetDnaiInfo) GetTargetDnai() string {
	if o == nil || IsNil(o.TargetDnai) {
		var ret string
		return ret
	}
	return *o.TargetDnai
}

// GetTargetDnaiOk returns a tuple with the TargetDnai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDnaiInfo) GetTargetDnaiOk() (*string, bool) {
	if o == nil || IsNil(o.TargetDnai) {
		return nil, false
	}
	return o.TargetDnai, true
}

// HasTargetDnai returns a boolean if a field has been set.
func (o *TargetDnaiInfo) HasTargetDnai() bool {
	if o != nil && !IsNil(o.TargetDnai) {
		return true
	}

	return false
}

// SetTargetDnai gets a reference to the given string and assigns it to the TargetDnai field.
func (o *TargetDnaiInfo) SetTargetDnai(v string) {
	o.TargetDnai = &v
}

// GetSmfSelectionType returns the SmfSelectionType field value
func (o *TargetDnaiInfo) GetSmfSelectionType() SmfSelectionType {
	if o == nil {
		var ret SmfSelectionType
		return ret
	}

	return o.SmfSelectionType
}

// GetSmfSelectionTypeOk returns a tuple with the SmfSelectionType field value
// and a boolean to check if the value has been set.
func (o *TargetDnaiInfo) GetSmfSelectionTypeOk() (*SmfSelectionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmfSelectionType, true
}

// SetSmfSelectionType sets field value
func (o *TargetDnaiInfo) SetSmfSelectionType(v SmfSelectionType) {
	o.SmfSelectionType = v
}

func (o TargetDnaiInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetDnaiInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetDnai) {
		toSerialize["targetDnai"] = o.TargetDnai
	}
	toSerialize["smfSelectionType"] = o.SmfSelectionType
	return toSerialize, nil
}

type NullableTargetDnaiInfo struct {
	value *TargetDnaiInfo
	isSet bool
}

func (v NullableTargetDnaiInfo) Get() *TargetDnaiInfo {
	return v.value
}

func (v *NullableTargetDnaiInfo) Set(val *TargetDnaiInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetDnaiInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetDnaiInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetDnaiInfo(val *TargetDnaiInfo) *NullableTargetDnaiInfo {
	return &NullableTargetDnaiInfo{value: val, isSet: true}
}

func (v NullableTargetDnaiInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetDnaiInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
