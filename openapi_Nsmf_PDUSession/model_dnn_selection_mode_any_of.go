/*
Nsmf_PDUSession

SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
	"fmt"
)

// DnnSelectionModeAnyOf the model 'DnnSelectionModeAnyOf'
type DnnSelectionModeAnyOf string

// List of DnnSelectionMode_anyOf
const (
	VERIFIED DnnSelectionModeAnyOf = "VERIFIED"
	UE_DNN_NOT_VERIFIED DnnSelectionModeAnyOf = "UE_DNN_NOT_VERIFIED"
	NW_DNN_NOT_VERIFIED DnnSelectionModeAnyOf = "NW_DNN_NOT_VERIFIED"
)

// All allowed values of DnnSelectionModeAnyOf enum
var AllowedDnnSelectionModeAnyOfEnumValues = []DnnSelectionModeAnyOf{
	"VERIFIED",
	"UE_DNN_NOT_VERIFIED",
	"NW_DNN_NOT_VERIFIED",
}

func (v *DnnSelectionModeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DnnSelectionModeAnyOf(value)
	for _, existing := range AllowedDnnSelectionModeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DnnSelectionModeAnyOf", value)
}

// NewDnnSelectionModeAnyOfFromValue returns a pointer to a valid DnnSelectionModeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDnnSelectionModeAnyOfFromValue(v string) (*DnnSelectionModeAnyOf, error) {
	ev := DnnSelectionModeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DnnSelectionModeAnyOf: valid values are %v", v, AllowedDnnSelectionModeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DnnSelectionModeAnyOf) IsValid() bool {
	for _, existing := range AllowedDnnSelectionModeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DnnSelectionMode_anyOf value
func (v DnnSelectionModeAnyOf) Ptr() *DnnSelectionModeAnyOf {
	return &v
}

type NullableDnnSelectionModeAnyOf struct {
	value *DnnSelectionModeAnyOf
	isSet bool
}

func (v NullableDnnSelectionModeAnyOf) Get() *DnnSelectionModeAnyOf {
	return v.value
}

func (v *NullableDnnSelectionModeAnyOf) Set(val *DnnSelectionModeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDnnSelectionModeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDnnSelectionModeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnnSelectionModeAnyOf(val *DnnSelectionModeAnyOf) *NullableDnnSelectionModeAnyOf {
	return &NullableDnnSelectionModeAnyOf{value: val, isSet: true}
}

func (v NullableDnnSelectionModeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnnSelectionModeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

