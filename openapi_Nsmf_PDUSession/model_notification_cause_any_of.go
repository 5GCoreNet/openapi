/*
Nsmf_PDUSession

SMF PDU Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmf_PDUSession

import (
	"encoding/json"
	"fmt"
)

// NotificationCauseAnyOf the model 'NotificationCauseAnyOf'
type NotificationCauseAnyOf string

// List of NotificationCause_anyOf
const (
	QOS_FULFILLED NotificationCauseAnyOf = "QOS_FULFILLED"
	QOS_NOT_FULFILLED NotificationCauseAnyOf = "QOS_NOT_FULFILLED"
	UP_SEC_FULFILLED NotificationCauseAnyOf = "UP_SEC_FULFILLED"
	UP_SEC_NOT_FULFILLED NotificationCauseAnyOf = "UP_SEC_NOT_FULFILLED"
)

// All allowed values of NotificationCauseAnyOf enum
var AllowedNotificationCauseAnyOfEnumValues = []NotificationCauseAnyOf{
	"QOS_FULFILLED",
	"QOS_NOT_FULFILLED",
	"UP_SEC_FULFILLED",
	"UP_SEC_NOT_FULFILLED",
}

func (v *NotificationCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationCauseAnyOf(value)
	for _, existing := range AllowedNotificationCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationCauseAnyOf", value)
}

// NewNotificationCauseAnyOfFromValue returns a pointer to a valid NotificationCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationCauseAnyOfFromValue(v string) (*NotificationCauseAnyOf, error) {
	ev := NotificationCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationCauseAnyOf: valid values are %v", v, AllowedNotificationCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedNotificationCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationCause_anyOf value
func (v NotificationCauseAnyOf) Ptr() *NotificationCauseAnyOf {
	return &v
}

type NullableNotificationCauseAnyOf struct {
	value *NotificationCauseAnyOf
	isSet bool
}

func (v NullableNotificationCauseAnyOf) Get() *NotificationCauseAnyOf {
	return v.value
}

func (v *NullableNotificationCauseAnyOf) Set(val *NotificationCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationCauseAnyOf(val *NotificationCauseAnyOf) *NullableNotificationCauseAnyOf {
	return &NullableNotificationCauseAnyOf{value: val, isSet: true}
}

func (v NullableNotificationCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

