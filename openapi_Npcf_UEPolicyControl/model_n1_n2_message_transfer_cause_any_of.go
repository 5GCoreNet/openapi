/*
Npcf_UEPolicyControl

UE Policy Control Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_UEPolicyControl

import (
	"encoding/json"
	"fmt"
)

// N1N2MessageTransferCauseAnyOf the model 'N1N2MessageTransferCauseAnyOf'
type N1N2MessageTransferCauseAnyOf string

// List of N1N2MessageTransferCause_anyOf
const (
	ATTEMPTING_TO_REACH_UE N1N2MessageTransferCauseAnyOf = "ATTEMPTING_TO_REACH_UE"
	N1_N2_TRANSFER_INITIATED N1N2MessageTransferCauseAnyOf = "N1_N2_TRANSFER_INITIATED"
	WAITING_FOR_ASYNCHRONOUS_TRANSFER N1N2MessageTransferCauseAnyOf = "WAITING_FOR_ASYNCHRONOUS_TRANSFER"
	UE_NOT_RESPONDING N1N2MessageTransferCauseAnyOf = "UE_NOT_RESPONDING"
	N1_MSG_NOT_TRANSFERRED N1N2MessageTransferCauseAnyOf = "N1_MSG_NOT_TRANSFERRED"
	N2_MSG_NOT_TRANSFERRED N1N2MessageTransferCauseAnyOf = "N2_MSG_NOT_TRANSFERRED"
	UE_NOT_REACHABLE_FOR_SESSION N1N2MessageTransferCauseAnyOf = "UE_NOT_REACHABLE_FOR_SESSION"
	TEMPORARY_REJECT_REGISTRATION_ONGOING N1N2MessageTransferCauseAnyOf = "TEMPORARY_REJECT_REGISTRATION_ONGOING"
	TEMPORARY_REJECT_HANDOVER_ONGOING N1N2MessageTransferCauseAnyOf = "TEMPORARY_REJECT_HANDOVER_ONGOING"
	REJECTION_DUE_TO_PAGING_RESTRICTION N1N2MessageTransferCauseAnyOf = "REJECTION_DUE_TO_PAGING_RESTRICTION"
	AN_NOT_RESPONDING N1N2MessageTransferCauseAnyOf = "AN_NOT_RESPONDING"
	FAILURE_CAUSE_UNSPECIFIED N1N2MessageTransferCauseAnyOf = "FAILURE_CAUSE_UNSPECIFIED"
)

// All allowed values of N1N2MessageTransferCauseAnyOf enum
var AllowedN1N2MessageTransferCauseAnyOfEnumValues = []N1N2MessageTransferCauseAnyOf{
	"ATTEMPTING_TO_REACH_UE",
	"N1_N2_TRANSFER_INITIATED",
	"WAITING_FOR_ASYNCHRONOUS_TRANSFER",
	"UE_NOT_RESPONDING",
	"N1_MSG_NOT_TRANSFERRED",
	"N2_MSG_NOT_TRANSFERRED",
	"UE_NOT_REACHABLE_FOR_SESSION",
	"TEMPORARY_REJECT_REGISTRATION_ONGOING",
	"TEMPORARY_REJECT_HANDOVER_ONGOING",
	"REJECTION_DUE_TO_PAGING_RESTRICTION",
	"AN_NOT_RESPONDING",
	"FAILURE_CAUSE_UNSPECIFIED",
}

func (v *N1N2MessageTransferCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := N1N2MessageTransferCauseAnyOf(value)
	for _, existing := range AllowedN1N2MessageTransferCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid N1N2MessageTransferCauseAnyOf", value)
}

// NewN1N2MessageTransferCauseAnyOfFromValue returns a pointer to a valid N1N2MessageTransferCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewN1N2MessageTransferCauseAnyOfFromValue(v string) (*N1N2MessageTransferCauseAnyOf, error) {
	ev := N1N2MessageTransferCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for N1N2MessageTransferCauseAnyOf: valid values are %v", v, AllowedN1N2MessageTransferCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v N1N2MessageTransferCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedN1N2MessageTransferCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to N1N2MessageTransferCause_anyOf value
func (v N1N2MessageTransferCauseAnyOf) Ptr() *N1N2MessageTransferCauseAnyOf {
	return &v
}

type NullableN1N2MessageTransferCauseAnyOf struct {
	value *N1N2MessageTransferCauseAnyOf
	isSet bool
}

func (v NullableN1N2MessageTransferCauseAnyOf) Get() *N1N2MessageTransferCauseAnyOf {
	return v.value
}

func (v *NullableN1N2MessageTransferCauseAnyOf) Set(val *N1N2MessageTransferCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableN1N2MessageTransferCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableN1N2MessageTransferCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableN1N2MessageTransferCauseAnyOf(val *N1N2MessageTransferCauseAnyOf) *NullableN1N2MessageTransferCauseAnyOf {
	return &NullableN1N2MessageTransferCauseAnyOf{value: val, isSet: true}
}

func (v NullableN1N2MessageTransferCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableN1N2MessageTransferCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

