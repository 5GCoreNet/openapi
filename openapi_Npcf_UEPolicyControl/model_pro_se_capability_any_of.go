/*
Npcf_UEPolicyControl

UE Policy Control Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_UEPolicyControl

import (
	"encoding/json"
	"fmt"
)

// ProSeCapabilityAnyOf the model 'ProSeCapabilityAnyOf'
type ProSeCapabilityAnyOf string

// List of ProSeCapability_anyOf
const (
	DD ProSeCapabilityAnyOf = "PROSE_DD"
	DC ProSeCapabilityAnyOf = "PROSE_DC"
	L2_U2_N_RELAY ProSeCapabilityAnyOf = "PROSE_L2_U2N_RELAY"
	L3_U2_N_RELAY ProSeCapabilityAnyOf = "PROSE_L3_U2N_RELAY"
	L2_REMOTE_UE ProSeCapabilityAnyOf = "PROSE_L2_REMOTE_UE"
	L3_REMOTE_UE ProSeCapabilityAnyOf = "PROSE_L3_REMOTE_UE"
)

// All allowed values of ProSeCapabilityAnyOf enum
var AllowedProSeCapabilityAnyOfEnumValues = []ProSeCapabilityAnyOf{
	"PROSE_DD",
	"PROSE_DC",
	"PROSE_L2_U2N_RELAY",
	"PROSE_L3_U2N_RELAY",
	"PROSE_L2_REMOTE_UE",
	"PROSE_L3_REMOTE_UE",
}

func (v *ProSeCapabilityAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProSeCapabilityAnyOf(value)
	for _, existing := range AllowedProSeCapabilityAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProSeCapabilityAnyOf", value)
}

// NewProSeCapabilityAnyOfFromValue returns a pointer to a valid ProSeCapabilityAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProSeCapabilityAnyOfFromValue(v string) (*ProSeCapabilityAnyOf, error) {
	ev := ProSeCapabilityAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProSeCapabilityAnyOf: valid values are %v", v, AllowedProSeCapabilityAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProSeCapabilityAnyOf) IsValid() bool {
	for _, existing := range AllowedProSeCapabilityAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProSeCapability_anyOf value
func (v ProSeCapabilityAnyOf) Ptr() *ProSeCapabilityAnyOf {
	return &v
}

type NullableProSeCapabilityAnyOf struct {
	value *ProSeCapabilityAnyOf
	isSet bool
}

func (v NullableProSeCapabilityAnyOf) Get() *ProSeCapabilityAnyOf {
	return v.value
}

func (v *NullableProSeCapabilityAnyOf) Set(val *ProSeCapabilityAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableProSeCapabilityAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableProSeCapabilityAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProSeCapabilityAnyOf(val *ProSeCapabilityAnyOf) *NullableProSeCapabilityAnyOf {
	return &NullableProSeCapabilityAnyOf{value: val, isSet: true}
}

func (v NullableProSeCapabilityAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProSeCapabilityAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

