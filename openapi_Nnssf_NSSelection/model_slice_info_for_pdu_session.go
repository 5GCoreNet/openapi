/*
NSSF NS Selection

NSSF Network Slice Selection Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnssf_NSSelection

import (
	"encoding/json"
)

// checks if the SliceInfoForPDUSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SliceInfoForPDUSession{}

// SliceInfoForPDUSession Contains the slice information requested during PDU Session establishment procedure
type SliceInfoForPDUSession struct {
	SNssai            Snssai            `json:"sNssai"`
	RoamingIndication RoamingIndication `json:"roamingIndication"`
	HomeSnssai        *Snssai           `json:"homeSnssai,omitempty"`
}

// NewSliceInfoForPDUSession instantiates a new SliceInfoForPDUSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliceInfoForPDUSession(sNssai Snssai, roamingIndication RoamingIndication) *SliceInfoForPDUSession {
	this := SliceInfoForPDUSession{}
	this.SNssai = sNssai
	this.RoamingIndication = roamingIndication
	return &this
}

// NewSliceInfoForPDUSessionWithDefaults instantiates a new SliceInfoForPDUSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliceInfoForPDUSessionWithDefaults() *SliceInfoForPDUSession {
	this := SliceInfoForPDUSession{}
	return &this
}

// GetSNssai returns the SNssai field value
func (o *SliceInfoForPDUSession) GetSNssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.SNssai
}

// GetSNssaiOk returns a tuple with the SNssai field value
// and a boolean to check if the value has been set.
func (o *SliceInfoForPDUSession) GetSNssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SNssai, true
}

// SetSNssai sets field value
func (o *SliceInfoForPDUSession) SetSNssai(v Snssai) {
	o.SNssai = v
}

// GetRoamingIndication returns the RoamingIndication field value
func (o *SliceInfoForPDUSession) GetRoamingIndication() RoamingIndication {
	if o == nil {
		var ret RoamingIndication
		return ret
	}

	return o.RoamingIndication
}

// GetRoamingIndicationOk returns a tuple with the RoamingIndication field value
// and a boolean to check if the value has been set.
func (o *SliceInfoForPDUSession) GetRoamingIndicationOk() (*RoamingIndication, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoamingIndication, true
}

// SetRoamingIndication sets field value
func (o *SliceInfoForPDUSession) SetRoamingIndication(v RoamingIndication) {
	o.RoamingIndication = v
}

// GetHomeSnssai returns the HomeSnssai field value if set, zero value otherwise.
func (o *SliceInfoForPDUSession) GetHomeSnssai() Snssai {
	if o == nil || IsNil(o.HomeSnssai) {
		var ret Snssai
		return ret
	}
	return *o.HomeSnssai
}

// GetHomeSnssaiOk returns a tuple with the HomeSnssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceInfoForPDUSession) GetHomeSnssaiOk() (*Snssai, bool) {
	if o == nil || IsNil(o.HomeSnssai) {
		return nil, false
	}
	return o.HomeSnssai, true
}

// HasHomeSnssai returns a boolean if a field has been set.
func (o *SliceInfoForPDUSession) HasHomeSnssai() bool {
	if o != nil && !IsNil(o.HomeSnssai) {
		return true
	}

	return false
}

// SetHomeSnssai gets a reference to the given Snssai and assigns it to the HomeSnssai field.
func (o *SliceInfoForPDUSession) SetHomeSnssai(v Snssai) {
	o.HomeSnssai = &v
}

func (o SliceInfoForPDUSession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SliceInfoForPDUSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sNssai"] = o.SNssai
	toSerialize["roamingIndication"] = o.RoamingIndication
	if !IsNil(o.HomeSnssai) {
		toSerialize["homeSnssai"] = o.HomeSnssai
	}
	return toSerialize, nil
}

type NullableSliceInfoForPDUSession struct {
	value *SliceInfoForPDUSession
	isSet bool
}

func (v NullableSliceInfoForPDUSession) Get() *SliceInfoForPDUSession {
	return v.value
}

func (v *NullableSliceInfoForPDUSession) Set(val *SliceInfoForPDUSession) {
	v.value = val
	v.isSet = true
}

func (v NullableSliceInfoForPDUSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSliceInfoForPDUSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliceInfoForPDUSession(val *SliceInfoForPDUSession) *NullableSliceInfoForPDUSession {
	return &NullableSliceInfoForPDUSession{value: val, isSet: true}
}

func (v NullableSliceInfoForPDUSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliceInfoForPDUSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
