/*
Neasdf_DNSContext

EASDF DNS Context Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Neasdf_DNSContext

import (
	"encoding/json"
)

// checks if the DnsRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsRule{}

// DnsRule DNS message handling rule
type DnsRule struct {
	DnsRuleId *string `json:"dnsRuleId,omitempty"`
	Label *string `json:"label,omitempty"`
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	Precedence *int32 `json:"precedence,omitempty"`
	// map of DNS query message detection templates where a valid JSON string serves as key
	DnsQueryMdtList *map[string]DnsQueryMdt `json:"dnsQueryMdtList,omitempty"`
	BaseDnsQueryMdtList []BaselineDnsQueryMdtInfo `json:"baseDnsQueryMdtList,omitempty"`
	// map of DNS response message detection templates where a valid JSON string serves as key
	DnsRspMdtList *map[string]DnsRspMdt `json:"dnsRspMdtList,omitempty"`
	BaseDnsRspMdtList []BaselineDnsRspMdtInfo `json:"baseDnsRspMdtList,omitempty"`
	DnsMsgId *string `json:"dnsMsgId,omitempty"`
	// map of actions where a valid JSON string serves as key
	ActionList map[string]Action `json:"actionList"`
}

// NewDnsRule instantiates a new DnsRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsRule(actionList map[string]Action) *DnsRule {
	this := DnsRule{}
	return &this
}

// NewDnsRuleWithDefaults instantiates a new DnsRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsRuleWithDefaults() *DnsRule {
	this := DnsRule{}
	return &this
}

// GetDnsRuleId returns the DnsRuleId field value if set, zero value otherwise.
func (o *DnsRule) GetDnsRuleId() string {
	if o == nil || IsNil(o.DnsRuleId) {
		var ret string
		return ret
	}
	return *o.DnsRuleId
}

// GetDnsRuleIdOk returns a tuple with the DnsRuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRule) GetDnsRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.DnsRuleId) {
		return nil, false
	}
	return o.DnsRuleId, true
}

// HasDnsRuleId returns a boolean if a field has been set.
func (o *DnsRule) HasDnsRuleId() bool {
	if o != nil && !IsNil(o.DnsRuleId) {
		return true
	}

	return false
}

// SetDnsRuleId gets a reference to the given string and assigns it to the DnsRuleId field.
func (o *DnsRule) SetDnsRuleId(v string) {
	o.DnsRuleId = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DnsRule) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRule) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DnsRule) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DnsRule) SetLabel(v string) {
	o.Label = &v
}

// GetPrecedence returns the Precedence field value if set, zero value otherwise.
func (o *DnsRule) GetPrecedence() int32 {
	if o == nil || IsNil(o.Precedence) {
		var ret int32
		return ret
	}
	return *o.Precedence
}

// GetPrecedenceOk returns a tuple with the Precedence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRule) GetPrecedenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Precedence) {
		return nil, false
	}
	return o.Precedence, true
}

// HasPrecedence returns a boolean if a field has been set.
func (o *DnsRule) HasPrecedence() bool {
	if o != nil && !IsNil(o.Precedence) {
		return true
	}

	return false
}

// SetPrecedence gets a reference to the given int32 and assigns it to the Precedence field.
func (o *DnsRule) SetPrecedence(v int32) {
	o.Precedence = &v
}

// GetDnsQueryMdtList returns the DnsQueryMdtList field value if set, zero value otherwise.
func (o *DnsRule) GetDnsQueryMdtList() map[string]DnsQueryMdt {
	if o == nil || IsNil(o.DnsQueryMdtList) {
		var ret map[string]DnsQueryMdt
		return ret
	}
	return *o.DnsQueryMdtList
}

// GetDnsQueryMdtListOk returns a tuple with the DnsQueryMdtList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRule) GetDnsQueryMdtListOk() (*map[string]DnsQueryMdt, bool) {
	if o == nil || IsNil(o.DnsQueryMdtList) {
		return nil, false
	}
	return o.DnsQueryMdtList, true
}

// HasDnsQueryMdtList returns a boolean if a field has been set.
func (o *DnsRule) HasDnsQueryMdtList() bool {
	if o != nil && !IsNil(o.DnsQueryMdtList) {
		return true
	}

	return false
}

// SetDnsQueryMdtList gets a reference to the given map[string]DnsQueryMdt and assigns it to the DnsQueryMdtList field.
func (o *DnsRule) SetDnsQueryMdtList(v map[string]DnsQueryMdt) {
	o.DnsQueryMdtList = &v
}

// GetBaseDnsQueryMdtList returns the BaseDnsQueryMdtList field value if set, zero value otherwise.
func (o *DnsRule) GetBaseDnsQueryMdtList() []BaselineDnsQueryMdtInfo {
	if o == nil || IsNil(o.BaseDnsQueryMdtList) {
		var ret []BaselineDnsQueryMdtInfo
		return ret
	}
	return o.BaseDnsQueryMdtList
}

// GetBaseDnsQueryMdtListOk returns a tuple with the BaseDnsQueryMdtList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRule) GetBaseDnsQueryMdtListOk() ([]BaselineDnsQueryMdtInfo, bool) {
	if o == nil || IsNil(o.BaseDnsQueryMdtList) {
		return nil, false
	}
	return o.BaseDnsQueryMdtList, true
}

// HasBaseDnsQueryMdtList returns a boolean if a field has been set.
func (o *DnsRule) HasBaseDnsQueryMdtList() bool {
	if o != nil && !IsNil(o.BaseDnsQueryMdtList) {
		return true
	}

	return false
}

// SetBaseDnsQueryMdtList gets a reference to the given []BaselineDnsQueryMdtInfo and assigns it to the BaseDnsQueryMdtList field.
func (o *DnsRule) SetBaseDnsQueryMdtList(v []BaselineDnsQueryMdtInfo) {
	o.BaseDnsQueryMdtList = v
}

// GetDnsRspMdtList returns the DnsRspMdtList field value if set, zero value otherwise.
func (o *DnsRule) GetDnsRspMdtList() map[string]DnsRspMdt {
	if o == nil || IsNil(o.DnsRspMdtList) {
		var ret map[string]DnsRspMdt
		return ret
	}
	return *o.DnsRspMdtList
}

// GetDnsRspMdtListOk returns a tuple with the DnsRspMdtList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRule) GetDnsRspMdtListOk() (*map[string]DnsRspMdt, bool) {
	if o == nil || IsNil(o.DnsRspMdtList) {
		return nil, false
	}
	return o.DnsRspMdtList, true
}

// HasDnsRspMdtList returns a boolean if a field has been set.
func (o *DnsRule) HasDnsRspMdtList() bool {
	if o != nil && !IsNil(o.DnsRspMdtList) {
		return true
	}

	return false
}

// SetDnsRspMdtList gets a reference to the given map[string]DnsRspMdt and assigns it to the DnsRspMdtList field.
func (o *DnsRule) SetDnsRspMdtList(v map[string]DnsRspMdt) {
	o.DnsRspMdtList = &v
}

// GetBaseDnsRspMdtList returns the BaseDnsRspMdtList field value if set, zero value otherwise.
func (o *DnsRule) GetBaseDnsRspMdtList() []BaselineDnsRspMdtInfo {
	if o == nil || IsNil(o.BaseDnsRspMdtList) {
		var ret []BaselineDnsRspMdtInfo
		return ret
	}
	return o.BaseDnsRspMdtList
}

// GetBaseDnsRspMdtListOk returns a tuple with the BaseDnsRspMdtList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRule) GetBaseDnsRspMdtListOk() ([]BaselineDnsRspMdtInfo, bool) {
	if o == nil || IsNil(o.BaseDnsRspMdtList) {
		return nil, false
	}
	return o.BaseDnsRspMdtList, true
}

// HasBaseDnsRspMdtList returns a boolean if a field has been set.
func (o *DnsRule) HasBaseDnsRspMdtList() bool {
	if o != nil && !IsNil(o.BaseDnsRspMdtList) {
		return true
	}

	return false
}

// SetBaseDnsRspMdtList gets a reference to the given []BaselineDnsRspMdtInfo and assigns it to the BaseDnsRspMdtList field.
func (o *DnsRule) SetBaseDnsRspMdtList(v []BaselineDnsRspMdtInfo) {
	o.BaseDnsRspMdtList = v
}

// GetDnsMsgId returns the DnsMsgId field value if set, zero value otherwise.
func (o *DnsRule) GetDnsMsgId() string {
	if o == nil || IsNil(o.DnsMsgId) {
		var ret string
		return ret
	}
	return *o.DnsMsgId
}

// GetDnsMsgIdOk returns a tuple with the DnsMsgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRule) GetDnsMsgIdOk() (*string, bool) {
	if o == nil || IsNil(o.DnsMsgId) {
		return nil, false
	}
	return o.DnsMsgId, true
}

// HasDnsMsgId returns a boolean if a field has been set.
func (o *DnsRule) HasDnsMsgId() bool {
	if o != nil && !IsNil(o.DnsMsgId) {
		return true
	}

	return false
}

// SetDnsMsgId gets a reference to the given string and assigns it to the DnsMsgId field.
func (o *DnsRule) SetDnsMsgId(v string) {
	o.DnsMsgId = &v
}

// GetActionList returns the ActionList field value
func (o *DnsRule) GetActionList() map[string]Action {
	if o == nil {
		var ret map[string]Action
		return ret
	}

	return o.ActionList
}

// GetActionListOk returns a tuple with the ActionList field value
// and a boolean to check if the value has been set.
func (o *DnsRule) GetActionListOk() (*map[string]Action, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionList, true
}

// SetActionList sets field value
func (o *DnsRule) SetActionList(v map[string]Action) {
	o.ActionList = v
}

func (o DnsRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsRuleId) {
		toSerialize["dnsRuleId"] = o.DnsRuleId
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Precedence) {
		toSerialize["precedence"] = o.Precedence
	}
	if !IsNil(o.DnsQueryMdtList) {
		toSerialize["dnsQueryMdtList"] = o.DnsQueryMdtList
	}
	if !IsNil(o.BaseDnsQueryMdtList) {
		toSerialize["baseDnsQueryMdtList"] = o.BaseDnsQueryMdtList
	}
	if !IsNil(o.DnsRspMdtList) {
		toSerialize["dnsRspMdtList"] = o.DnsRspMdtList
	}
	if !IsNil(o.BaseDnsRspMdtList) {
		toSerialize["baseDnsRspMdtList"] = o.BaseDnsRspMdtList
	}
	if !IsNil(o.DnsMsgId) {
		toSerialize["dnsMsgId"] = o.DnsMsgId
	}
	toSerialize["actionList"] = o.ActionList
	return toSerialize, nil
}

type NullableDnsRule struct {
	value *DnsRule
	isSet bool
}

func (v NullableDnsRule) Get() *DnsRule {
	return v.value
}

func (v *NullableDnsRule) Set(val *DnsRule) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsRule) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsRule(val *DnsRule) *NullableDnsRule {
	return &NullableDnsRule{value: val, isSet: true}
}

func (v NullableDnsRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


