/*
Neasdf_DNSContext

EASDF DNS Context Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Neasdf_DNSContext

import (
	"encoding/json"
	"fmt"
)

// ApplyActionAnyOf the model 'ApplyActionAnyOf'
type ApplyActionAnyOf string

// List of ApplyAction_anyOf
const (
	BUFFER ApplyActionAnyOf = "BUFFER"
	REPORT ApplyActionAnyOf = "REPORT"
	FORWARD ApplyActionAnyOf = "FORWARD"
	DISCARD ApplyActionAnyOf = "DISCARD"
)

// All allowed values of ApplyActionAnyOf enum
var AllowedApplyActionAnyOfEnumValues = []ApplyActionAnyOf{
	"BUFFER",
	"REPORT",
	"FORWARD",
	"DISCARD",
}

func (v *ApplyActionAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplyActionAnyOf(value)
	for _, existing := range AllowedApplyActionAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplyActionAnyOf", value)
}

// NewApplyActionAnyOfFromValue returns a pointer to a valid ApplyActionAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplyActionAnyOfFromValue(v string) (*ApplyActionAnyOf, error) {
	ev := ApplyActionAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplyActionAnyOf: valid values are %v", v, AllowedApplyActionAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplyActionAnyOf) IsValid() bool {
	for _, existing := range AllowedApplyActionAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplyAction_anyOf value
func (v ApplyActionAnyOf) Ptr() *ApplyActionAnyOf {
	return &v
}

type NullableApplyActionAnyOf struct {
	value *ApplyActionAnyOf
	isSet bool
}

func (v NullableApplyActionAnyOf) Get() *ApplyActionAnyOf {
	return v.value
}

func (v *NullableApplyActionAnyOf) Set(val *ApplyActionAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyActionAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyActionAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyActionAnyOf(val *ApplyActionAnyOf) *NullableApplyActionAnyOf {
	return &NullableApplyActionAnyOf{value: val, isSet: true}
}

func (v NullableApplyActionAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyActionAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

