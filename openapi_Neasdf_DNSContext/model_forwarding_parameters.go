/*
Neasdf_DNSContext

EASDF DNS Context Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Neasdf_DNSContext

import (
	"encoding/json"
)

// checks if the ForwardingParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForwardingParameters{}

// ForwardingParameters Forwarding instructions
type ForwardingParameters struct {
	EcsOptionInfo *EcsOptionInfo `json:"ecsOptionInfo,omitempty"`
	DnsServerAddressInfo *DnsServerAddressInfo `json:"dnsServerAddressInfo,omitempty"`
}

// NewForwardingParameters instantiates a new ForwardingParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForwardingParameters() *ForwardingParameters {
	this := ForwardingParameters{}
	return &this
}

// NewForwardingParametersWithDefaults instantiates a new ForwardingParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForwardingParametersWithDefaults() *ForwardingParameters {
	this := ForwardingParameters{}
	return &this
}

// GetEcsOptionInfo returns the EcsOptionInfo field value if set, zero value otherwise.
func (o *ForwardingParameters) GetEcsOptionInfo() EcsOptionInfo {
	if o == nil || IsNil(o.EcsOptionInfo) {
		var ret EcsOptionInfo
		return ret
	}
	return *o.EcsOptionInfo
}

// GetEcsOptionInfoOk returns a tuple with the EcsOptionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForwardingParameters) GetEcsOptionInfoOk() (*EcsOptionInfo, bool) {
	if o == nil || IsNil(o.EcsOptionInfo) {
		return nil, false
	}
	return o.EcsOptionInfo, true
}

// HasEcsOptionInfo returns a boolean if a field has been set.
func (o *ForwardingParameters) HasEcsOptionInfo() bool {
	if o != nil && !IsNil(o.EcsOptionInfo) {
		return true
	}

	return false
}

// SetEcsOptionInfo gets a reference to the given EcsOptionInfo and assigns it to the EcsOptionInfo field.
func (o *ForwardingParameters) SetEcsOptionInfo(v EcsOptionInfo) {
	o.EcsOptionInfo = &v
}

// GetDnsServerAddressInfo returns the DnsServerAddressInfo field value if set, zero value otherwise.
func (o *ForwardingParameters) GetDnsServerAddressInfo() DnsServerAddressInfo {
	if o == nil || IsNil(o.DnsServerAddressInfo) {
		var ret DnsServerAddressInfo
		return ret
	}
	return *o.DnsServerAddressInfo
}

// GetDnsServerAddressInfoOk returns a tuple with the DnsServerAddressInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForwardingParameters) GetDnsServerAddressInfoOk() (*DnsServerAddressInfo, bool) {
	if o == nil || IsNil(o.DnsServerAddressInfo) {
		return nil, false
	}
	return o.DnsServerAddressInfo, true
}

// HasDnsServerAddressInfo returns a boolean if a field has been set.
func (o *ForwardingParameters) HasDnsServerAddressInfo() bool {
	if o != nil && !IsNil(o.DnsServerAddressInfo) {
		return true
	}

	return false
}

// SetDnsServerAddressInfo gets a reference to the given DnsServerAddressInfo and assigns it to the DnsServerAddressInfo field.
func (o *ForwardingParameters) SetDnsServerAddressInfo(v DnsServerAddressInfo) {
	o.DnsServerAddressInfo = &v
}

func (o ForwardingParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForwardingParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EcsOptionInfo) {
		toSerialize["ecsOptionInfo"] = o.EcsOptionInfo
	}
	if !IsNil(o.DnsServerAddressInfo) {
		toSerialize["dnsServerAddressInfo"] = o.DnsServerAddressInfo
	}
	return toSerialize, nil
}

type NullableForwardingParameters struct {
	value *ForwardingParameters
	isSet bool
}

func (v NullableForwardingParameters) Get() *ForwardingParameters {
	return v.value
}

func (v *NullableForwardingParameters) Set(val *ForwardingParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableForwardingParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableForwardingParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForwardingParameters(val *ForwardingParameters) *NullableForwardingParameters {
	return &NullableForwardingParameters{value: val, isSet: true}
}

func (v NullableForwardingParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForwardingParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


