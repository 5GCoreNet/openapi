/*
Naf_ProSe API

Naf_ProSe Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Naf_ProSe

import (
	"encoding/json"
	"fmt"
)

// AuthResponseTypeAnyOf the model 'AuthResponseTypeAnyOf'
type AuthResponseTypeAnyOf string

// List of AuthResponseType_anyOf
const (
	OPEN_DISCOVERY_EXTENSION_ANNOUNCE_ACK AuthResponseTypeAnyOf = "OPEN_DISCOVERY_EXTENSION_ANNOUNCE_ACK"
	RESTRICTED_DISCOVERY_ANNOUNCE_ACK AuthResponseTypeAnyOf = "RESTRICTED_DISCOVERY_ANNOUNCE_ACK"
	RESTRICTED_DISCOVERY_EXTENSION_ANNOUNCE_ACK AuthResponseTypeAnyOf = "RESTRICTED_DISCOVERY_EXTENSION_ANNOUNCE_ACK"
	OPEN_DISCOVERY_EXTENSION_MONITOR_ACK AuthResponseTypeAnyOf = "OPEN_DISCOVERY_EXTENSION_MONITOR_ACK"
	RESTRICTED_DISCOVERY_MONITOR_ACK AuthResponseTypeAnyOf = "RESTRICTED_DISCOVERY_MONITOR_ACK"
	RESTRICTED_DISCOVERY_EXTENSION_MONITOR_ACK AuthResponseTypeAnyOf = "RESTRICTED_DISCOVERY_EXTENSION_MONITOR_ACK"
	RESTRICTED_DISCOVERY_PERMISSION_ACK AuthResponseTypeAnyOf = "RESTRICTED_DISCOVERY_PERMISSION_ACK"
	RESTRICTED_DISCOVERY_RESPONSE_ACK AuthResponseTypeAnyOf = "RESTRICTED_DISCOVERY_RESPONSE_ACK"
	RESTRICTED_DISCOVERY_QUERY_ACK AuthResponseTypeAnyOf = "RESTRICTED_DISCOVERY_QUERY_ACK"
	RESTRICTED_DISCOVERY_MATCH_ACK AuthResponseTypeAnyOf = "RESTRICTED_DISCOVERY_MATCH_ACK"
)

// All allowed values of AuthResponseTypeAnyOf enum
var AllowedAuthResponseTypeAnyOfEnumValues = []AuthResponseTypeAnyOf{
	"OPEN_DISCOVERY_EXTENSION_ANNOUNCE_ACK",
	"RESTRICTED_DISCOVERY_ANNOUNCE_ACK",
	"RESTRICTED_DISCOVERY_EXTENSION_ANNOUNCE_ACK",
	"OPEN_DISCOVERY_EXTENSION_MONITOR_ACK",
	"RESTRICTED_DISCOVERY_MONITOR_ACK",
	"RESTRICTED_DISCOVERY_EXTENSION_MONITOR_ACK",
	"RESTRICTED_DISCOVERY_PERMISSION_ACK",
	"RESTRICTED_DISCOVERY_RESPONSE_ACK",
	"RESTRICTED_DISCOVERY_QUERY_ACK",
	"RESTRICTED_DISCOVERY_MATCH_ACK",
}

func (v *AuthResponseTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthResponseTypeAnyOf(value)
	for _, existing := range AllowedAuthResponseTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthResponseTypeAnyOf", value)
}

// NewAuthResponseTypeAnyOfFromValue returns a pointer to a valid AuthResponseTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthResponseTypeAnyOfFromValue(v string) (*AuthResponseTypeAnyOf, error) {
	ev := AuthResponseTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthResponseTypeAnyOf: valid values are %v", v, AllowedAuthResponseTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthResponseTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedAuthResponseTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthResponseType_anyOf value
func (v AuthResponseTypeAnyOf) Ptr() *AuthResponseTypeAnyOf {
	return &v
}

type NullableAuthResponseTypeAnyOf struct {
	value *AuthResponseTypeAnyOf
	isSet bool
}

func (v NullableAuthResponseTypeAnyOf) Get() *AuthResponseTypeAnyOf {
	return v.value
}

func (v *NullableAuthResponseTypeAnyOf) Set(val *AuthResponseTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthResponseTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthResponseTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthResponseTypeAnyOf(val *AuthResponseTypeAnyOf) *NullableAuthResponseTypeAnyOf {
	return &NullableAuthResponseTypeAnyOf{value: val, isSet: true}
}

func (v NullableAuthResponseTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthResponseTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

