/*
Nadrf_DataManagement

ADRF Data Management Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nadrf_DataManagement

import (
	"encoding/json"
)

// checks if the NadrfDataStoreSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NadrfDataStoreSubscription{}

// NadrfDataStoreSubscription Contains information to be used by the ADRF to create a Data or Analytics subscription. 
type NadrfDataStoreSubscription struct {
	AnaSub *NnwdafEventsSubscription `json:"anaSub,omitempty"`
	DataSub *DataSubscription `json:"dataSub,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	TargetNfId *string `json:"targetNfId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	TargetNfSetId *string `json:"targetNfSetId,omitempty"`
	FormatInstruct *FormattingInstruction `json:"formatInstruct,omitempty"`
	ProcInstruct *ProcessingInstruction `json:"procInstruct,omitempty"`
	// Processing instructions to be used for sending event notifications.
	MultiProcInstructs []ProcessingInstruction `json:"multiProcInstructs,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewNadrfDataStoreSubscription instantiates a new NadrfDataStoreSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNadrfDataStoreSubscription() *NadrfDataStoreSubscription {
	this := NadrfDataStoreSubscription{}
	return &this
}

// NewNadrfDataStoreSubscriptionWithDefaults instantiates a new NadrfDataStoreSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNadrfDataStoreSubscriptionWithDefaults() *NadrfDataStoreSubscription {
	this := NadrfDataStoreSubscription{}
	return &this
}

// GetAnaSub returns the AnaSub field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetAnaSub() NnwdafEventsSubscription {
	if o == nil || IsNil(o.AnaSub) {
		var ret NnwdafEventsSubscription
		return ret
	}
	return *o.AnaSub
}

// GetAnaSubOk returns a tuple with the AnaSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetAnaSubOk() (*NnwdafEventsSubscription, bool) {
	if o == nil || IsNil(o.AnaSub) {
		return nil, false
	}
	return o.AnaSub, true
}

// HasAnaSub returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasAnaSub() bool {
	if o != nil && !IsNil(o.AnaSub) {
		return true
	}

	return false
}

// SetAnaSub gets a reference to the given NnwdafEventsSubscription and assigns it to the AnaSub field.
func (o *NadrfDataStoreSubscription) SetAnaSub(v NnwdafEventsSubscription) {
	o.AnaSub = &v
}

// GetDataSub returns the DataSub field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetDataSub() DataSubscription {
	if o == nil || IsNil(o.DataSub) {
		var ret DataSubscription
		return ret
	}
	return *o.DataSub
}

// GetDataSubOk returns a tuple with the DataSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetDataSubOk() (*DataSubscription, bool) {
	if o == nil || IsNil(o.DataSub) {
		return nil, false
	}
	return o.DataSub, true
}

// HasDataSub returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasDataSub() bool {
	if o != nil && !IsNil(o.DataSub) {
		return true
	}

	return false
}

// SetDataSub gets a reference to the given DataSubscription and assigns it to the DataSub field.
func (o *NadrfDataStoreSubscription) SetDataSub(v DataSubscription) {
	o.DataSub = &v
}

// GetTargetNfId returns the TargetNfId field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetTargetNfId() string {
	if o == nil || IsNil(o.TargetNfId) {
		var ret string
		return ret
	}
	return *o.TargetNfId
}

// GetTargetNfIdOk returns a tuple with the TargetNfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetTargetNfIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetNfId) {
		return nil, false
	}
	return o.TargetNfId, true
}

// HasTargetNfId returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasTargetNfId() bool {
	if o != nil && !IsNil(o.TargetNfId) {
		return true
	}

	return false
}

// SetTargetNfId gets a reference to the given string and assigns it to the TargetNfId field.
func (o *NadrfDataStoreSubscription) SetTargetNfId(v string) {
	o.TargetNfId = &v
}

// GetTargetNfSetId returns the TargetNfSetId field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetTargetNfSetId() string {
	if o == nil || IsNil(o.TargetNfSetId) {
		var ret string
		return ret
	}
	return *o.TargetNfSetId
}

// GetTargetNfSetIdOk returns a tuple with the TargetNfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetTargetNfSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetNfSetId) {
		return nil, false
	}
	return o.TargetNfSetId, true
}

// HasTargetNfSetId returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasTargetNfSetId() bool {
	if o != nil && !IsNil(o.TargetNfSetId) {
		return true
	}

	return false
}

// SetTargetNfSetId gets a reference to the given string and assigns it to the TargetNfSetId field.
func (o *NadrfDataStoreSubscription) SetTargetNfSetId(v string) {
	o.TargetNfSetId = &v
}

// GetFormatInstruct returns the FormatInstruct field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetFormatInstruct() FormattingInstruction {
	if o == nil || IsNil(o.FormatInstruct) {
		var ret FormattingInstruction
		return ret
	}
	return *o.FormatInstruct
}

// GetFormatInstructOk returns a tuple with the FormatInstruct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetFormatInstructOk() (*FormattingInstruction, bool) {
	if o == nil || IsNil(o.FormatInstruct) {
		return nil, false
	}
	return o.FormatInstruct, true
}

// HasFormatInstruct returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasFormatInstruct() bool {
	if o != nil && !IsNil(o.FormatInstruct) {
		return true
	}

	return false
}

// SetFormatInstruct gets a reference to the given FormattingInstruction and assigns it to the FormatInstruct field.
func (o *NadrfDataStoreSubscription) SetFormatInstruct(v FormattingInstruction) {
	o.FormatInstruct = &v
}

// GetProcInstruct returns the ProcInstruct field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetProcInstruct() ProcessingInstruction {
	if o == nil || IsNil(o.ProcInstruct) {
		var ret ProcessingInstruction
		return ret
	}
	return *o.ProcInstruct
}

// GetProcInstructOk returns a tuple with the ProcInstruct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetProcInstructOk() (*ProcessingInstruction, bool) {
	if o == nil || IsNil(o.ProcInstruct) {
		return nil, false
	}
	return o.ProcInstruct, true
}

// HasProcInstruct returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasProcInstruct() bool {
	if o != nil && !IsNil(o.ProcInstruct) {
		return true
	}

	return false
}

// SetProcInstruct gets a reference to the given ProcessingInstruction and assigns it to the ProcInstruct field.
func (o *NadrfDataStoreSubscription) SetProcInstruct(v ProcessingInstruction) {
	o.ProcInstruct = &v
}

// GetMultiProcInstructs returns the MultiProcInstructs field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetMultiProcInstructs() []ProcessingInstruction {
	if o == nil || IsNil(o.MultiProcInstructs) {
		var ret []ProcessingInstruction
		return ret
	}
	return o.MultiProcInstructs
}

// GetMultiProcInstructsOk returns a tuple with the MultiProcInstructs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetMultiProcInstructsOk() ([]ProcessingInstruction, bool) {
	if o == nil || IsNil(o.MultiProcInstructs) {
		return nil, false
	}
	return o.MultiProcInstructs, true
}

// HasMultiProcInstructs returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasMultiProcInstructs() bool {
	if o != nil && !IsNil(o.MultiProcInstructs) {
		return true
	}

	return false
}

// SetMultiProcInstructs gets a reference to the given []ProcessingInstruction and assigns it to the MultiProcInstructs field.
func (o *NadrfDataStoreSubscription) SetMultiProcInstructs(v []ProcessingInstruction) {
	o.MultiProcInstructs = v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *NadrfDataStoreSubscription) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o NadrfDataStoreSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NadrfDataStoreSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnaSub) {
		toSerialize["anaSub"] = o.AnaSub
	}
	if !IsNil(o.DataSub) {
		toSerialize["dataSub"] = o.DataSub
	}
	if !IsNil(o.TargetNfId) {
		toSerialize["targetNfId"] = o.TargetNfId
	}
	if !IsNil(o.TargetNfSetId) {
		toSerialize["targetNfSetId"] = o.TargetNfSetId
	}
	if !IsNil(o.FormatInstruct) {
		toSerialize["formatInstruct"] = o.FormatInstruct
	}
	if !IsNil(o.ProcInstruct) {
		toSerialize["procInstruct"] = o.ProcInstruct
	}
	if !IsNil(o.MultiProcInstructs) {
		toSerialize["multiProcInstructs"] = o.MultiProcInstructs
	}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableNadrfDataStoreSubscription struct {
	value *NadrfDataStoreSubscription
	isSet bool
}

func (v NullableNadrfDataStoreSubscription) Get() *NadrfDataStoreSubscription {
	return v.value
}

func (v *NullableNadrfDataStoreSubscription) Set(val *NadrfDataStoreSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableNadrfDataStoreSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableNadrfDataStoreSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNadrfDataStoreSubscription(val *NadrfDataStoreSubscription) *NullableNadrfDataStoreSubscription {
	return &NullableNadrfDataStoreSubscription{value: val, isSet: true}
}

func (v NullableNadrfDataStoreSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNadrfDataStoreSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


