/*
Nadrf_DataManagement

ADRF Data Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nadrf_DataManagement

import (
	"encoding/json"
	"time"
)

// checks if the EventNotification1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNotification1{}

// EventNotification1 Represents a notification related to a single event that occurred.
type EventNotification1 struct {
	Event SmfEvent `json:"event"`
	// string with format 'date-time' as defined in OpenAPI.
	TimeStamp time.Time `json:"timeStamp"`
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.
	Supi *string `json:"supi,omitempty"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.
	Gpsi     *string `json:"gpsi,omitempty"`
	UeIpAddr *IpAddr `json:"ueIpAddr,omitempty"`
	// Transaction Information.
	TransacInfos []TransactionInfo `json:"transacInfos,omitempty"`
	// DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
	SourceDnai *string `json:"sourceDnai,omitempty"`
	// DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
	TargetDnai  *string         `json:"targetDnai,omitempty"`
	DnaiChgType *DnaiChangeType `json:"dnaiChgType,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
	SourceUeIpv4Addr   *string     `json:"sourceUeIpv4Addr,omitempty"`
	SourceUeIpv6Prefix *Ipv6Prefix `json:"sourceUeIpv6Prefix,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
	TargetUeIpv4Addr   *string                 `json:"targetUeIpv4Addr,omitempty"`
	TargetUeIpv6Prefix *Ipv6Prefix             `json:"targetUeIpv6Prefix,omitempty"`
	SourceTraRouting   NullableRouteToLocation `json:"sourceTraRouting,omitempty"`
	TargetTraRouting   NullableRouteToLocation `json:"targetTraRouting,omitempty"`
	// String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042.
	UeMac *string `json:"ueMac,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
	AdIpv4Addr   *string     `json:"adIpv4Addr,omitempty"`
	AdIpv6Prefix *Ipv6Prefix `json:"adIpv6Prefix,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
	ReIpv4Addr   *string     `json:"reIpv4Addr,omitempty"`
	ReIpv6Prefix *Ipv6Prefix `json:"reIpv6Prefix,omitempty"`
	PlmnId       *PlmnId     `json:"plmnId,omitempty"`
	AccType      *AccessType `json:"accType,omitempty"`
	// Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.
	PduSeId          *int32                `json:"pduSeId,omitempty"`
	RatType          *RatType              `json:"ratType,omitempty"`
	DddStatus        *DlDataDeliveryStatus `json:"dddStatus,omitempty"`
	DddTraDescriptor *DddTrafficDescriptor `json:"dddTraDescriptor,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	MaxWaitTime *time.Time            `json:"maxWaitTime,omitempty"`
	CommFailure *CommunicationFailure `json:"commFailure,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
	Ipv4Addr     *string         `json:"ipv4Addr,omitempty"`
	Ipv6Prefixes []Ipv6Prefix    `json:"ipv6Prefixes,omitempty"`
	Ipv6Addrs    []Ipv6Addr      `json:"ipv6Addrs,omitempty"`
	PduSessType  *PduSessionType `json:"pduSessType,omitempty"`
	// Unsigned integer identifying a QoS flow, within the range 0 to 63.
	Qfi *int32 `json:"qfi,omitempty"`
	// String providing an application identifier.
	AppId *string `json:"appId,omitempty"`
	// Descriptor(s) for non-IP traffic. It allows the encoding of multiple UL and/or DL flows. Each entry of the array describes a single Ethernet flow.
	EthFlowDescs []EthFlowDescription `json:"ethFlowDescs,omitempty"`
	// Contains the UL and/or DL Ethernet flows. Each entry of the array describes a single Ethernet flow.
	EthfDescs []EthFlowDescription `json:"ethfDescs,omitempty"`
	// Descriptor(s) for IP traffic. It allows the encoding of multiple UL and/or DL flows. Each entry of the array describes a single IP flow.
	FlowDescs []string `json:"flowDescs,omitempty"`
	// Contains the UL and/or DL IP flows. Each entry of the array describes a single IP flow.
	FDescs []string `json:"fDescs,omitempty"`
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").
	Dnn          *string       `json:"dnn,omitempty"`
	Snssai       *Snssai       `json:"snssai,omitempty"`
	UlDelays     []int32       `json:"ulDelays,omitempty"`
	DlDelays     []int32       `json:"dlDelays,omitempty"`
	RtDelays     []int32       `json:"rtDelays,omitempty"`
	TimeWindow   *TimeWindow   `json:"timeWindow,omitempty"`
	SmNasFromUe  *SmNasFromUe  `json:"smNasFromUe,omitempty"`
	SmNasFromSmf *SmNasFromSmf `json:"smNasFromSmf,omitempty"`
	// Indicates whether the redundant transmission is setup or terminated. Set to \"true\" if  the redundant transmission is setup, otherwise set to \"false\" if the redundant  transmission is terminated. Default value is set to \"false\".
	UpRedTrans *bool   `json:"upRedTrans,omitempty"`
	SsId       *string `json:"ssId,omitempty"`
	BssId      *string `json:"bssId,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	StartWlan *time.Time `json:"startWlan,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	EndWlan      *time.Time              `json:"endWlan,omitempty"`
	PduSessInfos []PduSessionInformation `json:"pduSessInfos,omitempty"`
	UpfInfo      *UpfInformation         `json:"upfInfo,omitempty"`
}

// NewEventNotification1 instantiates a new EventNotification1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNotification1(event SmfEvent, timeStamp time.Time) *EventNotification1 {
	this := EventNotification1{}
	this.Event = event
	this.TimeStamp = timeStamp
	return &this
}

// NewEventNotification1WithDefaults instantiates a new EventNotification1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNotification1WithDefaults() *EventNotification1 {
	this := EventNotification1{}
	return &this
}

// GetEvent returns the Event field value
func (o *EventNotification1) GetEvent() SmfEvent {
	if o == nil {
		var ret SmfEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetEventOk() (*SmfEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *EventNotification1) SetEvent(v SmfEvent) {
	o.Event = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *EventNotification1) GetTimeStamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetTimeStampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *EventNotification1) SetTimeStamp(v time.Time) {
	o.TimeStamp = v
}

// GetSupi returns the Supi field value if set, zero value otherwise.
func (o *EventNotification1) GetSupi() string {
	if o == nil || IsNil(o.Supi) {
		var ret string
		return ret
	}
	return *o.Supi
}

// GetSupiOk returns a tuple with the Supi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetSupiOk() (*string, bool) {
	if o == nil || IsNil(o.Supi) {
		return nil, false
	}
	return o.Supi, true
}

// HasSupi returns a boolean if a field has been set.
func (o *EventNotification1) HasSupi() bool {
	if o != nil && !IsNil(o.Supi) {
		return true
	}

	return false
}

// SetSupi gets a reference to the given string and assigns it to the Supi field.
func (o *EventNotification1) SetSupi(v string) {
	o.Supi = &v
}

// GetGpsi returns the Gpsi field value if set, zero value otherwise.
func (o *EventNotification1) GetGpsi() string {
	if o == nil || IsNil(o.Gpsi) {
		var ret string
		return ret
	}
	return *o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetGpsiOk() (*string, bool) {
	if o == nil || IsNil(o.Gpsi) {
		return nil, false
	}
	return o.Gpsi, true
}

// HasGpsi returns a boolean if a field has been set.
func (o *EventNotification1) HasGpsi() bool {
	if o != nil && !IsNil(o.Gpsi) {
		return true
	}

	return false
}

// SetGpsi gets a reference to the given string and assigns it to the Gpsi field.
func (o *EventNotification1) SetGpsi(v string) {
	o.Gpsi = &v
}

// GetUeIpAddr returns the UeIpAddr field value if set, zero value otherwise.
func (o *EventNotification1) GetUeIpAddr() IpAddr {
	if o == nil || IsNil(o.UeIpAddr) {
		var ret IpAddr
		return ret
	}
	return *o.UeIpAddr
}

// GetUeIpAddrOk returns a tuple with the UeIpAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetUeIpAddrOk() (*IpAddr, bool) {
	if o == nil || IsNil(o.UeIpAddr) {
		return nil, false
	}
	return o.UeIpAddr, true
}

// HasUeIpAddr returns a boolean if a field has been set.
func (o *EventNotification1) HasUeIpAddr() bool {
	if o != nil && !IsNil(o.UeIpAddr) {
		return true
	}

	return false
}

// SetUeIpAddr gets a reference to the given IpAddr and assigns it to the UeIpAddr field.
func (o *EventNotification1) SetUeIpAddr(v IpAddr) {
	o.UeIpAddr = &v
}

// GetTransacInfos returns the TransacInfos field value if set, zero value otherwise.
func (o *EventNotification1) GetTransacInfos() []TransactionInfo {
	if o == nil || IsNil(o.TransacInfos) {
		var ret []TransactionInfo
		return ret
	}
	return o.TransacInfos
}

// GetTransacInfosOk returns a tuple with the TransacInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetTransacInfosOk() ([]TransactionInfo, bool) {
	if o == nil || IsNil(o.TransacInfos) {
		return nil, false
	}
	return o.TransacInfos, true
}

// HasTransacInfos returns a boolean if a field has been set.
func (o *EventNotification1) HasTransacInfos() bool {
	if o != nil && !IsNil(o.TransacInfos) {
		return true
	}

	return false
}

// SetTransacInfos gets a reference to the given []TransactionInfo and assigns it to the TransacInfos field.
func (o *EventNotification1) SetTransacInfos(v []TransactionInfo) {
	o.TransacInfos = v
}

// GetSourceDnai returns the SourceDnai field value if set, zero value otherwise.
func (o *EventNotification1) GetSourceDnai() string {
	if o == nil || IsNil(o.SourceDnai) {
		var ret string
		return ret
	}
	return *o.SourceDnai
}

// GetSourceDnaiOk returns a tuple with the SourceDnai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetSourceDnaiOk() (*string, bool) {
	if o == nil || IsNil(o.SourceDnai) {
		return nil, false
	}
	return o.SourceDnai, true
}

// HasSourceDnai returns a boolean if a field has been set.
func (o *EventNotification1) HasSourceDnai() bool {
	if o != nil && !IsNil(o.SourceDnai) {
		return true
	}

	return false
}

// SetSourceDnai gets a reference to the given string and assigns it to the SourceDnai field.
func (o *EventNotification1) SetSourceDnai(v string) {
	o.SourceDnai = &v
}

// GetTargetDnai returns the TargetDnai field value if set, zero value otherwise.
func (o *EventNotification1) GetTargetDnai() string {
	if o == nil || IsNil(o.TargetDnai) {
		var ret string
		return ret
	}
	return *o.TargetDnai
}

// GetTargetDnaiOk returns a tuple with the TargetDnai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetTargetDnaiOk() (*string, bool) {
	if o == nil || IsNil(o.TargetDnai) {
		return nil, false
	}
	return o.TargetDnai, true
}

// HasTargetDnai returns a boolean if a field has been set.
func (o *EventNotification1) HasTargetDnai() bool {
	if o != nil && !IsNil(o.TargetDnai) {
		return true
	}

	return false
}

// SetTargetDnai gets a reference to the given string and assigns it to the TargetDnai field.
func (o *EventNotification1) SetTargetDnai(v string) {
	o.TargetDnai = &v
}

// GetDnaiChgType returns the DnaiChgType field value if set, zero value otherwise.
func (o *EventNotification1) GetDnaiChgType() DnaiChangeType {
	if o == nil || IsNil(o.DnaiChgType) {
		var ret DnaiChangeType
		return ret
	}
	return *o.DnaiChgType
}

// GetDnaiChgTypeOk returns a tuple with the DnaiChgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetDnaiChgTypeOk() (*DnaiChangeType, bool) {
	if o == nil || IsNil(o.DnaiChgType) {
		return nil, false
	}
	return o.DnaiChgType, true
}

// HasDnaiChgType returns a boolean if a field has been set.
func (o *EventNotification1) HasDnaiChgType() bool {
	if o != nil && !IsNil(o.DnaiChgType) {
		return true
	}

	return false
}

// SetDnaiChgType gets a reference to the given DnaiChangeType and assigns it to the DnaiChgType field.
func (o *EventNotification1) SetDnaiChgType(v DnaiChangeType) {
	o.DnaiChgType = &v
}

// GetSourceUeIpv4Addr returns the SourceUeIpv4Addr field value if set, zero value otherwise.
func (o *EventNotification1) GetSourceUeIpv4Addr() string {
	if o == nil || IsNil(o.SourceUeIpv4Addr) {
		var ret string
		return ret
	}
	return *o.SourceUeIpv4Addr
}

// GetSourceUeIpv4AddrOk returns a tuple with the SourceUeIpv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetSourceUeIpv4AddrOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUeIpv4Addr) {
		return nil, false
	}
	return o.SourceUeIpv4Addr, true
}

// HasSourceUeIpv4Addr returns a boolean if a field has been set.
func (o *EventNotification1) HasSourceUeIpv4Addr() bool {
	if o != nil && !IsNil(o.SourceUeIpv4Addr) {
		return true
	}

	return false
}

// SetSourceUeIpv4Addr gets a reference to the given string and assigns it to the SourceUeIpv4Addr field.
func (o *EventNotification1) SetSourceUeIpv4Addr(v string) {
	o.SourceUeIpv4Addr = &v
}

// GetSourceUeIpv6Prefix returns the SourceUeIpv6Prefix field value if set, zero value otherwise.
func (o *EventNotification1) GetSourceUeIpv6Prefix() Ipv6Prefix {
	if o == nil || IsNil(o.SourceUeIpv6Prefix) {
		var ret Ipv6Prefix
		return ret
	}
	return *o.SourceUeIpv6Prefix
}

// GetSourceUeIpv6PrefixOk returns a tuple with the SourceUeIpv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetSourceUeIpv6PrefixOk() (*Ipv6Prefix, bool) {
	if o == nil || IsNil(o.SourceUeIpv6Prefix) {
		return nil, false
	}
	return o.SourceUeIpv6Prefix, true
}

// HasSourceUeIpv6Prefix returns a boolean if a field has been set.
func (o *EventNotification1) HasSourceUeIpv6Prefix() bool {
	if o != nil && !IsNil(o.SourceUeIpv6Prefix) {
		return true
	}

	return false
}

// SetSourceUeIpv6Prefix gets a reference to the given Ipv6Prefix and assigns it to the SourceUeIpv6Prefix field.
func (o *EventNotification1) SetSourceUeIpv6Prefix(v Ipv6Prefix) {
	o.SourceUeIpv6Prefix = &v
}

// GetTargetUeIpv4Addr returns the TargetUeIpv4Addr field value if set, zero value otherwise.
func (o *EventNotification1) GetTargetUeIpv4Addr() string {
	if o == nil || IsNil(o.TargetUeIpv4Addr) {
		var ret string
		return ret
	}
	return *o.TargetUeIpv4Addr
}

// GetTargetUeIpv4AddrOk returns a tuple with the TargetUeIpv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetTargetUeIpv4AddrOk() (*string, bool) {
	if o == nil || IsNil(o.TargetUeIpv4Addr) {
		return nil, false
	}
	return o.TargetUeIpv4Addr, true
}

// HasTargetUeIpv4Addr returns a boolean if a field has been set.
func (o *EventNotification1) HasTargetUeIpv4Addr() bool {
	if o != nil && !IsNil(o.TargetUeIpv4Addr) {
		return true
	}

	return false
}

// SetTargetUeIpv4Addr gets a reference to the given string and assigns it to the TargetUeIpv4Addr field.
func (o *EventNotification1) SetTargetUeIpv4Addr(v string) {
	o.TargetUeIpv4Addr = &v
}

// GetTargetUeIpv6Prefix returns the TargetUeIpv6Prefix field value if set, zero value otherwise.
func (o *EventNotification1) GetTargetUeIpv6Prefix() Ipv6Prefix {
	if o == nil || IsNil(o.TargetUeIpv6Prefix) {
		var ret Ipv6Prefix
		return ret
	}
	return *o.TargetUeIpv6Prefix
}

// GetTargetUeIpv6PrefixOk returns a tuple with the TargetUeIpv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetTargetUeIpv6PrefixOk() (*Ipv6Prefix, bool) {
	if o == nil || IsNil(o.TargetUeIpv6Prefix) {
		return nil, false
	}
	return o.TargetUeIpv6Prefix, true
}

// HasTargetUeIpv6Prefix returns a boolean if a field has been set.
func (o *EventNotification1) HasTargetUeIpv6Prefix() bool {
	if o != nil && !IsNil(o.TargetUeIpv6Prefix) {
		return true
	}

	return false
}

// SetTargetUeIpv6Prefix gets a reference to the given Ipv6Prefix and assigns it to the TargetUeIpv6Prefix field.
func (o *EventNotification1) SetTargetUeIpv6Prefix(v Ipv6Prefix) {
	o.TargetUeIpv6Prefix = &v
}

// GetSourceTraRouting returns the SourceTraRouting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventNotification1) GetSourceTraRouting() RouteToLocation {
	if o == nil || IsNil(o.SourceTraRouting.Get()) {
		var ret RouteToLocation
		return ret
	}
	return *o.SourceTraRouting.Get()
}

// GetSourceTraRoutingOk returns a tuple with the SourceTraRouting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventNotification1) GetSourceTraRoutingOk() (*RouteToLocation, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceTraRouting.Get(), o.SourceTraRouting.IsSet()
}

// HasSourceTraRouting returns a boolean if a field has been set.
func (o *EventNotification1) HasSourceTraRouting() bool {
	if o != nil && o.SourceTraRouting.IsSet() {
		return true
	}

	return false
}

// SetSourceTraRouting gets a reference to the given NullableRouteToLocation and assigns it to the SourceTraRouting field.
func (o *EventNotification1) SetSourceTraRouting(v RouteToLocation) {
	o.SourceTraRouting.Set(&v)
}

// SetSourceTraRoutingNil sets the value for SourceTraRouting to be an explicit nil
func (o *EventNotification1) SetSourceTraRoutingNil() {
	o.SourceTraRouting.Set(nil)
}

// UnsetSourceTraRouting ensures that no value is present for SourceTraRouting, not even an explicit nil
func (o *EventNotification1) UnsetSourceTraRouting() {
	o.SourceTraRouting.Unset()
}

// GetTargetTraRouting returns the TargetTraRouting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventNotification1) GetTargetTraRouting() RouteToLocation {
	if o == nil || IsNil(o.TargetTraRouting.Get()) {
		var ret RouteToLocation
		return ret
	}
	return *o.TargetTraRouting.Get()
}

// GetTargetTraRoutingOk returns a tuple with the TargetTraRouting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventNotification1) GetTargetTraRoutingOk() (*RouteToLocation, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetTraRouting.Get(), o.TargetTraRouting.IsSet()
}

// HasTargetTraRouting returns a boolean if a field has been set.
func (o *EventNotification1) HasTargetTraRouting() bool {
	if o != nil && o.TargetTraRouting.IsSet() {
		return true
	}

	return false
}

// SetTargetTraRouting gets a reference to the given NullableRouteToLocation and assigns it to the TargetTraRouting field.
func (o *EventNotification1) SetTargetTraRouting(v RouteToLocation) {
	o.TargetTraRouting.Set(&v)
}

// SetTargetTraRoutingNil sets the value for TargetTraRouting to be an explicit nil
func (o *EventNotification1) SetTargetTraRoutingNil() {
	o.TargetTraRouting.Set(nil)
}

// UnsetTargetTraRouting ensures that no value is present for TargetTraRouting, not even an explicit nil
func (o *EventNotification1) UnsetTargetTraRouting() {
	o.TargetTraRouting.Unset()
}

// GetUeMac returns the UeMac field value if set, zero value otherwise.
func (o *EventNotification1) GetUeMac() string {
	if o == nil || IsNil(o.UeMac) {
		var ret string
		return ret
	}
	return *o.UeMac
}

// GetUeMacOk returns a tuple with the UeMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetUeMacOk() (*string, bool) {
	if o == nil || IsNil(o.UeMac) {
		return nil, false
	}
	return o.UeMac, true
}

// HasUeMac returns a boolean if a field has been set.
func (o *EventNotification1) HasUeMac() bool {
	if o != nil && !IsNil(o.UeMac) {
		return true
	}

	return false
}

// SetUeMac gets a reference to the given string and assigns it to the UeMac field.
func (o *EventNotification1) SetUeMac(v string) {
	o.UeMac = &v
}

// GetAdIpv4Addr returns the AdIpv4Addr field value if set, zero value otherwise.
func (o *EventNotification1) GetAdIpv4Addr() string {
	if o == nil || IsNil(o.AdIpv4Addr) {
		var ret string
		return ret
	}
	return *o.AdIpv4Addr
}

// GetAdIpv4AddrOk returns a tuple with the AdIpv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetAdIpv4AddrOk() (*string, bool) {
	if o == nil || IsNil(o.AdIpv4Addr) {
		return nil, false
	}
	return o.AdIpv4Addr, true
}

// HasAdIpv4Addr returns a boolean if a field has been set.
func (o *EventNotification1) HasAdIpv4Addr() bool {
	if o != nil && !IsNil(o.AdIpv4Addr) {
		return true
	}

	return false
}

// SetAdIpv4Addr gets a reference to the given string and assigns it to the AdIpv4Addr field.
func (o *EventNotification1) SetAdIpv4Addr(v string) {
	o.AdIpv4Addr = &v
}

// GetAdIpv6Prefix returns the AdIpv6Prefix field value if set, zero value otherwise.
func (o *EventNotification1) GetAdIpv6Prefix() Ipv6Prefix {
	if o == nil || IsNil(o.AdIpv6Prefix) {
		var ret Ipv6Prefix
		return ret
	}
	return *o.AdIpv6Prefix
}

// GetAdIpv6PrefixOk returns a tuple with the AdIpv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetAdIpv6PrefixOk() (*Ipv6Prefix, bool) {
	if o == nil || IsNil(o.AdIpv6Prefix) {
		return nil, false
	}
	return o.AdIpv6Prefix, true
}

// HasAdIpv6Prefix returns a boolean if a field has been set.
func (o *EventNotification1) HasAdIpv6Prefix() bool {
	if o != nil && !IsNil(o.AdIpv6Prefix) {
		return true
	}

	return false
}

// SetAdIpv6Prefix gets a reference to the given Ipv6Prefix and assigns it to the AdIpv6Prefix field.
func (o *EventNotification1) SetAdIpv6Prefix(v Ipv6Prefix) {
	o.AdIpv6Prefix = &v
}

// GetReIpv4Addr returns the ReIpv4Addr field value if set, zero value otherwise.
func (o *EventNotification1) GetReIpv4Addr() string {
	if o == nil || IsNil(o.ReIpv4Addr) {
		var ret string
		return ret
	}
	return *o.ReIpv4Addr
}

// GetReIpv4AddrOk returns a tuple with the ReIpv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetReIpv4AddrOk() (*string, bool) {
	if o == nil || IsNil(o.ReIpv4Addr) {
		return nil, false
	}
	return o.ReIpv4Addr, true
}

// HasReIpv4Addr returns a boolean if a field has been set.
func (o *EventNotification1) HasReIpv4Addr() bool {
	if o != nil && !IsNil(o.ReIpv4Addr) {
		return true
	}

	return false
}

// SetReIpv4Addr gets a reference to the given string and assigns it to the ReIpv4Addr field.
func (o *EventNotification1) SetReIpv4Addr(v string) {
	o.ReIpv4Addr = &v
}

// GetReIpv6Prefix returns the ReIpv6Prefix field value if set, zero value otherwise.
func (o *EventNotification1) GetReIpv6Prefix() Ipv6Prefix {
	if o == nil || IsNil(o.ReIpv6Prefix) {
		var ret Ipv6Prefix
		return ret
	}
	return *o.ReIpv6Prefix
}

// GetReIpv6PrefixOk returns a tuple with the ReIpv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetReIpv6PrefixOk() (*Ipv6Prefix, bool) {
	if o == nil || IsNil(o.ReIpv6Prefix) {
		return nil, false
	}
	return o.ReIpv6Prefix, true
}

// HasReIpv6Prefix returns a boolean if a field has been set.
func (o *EventNotification1) HasReIpv6Prefix() bool {
	if o != nil && !IsNil(o.ReIpv6Prefix) {
		return true
	}

	return false
}

// SetReIpv6Prefix gets a reference to the given Ipv6Prefix and assigns it to the ReIpv6Prefix field.
func (o *EventNotification1) SetReIpv6Prefix(v Ipv6Prefix) {
	o.ReIpv6Prefix = &v
}

// GetPlmnId returns the PlmnId field value if set, zero value otherwise.
func (o *EventNotification1) GetPlmnId() PlmnId {
	if o == nil || IsNil(o.PlmnId) {
		var ret PlmnId
		return ret
	}
	return *o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetPlmnIdOk() (*PlmnId, bool) {
	if o == nil || IsNil(o.PlmnId) {
		return nil, false
	}
	return o.PlmnId, true
}

// HasPlmnId returns a boolean if a field has been set.
func (o *EventNotification1) HasPlmnId() bool {
	if o != nil && !IsNil(o.PlmnId) {
		return true
	}

	return false
}

// SetPlmnId gets a reference to the given PlmnId and assigns it to the PlmnId field.
func (o *EventNotification1) SetPlmnId(v PlmnId) {
	o.PlmnId = &v
}

// GetAccType returns the AccType field value if set, zero value otherwise.
func (o *EventNotification1) GetAccType() AccessType {
	if o == nil || IsNil(o.AccType) {
		var ret AccessType
		return ret
	}
	return *o.AccType
}

// GetAccTypeOk returns a tuple with the AccType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetAccTypeOk() (*AccessType, bool) {
	if o == nil || IsNil(o.AccType) {
		return nil, false
	}
	return o.AccType, true
}

// HasAccType returns a boolean if a field has been set.
func (o *EventNotification1) HasAccType() bool {
	if o != nil && !IsNil(o.AccType) {
		return true
	}

	return false
}

// SetAccType gets a reference to the given AccessType and assigns it to the AccType field.
func (o *EventNotification1) SetAccType(v AccessType) {
	o.AccType = &v
}

// GetPduSeId returns the PduSeId field value if set, zero value otherwise.
func (o *EventNotification1) GetPduSeId() int32 {
	if o == nil || IsNil(o.PduSeId) {
		var ret int32
		return ret
	}
	return *o.PduSeId
}

// GetPduSeIdOk returns a tuple with the PduSeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetPduSeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PduSeId) {
		return nil, false
	}
	return o.PduSeId, true
}

// HasPduSeId returns a boolean if a field has been set.
func (o *EventNotification1) HasPduSeId() bool {
	if o != nil && !IsNil(o.PduSeId) {
		return true
	}

	return false
}

// SetPduSeId gets a reference to the given int32 and assigns it to the PduSeId field.
func (o *EventNotification1) SetPduSeId(v int32) {
	o.PduSeId = &v
}

// GetRatType returns the RatType field value if set, zero value otherwise.
func (o *EventNotification1) GetRatType() RatType {
	if o == nil || IsNil(o.RatType) {
		var ret RatType
		return ret
	}
	return *o.RatType
}

// GetRatTypeOk returns a tuple with the RatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetRatTypeOk() (*RatType, bool) {
	if o == nil || IsNil(o.RatType) {
		return nil, false
	}
	return o.RatType, true
}

// HasRatType returns a boolean if a field has been set.
func (o *EventNotification1) HasRatType() bool {
	if o != nil && !IsNil(o.RatType) {
		return true
	}

	return false
}

// SetRatType gets a reference to the given RatType and assigns it to the RatType field.
func (o *EventNotification1) SetRatType(v RatType) {
	o.RatType = &v
}

// GetDddStatus returns the DddStatus field value if set, zero value otherwise.
func (o *EventNotification1) GetDddStatus() DlDataDeliveryStatus {
	if o == nil || IsNil(o.DddStatus) {
		var ret DlDataDeliveryStatus
		return ret
	}
	return *o.DddStatus
}

// GetDddStatusOk returns a tuple with the DddStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetDddStatusOk() (*DlDataDeliveryStatus, bool) {
	if o == nil || IsNil(o.DddStatus) {
		return nil, false
	}
	return o.DddStatus, true
}

// HasDddStatus returns a boolean if a field has been set.
func (o *EventNotification1) HasDddStatus() bool {
	if o != nil && !IsNil(o.DddStatus) {
		return true
	}

	return false
}

// SetDddStatus gets a reference to the given DlDataDeliveryStatus and assigns it to the DddStatus field.
func (o *EventNotification1) SetDddStatus(v DlDataDeliveryStatus) {
	o.DddStatus = &v
}

// GetDddTraDescriptor returns the DddTraDescriptor field value if set, zero value otherwise.
func (o *EventNotification1) GetDddTraDescriptor() DddTrafficDescriptor {
	if o == nil || IsNil(o.DddTraDescriptor) {
		var ret DddTrafficDescriptor
		return ret
	}
	return *o.DddTraDescriptor
}

// GetDddTraDescriptorOk returns a tuple with the DddTraDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetDddTraDescriptorOk() (*DddTrafficDescriptor, bool) {
	if o == nil || IsNil(o.DddTraDescriptor) {
		return nil, false
	}
	return o.DddTraDescriptor, true
}

// HasDddTraDescriptor returns a boolean if a field has been set.
func (o *EventNotification1) HasDddTraDescriptor() bool {
	if o != nil && !IsNil(o.DddTraDescriptor) {
		return true
	}

	return false
}

// SetDddTraDescriptor gets a reference to the given DddTrafficDescriptor and assigns it to the DddTraDescriptor field.
func (o *EventNotification1) SetDddTraDescriptor(v DddTrafficDescriptor) {
	o.DddTraDescriptor = &v
}

// GetMaxWaitTime returns the MaxWaitTime field value if set, zero value otherwise.
func (o *EventNotification1) GetMaxWaitTime() time.Time {
	if o == nil || IsNil(o.MaxWaitTime) {
		var ret time.Time
		return ret
	}
	return *o.MaxWaitTime
}

// GetMaxWaitTimeOk returns a tuple with the MaxWaitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetMaxWaitTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MaxWaitTime) {
		return nil, false
	}
	return o.MaxWaitTime, true
}

// HasMaxWaitTime returns a boolean if a field has been set.
func (o *EventNotification1) HasMaxWaitTime() bool {
	if o != nil && !IsNil(o.MaxWaitTime) {
		return true
	}

	return false
}

// SetMaxWaitTime gets a reference to the given time.Time and assigns it to the MaxWaitTime field.
func (o *EventNotification1) SetMaxWaitTime(v time.Time) {
	o.MaxWaitTime = &v
}

// GetCommFailure returns the CommFailure field value if set, zero value otherwise.
func (o *EventNotification1) GetCommFailure() CommunicationFailure {
	if o == nil || IsNil(o.CommFailure) {
		var ret CommunicationFailure
		return ret
	}
	return *o.CommFailure
}

// GetCommFailureOk returns a tuple with the CommFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetCommFailureOk() (*CommunicationFailure, bool) {
	if o == nil || IsNil(o.CommFailure) {
		return nil, false
	}
	return o.CommFailure, true
}

// HasCommFailure returns a boolean if a field has been set.
func (o *EventNotification1) HasCommFailure() bool {
	if o != nil && !IsNil(o.CommFailure) {
		return true
	}

	return false
}

// SetCommFailure gets a reference to the given CommunicationFailure and assigns it to the CommFailure field.
func (o *EventNotification1) SetCommFailure(v CommunicationFailure) {
	o.CommFailure = &v
}

// GetIpv4Addr returns the Ipv4Addr field value if set, zero value otherwise.
func (o *EventNotification1) GetIpv4Addr() string {
	if o == nil || IsNil(o.Ipv4Addr) {
		var ret string
		return ret
	}
	return *o.Ipv4Addr
}

// GetIpv4AddrOk returns a tuple with the Ipv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetIpv4AddrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Addr) {
		return nil, false
	}
	return o.Ipv4Addr, true
}

// HasIpv4Addr returns a boolean if a field has been set.
func (o *EventNotification1) HasIpv4Addr() bool {
	if o != nil && !IsNil(o.Ipv4Addr) {
		return true
	}

	return false
}

// SetIpv4Addr gets a reference to the given string and assigns it to the Ipv4Addr field.
func (o *EventNotification1) SetIpv4Addr(v string) {
	o.Ipv4Addr = &v
}

// GetIpv6Prefixes returns the Ipv6Prefixes field value if set, zero value otherwise.
func (o *EventNotification1) GetIpv6Prefixes() []Ipv6Prefix {
	if o == nil || IsNil(o.Ipv6Prefixes) {
		var ret []Ipv6Prefix
		return ret
	}
	return o.Ipv6Prefixes
}

// GetIpv6PrefixesOk returns a tuple with the Ipv6Prefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetIpv6PrefixesOk() ([]Ipv6Prefix, bool) {
	if o == nil || IsNil(o.Ipv6Prefixes) {
		return nil, false
	}
	return o.Ipv6Prefixes, true
}

// HasIpv6Prefixes returns a boolean if a field has been set.
func (o *EventNotification1) HasIpv6Prefixes() bool {
	if o != nil && !IsNil(o.Ipv6Prefixes) {
		return true
	}

	return false
}

// SetIpv6Prefixes gets a reference to the given []Ipv6Prefix and assigns it to the Ipv6Prefixes field.
func (o *EventNotification1) SetIpv6Prefixes(v []Ipv6Prefix) {
	o.Ipv6Prefixes = v
}

// GetIpv6Addrs returns the Ipv6Addrs field value if set, zero value otherwise.
func (o *EventNotification1) GetIpv6Addrs() []Ipv6Addr {
	if o == nil || IsNil(o.Ipv6Addrs) {
		var ret []Ipv6Addr
		return ret
	}
	return o.Ipv6Addrs
}

// GetIpv6AddrsOk returns a tuple with the Ipv6Addrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetIpv6AddrsOk() ([]Ipv6Addr, bool) {
	if o == nil || IsNil(o.Ipv6Addrs) {
		return nil, false
	}
	return o.Ipv6Addrs, true
}

// HasIpv6Addrs returns a boolean if a field has been set.
func (o *EventNotification1) HasIpv6Addrs() bool {
	if o != nil && !IsNil(o.Ipv6Addrs) {
		return true
	}

	return false
}

// SetIpv6Addrs gets a reference to the given []Ipv6Addr and assigns it to the Ipv6Addrs field.
func (o *EventNotification1) SetIpv6Addrs(v []Ipv6Addr) {
	o.Ipv6Addrs = v
}

// GetPduSessType returns the PduSessType field value if set, zero value otherwise.
func (o *EventNotification1) GetPduSessType() PduSessionType {
	if o == nil || IsNil(o.PduSessType) {
		var ret PduSessionType
		return ret
	}
	return *o.PduSessType
}

// GetPduSessTypeOk returns a tuple with the PduSessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetPduSessTypeOk() (*PduSessionType, bool) {
	if o == nil || IsNil(o.PduSessType) {
		return nil, false
	}
	return o.PduSessType, true
}

// HasPduSessType returns a boolean if a field has been set.
func (o *EventNotification1) HasPduSessType() bool {
	if o != nil && !IsNil(o.PduSessType) {
		return true
	}

	return false
}

// SetPduSessType gets a reference to the given PduSessionType and assigns it to the PduSessType field.
func (o *EventNotification1) SetPduSessType(v PduSessionType) {
	o.PduSessType = &v
}

// GetQfi returns the Qfi field value if set, zero value otherwise.
func (o *EventNotification1) GetQfi() int32 {
	if o == nil || IsNil(o.Qfi) {
		var ret int32
		return ret
	}
	return *o.Qfi
}

// GetQfiOk returns a tuple with the Qfi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetQfiOk() (*int32, bool) {
	if o == nil || IsNil(o.Qfi) {
		return nil, false
	}
	return o.Qfi, true
}

// HasQfi returns a boolean if a field has been set.
func (o *EventNotification1) HasQfi() bool {
	if o != nil && !IsNil(o.Qfi) {
		return true
	}

	return false
}

// SetQfi gets a reference to the given int32 and assigns it to the Qfi field.
func (o *EventNotification1) SetQfi(v int32) {
	o.Qfi = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *EventNotification1) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *EventNotification1) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *EventNotification1) SetAppId(v string) {
	o.AppId = &v
}

// GetEthFlowDescs returns the EthFlowDescs field value if set, zero value otherwise.
func (o *EventNotification1) GetEthFlowDescs() []EthFlowDescription {
	if o == nil || IsNil(o.EthFlowDescs) {
		var ret []EthFlowDescription
		return ret
	}
	return o.EthFlowDescs
}

// GetEthFlowDescsOk returns a tuple with the EthFlowDescs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetEthFlowDescsOk() ([]EthFlowDescription, bool) {
	if o == nil || IsNil(o.EthFlowDescs) {
		return nil, false
	}
	return o.EthFlowDescs, true
}

// HasEthFlowDescs returns a boolean if a field has been set.
func (o *EventNotification1) HasEthFlowDescs() bool {
	if o != nil && !IsNil(o.EthFlowDescs) {
		return true
	}

	return false
}

// SetEthFlowDescs gets a reference to the given []EthFlowDescription and assigns it to the EthFlowDescs field.
func (o *EventNotification1) SetEthFlowDescs(v []EthFlowDescription) {
	o.EthFlowDescs = v
}

// GetEthfDescs returns the EthfDescs field value if set, zero value otherwise.
func (o *EventNotification1) GetEthfDescs() []EthFlowDescription {
	if o == nil || IsNil(o.EthfDescs) {
		var ret []EthFlowDescription
		return ret
	}
	return o.EthfDescs
}

// GetEthfDescsOk returns a tuple with the EthfDescs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetEthfDescsOk() ([]EthFlowDescription, bool) {
	if o == nil || IsNil(o.EthfDescs) {
		return nil, false
	}
	return o.EthfDescs, true
}

// HasEthfDescs returns a boolean if a field has been set.
func (o *EventNotification1) HasEthfDescs() bool {
	if o != nil && !IsNil(o.EthfDescs) {
		return true
	}

	return false
}

// SetEthfDescs gets a reference to the given []EthFlowDescription and assigns it to the EthfDescs field.
func (o *EventNotification1) SetEthfDescs(v []EthFlowDescription) {
	o.EthfDescs = v
}

// GetFlowDescs returns the FlowDescs field value if set, zero value otherwise.
func (o *EventNotification1) GetFlowDescs() []string {
	if o == nil || IsNil(o.FlowDescs) {
		var ret []string
		return ret
	}
	return o.FlowDescs
}

// GetFlowDescsOk returns a tuple with the FlowDescs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetFlowDescsOk() ([]string, bool) {
	if o == nil || IsNil(o.FlowDescs) {
		return nil, false
	}
	return o.FlowDescs, true
}

// HasFlowDescs returns a boolean if a field has been set.
func (o *EventNotification1) HasFlowDescs() bool {
	if o != nil && !IsNil(o.FlowDescs) {
		return true
	}

	return false
}

// SetFlowDescs gets a reference to the given []string and assigns it to the FlowDescs field.
func (o *EventNotification1) SetFlowDescs(v []string) {
	o.FlowDescs = v
}

// GetFDescs returns the FDescs field value if set, zero value otherwise.
func (o *EventNotification1) GetFDescs() []string {
	if o == nil || IsNil(o.FDescs) {
		var ret []string
		return ret
	}
	return o.FDescs
}

// GetFDescsOk returns a tuple with the FDescs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetFDescsOk() ([]string, bool) {
	if o == nil || IsNil(o.FDescs) {
		return nil, false
	}
	return o.FDescs, true
}

// HasFDescs returns a boolean if a field has been set.
func (o *EventNotification1) HasFDescs() bool {
	if o != nil && !IsNil(o.FDescs) {
		return true
	}

	return false
}

// SetFDescs gets a reference to the given []string and assigns it to the FDescs field.
func (o *EventNotification1) SetFDescs(v []string) {
	o.FDescs = v
}

// GetDnn returns the Dnn field value if set, zero value otherwise.
func (o *EventNotification1) GetDnn() string {
	if o == nil || IsNil(o.Dnn) {
		var ret string
		return ret
	}
	return *o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetDnnOk() (*string, bool) {
	if o == nil || IsNil(o.Dnn) {
		return nil, false
	}
	return o.Dnn, true
}

// HasDnn returns a boolean if a field has been set.
func (o *EventNotification1) HasDnn() bool {
	if o != nil && !IsNil(o.Dnn) {
		return true
	}

	return false
}

// SetDnn gets a reference to the given string and assigns it to the Dnn field.
func (o *EventNotification1) SetDnn(v string) {
	o.Dnn = &v
}

// GetSnssai returns the Snssai field value if set, zero value otherwise.
func (o *EventNotification1) GetSnssai() Snssai {
	if o == nil || IsNil(o.Snssai) {
		var ret Snssai
		return ret
	}
	return *o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetSnssaiOk() (*Snssai, bool) {
	if o == nil || IsNil(o.Snssai) {
		return nil, false
	}
	return o.Snssai, true
}

// HasSnssai returns a boolean if a field has been set.
func (o *EventNotification1) HasSnssai() bool {
	if o != nil && !IsNil(o.Snssai) {
		return true
	}

	return false
}

// SetSnssai gets a reference to the given Snssai and assigns it to the Snssai field.
func (o *EventNotification1) SetSnssai(v Snssai) {
	o.Snssai = &v
}

// GetUlDelays returns the UlDelays field value if set, zero value otherwise.
func (o *EventNotification1) GetUlDelays() []int32 {
	if o == nil || IsNil(o.UlDelays) {
		var ret []int32
		return ret
	}
	return o.UlDelays
}

// GetUlDelaysOk returns a tuple with the UlDelays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetUlDelaysOk() ([]int32, bool) {
	if o == nil || IsNil(o.UlDelays) {
		return nil, false
	}
	return o.UlDelays, true
}

// HasUlDelays returns a boolean if a field has been set.
func (o *EventNotification1) HasUlDelays() bool {
	if o != nil && !IsNil(o.UlDelays) {
		return true
	}

	return false
}

// SetUlDelays gets a reference to the given []int32 and assigns it to the UlDelays field.
func (o *EventNotification1) SetUlDelays(v []int32) {
	o.UlDelays = v
}

// GetDlDelays returns the DlDelays field value if set, zero value otherwise.
func (o *EventNotification1) GetDlDelays() []int32 {
	if o == nil || IsNil(o.DlDelays) {
		var ret []int32
		return ret
	}
	return o.DlDelays
}

// GetDlDelaysOk returns a tuple with the DlDelays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetDlDelaysOk() ([]int32, bool) {
	if o == nil || IsNil(o.DlDelays) {
		return nil, false
	}
	return o.DlDelays, true
}

// HasDlDelays returns a boolean if a field has been set.
func (o *EventNotification1) HasDlDelays() bool {
	if o != nil && !IsNil(o.DlDelays) {
		return true
	}

	return false
}

// SetDlDelays gets a reference to the given []int32 and assigns it to the DlDelays field.
func (o *EventNotification1) SetDlDelays(v []int32) {
	o.DlDelays = v
}

// GetRtDelays returns the RtDelays field value if set, zero value otherwise.
func (o *EventNotification1) GetRtDelays() []int32 {
	if o == nil || IsNil(o.RtDelays) {
		var ret []int32
		return ret
	}
	return o.RtDelays
}

// GetRtDelaysOk returns a tuple with the RtDelays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetRtDelaysOk() ([]int32, bool) {
	if o == nil || IsNil(o.RtDelays) {
		return nil, false
	}
	return o.RtDelays, true
}

// HasRtDelays returns a boolean if a field has been set.
func (o *EventNotification1) HasRtDelays() bool {
	if o != nil && !IsNil(o.RtDelays) {
		return true
	}

	return false
}

// SetRtDelays gets a reference to the given []int32 and assigns it to the RtDelays field.
func (o *EventNotification1) SetRtDelays(v []int32) {
	o.RtDelays = v
}

// GetTimeWindow returns the TimeWindow field value if set, zero value otherwise.
func (o *EventNotification1) GetTimeWindow() TimeWindow {
	if o == nil || IsNil(o.TimeWindow) {
		var ret TimeWindow
		return ret
	}
	return *o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetTimeWindowOk() (*TimeWindow, bool) {
	if o == nil || IsNil(o.TimeWindow) {
		return nil, false
	}
	return o.TimeWindow, true
}

// HasTimeWindow returns a boolean if a field has been set.
func (o *EventNotification1) HasTimeWindow() bool {
	if o != nil && !IsNil(o.TimeWindow) {
		return true
	}

	return false
}

// SetTimeWindow gets a reference to the given TimeWindow and assigns it to the TimeWindow field.
func (o *EventNotification1) SetTimeWindow(v TimeWindow) {
	o.TimeWindow = &v
}

// GetSmNasFromUe returns the SmNasFromUe field value if set, zero value otherwise.
func (o *EventNotification1) GetSmNasFromUe() SmNasFromUe {
	if o == nil || IsNil(o.SmNasFromUe) {
		var ret SmNasFromUe
		return ret
	}
	return *o.SmNasFromUe
}

// GetSmNasFromUeOk returns a tuple with the SmNasFromUe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetSmNasFromUeOk() (*SmNasFromUe, bool) {
	if o == nil || IsNil(o.SmNasFromUe) {
		return nil, false
	}
	return o.SmNasFromUe, true
}

// HasSmNasFromUe returns a boolean if a field has been set.
func (o *EventNotification1) HasSmNasFromUe() bool {
	if o != nil && !IsNil(o.SmNasFromUe) {
		return true
	}

	return false
}

// SetSmNasFromUe gets a reference to the given SmNasFromUe and assigns it to the SmNasFromUe field.
func (o *EventNotification1) SetSmNasFromUe(v SmNasFromUe) {
	o.SmNasFromUe = &v
}

// GetSmNasFromSmf returns the SmNasFromSmf field value if set, zero value otherwise.
func (o *EventNotification1) GetSmNasFromSmf() SmNasFromSmf {
	if o == nil || IsNil(o.SmNasFromSmf) {
		var ret SmNasFromSmf
		return ret
	}
	return *o.SmNasFromSmf
}

// GetSmNasFromSmfOk returns a tuple with the SmNasFromSmf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetSmNasFromSmfOk() (*SmNasFromSmf, bool) {
	if o == nil || IsNil(o.SmNasFromSmf) {
		return nil, false
	}
	return o.SmNasFromSmf, true
}

// HasSmNasFromSmf returns a boolean if a field has been set.
func (o *EventNotification1) HasSmNasFromSmf() bool {
	if o != nil && !IsNil(o.SmNasFromSmf) {
		return true
	}

	return false
}

// SetSmNasFromSmf gets a reference to the given SmNasFromSmf and assigns it to the SmNasFromSmf field.
func (o *EventNotification1) SetSmNasFromSmf(v SmNasFromSmf) {
	o.SmNasFromSmf = &v
}

// GetUpRedTrans returns the UpRedTrans field value if set, zero value otherwise.
func (o *EventNotification1) GetUpRedTrans() bool {
	if o == nil || IsNil(o.UpRedTrans) {
		var ret bool
		return ret
	}
	return *o.UpRedTrans
}

// GetUpRedTransOk returns a tuple with the UpRedTrans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetUpRedTransOk() (*bool, bool) {
	if o == nil || IsNil(o.UpRedTrans) {
		return nil, false
	}
	return o.UpRedTrans, true
}

// HasUpRedTrans returns a boolean if a field has been set.
func (o *EventNotification1) HasUpRedTrans() bool {
	if o != nil && !IsNil(o.UpRedTrans) {
		return true
	}

	return false
}

// SetUpRedTrans gets a reference to the given bool and assigns it to the UpRedTrans field.
func (o *EventNotification1) SetUpRedTrans(v bool) {
	o.UpRedTrans = &v
}

// GetSsId returns the SsId field value if set, zero value otherwise.
func (o *EventNotification1) GetSsId() string {
	if o == nil || IsNil(o.SsId) {
		var ret string
		return ret
	}
	return *o.SsId
}

// GetSsIdOk returns a tuple with the SsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetSsIdOk() (*string, bool) {
	if o == nil || IsNil(o.SsId) {
		return nil, false
	}
	return o.SsId, true
}

// HasSsId returns a boolean if a field has been set.
func (o *EventNotification1) HasSsId() bool {
	if o != nil && !IsNil(o.SsId) {
		return true
	}

	return false
}

// SetSsId gets a reference to the given string and assigns it to the SsId field.
func (o *EventNotification1) SetSsId(v string) {
	o.SsId = &v
}

// GetBssId returns the BssId field value if set, zero value otherwise.
func (o *EventNotification1) GetBssId() string {
	if o == nil || IsNil(o.BssId) {
		var ret string
		return ret
	}
	return *o.BssId
}

// GetBssIdOk returns a tuple with the BssId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetBssIdOk() (*string, bool) {
	if o == nil || IsNil(o.BssId) {
		return nil, false
	}
	return o.BssId, true
}

// HasBssId returns a boolean if a field has been set.
func (o *EventNotification1) HasBssId() bool {
	if o != nil && !IsNil(o.BssId) {
		return true
	}

	return false
}

// SetBssId gets a reference to the given string and assigns it to the BssId field.
func (o *EventNotification1) SetBssId(v string) {
	o.BssId = &v
}

// GetStartWlan returns the StartWlan field value if set, zero value otherwise.
func (o *EventNotification1) GetStartWlan() time.Time {
	if o == nil || IsNil(o.StartWlan) {
		var ret time.Time
		return ret
	}
	return *o.StartWlan
}

// GetStartWlanOk returns a tuple with the StartWlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetStartWlanOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartWlan) {
		return nil, false
	}
	return o.StartWlan, true
}

// HasStartWlan returns a boolean if a field has been set.
func (o *EventNotification1) HasStartWlan() bool {
	if o != nil && !IsNil(o.StartWlan) {
		return true
	}

	return false
}

// SetStartWlan gets a reference to the given time.Time and assigns it to the StartWlan field.
func (o *EventNotification1) SetStartWlan(v time.Time) {
	o.StartWlan = &v
}

// GetEndWlan returns the EndWlan field value if set, zero value otherwise.
func (o *EventNotification1) GetEndWlan() time.Time {
	if o == nil || IsNil(o.EndWlan) {
		var ret time.Time
		return ret
	}
	return *o.EndWlan
}

// GetEndWlanOk returns a tuple with the EndWlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetEndWlanOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndWlan) {
		return nil, false
	}
	return o.EndWlan, true
}

// HasEndWlan returns a boolean if a field has been set.
func (o *EventNotification1) HasEndWlan() bool {
	if o != nil && !IsNil(o.EndWlan) {
		return true
	}

	return false
}

// SetEndWlan gets a reference to the given time.Time and assigns it to the EndWlan field.
func (o *EventNotification1) SetEndWlan(v time.Time) {
	o.EndWlan = &v
}

// GetPduSessInfos returns the PduSessInfos field value if set, zero value otherwise.
func (o *EventNotification1) GetPduSessInfos() []PduSessionInformation {
	if o == nil || IsNil(o.PduSessInfos) {
		var ret []PduSessionInformation
		return ret
	}
	return o.PduSessInfos
}

// GetPduSessInfosOk returns a tuple with the PduSessInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetPduSessInfosOk() ([]PduSessionInformation, bool) {
	if o == nil || IsNil(o.PduSessInfos) {
		return nil, false
	}
	return o.PduSessInfos, true
}

// HasPduSessInfos returns a boolean if a field has been set.
func (o *EventNotification1) HasPduSessInfos() bool {
	if o != nil && !IsNil(o.PduSessInfos) {
		return true
	}

	return false
}

// SetPduSessInfos gets a reference to the given []PduSessionInformation and assigns it to the PduSessInfos field.
func (o *EventNotification1) SetPduSessInfos(v []PduSessionInformation) {
	o.PduSessInfos = v
}

// GetUpfInfo returns the UpfInfo field value if set, zero value otherwise.
func (o *EventNotification1) GetUpfInfo() UpfInformation {
	if o == nil || IsNil(o.UpfInfo) {
		var ret UpfInformation
		return ret
	}
	return *o.UpfInfo
}

// GetUpfInfoOk returns a tuple with the UpfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification1) GetUpfInfoOk() (*UpfInformation, bool) {
	if o == nil || IsNil(o.UpfInfo) {
		return nil, false
	}
	return o.UpfInfo, true
}

// HasUpfInfo returns a boolean if a field has been set.
func (o *EventNotification1) HasUpfInfo() bool {
	if o != nil && !IsNil(o.UpfInfo) {
		return true
	}

	return false
}

// SetUpfInfo gets a reference to the given UpfInformation and assigns it to the UpfInfo field.
func (o *EventNotification1) SetUpfInfo(v UpfInformation) {
	o.UpfInfo = &v
}

func (o EventNotification1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNotification1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	toSerialize["timeStamp"] = o.TimeStamp
	if !IsNil(o.Supi) {
		toSerialize["supi"] = o.Supi
	}
	if !IsNil(o.Gpsi) {
		toSerialize["gpsi"] = o.Gpsi
	}
	if !IsNil(o.UeIpAddr) {
		toSerialize["ueIpAddr"] = o.UeIpAddr
	}
	if !IsNil(o.TransacInfos) {
		toSerialize["transacInfos"] = o.TransacInfos
	}
	if !IsNil(o.SourceDnai) {
		toSerialize["sourceDnai"] = o.SourceDnai
	}
	if !IsNil(o.TargetDnai) {
		toSerialize["targetDnai"] = o.TargetDnai
	}
	if !IsNil(o.DnaiChgType) {
		toSerialize["dnaiChgType"] = o.DnaiChgType
	}
	if !IsNil(o.SourceUeIpv4Addr) {
		toSerialize["sourceUeIpv4Addr"] = o.SourceUeIpv4Addr
	}
	if !IsNil(o.SourceUeIpv6Prefix) {
		toSerialize["sourceUeIpv6Prefix"] = o.SourceUeIpv6Prefix
	}
	if !IsNil(o.TargetUeIpv4Addr) {
		toSerialize["targetUeIpv4Addr"] = o.TargetUeIpv4Addr
	}
	if !IsNil(o.TargetUeIpv6Prefix) {
		toSerialize["targetUeIpv6Prefix"] = o.TargetUeIpv6Prefix
	}
	if o.SourceTraRouting.IsSet() {
		toSerialize["sourceTraRouting"] = o.SourceTraRouting.Get()
	}
	if o.TargetTraRouting.IsSet() {
		toSerialize["targetTraRouting"] = o.TargetTraRouting.Get()
	}
	if !IsNil(o.UeMac) {
		toSerialize["ueMac"] = o.UeMac
	}
	if !IsNil(o.AdIpv4Addr) {
		toSerialize["adIpv4Addr"] = o.AdIpv4Addr
	}
	if !IsNil(o.AdIpv6Prefix) {
		toSerialize["adIpv6Prefix"] = o.AdIpv6Prefix
	}
	if !IsNil(o.ReIpv4Addr) {
		toSerialize["reIpv4Addr"] = o.ReIpv4Addr
	}
	if !IsNil(o.ReIpv6Prefix) {
		toSerialize["reIpv6Prefix"] = o.ReIpv6Prefix
	}
	if !IsNil(o.PlmnId) {
		toSerialize["plmnId"] = o.PlmnId
	}
	if !IsNil(o.AccType) {
		toSerialize["accType"] = o.AccType
	}
	if !IsNil(o.PduSeId) {
		toSerialize["pduSeId"] = o.PduSeId
	}
	if !IsNil(o.RatType) {
		toSerialize["ratType"] = o.RatType
	}
	if !IsNil(o.DddStatus) {
		toSerialize["dddStatus"] = o.DddStatus
	}
	if !IsNil(o.DddTraDescriptor) {
		toSerialize["dddTraDescriptor"] = o.DddTraDescriptor
	}
	if !IsNil(o.MaxWaitTime) {
		toSerialize["maxWaitTime"] = o.MaxWaitTime
	}
	if !IsNil(o.CommFailure) {
		toSerialize["commFailure"] = o.CommFailure
	}
	if !IsNil(o.Ipv4Addr) {
		toSerialize["ipv4Addr"] = o.Ipv4Addr
	}
	if !IsNil(o.Ipv6Prefixes) {
		toSerialize["ipv6Prefixes"] = o.Ipv6Prefixes
	}
	if !IsNil(o.Ipv6Addrs) {
		toSerialize["ipv6Addrs"] = o.Ipv6Addrs
	}
	if !IsNil(o.PduSessType) {
		toSerialize["pduSessType"] = o.PduSessType
	}
	if !IsNil(o.Qfi) {
		toSerialize["qfi"] = o.Qfi
	}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.EthFlowDescs) {
		toSerialize["ethFlowDescs"] = o.EthFlowDescs
	}
	if !IsNil(o.EthfDescs) {
		toSerialize["ethfDescs"] = o.EthfDescs
	}
	if !IsNil(o.FlowDescs) {
		toSerialize["flowDescs"] = o.FlowDescs
	}
	if !IsNil(o.FDescs) {
		toSerialize["fDescs"] = o.FDescs
	}
	if !IsNil(o.Dnn) {
		toSerialize["dnn"] = o.Dnn
	}
	if !IsNil(o.Snssai) {
		toSerialize["snssai"] = o.Snssai
	}
	if !IsNil(o.UlDelays) {
		toSerialize["ulDelays"] = o.UlDelays
	}
	if !IsNil(o.DlDelays) {
		toSerialize["dlDelays"] = o.DlDelays
	}
	if !IsNil(o.RtDelays) {
		toSerialize["rtDelays"] = o.RtDelays
	}
	if !IsNil(o.TimeWindow) {
		toSerialize["timeWindow"] = o.TimeWindow
	}
	if !IsNil(o.SmNasFromUe) {
		toSerialize["smNasFromUe"] = o.SmNasFromUe
	}
	if !IsNil(o.SmNasFromSmf) {
		toSerialize["smNasFromSmf"] = o.SmNasFromSmf
	}
	if !IsNil(o.UpRedTrans) {
		toSerialize["upRedTrans"] = o.UpRedTrans
	}
	if !IsNil(o.SsId) {
		toSerialize["ssId"] = o.SsId
	}
	if !IsNil(o.BssId) {
		toSerialize["bssId"] = o.BssId
	}
	if !IsNil(o.StartWlan) {
		toSerialize["startWlan"] = o.StartWlan
	}
	if !IsNil(o.EndWlan) {
		toSerialize["endWlan"] = o.EndWlan
	}
	if !IsNil(o.PduSessInfos) {
		toSerialize["pduSessInfos"] = o.PduSessInfos
	}
	if !IsNil(o.UpfInfo) {
		toSerialize["upfInfo"] = o.UpfInfo
	}
	return toSerialize, nil
}

type NullableEventNotification1 struct {
	value *EventNotification1
	isSet bool
}

func (v NullableEventNotification1) Get() *EventNotification1 {
	return v.value
}

func (v *NullableEventNotification1) Set(val *EventNotification1) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNotification1) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNotification1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNotification1(val *EventNotification1) *NullableEventNotification1 {
	return &NullableEventNotification1{value: val, isSet: true}
}

func (v NullableEventNotification1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNotification1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
