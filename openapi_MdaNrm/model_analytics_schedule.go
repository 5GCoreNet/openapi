/*
MDA NRM

OAS 3.0.1 specification of the MDA NRM Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_MdaNrm

import (
	"encoding/json"
	"fmt"
)

// AnalyticsSchedule - struct for AnalyticsSchedule
type AnalyticsSchedule struct {
	AnalyticsScheduleOneOf *AnalyticsScheduleOneOf
	AnalyticsScheduleOneOf1 *AnalyticsScheduleOneOf1
}

// AnalyticsScheduleOneOfAsAnalyticsSchedule is a convenience function that returns AnalyticsScheduleOneOf wrapped in AnalyticsSchedule
func AnalyticsScheduleOneOfAsAnalyticsSchedule(v *AnalyticsScheduleOneOf) AnalyticsSchedule {
	return AnalyticsSchedule{
		AnalyticsScheduleOneOf: v,
	}
}

// AnalyticsScheduleOneOf1AsAnalyticsSchedule is a convenience function that returns AnalyticsScheduleOneOf1 wrapped in AnalyticsSchedule
func AnalyticsScheduleOneOf1AsAnalyticsSchedule(v *AnalyticsScheduleOneOf1) AnalyticsSchedule {
	return AnalyticsSchedule{
		AnalyticsScheduleOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AnalyticsSchedule) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AnalyticsScheduleOneOf
	err = newStrictDecoder(data).Decode(&dst.AnalyticsScheduleOneOf)
	if err == nil {
		jsonAnalyticsScheduleOneOf, _ := json.Marshal(dst.AnalyticsScheduleOneOf)
		if string(jsonAnalyticsScheduleOneOf) == "{}" { // empty struct
			dst.AnalyticsScheduleOneOf = nil
		} else {
			match++
		}
	} else {
		dst.AnalyticsScheduleOneOf = nil
	}

	// try to unmarshal data into AnalyticsScheduleOneOf1
	err = newStrictDecoder(data).Decode(&dst.AnalyticsScheduleOneOf1)
	if err == nil {
		jsonAnalyticsScheduleOneOf1, _ := json.Marshal(dst.AnalyticsScheduleOneOf1)
		if string(jsonAnalyticsScheduleOneOf1) == "{}" { // empty struct
			dst.AnalyticsScheduleOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.AnalyticsScheduleOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AnalyticsScheduleOneOf = nil
		dst.AnalyticsScheduleOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AnalyticsSchedule)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AnalyticsSchedule)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AnalyticsSchedule) MarshalJSON() ([]byte, error) {
	if src.AnalyticsScheduleOneOf != nil {
		return json.Marshal(&src.AnalyticsScheduleOneOf)
	}

	if src.AnalyticsScheduleOneOf1 != nil {
		return json.Marshal(&src.AnalyticsScheduleOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AnalyticsSchedule) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AnalyticsScheduleOneOf != nil {
		return obj.AnalyticsScheduleOneOf
	}

	if obj.AnalyticsScheduleOneOf1 != nil {
		return obj.AnalyticsScheduleOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableAnalyticsSchedule struct {
	value *AnalyticsSchedule
	isSet bool
}

func (v NullableAnalyticsSchedule) Get() *AnalyticsSchedule {
	return v.value
}

func (v *NullableAnalyticsSchedule) Set(val *AnalyticsSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsSchedule(val *AnalyticsSchedule) *NullableAnalyticsSchedule {
	return &NullableAnalyticsSchedule{value: val, isSet: true}
}

func (v NullableAnalyticsSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


