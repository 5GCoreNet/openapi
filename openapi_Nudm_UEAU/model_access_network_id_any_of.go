/*
Nudm_UEAU

UDM UE Authentication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudm_UEAU

import (
	"encoding/json"
	"fmt"
)

// AccessNetworkIdAnyOf the model 'AccessNetworkIdAnyOf'
type AccessNetworkIdAnyOf string

// List of AccessNetworkId_anyOf
const (
	HRPD AccessNetworkIdAnyOf = "HRPD"
	WIMAX AccessNetworkIdAnyOf = "WIMAX"
	WLAN AccessNetworkIdAnyOf = "WLAN"
	ETHERNET AccessNetworkIdAnyOf = "ETHERNET"
)

// All allowed values of AccessNetworkIdAnyOf enum
var AllowedAccessNetworkIdAnyOfEnumValues = []AccessNetworkIdAnyOf{
	"HRPD",
	"WIMAX",
	"WLAN",
	"ETHERNET",
}

func (v *AccessNetworkIdAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessNetworkIdAnyOf(value)
	for _, existing := range AllowedAccessNetworkIdAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessNetworkIdAnyOf", value)
}

// NewAccessNetworkIdAnyOfFromValue returns a pointer to a valid AccessNetworkIdAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessNetworkIdAnyOfFromValue(v string) (*AccessNetworkIdAnyOf, error) {
	ev := AccessNetworkIdAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessNetworkIdAnyOf: valid values are %v", v, AllowedAccessNetworkIdAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessNetworkIdAnyOf) IsValid() bool {
	for _, existing := range AllowedAccessNetworkIdAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessNetworkId_anyOf value
func (v AccessNetworkIdAnyOf) Ptr() *AccessNetworkIdAnyOf {
	return &v
}

type NullableAccessNetworkIdAnyOf struct {
	value *AccessNetworkIdAnyOf
	isSet bool
}

func (v NullableAccessNetworkIdAnyOf) Get() *AccessNetworkIdAnyOf {
	return v.value
}

func (v *NullableAccessNetworkIdAnyOf) Set(val *AccessNetworkIdAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessNetworkIdAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessNetworkIdAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessNetworkIdAnyOf(val *AccessNetworkIdAnyOf) *NullableAccessNetworkIdAnyOf {
	return &NullableAccessNetworkIdAnyOf{value: val, isSet: true}
}

func (v NullableAccessNetworkIdAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessNetworkIdAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

