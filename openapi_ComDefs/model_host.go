/*
Common Type Definitions

OAS 3.0.1 specification of common type definitions in the Generic NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ComDefs

import (
	"encoding/json"
	"fmt"
)

// Host - struct for Host
type Host struct {
	IpAddr *IpAddr
	String *string
}

// IpAddrAsHost is a convenience function that returns IpAddr wrapped in Host
func IpAddrAsHost(v *IpAddr) Host {
	return Host{
		IpAddr: v,
	}
}

// stringAsHost is a convenience function that returns string wrapped in Host
func StringAsHost(v *string) Host {
	return Host{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Host) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IpAddr
	err = newStrictDecoder(data).Decode(&dst.IpAddr)
	if err == nil {
		jsonIpAddr, _ := json.Marshal(dst.IpAddr)
		if string(jsonIpAddr) == "{}" { // empty struct
			dst.IpAddr = nil
		} else {
			match++
		}
	} else {
		dst.IpAddr = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IpAddr = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Host)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Host)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Host) MarshalJSON() ([]byte, error) {
	if src.IpAddr != nil {
		return json.Marshal(&src.IpAddr)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Host) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.IpAddr != nil {
		return obj.IpAddr
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableHost struct {
	value *Host
	isSet bool
}

func (v NullableHost) Get() *Host {
	return v.value
}

func (v *NullableHost) Set(val *Host) {
	v.value = val
	v.isSet = true
}

func (v NullableHost) IsSet() bool {
	return v.isSet
}

func (v *NullableHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHost(val *Host) *NullableHost {
	return &NullableHost{value: val, isSet: true}
}

func (v NullableHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
