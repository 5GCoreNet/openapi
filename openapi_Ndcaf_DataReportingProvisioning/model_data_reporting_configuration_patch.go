/*
Ndcaf_DataReportingProvisioning

Data Collection AF: Provisioning Sessions API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ndcaf_DataReportingProvisioning

import (
	"encoding/json"
)

// checks if the DataReportingConfigurationPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataReportingConfigurationPatch{}

// DataReportingConfigurationPatch A JSON patch for a Data Reporting Configuration.
type DataReportingConfigurationPatch struct {
	// Uniform Resource Locator, comforming with the URI Generic Syntax specified in IETF RFC 3986.
	AuthorizationURL *string `json:"authorizationURL,omitempty"`
	DataAccessProfiles []DataAccessProfile `json:"dataAccessProfiles,omitempty"`
}

// NewDataReportingConfigurationPatch instantiates a new DataReportingConfigurationPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataReportingConfigurationPatch() *DataReportingConfigurationPatch {
	this := DataReportingConfigurationPatch{}
	return &this
}

// NewDataReportingConfigurationPatchWithDefaults instantiates a new DataReportingConfigurationPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataReportingConfigurationPatchWithDefaults() *DataReportingConfigurationPatch {
	this := DataReportingConfigurationPatch{}
	return &this
}

// GetAuthorizationURL returns the AuthorizationURL field value if set, zero value otherwise.
func (o *DataReportingConfigurationPatch) GetAuthorizationURL() string {
	if o == nil || isNil(o.AuthorizationURL) {
		var ret string
		return ret
	}
	return *o.AuthorizationURL
}

// GetAuthorizationURLOk returns a tuple with the AuthorizationURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataReportingConfigurationPatch) GetAuthorizationURLOk() (*string, bool) {
	if o == nil || isNil(o.AuthorizationURL) {
		return nil, false
	}
	return o.AuthorizationURL, true
}

// HasAuthorizationURL returns a boolean if a field has been set.
func (o *DataReportingConfigurationPatch) HasAuthorizationURL() bool {
	if o != nil && !isNil(o.AuthorizationURL) {
		return true
	}

	return false
}

// SetAuthorizationURL gets a reference to the given string and assigns it to the AuthorizationURL field.
func (o *DataReportingConfigurationPatch) SetAuthorizationURL(v string) {
	o.AuthorizationURL = &v
}

// GetDataAccessProfiles returns the DataAccessProfiles field value if set, zero value otherwise.
func (o *DataReportingConfigurationPatch) GetDataAccessProfiles() []DataAccessProfile {
	if o == nil || isNil(o.DataAccessProfiles) {
		var ret []DataAccessProfile
		return ret
	}
	return o.DataAccessProfiles
}

// GetDataAccessProfilesOk returns a tuple with the DataAccessProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataReportingConfigurationPatch) GetDataAccessProfilesOk() ([]DataAccessProfile, bool) {
	if o == nil || isNil(o.DataAccessProfiles) {
		return nil, false
	}
	return o.DataAccessProfiles, true
}

// HasDataAccessProfiles returns a boolean if a field has been set.
func (o *DataReportingConfigurationPatch) HasDataAccessProfiles() bool {
	if o != nil && !isNil(o.DataAccessProfiles) {
		return true
	}

	return false
}

// SetDataAccessProfiles gets a reference to the given []DataAccessProfile and assigns it to the DataAccessProfiles field.
func (o *DataReportingConfigurationPatch) SetDataAccessProfiles(v []DataAccessProfile) {
	o.DataAccessProfiles = v
}

func (o DataReportingConfigurationPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataReportingConfigurationPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AuthorizationURL) {
		toSerialize["authorizationURL"] = o.AuthorizationURL
	}
	if !isNil(o.DataAccessProfiles) {
		toSerialize["dataAccessProfiles"] = o.DataAccessProfiles
	}
	return toSerialize, nil
}

type NullableDataReportingConfigurationPatch struct {
	value *DataReportingConfigurationPatch
	isSet bool
}

func (v NullableDataReportingConfigurationPatch) Get() *DataReportingConfigurationPatch {
	return v.value
}

func (v *NullableDataReportingConfigurationPatch) Set(val *DataReportingConfigurationPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableDataReportingConfigurationPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableDataReportingConfigurationPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataReportingConfigurationPatch(val *DataReportingConfigurationPatch) *NullableDataReportingConfigurationPatch {
	return &NullableDataReportingConfigurationPatch{value: val, isSet: true}
}

func (v NullableDataReportingConfigurationPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataReportingConfigurationPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


