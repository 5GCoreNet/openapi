/*
Nudm_NIDDAU

Nudm NIDD Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudm_NIDDAU

import (
	"encoding/json"
	"fmt"
)

// NiddCauseAnyOf the model 'NiddCauseAnyOf'
type NiddCauseAnyOf string

// List of NiddCause_anyOf
const (
	SUBSCRIPTION_WITHDRAWAL NiddCauseAnyOf = "SUBSCRIPTION_WITHDRAWAL"
	DNN_REMOVED NiddCauseAnyOf = "DNN_REMOVED"
)

// All allowed values of NiddCauseAnyOf enum
var AllowedNiddCauseAnyOfEnumValues = []NiddCauseAnyOf{
	"SUBSCRIPTION_WITHDRAWAL",
	"DNN_REMOVED",
}

func (v *NiddCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NiddCauseAnyOf(value)
	for _, existing := range AllowedNiddCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NiddCauseAnyOf", value)
}

// NewNiddCauseAnyOfFromValue returns a pointer to a valid NiddCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNiddCauseAnyOfFromValue(v string) (*NiddCauseAnyOf, error) {
	ev := NiddCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NiddCauseAnyOf: valid values are %v", v, AllowedNiddCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NiddCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedNiddCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NiddCause_anyOf value
func (v NiddCauseAnyOf) Ptr() *NiddCauseAnyOf {
	return &v
}

type NullableNiddCauseAnyOf struct {
	value *NiddCauseAnyOf
	isSet bool
}

func (v NullableNiddCauseAnyOf) Get() *NiddCauseAnyOf {
	return v.value
}

func (v *NullableNiddCauseAnyOf) Set(val *NiddCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNiddCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNiddCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiddCauseAnyOf(val *NiddCauseAnyOf) *NullableNiddCauseAnyOf {
	return &NullableNiddCauseAnyOf{value: val, isSet: true}
}

func (v NullableNiddCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiddCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

