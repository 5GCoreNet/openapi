/*
EES UE Location Information_API

API for EES UE Location Information.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_UELocation

import (
	"encoding/json"
	"time"
)

// checks if the LocationSubscriptionPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationSubscriptionPatch{}

// LocationSubscriptionPatch Represents the partial update of Individual AC Information Subscription.
type LocationSubscriptionPatch struct {
	EventReq *ReportingInformation `json:"eventReq,omitempty"`
	// string with format \"date-time\" as defined in OpenAPI.
	ExpTime *time.Time `json:"expTime,omitempty"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationDestination *string `json:"notificationDestination,omitempty"`
	// string providing an URI formatted according to IETF RFC 3986.
	RevocationNotifUri *string `json:"revocationNotifUri,omitempty"`
	LocGran *Accuracy `json:"locGran,omitempty"`
	LocQos *LocationQoS `json:"locQos,omitempty"`
}

// NewLocationSubscriptionPatch instantiates a new LocationSubscriptionPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationSubscriptionPatch() *LocationSubscriptionPatch {
	this := LocationSubscriptionPatch{}
	return &this
}

// NewLocationSubscriptionPatchWithDefaults instantiates a new LocationSubscriptionPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationSubscriptionPatchWithDefaults() *LocationSubscriptionPatch {
	this := LocationSubscriptionPatch{}
	return &this
}

// GetEventReq returns the EventReq field value if set, zero value otherwise.
func (o *LocationSubscriptionPatch) GetEventReq() ReportingInformation {
	if o == nil || isNil(o.EventReq) {
		var ret ReportingInformation
		return ret
	}
	return *o.EventReq
}

// GetEventReqOk returns a tuple with the EventReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationSubscriptionPatch) GetEventReqOk() (*ReportingInformation, bool) {
	if o == nil || isNil(o.EventReq) {
		return nil, false
	}
	return o.EventReq, true
}

// HasEventReq returns a boolean if a field has been set.
func (o *LocationSubscriptionPatch) HasEventReq() bool {
	if o != nil && !isNil(o.EventReq) {
		return true
	}

	return false
}

// SetEventReq gets a reference to the given ReportingInformation and assigns it to the EventReq field.
func (o *LocationSubscriptionPatch) SetEventReq(v ReportingInformation) {
	o.EventReq = &v
}

// GetExpTime returns the ExpTime field value if set, zero value otherwise.
func (o *LocationSubscriptionPatch) GetExpTime() time.Time {
	if o == nil || isNil(o.ExpTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpTime
}

// GetExpTimeOk returns a tuple with the ExpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationSubscriptionPatch) GetExpTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.ExpTime) {
		return nil, false
	}
	return o.ExpTime, true
}

// HasExpTime returns a boolean if a field has been set.
func (o *LocationSubscriptionPatch) HasExpTime() bool {
	if o != nil && !isNil(o.ExpTime) {
		return true
	}

	return false
}

// SetExpTime gets a reference to the given time.Time and assigns it to the ExpTime field.
func (o *LocationSubscriptionPatch) SetExpTime(v time.Time) {
	o.ExpTime = &v
}

// GetNotificationDestination returns the NotificationDestination field value if set, zero value otherwise.
func (o *LocationSubscriptionPatch) GetNotificationDestination() string {
	if o == nil || isNil(o.NotificationDestination) {
		var ret string
		return ret
	}
	return *o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationSubscriptionPatch) GetNotificationDestinationOk() (*string, bool) {
	if o == nil || isNil(o.NotificationDestination) {
		return nil, false
	}
	return o.NotificationDestination, true
}

// HasNotificationDestination returns a boolean if a field has been set.
func (o *LocationSubscriptionPatch) HasNotificationDestination() bool {
	if o != nil && !isNil(o.NotificationDestination) {
		return true
	}

	return false
}

// SetNotificationDestination gets a reference to the given string and assigns it to the NotificationDestination field.
func (o *LocationSubscriptionPatch) SetNotificationDestination(v string) {
	o.NotificationDestination = &v
}

// GetRevocationNotifUri returns the RevocationNotifUri field value if set, zero value otherwise.
func (o *LocationSubscriptionPatch) GetRevocationNotifUri() string {
	if o == nil || isNil(o.RevocationNotifUri) {
		var ret string
		return ret
	}
	return *o.RevocationNotifUri
}

// GetRevocationNotifUriOk returns a tuple with the RevocationNotifUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationSubscriptionPatch) GetRevocationNotifUriOk() (*string, bool) {
	if o == nil || isNil(o.RevocationNotifUri) {
		return nil, false
	}
	return o.RevocationNotifUri, true
}

// HasRevocationNotifUri returns a boolean if a field has been set.
func (o *LocationSubscriptionPatch) HasRevocationNotifUri() bool {
	if o != nil && !isNil(o.RevocationNotifUri) {
		return true
	}

	return false
}

// SetRevocationNotifUri gets a reference to the given string and assigns it to the RevocationNotifUri field.
func (o *LocationSubscriptionPatch) SetRevocationNotifUri(v string) {
	o.RevocationNotifUri = &v
}

// GetLocGran returns the LocGran field value if set, zero value otherwise.
func (o *LocationSubscriptionPatch) GetLocGran() Accuracy {
	if o == nil || isNil(o.LocGran) {
		var ret Accuracy
		return ret
	}
	return *o.LocGran
}

// GetLocGranOk returns a tuple with the LocGran field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationSubscriptionPatch) GetLocGranOk() (*Accuracy, bool) {
	if o == nil || isNil(o.LocGran) {
		return nil, false
	}
	return o.LocGran, true
}

// HasLocGran returns a boolean if a field has been set.
func (o *LocationSubscriptionPatch) HasLocGran() bool {
	if o != nil && !isNil(o.LocGran) {
		return true
	}

	return false
}

// SetLocGran gets a reference to the given Accuracy and assigns it to the LocGran field.
func (o *LocationSubscriptionPatch) SetLocGran(v Accuracy) {
	o.LocGran = &v
}

// GetLocQos returns the LocQos field value if set, zero value otherwise.
func (o *LocationSubscriptionPatch) GetLocQos() LocationQoS {
	if o == nil || isNil(o.LocQos) {
		var ret LocationQoS
		return ret
	}
	return *o.LocQos
}

// GetLocQosOk returns a tuple with the LocQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationSubscriptionPatch) GetLocQosOk() (*LocationQoS, bool) {
	if o == nil || isNil(o.LocQos) {
		return nil, false
	}
	return o.LocQos, true
}

// HasLocQos returns a boolean if a field has been set.
func (o *LocationSubscriptionPatch) HasLocQos() bool {
	if o != nil && !isNil(o.LocQos) {
		return true
	}

	return false
}

// SetLocQos gets a reference to the given LocationQoS and assigns it to the LocQos field.
func (o *LocationSubscriptionPatch) SetLocQos(v LocationQoS) {
	o.LocQos = &v
}

func (o LocationSubscriptionPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationSubscriptionPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EventReq) {
		toSerialize["eventReq"] = o.EventReq
	}
	if !isNil(o.ExpTime) {
		toSerialize["expTime"] = o.ExpTime
	}
	if !isNil(o.NotificationDestination) {
		toSerialize["notificationDestination"] = o.NotificationDestination
	}
	if !isNil(o.RevocationNotifUri) {
		toSerialize["revocationNotifUri"] = o.RevocationNotifUri
	}
	if !isNil(o.LocGran) {
		toSerialize["locGran"] = o.LocGran
	}
	if !isNil(o.LocQos) {
		toSerialize["locQos"] = o.LocQos
	}
	return toSerialize, nil
}

type NullableLocationSubscriptionPatch struct {
	value *LocationSubscriptionPatch
	isSet bool
}

func (v NullableLocationSubscriptionPatch) Get() *LocationSubscriptionPatch {
	return v.value
}

func (v *NullableLocationSubscriptionPatch) Set(val *LocationSubscriptionPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationSubscriptionPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationSubscriptionPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationSubscriptionPatch(val *LocationSubscriptionPatch) *NullableLocationSubscriptionPatch {
	return &NullableLocationSubscriptionPatch{value: val, isSet: true}
}

func (v NullableLocationSubscriptionPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationSubscriptionPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


