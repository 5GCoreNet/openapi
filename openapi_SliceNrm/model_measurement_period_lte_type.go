/*
Slice NRM

OAS 3.0.1 specification of the Slice NRM @ 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SliceNrm

import (
	"encoding/json"
	"fmt"
)

// MeasurementPeriodLteType See details in 3GPP TS 32.422 clause 5.10.23.
type MeasurementPeriodLteType string

// List of measurementPeriodLte-Type
const (
	_1024MS MeasurementPeriodLteType = "1024ms"
	_2048MS MeasurementPeriodLteType = "2048ms"
	_5120MS MeasurementPeriodLteType = "5120ms"
	_10240MS MeasurementPeriodLteType = "10240ms"
	_1MIN MeasurementPeriodLteType = "1min"
)

// All allowed values of MeasurementPeriodLteType enum
var AllowedMeasurementPeriodLteTypeEnumValues = []MeasurementPeriodLteType{
	"1024ms",
	"2048ms",
	"5120ms",
	"10240ms",
	"1min",
}

func (v *MeasurementPeriodLteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MeasurementPeriodLteType(value)
	for _, existing := range AllowedMeasurementPeriodLteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MeasurementPeriodLteType", value)
}

// NewMeasurementPeriodLteTypeFromValue returns a pointer to a valid MeasurementPeriodLteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMeasurementPeriodLteTypeFromValue(v string) (*MeasurementPeriodLteType, error) {
	ev := MeasurementPeriodLteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MeasurementPeriodLteType: valid values are %v", v, AllowedMeasurementPeriodLteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MeasurementPeriodLteType) IsValid() bool {
	for _, existing := range AllowedMeasurementPeriodLteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to measurementPeriodLte-Type value
func (v MeasurementPeriodLteType) Ptr() *MeasurementPeriodLteType {
	return &v
}

type NullableMeasurementPeriodLteType struct {
	value *MeasurementPeriodLteType
	isSet bool
}

func (v NullableMeasurementPeriodLteType) Get() *MeasurementPeriodLteType {
	return v.value
}

func (v *NullableMeasurementPeriodLteType) Set(val *MeasurementPeriodLteType) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurementPeriodLteType) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurementPeriodLteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurementPeriodLteType(val *MeasurementPeriodLteType) *NullableMeasurementPeriodLteType {
	return &NullableMeasurementPeriodLteType{value: val, isSet: true}
}

func (v NullableMeasurementPeriodLteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurementPeriodLteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

