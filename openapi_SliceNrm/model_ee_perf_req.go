/*
Slice NRM

OAS 3.0.1 specification of the Slice NRM @ 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SliceNrm

import (
	"encoding/json"
	"fmt"
)

// EEPerfReq - struct for EEPerfReq
type EEPerfReq struct {
	EmbbEEPerfReq *EmbbEEPerfReq
	MIoTEEPerfReq *MIoTEEPerfReq
	UrllcEEPerfReq *UrllcEEPerfReq
}

// EmbbEEPerfReqAsEEPerfReq is a convenience function that returns EmbbEEPerfReq wrapped in EEPerfReq
func EmbbEEPerfReqAsEEPerfReq(v *EmbbEEPerfReq) EEPerfReq {
	return EEPerfReq{
		EmbbEEPerfReq: v,
	}
}

// MIoTEEPerfReqAsEEPerfReq is a convenience function that returns MIoTEEPerfReq wrapped in EEPerfReq
func MIoTEEPerfReqAsEEPerfReq(v *MIoTEEPerfReq) EEPerfReq {
	return EEPerfReq{
		MIoTEEPerfReq: v,
	}
}

// UrllcEEPerfReqAsEEPerfReq is a convenience function that returns UrllcEEPerfReq wrapped in EEPerfReq
func UrllcEEPerfReqAsEEPerfReq(v *UrllcEEPerfReq) EEPerfReq {
	return EEPerfReq{
		UrllcEEPerfReq: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EEPerfReq) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EmbbEEPerfReq
	err = newStrictDecoder(data).Decode(&dst.EmbbEEPerfReq)
	if err == nil {
		jsonEmbbEEPerfReq, _ := json.Marshal(dst.EmbbEEPerfReq)
		if string(jsonEmbbEEPerfReq) == "{}" { // empty struct
			dst.EmbbEEPerfReq = nil
		} else {
			match++
		}
	} else {
		dst.EmbbEEPerfReq = nil
	}

	// try to unmarshal data into MIoTEEPerfReq
	err = newStrictDecoder(data).Decode(&dst.MIoTEEPerfReq)
	if err == nil {
		jsonMIoTEEPerfReq, _ := json.Marshal(dst.MIoTEEPerfReq)
		if string(jsonMIoTEEPerfReq) == "{}" { // empty struct
			dst.MIoTEEPerfReq = nil
		} else {
			match++
		}
	} else {
		dst.MIoTEEPerfReq = nil
	}

	// try to unmarshal data into UrllcEEPerfReq
	err = newStrictDecoder(data).Decode(&dst.UrllcEEPerfReq)
	if err == nil {
		jsonUrllcEEPerfReq, _ := json.Marshal(dst.UrllcEEPerfReq)
		if string(jsonUrllcEEPerfReq) == "{}" { // empty struct
			dst.UrllcEEPerfReq = nil
		} else {
			match++
		}
	} else {
		dst.UrllcEEPerfReq = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EmbbEEPerfReq = nil
		dst.MIoTEEPerfReq = nil
		dst.UrllcEEPerfReq = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EEPerfReq)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EEPerfReq)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EEPerfReq) MarshalJSON() ([]byte, error) {
	if src.EmbbEEPerfReq != nil {
		return json.Marshal(&src.EmbbEEPerfReq)
	}

	if src.MIoTEEPerfReq != nil {
		return json.Marshal(&src.MIoTEEPerfReq)
	}

	if src.UrllcEEPerfReq != nil {
		return json.Marshal(&src.UrllcEEPerfReq)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EEPerfReq) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EmbbEEPerfReq != nil {
		return obj.EmbbEEPerfReq
	}

	if obj.MIoTEEPerfReq != nil {
		return obj.MIoTEEPerfReq
	}

	if obj.UrllcEEPerfReq != nil {
		return obj.UrllcEEPerfReq
	}

	// all schemas are nil
	return nil
}

type NullableEEPerfReq struct {
	value *EEPerfReq
	isSet bool
}

func (v NullableEEPerfReq) Get() *EEPerfReq {
	return v.value
}

func (v *NullableEEPerfReq) Set(val *EEPerfReq) {
	v.value = val
	v.isSet = true
}

func (v NullableEEPerfReq) IsSet() bool {
	return v.isSet
}

func (v *NullableEEPerfReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEEPerfReq(val *EEPerfReq) *NullableEEPerfReq {
	return &NullableEEPerfReq{value: val, isSet: true}
}

func (v NullableEEPerfReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEEPerfReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


