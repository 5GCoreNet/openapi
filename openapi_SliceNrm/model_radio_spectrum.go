/*
Slice NRM

OAS 3.0.1 specification of the Slice NRM @ 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SliceNrm

import (
	"encoding/json"
)

// checks if the RadioSpectrum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RadioSpectrum{}

// RadioSpectrum struct for RadioSpectrum
type RadioSpectrum struct {
	ServAttrCom      *ServAttrCom `json:"servAttrCom,omitempty"`
	NROperatingBands *string      `json:"nROperatingBands,omitempty"`
}

// NewRadioSpectrum instantiates a new RadioSpectrum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRadioSpectrum() *RadioSpectrum {
	this := RadioSpectrum{}
	return &this
}

// NewRadioSpectrumWithDefaults instantiates a new RadioSpectrum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRadioSpectrumWithDefaults() *RadioSpectrum {
	this := RadioSpectrum{}
	return &this
}

// GetServAttrCom returns the ServAttrCom field value if set, zero value otherwise.
func (o *RadioSpectrum) GetServAttrCom() ServAttrCom {
	if o == nil || IsNil(o.ServAttrCom) {
		var ret ServAttrCom
		return ret
	}
	return *o.ServAttrCom
}

// GetServAttrComOk returns a tuple with the ServAttrCom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadioSpectrum) GetServAttrComOk() (*ServAttrCom, bool) {
	if o == nil || IsNil(o.ServAttrCom) {
		return nil, false
	}
	return o.ServAttrCom, true
}

// HasServAttrCom returns a boolean if a field has been set.
func (o *RadioSpectrum) HasServAttrCom() bool {
	if o != nil && !IsNil(o.ServAttrCom) {
		return true
	}

	return false
}

// SetServAttrCom gets a reference to the given ServAttrCom and assigns it to the ServAttrCom field.
func (o *RadioSpectrum) SetServAttrCom(v ServAttrCom) {
	o.ServAttrCom = &v
}

// GetNROperatingBands returns the NROperatingBands field value if set, zero value otherwise.
func (o *RadioSpectrum) GetNROperatingBands() string {
	if o == nil || IsNil(o.NROperatingBands) {
		var ret string
		return ret
	}
	return *o.NROperatingBands
}

// GetNROperatingBandsOk returns a tuple with the NROperatingBands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadioSpectrum) GetNROperatingBandsOk() (*string, bool) {
	if o == nil || IsNil(o.NROperatingBands) {
		return nil, false
	}
	return o.NROperatingBands, true
}

// HasNROperatingBands returns a boolean if a field has been set.
func (o *RadioSpectrum) HasNROperatingBands() bool {
	if o != nil && !IsNil(o.NROperatingBands) {
		return true
	}

	return false
}

// SetNROperatingBands gets a reference to the given string and assigns it to the NROperatingBands field.
func (o *RadioSpectrum) SetNROperatingBands(v string) {
	o.NROperatingBands = &v
}

func (o RadioSpectrum) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RadioSpectrum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServAttrCom) {
		toSerialize["servAttrCom"] = o.ServAttrCom
	}
	if !IsNil(o.NROperatingBands) {
		toSerialize["nROperatingBands"] = o.NROperatingBands
	}
	return toSerialize, nil
}

type NullableRadioSpectrum struct {
	value *RadioSpectrum
	isSet bool
}

func (v NullableRadioSpectrum) Get() *RadioSpectrum {
	return v.value
}

func (v *NullableRadioSpectrum) Set(val *RadioSpectrum) {
	v.value = val
	v.isSet = true
}

func (v NullableRadioSpectrum) IsSet() bool {
	return v.isSet
}

func (v *NullableRadioSpectrum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadioSpectrum(val *RadioSpectrum) *NullableRadioSpectrum {
	return &NullableRadioSpectrum{value: val, isSet: true}
}

func (v NullableRadioSpectrum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadioSpectrum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
