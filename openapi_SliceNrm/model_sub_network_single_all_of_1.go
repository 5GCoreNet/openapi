/*
Slice NRM

OAS 3.0.1 specification of the Slice NRM @ 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SliceNrm

import (
	"encoding/json"
)

// checks if the SubNetworkSingleAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubNetworkSingleAllOf1{}

// SubNetworkSingleAllOf1 struct for SubNetworkSingleAllOf1
type SubNetworkSingleAllOf1 struct {
	SubNetwork []SubNetworkSingle `json:"SubNetwork,omitempty"`
	NetworkSlice []NetworkSliceSingle `json:"NetworkSlice,omitempty"`
	NetworkSliceSubnet []NetworkSliceSubnetSingle `json:"NetworkSliceSubnet,omitempty"`
	EPTransport []EPTransportSingle `json:"EP_Transport,omitempty"`
	NetworkSliceSubnetProviderCapabilities []NetworkSliceSubnetProviderCapabilitiesSingle `json:"NetworkSliceSubnetProviderCapabilities,omitempty"`
	FeasibilityCheckAndReservationJob []FeasibilityCheckAndReservationJobSingle `json:"FeasibilityCheckAndReservationJob,omitempty"`
}

// NewSubNetworkSingleAllOf1 instantiates a new SubNetworkSingleAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubNetworkSingleAllOf1() *SubNetworkSingleAllOf1 {
	this := SubNetworkSingleAllOf1{}
	return &this
}

// NewSubNetworkSingleAllOf1WithDefaults instantiates a new SubNetworkSingleAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubNetworkSingleAllOf1WithDefaults() *SubNetworkSingleAllOf1 {
	this := SubNetworkSingleAllOf1{}
	return &this
}

// GetSubNetwork returns the SubNetwork field value if set, zero value otherwise.
func (o *SubNetworkSingleAllOf1) GetSubNetwork() []SubNetworkSingle {
	if o == nil || isNil(o.SubNetwork) {
		var ret []SubNetworkSingle
		return ret
	}
	return o.SubNetwork
}

// GetSubNetworkOk returns a tuple with the SubNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNetworkSingleAllOf1) GetSubNetworkOk() ([]SubNetworkSingle, bool) {
	if o == nil || isNil(o.SubNetwork) {
		return nil, false
	}
	return o.SubNetwork, true
}

// HasSubNetwork returns a boolean if a field has been set.
func (o *SubNetworkSingleAllOf1) HasSubNetwork() bool {
	if o != nil && !isNil(o.SubNetwork) {
		return true
	}

	return false
}

// SetSubNetwork gets a reference to the given []SubNetworkSingle and assigns it to the SubNetwork field.
func (o *SubNetworkSingleAllOf1) SetSubNetwork(v []SubNetworkSingle) {
	o.SubNetwork = v
}

// GetNetworkSlice returns the NetworkSlice field value if set, zero value otherwise.
func (o *SubNetworkSingleAllOf1) GetNetworkSlice() []NetworkSliceSingle {
	if o == nil || isNil(o.NetworkSlice) {
		var ret []NetworkSliceSingle
		return ret
	}
	return o.NetworkSlice
}

// GetNetworkSliceOk returns a tuple with the NetworkSlice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNetworkSingleAllOf1) GetNetworkSliceOk() ([]NetworkSliceSingle, bool) {
	if o == nil || isNil(o.NetworkSlice) {
		return nil, false
	}
	return o.NetworkSlice, true
}

// HasNetworkSlice returns a boolean if a field has been set.
func (o *SubNetworkSingleAllOf1) HasNetworkSlice() bool {
	if o != nil && !isNil(o.NetworkSlice) {
		return true
	}

	return false
}

// SetNetworkSlice gets a reference to the given []NetworkSliceSingle and assigns it to the NetworkSlice field.
func (o *SubNetworkSingleAllOf1) SetNetworkSlice(v []NetworkSliceSingle) {
	o.NetworkSlice = v
}

// GetNetworkSliceSubnet returns the NetworkSliceSubnet field value if set, zero value otherwise.
func (o *SubNetworkSingleAllOf1) GetNetworkSliceSubnet() []NetworkSliceSubnetSingle {
	if o == nil || isNil(o.NetworkSliceSubnet) {
		var ret []NetworkSliceSubnetSingle
		return ret
	}
	return o.NetworkSliceSubnet
}

// GetNetworkSliceSubnetOk returns a tuple with the NetworkSliceSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNetworkSingleAllOf1) GetNetworkSliceSubnetOk() ([]NetworkSliceSubnetSingle, bool) {
	if o == nil || isNil(o.NetworkSliceSubnet) {
		return nil, false
	}
	return o.NetworkSliceSubnet, true
}

// HasNetworkSliceSubnet returns a boolean if a field has been set.
func (o *SubNetworkSingleAllOf1) HasNetworkSliceSubnet() bool {
	if o != nil && !isNil(o.NetworkSliceSubnet) {
		return true
	}

	return false
}

// SetNetworkSliceSubnet gets a reference to the given []NetworkSliceSubnetSingle and assigns it to the NetworkSliceSubnet field.
func (o *SubNetworkSingleAllOf1) SetNetworkSliceSubnet(v []NetworkSliceSubnetSingle) {
	o.NetworkSliceSubnet = v
}

// GetEPTransport returns the EPTransport field value if set, zero value otherwise.
func (o *SubNetworkSingleAllOf1) GetEPTransport() []EPTransportSingle {
	if o == nil || isNil(o.EPTransport) {
		var ret []EPTransportSingle
		return ret
	}
	return o.EPTransport
}

// GetEPTransportOk returns a tuple with the EPTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNetworkSingleAllOf1) GetEPTransportOk() ([]EPTransportSingle, bool) {
	if o == nil || isNil(o.EPTransport) {
		return nil, false
	}
	return o.EPTransport, true
}

// HasEPTransport returns a boolean if a field has been set.
func (o *SubNetworkSingleAllOf1) HasEPTransport() bool {
	if o != nil && !isNil(o.EPTransport) {
		return true
	}

	return false
}

// SetEPTransport gets a reference to the given []EPTransportSingle and assigns it to the EPTransport field.
func (o *SubNetworkSingleAllOf1) SetEPTransport(v []EPTransportSingle) {
	o.EPTransport = v
}

// GetNetworkSliceSubnetProviderCapabilities returns the NetworkSliceSubnetProviderCapabilities field value if set, zero value otherwise.
func (o *SubNetworkSingleAllOf1) GetNetworkSliceSubnetProviderCapabilities() []NetworkSliceSubnetProviderCapabilitiesSingle {
	if o == nil || isNil(o.NetworkSliceSubnetProviderCapabilities) {
		var ret []NetworkSliceSubnetProviderCapabilitiesSingle
		return ret
	}
	return o.NetworkSliceSubnetProviderCapabilities
}

// GetNetworkSliceSubnetProviderCapabilitiesOk returns a tuple with the NetworkSliceSubnetProviderCapabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNetworkSingleAllOf1) GetNetworkSliceSubnetProviderCapabilitiesOk() ([]NetworkSliceSubnetProviderCapabilitiesSingle, bool) {
	if o == nil || isNil(o.NetworkSliceSubnetProviderCapabilities) {
		return nil, false
	}
	return o.NetworkSliceSubnetProviderCapabilities, true
}

// HasNetworkSliceSubnetProviderCapabilities returns a boolean if a field has been set.
func (o *SubNetworkSingleAllOf1) HasNetworkSliceSubnetProviderCapabilities() bool {
	if o != nil && !isNil(o.NetworkSliceSubnetProviderCapabilities) {
		return true
	}

	return false
}

// SetNetworkSliceSubnetProviderCapabilities gets a reference to the given []NetworkSliceSubnetProviderCapabilitiesSingle and assigns it to the NetworkSliceSubnetProviderCapabilities field.
func (o *SubNetworkSingleAllOf1) SetNetworkSliceSubnetProviderCapabilities(v []NetworkSliceSubnetProviderCapabilitiesSingle) {
	o.NetworkSliceSubnetProviderCapabilities = v
}

// GetFeasibilityCheckAndReservationJob returns the FeasibilityCheckAndReservationJob field value if set, zero value otherwise.
func (o *SubNetworkSingleAllOf1) GetFeasibilityCheckAndReservationJob() []FeasibilityCheckAndReservationJobSingle {
	if o == nil || isNil(o.FeasibilityCheckAndReservationJob) {
		var ret []FeasibilityCheckAndReservationJobSingle
		return ret
	}
	return o.FeasibilityCheckAndReservationJob
}

// GetFeasibilityCheckAndReservationJobOk returns a tuple with the FeasibilityCheckAndReservationJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNetworkSingleAllOf1) GetFeasibilityCheckAndReservationJobOk() ([]FeasibilityCheckAndReservationJobSingle, bool) {
	if o == nil || isNil(o.FeasibilityCheckAndReservationJob) {
		return nil, false
	}
	return o.FeasibilityCheckAndReservationJob, true
}

// HasFeasibilityCheckAndReservationJob returns a boolean if a field has been set.
func (o *SubNetworkSingleAllOf1) HasFeasibilityCheckAndReservationJob() bool {
	if o != nil && !isNil(o.FeasibilityCheckAndReservationJob) {
		return true
	}

	return false
}

// SetFeasibilityCheckAndReservationJob gets a reference to the given []FeasibilityCheckAndReservationJobSingle and assigns it to the FeasibilityCheckAndReservationJob field.
func (o *SubNetworkSingleAllOf1) SetFeasibilityCheckAndReservationJob(v []FeasibilityCheckAndReservationJobSingle) {
	o.FeasibilityCheckAndReservationJob = v
}

func (o SubNetworkSingleAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubNetworkSingleAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SubNetwork) {
		toSerialize["SubNetwork"] = o.SubNetwork
	}
	if !isNil(o.NetworkSlice) {
		toSerialize["NetworkSlice"] = o.NetworkSlice
	}
	if !isNil(o.NetworkSliceSubnet) {
		toSerialize["NetworkSliceSubnet"] = o.NetworkSliceSubnet
	}
	if !isNil(o.EPTransport) {
		toSerialize["EP_Transport"] = o.EPTransport
	}
	if !isNil(o.NetworkSliceSubnetProviderCapabilities) {
		toSerialize["NetworkSliceSubnetProviderCapabilities"] = o.NetworkSliceSubnetProviderCapabilities
	}
	if !isNil(o.FeasibilityCheckAndReservationJob) {
		toSerialize["FeasibilityCheckAndReservationJob"] = o.FeasibilityCheckAndReservationJob
	}
	return toSerialize, nil
}

type NullableSubNetworkSingleAllOf1 struct {
	value *SubNetworkSingleAllOf1
	isSet bool
}

func (v NullableSubNetworkSingleAllOf1) Get() *SubNetworkSingleAllOf1 {
	return v.value
}

func (v *NullableSubNetworkSingleAllOf1) Set(val *SubNetworkSingleAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableSubNetworkSingleAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableSubNetworkSingleAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubNetworkSingleAllOf1(val *SubNetworkSingleAllOf1) *NullableSubNetworkSingleAllOf1 {
	return &NullableSubNetworkSingleAllOf1{value: val, isSet: true}
}

func (v NullableSubNetworkSingleAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubNetworkSingleAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


