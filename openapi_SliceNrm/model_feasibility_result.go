/*
Slice NRM

OAS 3.0.1 specification of the Slice NRM @ 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SliceNrm

import (
	"encoding/json"
	"fmt"
)

// FeasibilityResult An attribute which specifies the feasibility check result for the feasibility check and reservation job.
type FeasibilityResult string

// List of FeasibilityResult
const (
	FEASIBLE   FeasibilityResult = "FEASIBLE"
	INFEASIBLE FeasibilityResult = "INFEASIBLE"
)

// All allowed values of FeasibilityResult enum
var AllowedFeasibilityResultEnumValues = []FeasibilityResult{
	"FEASIBLE",
	"INFEASIBLE",
}

func (v *FeasibilityResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeasibilityResult(value)
	for _, existing := range AllowedFeasibilityResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeasibilityResult", value)
}

// NewFeasibilityResultFromValue returns a pointer to a valid FeasibilityResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeasibilityResultFromValue(v string) (*FeasibilityResult, error) {
	ev := FeasibilityResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeasibilityResult: valid values are %v", v, AllowedFeasibilityResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeasibilityResult) IsValid() bool {
	for _, existing := range AllowedFeasibilityResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeasibilityResult value
func (v FeasibilityResult) Ptr() *FeasibilityResult {
	return &v
}

type NullableFeasibilityResult struct {
	value *FeasibilityResult
	isSet bool
}

func (v NullableFeasibilityResult) Get() *FeasibilityResult {
	return v.value
}

func (v *NullableFeasibilityResult) Set(val *FeasibilityResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFeasibilityResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFeasibilityResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeasibilityResult(val *FeasibilityResult) *NullableFeasibilityResult {
	return &NullableFeasibilityResult{value: val, isSet: true}
}

func (v NullableFeasibilityResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeasibilityResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
