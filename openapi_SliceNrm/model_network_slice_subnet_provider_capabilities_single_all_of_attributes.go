/*
Slice NRM

OAS 3.0.1 specification of the Slice NRM @ 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SliceNrm

import (
	"encoding/json"
)

// checks if the NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes{}

// NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes struct for NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes
type NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes struct {
	DLlatency            *int32  `json:"dLlatency,omitempty"`
	ULlatency            *int32  `json:"uLlatency,omitempty"`
	DLThptPerSliceSubnet *XLThpt `json:"dLThptPerSliceSubnet,omitempty"`
	ULThptPerSliceSubnet *XLThpt `json:"uLThptPerSliceSubnet,omitempty"`
	CoverageAreaTAList   []int32 `json:"coverageAreaTAList,omitempty"`
}

// NewNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes instantiates a new NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes() *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes {
	this := NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes{}
	return &this
}

// NewNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributesWithDefaults instantiates a new NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributesWithDefaults() *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes {
	this := NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes{}
	return &this
}

// GetDLlatency returns the DLlatency field value if set, zero value otherwise.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetDLlatency() int32 {
	if o == nil || IsNil(o.DLlatency) {
		var ret int32
		return ret
	}
	return *o.DLlatency
}

// GetDLlatencyOk returns a tuple with the DLlatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetDLlatencyOk() (*int32, bool) {
	if o == nil || IsNil(o.DLlatency) {
		return nil, false
	}
	return o.DLlatency, true
}

// HasDLlatency returns a boolean if a field has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) HasDLlatency() bool {
	if o != nil && !IsNil(o.DLlatency) {
		return true
	}

	return false
}

// SetDLlatency gets a reference to the given int32 and assigns it to the DLlatency field.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) SetDLlatency(v int32) {
	o.DLlatency = &v
}

// GetULlatency returns the ULlatency field value if set, zero value otherwise.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetULlatency() int32 {
	if o == nil || IsNil(o.ULlatency) {
		var ret int32
		return ret
	}
	return *o.ULlatency
}

// GetULlatencyOk returns a tuple with the ULlatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetULlatencyOk() (*int32, bool) {
	if o == nil || IsNil(o.ULlatency) {
		return nil, false
	}
	return o.ULlatency, true
}

// HasULlatency returns a boolean if a field has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) HasULlatency() bool {
	if o != nil && !IsNil(o.ULlatency) {
		return true
	}

	return false
}

// SetULlatency gets a reference to the given int32 and assigns it to the ULlatency field.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) SetULlatency(v int32) {
	o.ULlatency = &v
}

// GetDLThptPerSliceSubnet returns the DLThptPerSliceSubnet field value if set, zero value otherwise.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetDLThptPerSliceSubnet() XLThpt {
	if o == nil || IsNil(o.DLThptPerSliceSubnet) {
		var ret XLThpt
		return ret
	}
	return *o.DLThptPerSliceSubnet
}

// GetDLThptPerSliceSubnetOk returns a tuple with the DLThptPerSliceSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetDLThptPerSliceSubnetOk() (*XLThpt, bool) {
	if o == nil || IsNil(o.DLThptPerSliceSubnet) {
		return nil, false
	}
	return o.DLThptPerSliceSubnet, true
}

// HasDLThptPerSliceSubnet returns a boolean if a field has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) HasDLThptPerSliceSubnet() bool {
	if o != nil && !IsNil(o.DLThptPerSliceSubnet) {
		return true
	}

	return false
}

// SetDLThptPerSliceSubnet gets a reference to the given XLThpt and assigns it to the DLThptPerSliceSubnet field.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) SetDLThptPerSliceSubnet(v XLThpt) {
	o.DLThptPerSliceSubnet = &v
}

// GetULThptPerSliceSubnet returns the ULThptPerSliceSubnet field value if set, zero value otherwise.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetULThptPerSliceSubnet() XLThpt {
	if o == nil || IsNil(o.ULThptPerSliceSubnet) {
		var ret XLThpt
		return ret
	}
	return *o.ULThptPerSliceSubnet
}

// GetULThptPerSliceSubnetOk returns a tuple with the ULThptPerSliceSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetULThptPerSliceSubnetOk() (*XLThpt, bool) {
	if o == nil || IsNil(o.ULThptPerSliceSubnet) {
		return nil, false
	}
	return o.ULThptPerSliceSubnet, true
}

// HasULThptPerSliceSubnet returns a boolean if a field has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) HasULThptPerSliceSubnet() bool {
	if o != nil && !IsNil(o.ULThptPerSliceSubnet) {
		return true
	}

	return false
}

// SetULThptPerSliceSubnet gets a reference to the given XLThpt and assigns it to the ULThptPerSliceSubnet field.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) SetULThptPerSliceSubnet(v XLThpt) {
	o.ULThptPerSliceSubnet = &v
}

// GetCoverageAreaTAList returns the CoverageAreaTAList field value if set, zero value otherwise.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetCoverageAreaTAList() []int32 {
	if o == nil || IsNil(o.CoverageAreaTAList) {
		var ret []int32
		return ret
	}
	return o.CoverageAreaTAList
}

// GetCoverageAreaTAListOk returns a tuple with the CoverageAreaTAList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) GetCoverageAreaTAListOk() ([]int32, bool) {
	if o == nil || IsNil(o.CoverageAreaTAList) {
		return nil, false
	}
	return o.CoverageAreaTAList, true
}

// HasCoverageAreaTAList returns a boolean if a field has been set.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) HasCoverageAreaTAList() bool {
	if o != nil && !IsNil(o.CoverageAreaTAList) {
		return true
	}

	return false
}

// SetCoverageAreaTAList gets a reference to the given []int32 and assigns it to the CoverageAreaTAList field.
func (o *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) SetCoverageAreaTAList(v []int32) {
	o.CoverageAreaTAList = v
}

func (o NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DLlatency) {
		toSerialize["dLlatency"] = o.DLlatency
	}
	if !IsNil(o.ULlatency) {
		toSerialize["uLlatency"] = o.ULlatency
	}
	if !IsNil(o.DLThptPerSliceSubnet) {
		toSerialize["dLThptPerSliceSubnet"] = o.DLThptPerSliceSubnet
	}
	if !IsNil(o.ULThptPerSliceSubnet) {
		toSerialize["uLThptPerSliceSubnet"] = o.ULThptPerSliceSubnet
	}
	if !IsNil(o.CoverageAreaTAList) {
		toSerialize["coverageAreaTAList"] = o.CoverageAreaTAList
	}
	return toSerialize, nil
}

type NullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes struct {
	value *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes
	isSet bool
}

func (v NullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) Get() *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes {
	return v.value
}

func (v *NullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) Set(val *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes(val *NetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) *NullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes {
	return &NullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes{value: val, isSet: true}
}

func (v NullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkSliceSubnetProviderCapabilitiesSingleAllOfAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
