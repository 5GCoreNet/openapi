/*
VAE_ApplicationRequirement

API for VAE Application Requirement Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_VAE_ApplicationRequirement

import (
	"encoding/json"
	"fmt"
)

// ReservationResultAnyOf the model 'ReservationResultAnyOf'
type ReservationResultAnyOf string

// List of ReservationResult_anyOf
const (
	SUCCESSFUL ReservationResultAnyOf = "SUCCESSFUL"
	FAILURE ReservationResultAnyOf = "FAILURE"
)

// All allowed values of ReservationResultAnyOf enum
var AllowedReservationResultAnyOfEnumValues = []ReservationResultAnyOf{
	"SUCCESSFUL",
	"FAILURE",
}

func (v *ReservationResultAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReservationResultAnyOf(value)
	for _, existing := range AllowedReservationResultAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReservationResultAnyOf", value)
}

// NewReservationResultAnyOfFromValue returns a pointer to a valid ReservationResultAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReservationResultAnyOfFromValue(v string) (*ReservationResultAnyOf, error) {
	ev := ReservationResultAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReservationResultAnyOf: valid values are %v", v, AllowedReservationResultAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReservationResultAnyOf) IsValid() bool {
	for _, existing := range AllowedReservationResultAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReservationResult_anyOf value
func (v ReservationResultAnyOf) Ptr() *ReservationResultAnyOf {
	return &v
}

type NullableReservationResultAnyOf struct {
	value *ReservationResultAnyOf
	isSet bool
}

func (v NullableReservationResultAnyOf) Get() *ReservationResultAnyOf {
	return v.value
}

func (v *NullableReservationResultAnyOf) Set(val *ReservationResultAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationResultAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationResultAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationResultAnyOf(val *ReservationResultAnyOf) *NullableReservationResultAnyOf {
	return &NullableReservationResultAnyOf{value: val, isSet: true}
}

func (v NullableReservationResultAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationResultAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

