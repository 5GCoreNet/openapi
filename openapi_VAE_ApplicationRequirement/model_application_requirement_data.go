/*
VAE_ApplicationRequirement

API for VAE Application Requirement Service   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_VAE_ApplicationRequirement

import (
	"encoding/json"
	"time"
)

// checks if the ApplicationRequirementData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationRequirementData{}

// ApplicationRequirementData Represents an individual Application Requirement resource for a V2X UE ID or a V2X group ID. 
type ApplicationRequirementData struct {
	// Represents the identifier of the V2X UE.
	UeId *string `json:"ueId,omitempty"`
	// Represents the group ID for which a V2X message is addressed.
	GroupId *string `json:"groupId,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	Duration *time.Time `json:"duration,omitempty"`
	// Represents the V2X service ID to which a V2X message belongs.
	ServiceId string `json:"serviceId"`
	AppRequirement ApplicationRequirement `json:"appRequirement"`
	// String providing an URI formatted according to RFC 3986.
	NotifUri string `json:"notifUri"`
	// Set to true by the NF service consumer to request the VAE server to send a test notification as defined in clause 6.3.5.3. Set to false or omitted otherwise. 
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewApplicationRequirementData instantiates a new ApplicationRequirementData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationRequirementData(serviceId string, appRequirement ApplicationRequirement, notifUri string) *ApplicationRequirementData {
	this := ApplicationRequirementData{}
	this.ServiceId = serviceId
	this.AppRequirement = appRequirement
	this.NotifUri = notifUri
	return &this
}

// NewApplicationRequirementDataWithDefaults instantiates a new ApplicationRequirementData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationRequirementDataWithDefaults() *ApplicationRequirementData {
	this := ApplicationRequirementData{}
	return &this
}

// GetUeId returns the UeId field value if set, zero value otherwise.
func (o *ApplicationRequirementData) GetUeId() string {
	if o == nil || isNil(o.UeId) {
		var ret string
		return ret
	}
	return *o.UeId
}

// GetUeIdOk returns a tuple with the UeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRequirementData) GetUeIdOk() (*string, bool) {
	if o == nil || isNil(o.UeId) {
		return nil, false
	}
	return o.UeId, true
}

// HasUeId returns a boolean if a field has been set.
func (o *ApplicationRequirementData) HasUeId() bool {
	if o != nil && !isNil(o.UeId) {
		return true
	}

	return false
}

// SetUeId gets a reference to the given string and assigns it to the UeId field.
func (o *ApplicationRequirementData) SetUeId(v string) {
	o.UeId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ApplicationRequirementData) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRequirementData) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ApplicationRequirementData) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ApplicationRequirementData) SetGroupId(v string) {
	o.GroupId = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ApplicationRequirementData) GetDuration() time.Time {
	if o == nil || isNil(o.Duration) {
		var ret time.Time
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRequirementData) GetDurationOk() (*time.Time, bool) {
	if o == nil || isNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ApplicationRequirementData) HasDuration() bool {
	if o != nil && !isNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given time.Time and assigns it to the Duration field.
func (o *ApplicationRequirementData) SetDuration(v time.Time) {
	o.Duration = &v
}

// GetServiceId returns the ServiceId field value
func (o *ApplicationRequirementData) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *ApplicationRequirementData) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *ApplicationRequirementData) SetServiceId(v string) {
	o.ServiceId = v
}

// GetAppRequirement returns the AppRequirement field value
func (o *ApplicationRequirementData) GetAppRequirement() ApplicationRequirement {
	if o == nil {
		var ret ApplicationRequirement
		return ret
	}

	return o.AppRequirement
}

// GetAppRequirementOk returns a tuple with the AppRequirement field value
// and a boolean to check if the value has been set.
func (o *ApplicationRequirementData) GetAppRequirementOk() (*ApplicationRequirement, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppRequirement, true
}

// SetAppRequirement sets field value
func (o *ApplicationRequirementData) SetAppRequirement(v ApplicationRequirement) {
	o.AppRequirement = v
}

// GetNotifUri returns the NotifUri field value
func (o *ApplicationRequirementData) GetNotifUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifUri
}

// GetNotifUriOk returns a tuple with the NotifUri field value
// and a boolean to check if the value has been set.
func (o *ApplicationRequirementData) GetNotifUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifUri, true
}

// SetNotifUri sets field value
func (o *ApplicationRequirementData) SetNotifUri(v string) {
	o.NotifUri = v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *ApplicationRequirementData) GetRequestTestNotification() bool {
	if o == nil || isNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRequirementData) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || isNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *ApplicationRequirementData) HasRequestTestNotification() bool {
	if o != nil && !isNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *ApplicationRequirementData) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *ApplicationRequirementData) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || isNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRequirementData) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || isNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *ApplicationRequirementData) HasWebsockNotifConfig() bool {
	if o != nil && !isNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *ApplicationRequirementData) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *ApplicationRequirementData) GetSuppFeat() string {
	if o == nil || isNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRequirementData) GetSuppFeatOk() (*string, bool) {
	if o == nil || isNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *ApplicationRequirementData) HasSuppFeat() bool {
	if o != nil && !isNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *ApplicationRequirementData) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o ApplicationRequirementData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationRequirementData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UeId) {
		toSerialize["ueId"] = o.UeId
	}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !isNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["appRequirement"] = o.AppRequirement
	toSerialize["notifUri"] = o.NotifUri
	if !isNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !isNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	if !isNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableApplicationRequirementData struct {
	value *ApplicationRequirementData
	isSet bool
}

func (v NullableApplicationRequirementData) Get() *ApplicationRequirementData {
	return v.value
}

func (v *NullableApplicationRequirementData) Set(val *ApplicationRequirementData) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationRequirementData) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationRequirementData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationRequirementData(val *ApplicationRequirementData) *NullableApplicationRequirementData {
	return &NullableApplicationRequirementData{value: val, isSet: true}
}

func (v NullableApplicationRequirementData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationRequirementData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


