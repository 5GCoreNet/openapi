/*
Nnwdaf_EventsSubscription

Nnwdaf_EventsSubscription Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnwdaf_EventsSubscription

import (
	"encoding/json"
)

// checks if the SubscriptionTransferInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionTransferInfo{}

// SubscriptionTransferInfo Contains information about subscriptions that are requested to be transferred.
type SubscriptionTransferInfo struct {
	TransReqType TransferRequestType `json:"transReqType"`
	NwdafEvSub NnwdafEventsSubscription `json:"nwdafEvSub"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	ConsumerId string `json:"consumerId"`
	ContextId *AnalyticsContextIdentifier `json:"contextId,omitempty"`
	SourceNfIds []string `json:"sourceNfIds,omitempty"`
	SourceSetIds []string `json:"sourceSetIds,omitempty"`
	ModelInfo []ModelInfo `json:"modelInfo,omitempty"`
}

// NewSubscriptionTransferInfo instantiates a new SubscriptionTransferInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionTransferInfo(transReqType TransferRequestType, nwdafEvSub NnwdafEventsSubscription, consumerId string) *SubscriptionTransferInfo {
	this := SubscriptionTransferInfo{}
	this.TransReqType = transReqType
	this.NwdafEvSub = nwdafEvSub
	this.ConsumerId = consumerId
	return &this
}

// NewSubscriptionTransferInfoWithDefaults instantiates a new SubscriptionTransferInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionTransferInfoWithDefaults() *SubscriptionTransferInfo {
	this := SubscriptionTransferInfo{}
	return &this
}

// GetTransReqType returns the TransReqType field value
func (o *SubscriptionTransferInfo) GetTransReqType() TransferRequestType {
	if o == nil {
		var ret TransferRequestType
		return ret
	}

	return o.TransReqType
}

// GetTransReqTypeOk returns a tuple with the TransReqType field value
// and a boolean to check if the value has been set.
func (o *SubscriptionTransferInfo) GetTransReqTypeOk() (*TransferRequestType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransReqType, true
}

// SetTransReqType sets field value
func (o *SubscriptionTransferInfo) SetTransReqType(v TransferRequestType) {
	o.TransReqType = v
}

// GetNwdafEvSub returns the NwdafEvSub field value
func (o *SubscriptionTransferInfo) GetNwdafEvSub() NnwdafEventsSubscription {
	if o == nil {
		var ret NnwdafEventsSubscription
		return ret
	}

	return o.NwdafEvSub
}

// GetNwdafEvSubOk returns a tuple with the NwdafEvSub field value
// and a boolean to check if the value has been set.
func (o *SubscriptionTransferInfo) GetNwdafEvSubOk() (*NnwdafEventsSubscription, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NwdafEvSub, true
}

// SetNwdafEvSub sets field value
func (o *SubscriptionTransferInfo) SetNwdafEvSub(v NnwdafEventsSubscription) {
	o.NwdafEvSub = v
}

// GetConsumerId returns the ConsumerId field value
func (o *SubscriptionTransferInfo) GetConsumerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsumerId
}

// GetConsumerIdOk returns a tuple with the ConsumerId field value
// and a boolean to check if the value has been set.
func (o *SubscriptionTransferInfo) GetConsumerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumerId, true
}

// SetConsumerId sets field value
func (o *SubscriptionTransferInfo) SetConsumerId(v string) {
	o.ConsumerId = v
}

// GetContextId returns the ContextId field value if set, zero value otherwise.
func (o *SubscriptionTransferInfo) GetContextId() AnalyticsContextIdentifier {
	if o == nil || IsNil(o.ContextId) {
		var ret AnalyticsContextIdentifier
		return ret
	}
	return *o.ContextId
}

// GetContextIdOk returns a tuple with the ContextId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionTransferInfo) GetContextIdOk() (*AnalyticsContextIdentifier, bool) {
	if o == nil || IsNil(o.ContextId) {
		return nil, false
	}
	return o.ContextId, true
}

// HasContextId returns a boolean if a field has been set.
func (o *SubscriptionTransferInfo) HasContextId() bool {
	if o != nil && !IsNil(o.ContextId) {
		return true
	}

	return false
}

// SetContextId gets a reference to the given AnalyticsContextIdentifier and assigns it to the ContextId field.
func (o *SubscriptionTransferInfo) SetContextId(v AnalyticsContextIdentifier) {
	o.ContextId = &v
}

// GetSourceNfIds returns the SourceNfIds field value if set, zero value otherwise.
func (o *SubscriptionTransferInfo) GetSourceNfIds() []string {
	if o == nil || IsNil(o.SourceNfIds) {
		var ret []string
		return ret
	}
	return o.SourceNfIds
}

// GetSourceNfIdsOk returns a tuple with the SourceNfIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionTransferInfo) GetSourceNfIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceNfIds) {
		return nil, false
	}
	return o.SourceNfIds, true
}

// HasSourceNfIds returns a boolean if a field has been set.
func (o *SubscriptionTransferInfo) HasSourceNfIds() bool {
	if o != nil && !IsNil(o.SourceNfIds) {
		return true
	}

	return false
}

// SetSourceNfIds gets a reference to the given []string and assigns it to the SourceNfIds field.
func (o *SubscriptionTransferInfo) SetSourceNfIds(v []string) {
	o.SourceNfIds = v
}

// GetSourceSetIds returns the SourceSetIds field value if set, zero value otherwise.
func (o *SubscriptionTransferInfo) GetSourceSetIds() []string {
	if o == nil || IsNil(o.SourceSetIds) {
		var ret []string
		return ret
	}
	return o.SourceSetIds
}

// GetSourceSetIdsOk returns a tuple with the SourceSetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionTransferInfo) GetSourceSetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceSetIds) {
		return nil, false
	}
	return o.SourceSetIds, true
}

// HasSourceSetIds returns a boolean if a field has been set.
func (o *SubscriptionTransferInfo) HasSourceSetIds() bool {
	if o != nil && !IsNil(o.SourceSetIds) {
		return true
	}

	return false
}

// SetSourceSetIds gets a reference to the given []string and assigns it to the SourceSetIds field.
func (o *SubscriptionTransferInfo) SetSourceSetIds(v []string) {
	o.SourceSetIds = v
}

// GetModelInfo returns the ModelInfo field value if set, zero value otherwise.
func (o *SubscriptionTransferInfo) GetModelInfo() []ModelInfo {
	if o == nil || IsNil(o.ModelInfo) {
		var ret []ModelInfo
		return ret
	}
	return o.ModelInfo
}

// GetModelInfoOk returns a tuple with the ModelInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionTransferInfo) GetModelInfoOk() ([]ModelInfo, bool) {
	if o == nil || IsNil(o.ModelInfo) {
		return nil, false
	}
	return o.ModelInfo, true
}

// HasModelInfo returns a boolean if a field has been set.
func (o *SubscriptionTransferInfo) HasModelInfo() bool {
	if o != nil && !IsNil(o.ModelInfo) {
		return true
	}

	return false
}

// SetModelInfo gets a reference to the given []ModelInfo and assigns it to the ModelInfo field.
func (o *SubscriptionTransferInfo) SetModelInfo(v []ModelInfo) {
	o.ModelInfo = v
}

func (o SubscriptionTransferInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionTransferInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transReqType"] = o.TransReqType
	toSerialize["nwdafEvSub"] = o.NwdafEvSub
	toSerialize["consumerId"] = o.ConsumerId
	if !IsNil(o.ContextId) {
		toSerialize["contextId"] = o.ContextId
	}
	if !IsNil(o.SourceNfIds) {
		toSerialize["sourceNfIds"] = o.SourceNfIds
	}
	if !IsNil(o.SourceSetIds) {
		toSerialize["sourceSetIds"] = o.SourceSetIds
	}
	if !IsNil(o.ModelInfo) {
		toSerialize["modelInfo"] = o.ModelInfo
	}
	return toSerialize, nil
}

type NullableSubscriptionTransferInfo struct {
	value *SubscriptionTransferInfo
	isSet bool
}

func (v NullableSubscriptionTransferInfo) Get() *SubscriptionTransferInfo {
	return v.value
}

func (v *NullableSubscriptionTransferInfo) Set(val *SubscriptionTransferInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionTransferInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionTransferInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionTransferInfo(val *SubscriptionTransferInfo) *NullableSubscriptionTransferInfo {
	return &NullableSubscriptionTransferInfo{value: val, isSet: true}
}

func (v NullableSubscriptionTransferInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionTransferInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


