/*
EES ACR Management Event_API

API for EES ACR Management Event.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_ACRManagementEvent

import (
	"encoding/json"
)

// checks if the AcrMgntEventsSubscriptionPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcrMgntEventsSubscriptionPatch{}

// AcrMgntEventsSubscriptionPatch Represents a modification request of Individual ACR Management Events Subscription. 
type AcrMgntEventsSubscriptionPatch struct {
	// The subscribed ACR management events.
	EventSubscs []AcrMgntEventSubsc `json:"eventSubscs,omitempty"`
	EvtReq *ReportingInformation `json:"evtReq,omitempty"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationDestination *string `json:"notificationDestination,omitempty"`
}

// NewAcrMgntEventsSubscriptionPatch instantiates a new AcrMgntEventsSubscriptionPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcrMgntEventsSubscriptionPatch() *AcrMgntEventsSubscriptionPatch {
	this := AcrMgntEventsSubscriptionPatch{}
	return &this
}

// NewAcrMgntEventsSubscriptionPatchWithDefaults instantiates a new AcrMgntEventsSubscriptionPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcrMgntEventsSubscriptionPatchWithDefaults() *AcrMgntEventsSubscriptionPatch {
	this := AcrMgntEventsSubscriptionPatch{}
	return &this
}

// GetEventSubscs returns the EventSubscs field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscriptionPatch) GetEventSubscs() []AcrMgntEventSubsc {
	if o == nil || isNil(o.EventSubscs) {
		var ret []AcrMgntEventSubsc
		return ret
	}
	return o.EventSubscs
}

// GetEventSubscsOk returns a tuple with the EventSubscs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscriptionPatch) GetEventSubscsOk() ([]AcrMgntEventSubsc, bool) {
	if o == nil || isNil(o.EventSubscs) {
		return nil, false
	}
	return o.EventSubscs, true
}

// HasEventSubscs returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscriptionPatch) HasEventSubscs() bool {
	if o != nil && !isNil(o.EventSubscs) {
		return true
	}

	return false
}

// SetEventSubscs gets a reference to the given []AcrMgntEventSubsc and assigns it to the EventSubscs field.
func (o *AcrMgntEventsSubscriptionPatch) SetEventSubscs(v []AcrMgntEventSubsc) {
	o.EventSubscs = v
}

// GetEvtReq returns the EvtReq field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscriptionPatch) GetEvtReq() ReportingInformation {
	if o == nil || isNil(o.EvtReq) {
		var ret ReportingInformation
		return ret
	}
	return *o.EvtReq
}

// GetEvtReqOk returns a tuple with the EvtReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscriptionPatch) GetEvtReqOk() (*ReportingInformation, bool) {
	if o == nil || isNil(o.EvtReq) {
		return nil, false
	}
	return o.EvtReq, true
}

// HasEvtReq returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscriptionPatch) HasEvtReq() bool {
	if o != nil && !isNil(o.EvtReq) {
		return true
	}

	return false
}

// SetEvtReq gets a reference to the given ReportingInformation and assigns it to the EvtReq field.
func (o *AcrMgntEventsSubscriptionPatch) SetEvtReq(v ReportingInformation) {
	o.EvtReq = &v
}

// GetNotificationDestination returns the NotificationDestination field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscriptionPatch) GetNotificationDestination() string {
	if o == nil || isNil(o.NotificationDestination) {
		var ret string
		return ret
	}
	return *o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscriptionPatch) GetNotificationDestinationOk() (*string, bool) {
	if o == nil || isNil(o.NotificationDestination) {
		return nil, false
	}
	return o.NotificationDestination, true
}

// HasNotificationDestination returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscriptionPatch) HasNotificationDestination() bool {
	if o != nil && !isNil(o.NotificationDestination) {
		return true
	}

	return false
}

// SetNotificationDestination gets a reference to the given string and assigns it to the NotificationDestination field.
func (o *AcrMgntEventsSubscriptionPatch) SetNotificationDestination(v string) {
	o.NotificationDestination = &v
}

func (o AcrMgntEventsSubscriptionPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcrMgntEventsSubscriptionPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EventSubscs) {
		toSerialize["eventSubscs"] = o.EventSubscs
	}
	if !isNil(o.EvtReq) {
		toSerialize["evtReq"] = o.EvtReq
	}
	if !isNil(o.NotificationDestination) {
		toSerialize["notificationDestination"] = o.NotificationDestination
	}
	return toSerialize, nil
}

type NullableAcrMgntEventsSubscriptionPatch struct {
	value *AcrMgntEventsSubscriptionPatch
	isSet bool
}

func (v NullableAcrMgntEventsSubscriptionPatch) Get() *AcrMgntEventsSubscriptionPatch {
	return v.value
}

func (v *NullableAcrMgntEventsSubscriptionPatch) Set(val *AcrMgntEventsSubscriptionPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableAcrMgntEventsSubscriptionPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableAcrMgntEventsSubscriptionPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcrMgntEventsSubscriptionPatch(val *AcrMgntEventsSubscriptionPatch) *NullableAcrMgntEventsSubscriptionPatch {
	return &NullableAcrMgntEventsSubscriptionPatch{value: val, isSet: true}
}

func (v NullableAcrMgntEventsSubscriptionPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcrMgntEventsSubscriptionPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


