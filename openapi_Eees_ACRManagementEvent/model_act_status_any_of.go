/*
EES ACR Management Event_API

API for EES ACR Management Event.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_ACRManagementEvent

import (
	"encoding/json"
	"fmt"
)

// ActStatusAnyOf the model 'ActStatusAnyOf'
type ActStatusAnyOf string

// List of ActStatus_anyOf
const (
	START ActStatusAnyOf = "ACT_START"
	STOP ActStatusAnyOf = "ACT_STOP"
)

// All allowed values of ActStatusAnyOf enum
var AllowedActStatusAnyOfEnumValues = []ActStatusAnyOf{
	"ACT_START",
	"ACT_STOP",
}

func (v *ActStatusAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActStatusAnyOf(value)
	for _, existing := range AllowedActStatusAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActStatusAnyOf", value)
}

// NewActStatusAnyOfFromValue returns a pointer to a valid ActStatusAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActStatusAnyOfFromValue(v string) (*ActStatusAnyOf, error) {
	ev := ActStatusAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActStatusAnyOf: valid values are %v", v, AllowedActStatusAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActStatusAnyOf) IsValid() bool {
	for _, existing := range AllowedActStatusAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActStatus_anyOf value
func (v ActStatusAnyOf) Ptr() *ActStatusAnyOf {
	return &v
}

type NullableActStatusAnyOf struct {
	value *ActStatusAnyOf
	isSet bool
}

func (v NullableActStatusAnyOf) Get() *ActStatusAnyOf {
	return v.value
}

func (v *NullableActStatusAnyOf) Set(val *ActStatusAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableActStatusAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableActStatusAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActStatusAnyOf(val *ActStatusAnyOf) *NullableActStatusAnyOf {
	return &NullableActStatusAnyOf{value: val, isSet: true}
}

func (v NullableActStatusAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActStatusAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

