/*
EES ACR Management Event_API

API for EES ACR Management Event.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_ACRManagementEvent

import (
	"encoding/json"
	"fmt"
)

// AvailabilityStatusAnyOf the model 'AvailabilityStatusAnyOf'
type AvailabilityStatusAnyOf string

// List of AvailabilityStatus_anyOf
const (
	AVAILABLE AvailabilityStatusAnyOf = "AVAILABLE"
	NOT_AVAILABLE AvailabilityStatusAnyOf = "NOT_AVAILABLE"
)

// All allowed values of AvailabilityStatusAnyOf enum
var AllowedAvailabilityStatusAnyOfEnumValues = []AvailabilityStatusAnyOf{
	"AVAILABLE",
	"NOT_AVAILABLE",
}

func (v *AvailabilityStatusAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailabilityStatusAnyOf(value)
	for _, existing := range AllowedAvailabilityStatusAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailabilityStatusAnyOf", value)
}

// NewAvailabilityStatusAnyOfFromValue returns a pointer to a valid AvailabilityStatusAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailabilityStatusAnyOfFromValue(v string) (*AvailabilityStatusAnyOf, error) {
	ev := AvailabilityStatusAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailabilityStatusAnyOf: valid values are %v", v, AllowedAvailabilityStatusAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailabilityStatusAnyOf) IsValid() bool {
	for _, existing := range AllowedAvailabilityStatusAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailabilityStatus_anyOf value
func (v AvailabilityStatusAnyOf) Ptr() *AvailabilityStatusAnyOf {
	return &v
}

type NullableAvailabilityStatusAnyOf struct {
	value *AvailabilityStatusAnyOf
	isSet bool
}

func (v NullableAvailabilityStatusAnyOf) Get() *AvailabilityStatusAnyOf {
	return v.value
}

func (v *NullableAvailabilityStatusAnyOf) Set(val *AvailabilityStatusAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityStatusAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityStatusAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityStatusAnyOf(val *AvailabilityStatusAnyOf) *NullableAvailabilityStatusAnyOf {
	return &NullableAvailabilityStatusAnyOf{value: val, isSet: true}
}

func (v NullableAvailabilityStatusAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityStatusAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

