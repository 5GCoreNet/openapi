/*
EES ACR Management Event_API

API for EES ACR Management Event.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_ACRManagementEvent

import (
	"encoding/json"
	"fmt"
)

// AcrMgntEventFailureCodeAnyOf the model 'AcrMgntEventFailureCodeAnyOf'
type AcrMgntEventFailureCodeAnyOf string

// List of AcrMgntEventFailureCode_anyOf
const (
	_3_GPP_UP_PATH_CHANGE_MON_NOT_AVAILABLE AcrMgntEventFailureCodeAnyOf = "3GPP_UP_PATH_CHANGE_MON_NOT_AVAILABLE"
	OTHER_REASONS AcrMgntEventFailureCodeAnyOf = "OTHER_REASONS"
)

// All allowed values of AcrMgntEventFailureCodeAnyOf enum
var AllowedAcrMgntEventFailureCodeAnyOfEnumValues = []AcrMgntEventFailureCodeAnyOf{
	"3GPP_UP_PATH_CHANGE_MON_NOT_AVAILABLE",
	"OTHER_REASONS",
}

func (v *AcrMgntEventFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AcrMgntEventFailureCodeAnyOf(value)
	for _, existing := range AllowedAcrMgntEventFailureCodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AcrMgntEventFailureCodeAnyOf", value)
}

// NewAcrMgntEventFailureCodeAnyOfFromValue returns a pointer to a valid AcrMgntEventFailureCodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAcrMgntEventFailureCodeAnyOfFromValue(v string) (*AcrMgntEventFailureCodeAnyOf, error) {
	ev := AcrMgntEventFailureCodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AcrMgntEventFailureCodeAnyOf: valid values are %v", v, AllowedAcrMgntEventFailureCodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AcrMgntEventFailureCodeAnyOf) IsValid() bool {
	for _, existing := range AllowedAcrMgntEventFailureCodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AcrMgntEventFailureCode_anyOf value
func (v AcrMgntEventFailureCodeAnyOf) Ptr() *AcrMgntEventFailureCodeAnyOf {
	return &v
}

type NullableAcrMgntEventFailureCodeAnyOf struct {
	value *AcrMgntEventFailureCodeAnyOf
	isSet bool
}

func (v NullableAcrMgntEventFailureCodeAnyOf) Get() *AcrMgntEventFailureCodeAnyOf {
	return v.value
}

func (v *NullableAcrMgntEventFailureCodeAnyOf) Set(val *AcrMgntEventFailureCodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAcrMgntEventFailureCodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAcrMgntEventFailureCodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcrMgntEventFailureCodeAnyOf(val *AcrMgntEventFailureCodeAnyOf) *NullableAcrMgntEventFailureCodeAnyOf {
	return &NullableAcrMgntEventFailureCodeAnyOf{value: val, isSet: true}
}

func (v NullableAcrMgntEventFailureCodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcrMgntEventFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

