/*
EES ACR Management Event_API

API for EES ACR Management Event.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_ACRManagementEvent

import (
	"encoding/json"
)

// checks if the AcrMgntEventsSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcrMgntEventsSubscription{}

// AcrMgntEventsSubscription Represents an Individual ACR Management Events Subscription.
type AcrMgntEventsSubscription struct {
	// string providing an URI formatted according to IETF RFC 3986.
	Self *string `json:"self,omitempty"`
	// Identifier of an EAS.
	EasId string `json:"easId"`
	// The subscribed ACR management events.
	EventSubscs []AcrMgntEventSubsc `json:"eventSubscs"`
	EvtReq *ReportingInformation `json:"evtReq,omitempty"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationDestination string `json:"notificationDestination"`
	// The ACR management event report(s).
	EventReports []AcrMgntEventReport `json:"eventReports,omitempty"`
	AvailabilityInfo *AvailabilityNotif `json:"availabilityInfo,omitempty"`
	// Failure event reports.
	FailEventReports []FailureAcrMgntEventInfo `json:"failEventReports,omitempty"`
	// Set to true by the EAS to request the EES to send a test notification. Set to false or omitted otherwise. 
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewAcrMgntEventsSubscription instantiates a new AcrMgntEventsSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcrMgntEventsSubscription(easId string, eventSubscs []AcrMgntEventSubsc, notificationDestination string) *AcrMgntEventsSubscription {
	this := AcrMgntEventsSubscription{}
	this.EasId = easId
	this.EventSubscs = eventSubscs
	this.NotificationDestination = notificationDestination
	return &this
}

// NewAcrMgntEventsSubscriptionWithDefaults instantiates a new AcrMgntEventsSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcrMgntEventsSubscriptionWithDefaults() *AcrMgntEventsSubscription {
	this := AcrMgntEventsSubscription{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscription) GetSelf() string {
	if o == nil || IsNil(o.Self) {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetSelfOk() (*string, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscription) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *AcrMgntEventsSubscription) SetSelf(v string) {
	o.Self = &v
}

// GetEasId returns the EasId field value
func (o *AcrMgntEventsSubscription) GetEasId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EasId
}

// GetEasIdOk returns a tuple with the EasId field value
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetEasIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EasId, true
}

// SetEasId sets field value
func (o *AcrMgntEventsSubscription) SetEasId(v string) {
	o.EasId = v
}

// GetEventSubscs returns the EventSubscs field value
func (o *AcrMgntEventsSubscription) GetEventSubscs() []AcrMgntEventSubsc {
	if o == nil {
		var ret []AcrMgntEventSubsc
		return ret
	}

	return o.EventSubscs
}

// GetEventSubscsOk returns a tuple with the EventSubscs field value
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetEventSubscsOk() ([]AcrMgntEventSubsc, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventSubscs, true
}

// SetEventSubscs sets field value
func (o *AcrMgntEventsSubscription) SetEventSubscs(v []AcrMgntEventSubsc) {
	o.EventSubscs = v
}

// GetEvtReq returns the EvtReq field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscription) GetEvtReq() ReportingInformation {
	if o == nil || IsNil(o.EvtReq) {
		var ret ReportingInformation
		return ret
	}
	return *o.EvtReq
}

// GetEvtReqOk returns a tuple with the EvtReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetEvtReqOk() (*ReportingInformation, bool) {
	if o == nil || IsNil(o.EvtReq) {
		return nil, false
	}
	return o.EvtReq, true
}

// HasEvtReq returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscription) HasEvtReq() bool {
	if o != nil && !IsNil(o.EvtReq) {
		return true
	}

	return false
}

// SetEvtReq gets a reference to the given ReportingInformation and assigns it to the EvtReq field.
func (o *AcrMgntEventsSubscription) SetEvtReq(v ReportingInformation) {
	o.EvtReq = &v
}

// GetNotificationDestination returns the NotificationDestination field value
func (o *AcrMgntEventsSubscription) GetNotificationDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetNotificationDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationDestination, true
}

// SetNotificationDestination sets field value
func (o *AcrMgntEventsSubscription) SetNotificationDestination(v string) {
	o.NotificationDestination = v
}

// GetEventReports returns the EventReports field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscription) GetEventReports() []AcrMgntEventReport {
	if o == nil || IsNil(o.EventReports) {
		var ret []AcrMgntEventReport
		return ret
	}
	return o.EventReports
}

// GetEventReportsOk returns a tuple with the EventReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetEventReportsOk() ([]AcrMgntEventReport, bool) {
	if o == nil || IsNil(o.EventReports) {
		return nil, false
	}
	return o.EventReports, true
}

// HasEventReports returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscription) HasEventReports() bool {
	if o != nil && !IsNil(o.EventReports) {
		return true
	}

	return false
}

// SetEventReports gets a reference to the given []AcrMgntEventReport and assigns it to the EventReports field.
func (o *AcrMgntEventsSubscription) SetEventReports(v []AcrMgntEventReport) {
	o.EventReports = v
}

// GetAvailabilityInfo returns the AvailabilityInfo field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscription) GetAvailabilityInfo() AvailabilityNotif {
	if o == nil || IsNil(o.AvailabilityInfo) {
		var ret AvailabilityNotif
		return ret
	}
	return *o.AvailabilityInfo
}

// GetAvailabilityInfoOk returns a tuple with the AvailabilityInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetAvailabilityInfoOk() (*AvailabilityNotif, bool) {
	if o == nil || IsNil(o.AvailabilityInfo) {
		return nil, false
	}
	return o.AvailabilityInfo, true
}

// HasAvailabilityInfo returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscription) HasAvailabilityInfo() bool {
	if o != nil && !IsNil(o.AvailabilityInfo) {
		return true
	}

	return false
}

// SetAvailabilityInfo gets a reference to the given AvailabilityNotif and assigns it to the AvailabilityInfo field.
func (o *AcrMgntEventsSubscription) SetAvailabilityInfo(v AvailabilityNotif) {
	o.AvailabilityInfo = &v
}

// GetFailEventReports returns the FailEventReports field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscription) GetFailEventReports() []FailureAcrMgntEventInfo {
	if o == nil || IsNil(o.FailEventReports) {
		var ret []FailureAcrMgntEventInfo
		return ret
	}
	return o.FailEventReports
}

// GetFailEventReportsOk returns a tuple with the FailEventReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetFailEventReportsOk() ([]FailureAcrMgntEventInfo, bool) {
	if o == nil || IsNil(o.FailEventReports) {
		return nil, false
	}
	return o.FailEventReports, true
}

// HasFailEventReports returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscription) HasFailEventReports() bool {
	if o != nil && !IsNil(o.FailEventReports) {
		return true
	}

	return false
}

// SetFailEventReports gets a reference to the given []FailureAcrMgntEventInfo and assigns it to the FailEventReports field.
func (o *AcrMgntEventsSubscription) SetFailEventReports(v []FailureAcrMgntEventInfo) {
	o.FailEventReports = v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscription) GetRequestTestNotification() bool {
	if o == nil || IsNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscription) HasRequestTestNotification() bool {
	if o != nil && !IsNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *AcrMgntEventsSubscription) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscription) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscription) HasWebsockNotifConfig() bool {
	if o != nil && !IsNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *AcrMgntEventsSubscription) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *AcrMgntEventsSubscription) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcrMgntEventsSubscription) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *AcrMgntEventsSubscription) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *AcrMgntEventsSubscription) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o AcrMgntEventsSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcrMgntEventsSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	toSerialize["easId"] = o.EasId
	toSerialize["eventSubscs"] = o.EventSubscs
	if !IsNil(o.EvtReq) {
		toSerialize["evtReq"] = o.EvtReq
	}
	toSerialize["notificationDestination"] = o.NotificationDestination
	if !IsNil(o.EventReports) {
		toSerialize["eventReports"] = o.EventReports
	}
	if !IsNil(o.AvailabilityInfo) {
		toSerialize["availabilityInfo"] = o.AvailabilityInfo
	}
	if !IsNil(o.FailEventReports) {
		toSerialize["failEventReports"] = o.FailEventReports
	}
	if !IsNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !IsNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableAcrMgntEventsSubscription struct {
	value *AcrMgntEventsSubscription
	isSet bool
}

func (v NullableAcrMgntEventsSubscription) Get() *AcrMgntEventsSubscription {
	return v.value
}

func (v *NullableAcrMgntEventsSubscription) Set(val *AcrMgntEventsSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableAcrMgntEventsSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableAcrMgntEventsSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcrMgntEventsSubscription(val *AcrMgntEventsSubscription) *NullableAcrMgntEventsSubscription {
	return &NullableAcrMgntEventsSubscription{value: val, isSet: true}
}

func (v NullableAcrMgntEventsSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcrMgntEventsSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


