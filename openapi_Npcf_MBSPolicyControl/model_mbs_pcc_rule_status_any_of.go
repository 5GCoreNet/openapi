/*
Npcf_MBSPolicyControl API

MBS Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_MBSPolicyControl

import (
	"encoding/json"
	"fmt"
)

// MbsPccRuleStatusAnyOf the model 'MbsPccRuleStatusAnyOf'
type MbsPccRuleStatusAnyOf string

// List of MbsPccRuleStatus_anyOf
const (
	ACTIVE MbsPccRuleStatusAnyOf = "ACTIVE"
	INACTIVE MbsPccRuleStatusAnyOf = "INACTIVE"
)

// All allowed values of MbsPccRuleStatusAnyOf enum
var AllowedMbsPccRuleStatusAnyOfEnumValues = []MbsPccRuleStatusAnyOf{
	"ACTIVE",
	"INACTIVE",
}

func (v *MbsPccRuleStatusAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MbsPccRuleStatusAnyOf(value)
	for _, existing := range AllowedMbsPccRuleStatusAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MbsPccRuleStatusAnyOf", value)
}

// NewMbsPccRuleStatusAnyOfFromValue returns a pointer to a valid MbsPccRuleStatusAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMbsPccRuleStatusAnyOfFromValue(v string) (*MbsPccRuleStatusAnyOf, error) {
	ev := MbsPccRuleStatusAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MbsPccRuleStatusAnyOf: valid values are %v", v, AllowedMbsPccRuleStatusAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MbsPccRuleStatusAnyOf) IsValid() bool {
	for _, existing := range AllowedMbsPccRuleStatusAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MbsPccRuleStatus_anyOf value
func (v MbsPccRuleStatusAnyOf) Ptr() *MbsPccRuleStatusAnyOf {
	return &v
}

type NullableMbsPccRuleStatusAnyOf struct {
	value *MbsPccRuleStatusAnyOf
	isSet bool
}

func (v NullableMbsPccRuleStatusAnyOf) Get() *MbsPccRuleStatusAnyOf {
	return v.value
}

func (v *NullableMbsPccRuleStatusAnyOf) Set(val *MbsPccRuleStatusAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMbsPccRuleStatusAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMbsPccRuleStatusAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMbsPccRuleStatusAnyOf(val *MbsPccRuleStatusAnyOf) *NullableMbsPccRuleStatusAnyOf {
	return &NullableMbsPccRuleStatusAnyOf{value: val, isSet: true}
}

func (v NullableMbsPccRuleStatusAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMbsPccRuleStatusAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

