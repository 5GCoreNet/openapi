/*
Npcf_MBSPolicyControl API

MBS Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_MBSPolicyControl

import (
	"encoding/json"
	"fmt"
)

// MbsFailureCodeAnyOf the model 'MbsFailureCodeAnyOf'
type MbsFailureCodeAnyOf string

// List of MbsFailureCode_anyOf
const (
	NF_MALFUNCTION MbsFailureCodeAnyOf = "NF_MALFUNCTION"
	NF_RESOURCES_UNAVAILABLE MbsFailureCodeAnyOf = "NF_RESOURCES_UNAVAILABLE"
	RESOURCE_ALLOCATION_FAILURE MbsFailureCodeAnyOf = "RESOURCE_ALLOCATION_FAILURE"
	MBS_QOS_VALIDATION_FAILURE MbsFailureCodeAnyOf = "MBS_QOS_VALIDATION_FAILURE"
	NO_MBS_QOS_FLOW MbsFailureCodeAnyOf = "NO_MBS_QOS_FLOW"
	MBS_QOS_DECISION_ERROR MbsFailureCodeAnyOf = "MBS_QOS_DECISION_ERROR"
	MBS_POLICY_PARAM_ERROR MbsFailureCodeAnyOf = "MBS_POLICY_PARAM_ERROR"
)

// All allowed values of MbsFailureCodeAnyOf enum
var AllowedMbsFailureCodeAnyOfEnumValues = []MbsFailureCodeAnyOf{
	"NF_MALFUNCTION",
	"NF_RESOURCES_UNAVAILABLE",
	"RESOURCE_ALLOCATION_FAILURE",
	"MBS_QOS_VALIDATION_FAILURE",
	"NO_MBS_QOS_FLOW",
	"MBS_QOS_DECISION_ERROR",
	"MBS_POLICY_PARAM_ERROR",
}

func (v *MbsFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MbsFailureCodeAnyOf(value)
	for _, existing := range AllowedMbsFailureCodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MbsFailureCodeAnyOf", value)
}

// NewMbsFailureCodeAnyOfFromValue returns a pointer to a valid MbsFailureCodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMbsFailureCodeAnyOfFromValue(v string) (*MbsFailureCodeAnyOf, error) {
	ev := MbsFailureCodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MbsFailureCodeAnyOf: valid values are %v", v, AllowedMbsFailureCodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MbsFailureCodeAnyOf) IsValid() bool {
	for _, existing := range AllowedMbsFailureCodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MbsFailureCode_anyOf value
func (v MbsFailureCodeAnyOf) Ptr() *MbsFailureCodeAnyOf {
	return &v
}

type NullableMbsFailureCodeAnyOf struct {
	value *MbsFailureCodeAnyOf
	isSet bool
}

func (v NullableMbsFailureCodeAnyOf) Get() *MbsFailureCodeAnyOf {
	return v.value
}

func (v *NullableMbsFailureCodeAnyOf) Set(val *MbsFailureCodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMbsFailureCodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMbsFailureCodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMbsFailureCodeAnyOf(val *MbsFailureCodeAnyOf) *NullableMbsFailureCodeAnyOf {
	return &NullableMbsFailureCodeAnyOf{value: val, isSet: true}
}

func (v NullableMbsFailureCodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMbsFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

