/*
Npcf_MBSPolicyControl API

MBS Policy Control Service   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_MBSPolicyControl

import (
	"encoding/json"
)

// checks if the MbsPolicyCtxtData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MbsPolicyCtxtData{}

// MbsPolicyCtxtData Contains the parameters used to request the creation of an MBS Policy Association. 
type MbsPolicyCtxtData struct {
	MbsSessionId MbsSessionId `json:"mbsSessionId"`
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn *string `json:"dnn,omitempty"`
	Snssai *Snssai `json:"snssai,omitempty"`
	MbsServInfo *MbsServiceInfo `json:"mbsServInfo,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewMbsPolicyCtxtData instantiates a new MbsPolicyCtxtData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMbsPolicyCtxtData(mbsSessionId MbsSessionId) *MbsPolicyCtxtData {
	this := MbsPolicyCtxtData{}
	this.MbsSessionId = mbsSessionId
	return &this
}

// NewMbsPolicyCtxtDataWithDefaults instantiates a new MbsPolicyCtxtData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMbsPolicyCtxtDataWithDefaults() *MbsPolicyCtxtData {
	this := MbsPolicyCtxtData{}
	return &this
}

// GetMbsSessionId returns the MbsSessionId field value
func (o *MbsPolicyCtxtData) GetMbsSessionId() MbsSessionId {
	if o == nil {
		var ret MbsSessionId
		return ret
	}

	return o.MbsSessionId
}

// GetMbsSessionIdOk returns a tuple with the MbsSessionId field value
// and a boolean to check if the value has been set.
func (o *MbsPolicyCtxtData) GetMbsSessionIdOk() (*MbsSessionId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MbsSessionId, true
}

// SetMbsSessionId sets field value
func (o *MbsPolicyCtxtData) SetMbsSessionId(v MbsSessionId) {
	o.MbsSessionId = v
}

// GetDnn returns the Dnn field value if set, zero value otherwise.
func (o *MbsPolicyCtxtData) GetDnn() string {
	if o == nil || isNil(o.Dnn) {
		var ret string
		return ret
	}
	return *o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MbsPolicyCtxtData) GetDnnOk() (*string, bool) {
	if o == nil || isNil(o.Dnn) {
		return nil, false
	}
	return o.Dnn, true
}

// HasDnn returns a boolean if a field has been set.
func (o *MbsPolicyCtxtData) HasDnn() bool {
	if o != nil && !isNil(o.Dnn) {
		return true
	}

	return false
}

// SetDnn gets a reference to the given string and assigns it to the Dnn field.
func (o *MbsPolicyCtxtData) SetDnn(v string) {
	o.Dnn = &v
}

// GetSnssai returns the Snssai field value if set, zero value otherwise.
func (o *MbsPolicyCtxtData) GetSnssai() Snssai {
	if o == nil || isNil(o.Snssai) {
		var ret Snssai
		return ret
	}
	return *o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MbsPolicyCtxtData) GetSnssaiOk() (*Snssai, bool) {
	if o == nil || isNil(o.Snssai) {
		return nil, false
	}
	return o.Snssai, true
}

// HasSnssai returns a boolean if a field has been set.
func (o *MbsPolicyCtxtData) HasSnssai() bool {
	if o != nil && !isNil(o.Snssai) {
		return true
	}

	return false
}

// SetSnssai gets a reference to the given Snssai and assigns it to the Snssai field.
func (o *MbsPolicyCtxtData) SetSnssai(v Snssai) {
	o.Snssai = &v
}

// GetMbsServInfo returns the MbsServInfo field value if set, zero value otherwise.
func (o *MbsPolicyCtxtData) GetMbsServInfo() MbsServiceInfo {
	if o == nil || isNil(o.MbsServInfo) {
		var ret MbsServiceInfo
		return ret
	}
	return *o.MbsServInfo
}

// GetMbsServInfoOk returns a tuple with the MbsServInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MbsPolicyCtxtData) GetMbsServInfoOk() (*MbsServiceInfo, bool) {
	if o == nil || isNil(o.MbsServInfo) {
		return nil, false
	}
	return o.MbsServInfo, true
}

// HasMbsServInfo returns a boolean if a field has been set.
func (o *MbsPolicyCtxtData) HasMbsServInfo() bool {
	if o != nil && !isNil(o.MbsServInfo) {
		return true
	}

	return false
}

// SetMbsServInfo gets a reference to the given MbsServiceInfo and assigns it to the MbsServInfo field.
func (o *MbsPolicyCtxtData) SetMbsServInfo(v MbsServiceInfo) {
	o.MbsServInfo = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *MbsPolicyCtxtData) GetSuppFeat() string {
	if o == nil || isNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MbsPolicyCtxtData) GetSuppFeatOk() (*string, bool) {
	if o == nil || isNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *MbsPolicyCtxtData) HasSuppFeat() bool {
	if o != nil && !isNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *MbsPolicyCtxtData) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o MbsPolicyCtxtData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MbsPolicyCtxtData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mbsSessionId"] = o.MbsSessionId
	if !isNil(o.Dnn) {
		toSerialize["dnn"] = o.Dnn
	}
	if !isNil(o.Snssai) {
		toSerialize["snssai"] = o.Snssai
	}
	if !isNil(o.MbsServInfo) {
		toSerialize["mbsServInfo"] = o.MbsServInfo
	}
	if !isNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableMbsPolicyCtxtData struct {
	value *MbsPolicyCtxtData
	isSet bool
}

func (v NullableMbsPolicyCtxtData) Get() *MbsPolicyCtxtData {
	return v.value
}

func (v *NullableMbsPolicyCtxtData) Set(val *MbsPolicyCtxtData) {
	v.value = val
	v.isSet = true
}

func (v NullableMbsPolicyCtxtData) IsSet() bool {
	return v.isSet
}

func (v *NullableMbsPolicyCtxtData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMbsPolicyCtxtData(val *MbsPolicyCtxtData) *NullableMbsPolicyCtxtData {
	return &NullableMbsPolicyCtxtData{value: val, isSet: true}
}

func (v NullableMbsPolicyCtxtData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMbsPolicyCtxtData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


