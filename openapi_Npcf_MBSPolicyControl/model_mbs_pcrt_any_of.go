/*
Npcf_MBSPolicyControl API

MBS Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_MBSPolicyControl

import (
	"encoding/json"
	"fmt"
)

// MbsPcrtAnyOf the model 'MbsPcrtAnyOf'
type MbsPcrtAnyOf string

// List of MbsPcrt_anyOf
const (
	MBS_SESSION_UPDATE MbsPcrtAnyOf = "MBS_SESSION_UPDATE"
)

// All allowed values of MbsPcrtAnyOf enum
var AllowedMbsPcrtAnyOfEnumValues = []MbsPcrtAnyOf{
	"MBS_SESSION_UPDATE",
}

func (v *MbsPcrtAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MbsPcrtAnyOf(value)
	for _, existing := range AllowedMbsPcrtAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MbsPcrtAnyOf", value)
}

// NewMbsPcrtAnyOfFromValue returns a pointer to a valid MbsPcrtAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMbsPcrtAnyOfFromValue(v string) (*MbsPcrtAnyOf, error) {
	ev := MbsPcrtAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MbsPcrtAnyOf: valid values are %v", v, AllowedMbsPcrtAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MbsPcrtAnyOf) IsValid() bool {
	for _, existing := range AllowedMbsPcrtAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MbsPcrt_anyOf value
func (v MbsPcrtAnyOf) Ptr() *MbsPcrtAnyOf {
	return &v
}

type NullableMbsPcrtAnyOf struct {
	value *MbsPcrtAnyOf
	isSet bool
}

func (v NullableMbsPcrtAnyOf) Get() *MbsPcrtAnyOf {
	return v.value
}

func (v *NullableMbsPcrtAnyOf) Set(val *MbsPcrtAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMbsPcrtAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMbsPcrtAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMbsPcrtAnyOf(val *MbsPcrtAnyOf) *NullableMbsPcrtAnyOf {
	return &NullableMbsPcrtAnyOf{value: val, isSet: true}
}

func (v NullableMbsPcrtAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMbsPcrtAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

