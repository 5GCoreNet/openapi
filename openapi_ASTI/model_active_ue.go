/*
3gpp-asti

API for ASTI.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ASTI

import (
	"encoding/json"
)

// checks if the ActiveUe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveUe{}

// ActiveUe Contains the UE identifier whose status of the access stratum time distribution is active and the optional requested time synchronization error budget. 
type ActiveUe struct {
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	Gpsi *string `json:"gpsi,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	TimeSyncErrBdgt *int32 `json:"timeSyncErrBdgt,omitempty"`
}

// NewActiveUe instantiates a new ActiveUe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveUe() *ActiveUe {
	this := ActiveUe{}
	return &this
}

// NewActiveUeWithDefaults instantiates a new ActiveUe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveUeWithDefaults() *ActiveUe {
	this := ActiveUe{}
	return &this
}

// GetGpsi returns the Gpsi field value if set, zero value otherwise.
func (o *ActiveUe) GetGpsi() string {
	if o == nil || isNil(o.Gpsi) {
		var ret string
		return ret
	}
	return *o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveUe) GetGpsiOk() (*string, bool) {
	if o == nil || isNil(o.Gpsi) {
		return nil, false
	}
	return o.Gpsi, true
}

// HasGpsi returns a boolean if a field has been set.
func (o *ActiveUe) HasGpsi() bool {
	if o != nil && !isNil(o.Gpsi) {
		return true
	}

	return false
}

// SetGpsi gets a reference to the given string and assigns it to the Gpsi field.
func (o *ActiveUe) SetGpsi(v string) {
	o.Gpsi = &v
}

// GetTimeSyncErrBdgt returns the TimeSyncErrBdgt field value if set, zero value otherwise.
func (o *ActiveUe) GetTimeSyncErrBdgt() int32 {
	if o == nil || isNil(o.TimeSyncErrBdgt) {
		var ret int32
		return ret
	}
	return *o.TimeSyncErrBdgt
}

// GetTimeSyncErrBdgtOk returns a tuple with the TimeSyncErrBdgt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveUe) GetTimeSyncErrBdgtOk() (*int32, bool) {
	if o == nil || isNil(o.TimeSyncErrBdgt) {
		return nil, false
	}
	return o.TimeSyncErrBdgt, true
}

// HasTimeSyncErrBdgt returns a boolean if a field has been set.
func (o *ActiveUe) HasTimeSyncErrBdgt() bool {
	if o != nil && !isNil(o.TimeSyncErrBdgt) {
		return true
	}

	return false
}

// SetTimeSyncErrBdgt gets a reference to the given int32 and assigns it to the TimeSyncErrBdgt field.
func (o *ActiveUe) SetTimeSyncErrBdgt(v int32) {
	o.TimeSyncErrBdgt = &v
}

func (o ActiveUe) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveUe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Gpsi) {
		toSerialize["gpsi"] = o.Gpsi
	}
	if !isNil(o.TimeSyncErrBdgt) {
		toSerialize["timeSyncErrBdgt"] = o.TimeSyncErrBdgt
	}
	return toSerialize, nil
}

type NullableActiveUe struct {
	value *ActiveUe
	isSet bool
}

func (v NullableActiveUe) Get() *ActiveUe {
	return v.value
}

func (v *NullableActiveUe) Set(val *ActiveUe) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveUe) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveUe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveUe(val *ActiveUe) *NullableActiveUe {
	return &NullableActiveUe{value: val, isSet: true}
}

func (v NullableActiveUe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveUe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


