/*
N32 Handshake API

N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N32_Handshake

import (
	"encoding/json"
	"fmt"
)

// N32fErrorType Type of error while processing N32-f message
type N32fErrorType struct {
	N32fErrorTypeAnyOf *N32fErrorTypeAnyOf
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *N32fErrorType) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into N32fErrorTypeAnyOf
	err = json.Unmarshal(data, &dst.N32fErrorTypeAnyOf);
	if err == nil {
		jsonN32fErrorTypeAnyOf, _ := json.Marshal(dst.N32fErrorTypeAnyOf)
		if string(jsonN32fErrorTypeAnyOf) == "{}" { // empty struct
			dst.N32fErrorTypeAnyOf = nil
		} else {
			return nil // data stored in dst.N32fErrorTypeAnyOf, return on the first match
		}
	} else {
		dst.N32fErrorTypeAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(N32fErrorType)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *N32fErrorType) MarshalJSON() ([]byte, error) {
	if src.N32fErrorTypeAnyOf != nil {
		return json.Marshal(&src.N32fErrorTypeAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableN32fErrorType struct {
	value *N32fErrorType
	isSet bool
}

func (v NullableN32fErrorType) Get() *N32fErrorType {
	return v.value
}

func (v *NullableN32fErrorType) Set(val *N32fErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableN32fErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableN32fErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableN32fErrorType(val *N32fErrorType) *NullableN32fErrorType {
	return &NullableN32fErrorType{value: val, isSet: true}
}

func (v NullableN32fErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableN32fErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


