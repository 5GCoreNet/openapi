/*
N32 Handshake API

N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N32_Handshake

import (
	"encoding/json"
	"fmt"
)

// IeTypeAnyOf the model 'IeTypeAnyOf'
type IeTypeAnyOf string

// List of IeType_anyOf
const (
	UEID IeTypeAnyOf = "UEID"
	LOCATION IeTypeAnyOf = "LOCATION"
	KEY_MATERIAL IeTypeAnyOf = "KEY_MATERIAL"
	AUTHENTICATION_MATERIAL IeTypeAnyOf = "AUTHENTICATION_MATERIAL"
	AUTHORIZATION_TOKEN IeTypeAnyOf = "AUTHORIZATION_TOKEN"
	OTHER IeTypeAnyOf = "OTHER"
	NONSENSITIVE IeTypeAnyOf = "NONSENSITIVE"
)

// All allowed values of IeTypeAnyOf enum
var AllowedIeTypeAnyOfEnumValues = []IeTypeAnyOf{
	"UEID",
	"LOCATION",
	"KEY_MATERIAL",
	"AUTHENTICATION_MATERIAL",
	"AUTHORIZATION_TOKEN",
	"OTHER",
	"NONSENSITIVE",
}

func (v *IeTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IeTypeAnyOf(value)
	for _, existing := range AllowedIeTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IeTypeAnyOf", value)
}

// NewIeTypeAnyOfFromValue returns a pointer to a valid IeTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIeTypeAnyOfFromValue(v string) (*IeTypeAnyOf, error) {
	ev := IeTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IeTypeAnyOf: valid values are %v", v, AllowedIeTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IeTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedIeTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IeType_anyOf value
func (v IeTypeAnyOf) Ptr() *IeTypeAnyOf {
	return &v
}

type NullableIeTypeAnyOf struct {
	value *IeTypeAnyOf
	isSet bool
}

func (v NullableIeTypeAnyOf) Get() *IeTypeAnyOf {
	return v.value
}

func (v *NullableIeTypeAnyOf) Set(val *IeTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIeTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIeTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIeTypeAnyOf(val *IeTypeAnyOf) *NullableIeTypeAnyOf {
	return &NullableIeTypeAnyOf{value: val, isSet: true}
}

func (v NullableIeTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIeTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

