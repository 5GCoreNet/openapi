/*
N32 Handshake API

N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N32_Handshake

import (
	"encoding/json"
	"fmt"
)

// FailureReason Reason for failure to reconstruct a HTTP/2 message from N32-f message
type FailureReason struct {
	FailureReasonAnyOf *FailureReasonAnyOf
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FailureReason) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into FailureReasonAnyOf
	err = json.Unmarshal(data, &dst.FailureReasonAnyOf);
	if err == nil {
		jsonFailureReasonAnyOf, _ := json.Marshal(dst.FailureReasonAnyOf)
		if string(jsonFailureReasonAnyOf) == "{}" { // empty struct
			dst.FailureReasonAnyOf = nil
		} else {
			return nil // data stored in dst.FailureReasonAnyOf, return on the first match
		}
	} else {
		dst.FailureReasonAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(FailureReason)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *FailureReason) MarshalJSON() ([]byte, error) {
	if src.FailureReasonAnyOf != nil {
		return json.Marshal(&src.FailureReasonAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableFailureReason struct {
	value *FailureReason
	isSet bool
}

func (v NullableFailureReason) Get() *FailureReason {
	return v.value
}

func (v *NullableFailureReason) Set(val *FailureReason) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureReason) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureReason(val *FailureReason) *NullableFailureReason {
	return &NullableFailureReason{value: val, isSet: true}
}

func (v NullableFailureReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


