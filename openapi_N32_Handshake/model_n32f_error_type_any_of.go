/*
N32 Handshake API

N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N32_Handshake

import (
	"encoding/json"
	"fmt"
)

// N32fErrorTypeAnyOf the model 'N32fErrorTypeAnyOf'
type N32fErrorTypeAnyOf string

// List of N32fErrorType_anyOf
const (
	INTEGRITY_CHECK_FAILED N32fErrorTypeAnyOf = "INTEGRITY_CHECK_FAILED"
	INTEGRITY_CHECK_ON_MODIFICATIONS_FAILED N32fErrorTypeAnyOf = "INTEGRITY_CHECK_ON_MODIFICATIONS_FAILED"
	MODIFICATIONS_INSTRUCTIONS_FAILED N32fErrorTypeAnyOf = "MODIFICATIONS_INSTRUCTIONS_FAILED"
	DECIPHERING_FAILED N32fErrorTypeAnyOf = "DECIPHERING_FAILED"
	MESSAGE_RECONSTRUCTION_FAILED N32fErrorTypeAnyOf = "MESSAGE_RECONSTRUCTION_FAILED"
	CONTEXT_NOT_FOUND N32fErrorTypeAnyOf = "CONTEXT_NOT_FOUND"
	INTEGRITY_KEY_EXPIRED N32fErrorTypeAnyOf = "INTEGRITY_KEY_EXPIRED"
	ENCRYPTION_KEY_EXPIRED N32fErrorTypeAnyOf = "ENCRYPTION_KEY_EXPIRED"
	POLICY_MISMATCH N32fErrorTypeAnyOf = "POLICY_MISMATCH"
)

// All allowed values of N32fErrorTypeAnyOf enum
var AllowedN32fErrorTypeAnyOfEnumValues = []N32fErrorTypeAnyOf{
	"INTEGRITY_CHECK_FAILED",
	"INTEGRITY_CHECK_ON_MODIFICATIONS_FAILED",
	"MODIFICATIONS_INSTRUCTIONS_FAILED",
	"DECIPHERING_FAILED",
	"MESSAGE_RECONSTRUCTION_FAILED",
	"CONTEXT_NOT_FOUND",
	"INTEGRITY_KEY_EXPIRED",
	"ENCRYPTION_KEY_EXPIRED",
	"POLICY_MISMATCH",
}

func (v *N32fErrorTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := N32fErrorTypeAnyOf(value)
	for _, existing := range AllowedN32fErrorTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid N32fErrorTypeAnyOf", value)
}

// NewN32fErrorTypeAnyOfFromValue returns a pointer to a valid N32fErrorTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewN32fErrorTypeAnyOfFromValue(v string) (*N32fErrorTypeAnyOf, error) {
	ev := N32fErrorTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for N32fErrorTypeAnyOf: valid values are %v", v, AllowedN32fErrorTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v N32fErrorTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedN32fErrorTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to N32fErrorType_anyOf value
func (v N32fErrorTypeAnyOf) Ptr() *N32fErrorTypeAnyOf {
	return &v
}

type NullableN32fErrorTypeAnyOf struct {
	value *N32fErrorTypeAnyOf
	isSet bool
}

func (v NullableN32fErrorTypeAnyOf) Get() *N32fErrorTypeAnyOf {
	return v.value
}

func (v *NullableN32fErrorTypeAnyOf) Set(val *N32fErrorTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableN32fErrorTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableN32fErrorTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableN32fErrorTypeAnyOf(val *N32fErrorTypeAnyOf) *NullableN32fErrorTypeAnyOf {
	return &NullableN32fErrorTypeAnyOf{value: val, isSet: true}
}

func (v NullableN32fErrorTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableN32fErrorTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

