/*
N32 Handshake API

N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N32_Handshake

import (
	"encoding/json"
	"fmt"
)

// IeLocationAnyOf the model 'IeLocationAnyOf'
type IeLocationAnyOf string

// List of IeLocation_anyOf
const (
	URI_PARAM IeLocationAnyOf = "URI_PARAM"
	HEADER IeLocationAnyOf = "HEADER"
	BODY IeLocationAnyOf = "BODY"
	MULTIPART_BINARY IeLocationAnyOf = "MULTIPART_BINARY"
)

// All allowed values of IeLocationAnyOf enum
var AllowedIeLocationAnyOfEnumValues = []IeLocationAnyOf{
	"URI_PARAM",
	"HEADER",
	"BODY",
	"MULTIPART_BINARY",
}

func (v *IeLocationAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IeLocationAnyOf(value)
	for _, existing := range AllowedIeLocationAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IeLocationAnyOf", value)
}

// NewIeLocationAnyOfFromValue returns a pointer to a valid IeLocationAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIeLocationAnyOfFromValue(v string) (*IeLocationAnyOf, error) {
	ev := IeLocationAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IeLocationAnyOf: valid values are %v", v, AllowedIeLocationAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IeLocationAnyOf) IsValid() bool {
	for _, existing := range AllowedIeLocationAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IeLocation_anyOf value
func (v IeLocationAnyOf) Ptr() *IeLocationAnyOf {
	return &v
}

type NullableIeLocationAnyOf struct {
	value *IeLocationAnyOf
	isSet bool
}

func (v NullableIeLocationAnyOf) Get() *IeLocationAnyOf {
	return v.value
}

func (v *NullableIeLocationAnyOf) Set(val *IeLocationAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIeLocationAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIeLocationAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIeLocationAnyOf(val *IeLocationAnyOf) *NullableIeLocationAnyOf {
	return &NullableIeLocationAnyOf{value: val, isSet: true}
}

func (v NullableIeLocationAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIeLocationAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

