/*
N32 Handshake API

N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N32_Handshake

import (
	"encoding/json"
)

// checks if the ApiIeMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiIeMapping{}

// ApiIeMapping API URI to IE mapping on which the protection policy needs to be applied
type ApiIeMapping struct {
	ApiSignature ApiSignature `json:"apiSignature"`
	ApiMethod HttpMethod `json:"apiMethod"`
	IeList []IeInfo `json:"IeList"`
}

// NewApiIeMapping instantiates a new ApiIeMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiIeMapping(apiSignature ApiSignature, apiMethod HttpMethod, ieList []IeInfo) *ApiIeMapping {
	this := ApiIeMapping{}
	this.ApiSignature = apiSignature
	this.ApiMethod = apiMethod
	this.IeList = ieList
	return &this
}

// NewApiIeMappingWithDefaults instantiates a new ApiIeMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiIeMappingWithDefaults() *ApiIeMapping {
	this := ApiIeMapping{}
	return &this
}

// GetApiSignature returns the ApiSignature field value
func (o *ApiIeMapping) GetApiSignature() ApiSignature {
	if o == nil {
		var ret ApiSignature
		return ret
	}

	return o.ApiSignature
}

// GetApiSignatureOk returns a tuple with the ApiSignature field value
// and a boolean to check if the value has been set.
func (o *ApiIeMapping) GetApiSignatureOk() (*ApiSignature, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiSignature, true
}

// SetApiSignature sets field value
func (o *ApiIeMapping) SetApiSignature(v ApiSignature) {
	o.ApiSignature = v
}

// GetApiMethod returns the ApiMethod field value
func (o *ApiIeMapping) GetApiMethod() HttpMethod {
	if o == nil {
		var ret HttpMethod
		return ret
	}

	return o.ApiMethod
}

// GetApiMethodOk returns a tuple with the ApiMethod field value
// and a boolean to check if the value has been set.
func (o *ApiIeMapping) GetApiMethodOk() (*HttpMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiMethod, true
}

// SetApiMethod sets field value
func (o *ApiIeMapping) SetApiMethod(v HttpMethod) {
	o.ApiMethod = v
}

// GetIeList returns the IeList field value
func (o *ApiIeMapping) GetIeList() []IeInfo {
	if o == nil {
		var ret []IeInfo
		return ret
	}

	return o.IeList
}

// GetIeListOk returns a tuple with the IeList field value
// and a boolean to check if the value has been set.
func (o *ApiIeMapping) GetIeListOk() ([]IeInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.IeList, true
}

// SetIeList sets field value
func (o *ApiIeMapping) SetIeList(v []IeInfo) {
	o.IeList = v
}

func (o ApiIeMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiIeMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiSignature"] = o.ApiSignature
	toSerialize["apiMethod"] = o.ApiMethod
	toSerialize["IeList"] = o.IeList
	return toSerialize, nil
}

type NullableApiIeMapping struct {
	value *ApiIeMapping
	isSet bool
}

func (v NullableApiIeMapping) Get() *ApiIeMapping {
	return v.value
}

func (v *NullableApiIeMapping) Set(val *ApiIeMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableApiIeMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableApiIeMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiIeMapping(val *ApiIeMapping) *NullableApiIeMapping {
	return &NullableApiIeMapping{value: val, isSet: true}
}

func (v NullableApiIeMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiIeMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


