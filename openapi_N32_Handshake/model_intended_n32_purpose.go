/*
N32 Handshake API

N32-c Handshake Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N32_Handshake

import (
	"encoding/json"
)

// checks if the IntendedN32Purpose type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntendedN32Purpose{}

// IntendedN32Purpose Indicates the intended N32 establishment purpose
type IntendedN32Purpose struct {
	UsagePurpose N32Purpose `json:"usagePurpose"`
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	Cause *string `json:"cause,omitempty"`
}

// NewIntendedN32Purpose instantiates a new IntendedN32Purpose object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntendedN32Purpose(usagePurpose N32Purpose) *IntendedN32Purpose {
	this := IntendedN32Purpose{}
	this.UsagePurpose = usagePurpose
	return &this
}

// NewIntendedN32PurposeWithDefaults instantiates a new IntendedN32Purpose object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntendedN32PurposeWithDefaults() *IntendedN32Purpose {
	this := IntendedN32Purpose{}
	return &this
}

// GetUsagePurpose returns the UsagePurpose field value
func (o *IntendedN32Purpose) GetUsagePurpose() N32Purpose {
	if o == nil {
		var ret N32Purpose
		return ret
	}

	return o.UsagePurpose
}

// GetUsagePurposeOk returns a tuple with the UsagePurpose field value
// and a boolean to check if the value has been set.
func (o *IntendedN32Purpose) GetUsagePurposeOk() (*N32Purpose, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsagePurpose, true
}

// SetUsagePurpose sets field value
func (o *IntendedN32Purpose) SetUsagePurpose(v N32Purpose) {
	o.UsagePurpose = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *IntendedN32Purpose) GetAdditionalInfo() string {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret string
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntendedN32Purpose) GetAdditionalInfoOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *IntendedN32Purpose) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given string and assigns it to the AdditionalInfo field.
func (o *IntendedN32Purpose) SetAdditionalInfo(v string) {
	o.AdditionalInfo = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *IntendedN32Purpose) GetCause() string {
	if o == nil || IsNil(o.Cause) {
		var ret string
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntendedN32Purpose) GetCauseOk() (*string, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *IntendedN32Purpose) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given string and assigns it to the Cause field.
func (o *IntendedN32Purpose) SetCause(v string) {
	o.Cause = &v
}

func (o IntendedN32Purpose) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntendedN32Purpose) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["usagePurpose"] = o.UsagePurpose
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	return toSerialize, nil
}

type NullableIntendedN32Purpose struct {
	value *IntendedN32Purpose
	isSet bool
}

func (v NullableIntendedN32Purpose) Get() *IntendedN32Purpose {
	return v.value
}

func (v *NullableIntendedN32Purpose) Set(val *IntendedN32Purpose) {
	v.value = val
	v.isSet = true
}

func (v NullableIntendedN32Purpose) IsSet() bool {
	return v.isSet
}

func (v *NullableIntendedN32Purpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntendedN32Purpose(val *IntendedN32Purpose) *NullableIntendedN32Purpose {
	return &NullableIntendedN32Purpose{value: val, isSet: true}
}

func (v NullableIntendedN32Purpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntendedN32Purpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


