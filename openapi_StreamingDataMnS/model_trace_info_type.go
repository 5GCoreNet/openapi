/*
TS 28.532 Streaming data reporting service

OAS 3.0.1 specification for the Streaming data reporting service (Streaming MnS) Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_StreamingDataMnS

import (
	"encoding/json"
)

// checks if the TraceInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceInfoType{}

// TraceInfoType Information specific to trace data reporting
type TraceInfoType struct {
	JobType *JobTypeType `json:"jobType,omitempty"`
	ListOfInterfaces *ListOfInterfacesType `json:"listOfInterfaces,omitempty"`
	// The Network Element types where Trace Session activation is needed. See 3GPP TS 32.422 clause 5.4 for additional details.
	ListOfNeTypes []string `json:"listOfNeTypes,omitempty"`
	PlmnTarget *PlmnTargetType `json:"plmnTarget,omitempty"`
	TraceReportingConsumerUri *string `json:"traceReportingConsumerUri,omitempty"`
	TraceCollectionEntityIpAddress *IpAddr `json:"traceCollectionEntityIpAddress,omitempty"`
	TraceDepth *TraceDepthType `json:"traceDepth,omitempty"`
	TraceReference *TraceReferenceType1 `json:"traceReference,omitempty"`
	TraceRecordingSessionReference *string `json:"traceRecordingSessionReference,omitempty"`
	JobId *string `json:"jobId,omitempty"`
	TraceReportingFormat *TraceReportingFormatType `json:"traceReportingFormat,omitempty"`
	TraceTarget *TraceTargetType `json:"traceTarget,omitempty"`
	TriggeringEvents *TriggeringEventsType `json:"triggeringEvents,omitempty"`
	AnonymizationOfMdtData *AnonymizationOfMdtDataType `json:"anonymizationOfMdtData,omitempty"`
	AreaConfigurationForNeighCell *AreaConfig `json:"areaConfigurationForNeighCell,omitempty"`
	AreaScope []AreaScope `json:"areaScope,omitempty"`
	// Determines whether beam level measurements shall be included in case of immediate MDT M1 measurement in NR. For additional details see 3GPP TS 32.422 clause 5.10.40.
	BeamLevelMeasurement *bool `json:"beamLevelMeasurement,omitempty"`
	CollectionPeriodRrmLte *CollectionPeriodRrmLteType `json:"collectionPeriodRrmLte,omitempty"`
	CollectionPeriodM6Lte *CollectionPeriodM6LteType `json:"collectionPeriodM6Lte,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.33.
	CollectionPeriodM7Lte *int32 `json:"collectionPeriodM7Lte,omitempty"`
	CollectionPeriodRrmUmts *CollectionPeriodRrmUmtsType `json:"collectionPeriodRrmUmts,omitempty"`
	CollectionPeriodRrmNr *CollectionPeriodRrmNrType `json:"collectionPeriodRrmNr,omitempty"`
	CollectionPeriodM6Nr *CollectionPeriodM6NrType `json:"collectionPeriodM6Nr,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.35.
	CollectionPeriodM7Nr *int32 `json:"collectionPeriodM7Nr,omitempty"`
	EventListForEventTriggeredMeasurement *EventListForEventTriggeredMeasurementType `json:"eventListForEventTriggeredMeasurement,omitempty"`
	EventThreshold *EventThresholdType `json:"eventThreshold,omitempty"`
	ListOfMeasurements *ListOfMeasurementsType `json:"listOfMeasurements,omitempty"`
	LoggingDuration *LoggingDurationType `json:"loggingDuration,omitempty"`
	LoggingInterval *LoggingIntervalType `json:"loggingInterval,omitempty"`
	EventThresholdL1 *EventThresholdL1Type `json:"eventThresholdL1,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.Y.
	HysteresisL1 *int32 `json:"hysteresisL1,omitempty"`
	TimeToTriggerL1 *TimeToTriggerL1Type `json:"timeToTriggerL1,omitempty"`
	MbsfnAreaList []MbsfnArea `json:"mbsfnAreaList,omitempty"`
	MeasurementPeriodLte *MeasurementPeriodLteType `json:"measurementPeriodLte,omitempty"`
	MeasurementPeriodUmts *MeasurementPeriodUmtsType `json:"measurementPeriodUmts,omitempty"`
	MeasurementQuantity *MeasurementQuantityType `json:"measurementQuantity,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.A.
	EventThresholdUphUmts *int32 `json:"eventThresholdUphUmts,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.24.
	PlmnList []PlmnListTypeInner `json:"plmnList,omitempty"`
	PositioningMethod *PositioningMethodType `json:"positioningMethod,omitempty"`
	ReportAmount *ReportAmountType `json:"reportAmount,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.4.
	ReportingTrigger []string `json:"reportingTrigger,omitempty"`
	ReportInterval *ReportIntervalType `json:"reportInterval,omitempty"`
	ReportType *ReportTypeType `json:"reportType,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.29.
	SensorInformation []string `json:"sensorInformation,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.11. Only TCE Id value may be sent over the air to the UE being configured for Logged MDT.
	TraceCollectionEntityId *int32 `json:"traceCollectionEntityId,omitempty"`
	// Excess Packet Delay Threshold for NR MDT. See details in 3GPP TS 32.422 clause 4.1.1 and 4.1.2.
	ExcessPacketDelayThresholds *map[string]interface{} `json:"excessPacketDelayThresholds,omitempty"`
}

// NewTraceInfoType instantiates a new TraceInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceInfoType() *TraceInfoType {
	this := TraceInfoType{}
	return &this
}

// NewTraceInfoTypeWithDefaults instantiates a new TraceInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceInfoTypeWithDefaults() *TraceInfoType {
	this := TraceInfoType{}
	return &this
}

// GetJobType returns the JobType field value if set, zero value otherwise.
func (o *TraceInfoType) GetJobType() JobTypeType {
	if o == nil || isNil(o.JobType) {
		var ret JobTypeType
		return ret
	}
	return *o.JobType
}

// GetJobTypeOk returns a tuple with the JobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetJobTypeOk() (*JobTypeType, bool) {
	if o == nil || isNil(o.JobType) {
		return nil, false
	}
	return o.JobType, true
}

// HasJobType returns a boolean if a field has been set.
func (o *TraceInfoType) HasJobType() bool {
	if o != nil && !isNil(o.JobType) {
		return true
	}

	return false
}

// SetJobType gets a reference to the given JobTypeType and assigns it to the JobType field.
func (o *TraceInfoType) SetJobType(v JobTypeType) {
	o.JobType = &v
}

// GetListOfInterfaces returns the ListOfInterfaces field value if set, zero value otherwise.
func (o *TraceInfoType) GetListOfInterfaces() ListOfInterfacesType {
	if o == nil || isNil(o.ListOfInterfaces) {
		var ret ListOfInterfacesType
		return ret
	}
	return *o.ListOfInterfaces
}

// GetListOfInterfacesOk returns a tuple with the ListOfInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetListOfInterfacesOk() (*ListOfInterfacesType, bool) {
	if o == nil || isNil(o.ListOfInterfaces) {
		return nil, false
	}
	return o.ListOfInterfaces, true
}

// HasListOfInterfaces returns a boolean if a field has been set.
func (o *TraceInfoType) HasListOfInterfaces() bool {
	if o != nil && !isNil(o.ListOfInterfaces) {
		return true
	}

	return false
}

// SetListOfInterfaces gets a reference to the given ListOfInterfacesType and assigns it to the ListOfInterfaces field.
func (o *TraceInfoType) SetListOfInterfaces(v ListOfInterfacesType) {
	o.ListOfInterfaces = &v
}

// GetListOfNeTypes returns the ListOfNeTypes field value if set, zero value otherwise.
func (o *TraceInfoType) GetListOfNeTypes() []string {
	if o == nil || isNil(o.ListOfNeTypes) {
		var ret []string
		return ret
	}
	return o.ListOfNeTypes
}

// GetListOfNeTypesOk returns a tuple with the ListOfNeTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetListOfNeTypesOk() ([]string, bool) {
	if o == nil || isNil(o.ListOfNeTypes) {
		return nil, false
	}
	return o.ListOfNeTypes, true
}

// HasListOfNeTypes returns a boolean if a field has been set.
func (o *TraceInfoType) HasListOfNeTypes() bool {
	if o != nil && !isNil(o.ListOfNeTypes) {
		return true
	}

	return false
}

// SetListOfNeTypes gets a reference to the given []string and assigns it to the ListOfNeTypes field.
func (o *TraceInfoType) SetListOfNeTypes(v []string) {
	o.ListOfNeTypes = v
}

// GetPlmnTarget returns the PlmnTarget field value if set, zero value otherwise.
func (o *TraceInfoType) GetPlmnTarget() PlmnTargetType {
	if o == nil || isNil(o.PlmnTarget) {
		var ret PlmnTargetType
		return ret
	}
	return *o.PlmnTarget
}

// GetPlmnTargetOk returns a tuple with the PlmnTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetPlmnTargetOk() (*PlmnTargetType, bool) {
	if o == nil || isNil(o.PlmnTarget) {
		return nil, false
	}
	return o.PlmnTarget, true
}

// HasPlmnTarget returns a boolean if a field has been set.
func (o *TraceInfoType) HasPlmnTarget() bool {
	if o != nil && !isNil(o.PlmnTarget) {
		return true
	}

	return false
}

// SetPlmnTarget gets a reference to the given PlmnTargetType and assigns it to the PlmnTarget field.
func (o *TraceInfoType) SetPlmnTarget(v PlmnTargetType) {
	o.PlmnTarget = &v
}

// GetTraceReportingConsumerUri returns the TraceReportingConsumerUri field value if set, zero value otherwise.
func (o *TraceInfoType) GetTraceReportingConsumerUri() string {
	if o == nil || isNil(o.TraceReportingConsumerUri) {
		var ret string
		return ret
	}
	return *o.TraceReportingConsumerUri
}

// GetTraceReportingConsumerUriOk returns a tuple with the TraceReportingConsumerUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTraceReportingConsumerUriOk() (*string, bool) {
	if o == nil || isNil(o.TraceReportingConsumerUri) {
		return nil, false
	}
	return o.TraceReportingConsumerUri, true
}

// HasTraceReportingConsumerUri returns a boolean if a field has been set.
func (o *TraceInfoType) HasTraceReportingConsumerUri() bool {
	if o != nil && !isNil(o.TraceReportingConsumerUri) {
		return true
	}

	return false
}

// SetTraceReportingConsumerUri gets a reference to the given string and assigns it to the TraceReportingConsumerUri field.
func (o *TraceInfoType) SetTraceReportingConsumerUri(v string) {
	o.TraceReportingConsumerUri = &v
}

// GetTraceCollectionEntityIpAddress returns the TraceCollectionEntityIpAddress field value if set, zero value otherwise.
func (o *TraceInfoType) GetTraceCollectionEntityIpAddress() IpAddr {
	if o == nil || isNil(o.TraceCollectionEntityIpAddress) {
		var ret IpAddr
		return ret
	}
	return *o.TraceCollectionEntityIpAddress
}

// GetTraceCollectionEntityIpAddressOk returns a tuple with the TraceCollectionEntityIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTraceCollectionEntityIpAddressOk() (*IpAddr, bool) {
	if o == nil || isNil(o.TraceCollectionEntityIpAddress) {
		return nil, false
	}
	return o.TraceCollectionEntityIpAddress, true
}

// HasTraceCollectionEntityIpAddress returns a boolean if a field has been set.
func (o *TraceInfoType) HasTraceCollectionEntityIpAddress() bool {
	if o != nil && !isNil(o.TraceCollectionEntityIpAddress) {
		return true
	}

	return false
}

// SetTraceCollectionEntityIpAddress gets a reference to the given IpAddr and assigns it to the TraceCollectionEntityIpAddress field.
func (o *TraceInfoType) SetTraceCollectionEntityIpAddress(v IpAddr) {
	o.TraceCollectionEntityIpAddress = &v
}

// GetTraceDepth returns the TraceDepth field value if set, zero value otherwise.
func (o *TraceInfoType) GetTraceDepth() TraceDepthType {
	if o == nil || isNil(o.TraceDepth) {
		var ret TraceDepthType
		return ret
	}
	return *o.TraceDepth
}

// GetTraceDepthOk returns a tuple with the TraceDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTraceDepthOk() (*TraceDepthType, bool) {
	if o == nil || isNil(o.TraceDepth) {
		return nil, false
	}
	return o.TraceDepth, true
}

// HasTraceDepth returns a boolean if a field has been set.
func (o *TraceInfoType) HasTraceDepth() bool {
	if o != nil && !isNil(o.TraceDepth) {
		return true
	}

	return false
}

// SetTraceDepth gets a reference to the given TraceDepthType and assigns it to the TraceDepth field.
func (o *TraceInfoType) SetTraceDepth(v TraceDepthType) {
	o.TraceDepth = &v
}

// GetTraceReference returns the TraceReference field value if set, zero value otherwise.
func (o *TraceInfoType) GetTraceReference() TraceReferenceType1 {
	if o == nil || isNil(o.TraceReference) {
		var ret TraceReferenceType1
		return ret
	}
	return *o.TraceReference
}

// GetTraceReferenceOk returns a tuple with the TraceReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTraceReferenceOk() (*TraceReferenceType1, bool) {
	if o == nil || isNil(o.TraceReference) {
		return nil, false
	}
	return o.TraceReference, true
}

// HasTraceReference returns a boolean if a field has been set.
func (o *TraceInfoType) HasTraceReference() bool {
	if o != nil && !isNil(o.TraceReference) {
		return true
	}

	return false
}

// SetTraceReference gets a reference to the given TraceReferenceType1 and assigns it to the TraceReference field.
func (o *TraceInfoType) SetTraceReference(v TraceReferenceType1) {
	o.TraceReference = &v
}

// GetTraceRecordingSessionReference returns the TraceRecordingSessionReference field value if set, zero value otherwise.
func (o *TraceInfoType) GetTraceRecordingSessionReference() string {
	if o == nil || isNil(o.TraceRecordingSessionReference) {
		var ret string
		return ret
	}
	return *o.TraceRecordingSessionReference
}

// GetTraceRecordingSessionReferenceOk returns a tuple with the TraceRecordingSessionReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTraceRecordingSessionReferenceOk() (*string, bool) {
	if o == nil || isNil(o.TraceRecordingSessionReference) {
		return nil, false
	}
	return o.TraceRecordingSessionReference, true
}

// HasTraceRecordingSessionReference returns a boolean if a field has been set.
func (o *TraceInfoType) HasTraceRecordingSessionReference() bool {
	if o != nil && !isNil(o.TraceRecordingSessionReference) {
		return true
	}

	return false
}

// SetTraceRecordingSessionReference gets a reference to the given string and assigns it to the TraceRecordingSessionReference field.
func (o *TraceInfoType) SetTraceRecordingSessionReference(v string) {
	o.TraceRecordingSessionReference = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *TraceInfoType) GetJobId() string {
	if o == nil || isNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetJobIdOk() (*string, bool) {
	if o == nil || isNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *TraceInfoType) HasJobId() bool {
	if o != nil && !isNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *TraceInfoType) SetJobId(v string) {
	o.JobId = &v
}

// GetTraceReportingFormat returns the TraceReportingFormat field value if set, zero value otherwise.
func (o *TraceInfoType) GetTraceReportingFormat() TraceReportingFormatType {
	if o == nil || isNil(o.TraceReportingFormat) {
		var ret TraceReportingFormatType
		return ret
	}
	return *o.TraceReportingFormat
}

// GetTraceReportingFormatOk returns a tuple with the TraceReportingFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTraceReportingFormatOk() (*TraceReportingFormatType, bool) {
	if o == nil || isNil(o.TraceReportingFormat) {
		return nil, false
	}
	return o.TraceReportingFormat, true
}

// HasTraceReportingFormat returns a boolean if a field has been set.
func (o *TraceInfoType) HasTraceReportingFormat() bool {
	if o != nil && !isNil(o.TraceReportingFormat) {
		return true
	}

	return false
}

// SetTraceReportingFormat gets a reference to the given TraceReportingFormatType and assigns it to the TraceReportingFormat field.
func (o *TraceInfoType) SetTraceReportingFormat(v TraceReportingFormatType) {
	o.TraceReportingFormat = &v
}

// GetTraceTarget returns the TraceTarget field value if set, zero value otherwise.
func (o *TraceInfoType) GetTraceTarget() TraceTargetType {
	if o == nil || isNil(o.TraceTarget) {
		var ret TraceTargetType
		return ret
	}
	return *o.TraceTarget
}

// GetTraceTargetOk returns a tuple with the TraceTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTraceTargetOk() (*TraceTargetType, bool) {
	if o == nil || isNil(o.TraceTarget) {
		return nil, false
	}
	return o.TraceTarget, true
}

// HasTraceTarget returns a boolean if a field has been set.
func (o *TraceInfoType) HasTraceTarget() bool {
	if o != nil && !isNil(o.TraceTarget) {
		return true
	}

	return false
}

// SetTraceTarget gets a reference to the given TraceTargetType and assigns it to the TraceTarget field.
func (o *TraceInfoType) SetTraceTarget(v TraceTargetType) {
	o.TraceTarget = &v
}

// GetTriggeringEvents returns the TriggeringEvents field value if set, zero value otherwise.
func (o *TraceInfoType) GetTriggeringEvents() TriggeringEventsType {
	if o == nil || isNil(o.TriggeringEvents) {
		var ret TriggeringEventsType
		return ret
	}
	return *o.TriggeringEvents
}

// GetTriggeringEventsOk returns a tuple with the TriggeringEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTriggeringEventsOk() (*TriggeringEventsType, bool) {
	if o == nil || isNil(o.TriggeringEvents) {
		return nil, false
	}
	return o.TriggeringEvents, true
}

// HasTriggeringEvents returns a boolean if a field has been set.
func (o *TraceInfoType) HasTriggeringEvents() bool {
	if o != nil && !isNil(o.TriggeringEvents) {
		return true
	}

	return false
}

// SetTriggeringEvents gets a reference to the given TriggeringEventsType and assigns it to the TriggeringEvents field.
func (o *TraceInfoType) SetTriggeringEvents(v TriggeringEventsType) {
	o.TriggeringEvents = &v
}

// GetAnonymizationOfMdtData returns the AnonymizationOfMdtData field value if set, zero value otherwise.
func (o *TraceInfoType) GetAnonymizationOfMdtData() AnonymizationOfMdtDataType {
	if o == nil || isNil(o.AnonymizationOfMdtData) {
		var ret AnonymizationOfMdtDataType
		return ret
	}
	return *o.AnonymizationOfMdtData
}

// GetAnonymizationOfMdtDataOk returns a tuple with the AnonymizationOfMdtData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetAnonymizationOfMdtDataOk() (*AnonymizationOfMdtDataType, bool) {
	if o == nil || isNil(o.AnonymizationOfMdtData) {
		return nil, false
	}
	return o.AnonymizationOfMdtData, true
}

// HasAnonymizationOfMdtData returns a boolean if a field has been set.
func (o *TraceInfoType) HasAnonymizationOfMdtData() bool {
	if o != nil && !isNil(o.AnonymizationOfMdtData) {
		return true
	}

	return false
}

// SetAnonymizationOfMdtData gets a reference to the given AnonymizationOfMdtDataType and assigns it to the AnonymizationOfMdtData field.
func (o *TraceInfoType) SetAnonymizationOfMdtData(v AnonymizationOfMdtDataType) {
	o.AnonymizationOfMdtData = &v
}

// GetAreaConfigurationForNeighCell returns the AreaConfigurationForNeighCell field value if set, zero value otherwise.
func (o *TraceInfoType) GetAreaConfigurationForNeighCell() AreaConfig {
	if o == nil || isNil(o.AreaConfigurationForNeighCell) {
		var ret AreaConfig
		return ret
	}
	return *o.AreaConfigurationForNeighCell
}

// GetAreaConfigurationForNeighCellOk returns a tuple with the AreaConfigurationForNeighCell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetAreaConfigurationForNeighCellOk() (*AreaConfig, bool) {
	if o == nil || isNil(o.AreaConfigurationForNeighCell) {
		return nil, false
	}
	return o.AreaConfigurationForNeighCell, true
}

// HasAreaConfigurationForNeighCell returns a boolean if a field has been set.
func (o *TraceInfoType) HasAreaConfigurationForNeighCell() bool {
	if o != nil && !isNil(o.AreaConfigurationForNeighCell) {
		return true
	}

	return false
}

// SetAreaConfigurationForNeighCell gets a reference to the given AreaConfig and assigns it to the AreaConfigurationForNeighCell field.
func (o *TraceInfoType) SetAreaConfigurationForNeighCell(v AreaConfig) {
	o.AreaConfigurationForNeighCell = &v
}

// GetAreaScope returns the AreaScope field value if set, zero value otherwise.
func (o *TraceInfoType) GetAreaScope() []AreaScope {
	if o == nil || isNil(o.AreaScope) {
		var ret []AreaScope
		return ret
	}
	return o.AreaScope
}

// GetAreaScopeOk returns a tuple with the AreaScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetAreaScopeOk() ([]AreaScope, bool) {
	if o == nil || isNil(o.AreaScope) {
		return nil, false
	}
	return o.AreaScope, true
}

// HasAreaScope returns a boolean if a field has been set.
func (o *TraceInfoType) HasAreaScope() bool {
	if o != nil && !isNil(o.AreaScope) {
		return true
	}

	return false
}

// SetAreaScope gets a reference to the given []AreaScope and assigns it to the AreaScope field.
func (o *TraceInfoType) SetAreaScope(v []AreaScope) {
	o.AreaScope = v
}

// GetBeamLevelMeasurement returns the BeamLevelMeasurement field value if set, zero value otherwise.
func (o *TraceInfoType) GetBeamLevelMeasurement() bool {
	if o == nil || isNil(o.BeamLevelMeasurement) {
		var ret bool
		return ret
	}
	return *o.BeamLevelMeasurement
}

// GetBeamLevelMeasurementOk returns a tuple with the BeamLevelMeasurement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetBeamLevelMeasurementOk() (*bool, bool) {
	if o == nil || isNil(o.BeamLevelMeasurement) {
		return nil, false
	}
	return o.BeamLevelMeasurement, true
}

// HasBeamLevelMeasurement returns a boolean if a field has been set.
func (o *TraceInfoType) HasBeamLevelMeasurement() bool {
	if o != nil && !isNil(o.BeamLevelMeasurement) {
		return true
	}

	return false
}

// SetBeamLevelMeasurement gets a reference to the given bool and assigns it to the BeamLevelMeasurement field.
func (o *TraceInfoType) SetBeamLevelMeasurement(v bool) {
	o.BeamLevelMeasurement = &v
}

// GetCollectionPeriodRrmLte returns the CollectionPeriodRrmLte field value if set, zero value otherwise.
func (o *TraceInfoType) GetCollectionPeriodRrmLte() CollectionPeriodRrmLteType {
	if o == nil || isNil(o.CollectionPeriodRrmLte) {
		var ret CollectionPeriodRrmLteType
		return ret
	}
	return *o.CollectionPeriodRrmLte
}

// GetCollectionPeriodRrmLteOk returns a tuple with the CollectionPeriodRrmLte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetCollectionPeriodRrmLteOk() (*CollectionPeriodRrmLteType, bool) {
	if o == nil || isNil(o.CollectionPeriodRrmLte) {
		return nil, false
	}
	return o.CollectionPeriodRrmLte, true
}

// HasCollectionPeriodRrmLte returns a boolean if a field has been set.
func (o *TraceInfoType) HasCollectionPeriodRrmLte() bool {
	if o != nil && !isNil(o.CollectionPeriodRrmLte) {
		return true
	}

	return false
}

// SetCollectionPeriodRrmLte gets a reference to the given CollectionPeriodRrmLteType and assigns it to the CollectionPeriodRrmLte field.
func (o *TraceInfoType) SetCollectionPeriodRrmLte(v CollectionPeriodRrmLteType) {
	o.CollectionPeriodRrmLte = &v
}

// GetCollectionPeriodM6Lte returns the CollectionPeriodM6Lte field value if set, zero value otherwise.
func (o *TraceInfoType) GetCollectionPeriodM6Lte() CollectionPeriodM6LteType {
	if o == nil || isNil(o.CollectionPeriodM6Lte) {
		var ret CollectionPeriodM6LteType
		return ret
	}
	return *o.CollectionPeriodM6Lte
}

// GetCollectionPeriodM6LteOk returns a tuple with the CollectionPeriodM6Lte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetCollectionPeriodM6LteOk() (*CollectionPeriodM6LteType, bool) {
	if o == nil || isNil(o.CollectionPeriodM6Lte) {
		return nil, false
	}
	return o.CollectionPeriodM6Lte, true
}

// HasCollectionPeriodM6Lte returns a boolean if a field has been set.
func (o *TraceInfoType) HasCollectionPeriodM6Lte() bool {
	if o != nil && !isNil(o.CollectionPeriodM6Lte) {
		return true
	}

	return false
}

// SetCollectionPeriodM6Lte gets a reference to the given CollectionPeriodM6LteType and assigns it to the CollectionPeriodM6Lte field.
func (o *TraceInfoType) SetCollectionPeriodM6Lte(v CollectionPeriodM6LteType) {
	o.CollectionPeriodM6Lte = &v
}

// GetCollectionPeriodM7Lte returns the CollectionPeriodM7Lte field value if set, zero value otherwise.
func (o *TraceInfoType) GetCollectionPeriodM7Lte() int32 {
	if o == nil || isNil(o.CollectionPeriodM7Lte) {
		var ret int32
		return ret
	}
	return *o.CollectionPeriodM7Lte
}

// GetCollectionPeriodM7LteOk returns a tuple with the CollectionPeriodM7Lte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetCollectionPeriodM7LteOk() (*int32, bool) {
	if o == nil || isNil(o.CollectionPeriodM7Lte) {
		return nil, false
	}
	return o.CollectionPeriodM7Lte, true
}

// HasCollectionPeriodM7Lte returns a boolean if a field has been set.
func (o *TraceInfoType) HasCollectionPeriodM7Lte() bool {
	if o != nil && !isNil(o.CollectionPeriodM7Lte) {
		return true
	}

	return false
}

// SetCollectionPeriodM7Lte gets a reference to the given int32 and assigns it to the CollectionPeriodM7Lte field.
func (o *TraceInfoType) SetCollectionPeriodM7Lte(v int32) {
	o.CollectionPeriodM7Lte = &v
}

// GetCollectionPeriodRrmUmts returns the CollectionPeriodRrmUmts field value if set, zero value otherwise.
func (o *TraceInfoType) GetCollectionPeriodRrmUmts() CollectionPeriodRrmUmtsType {
	if o == nil || isNil(o.CollectionPeriodRrmUmts) {
		var ret CollectionPeriodRrmUmtsType
		return ret
	}
	return *o.CollectionPeriodRrmUmts
}

// GetCollectionPeriodRrmUmtsOk returns a tuple with the CollectionPeriodRrmUmts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetCollectionPeriodRrmUmtsOk() (*CollectionPeriodRrmUmtsType, bool) {
	if o == nil || isNil(o.CollectionPeriodRrmUmts) {
		return nil, false
	}
	return o.CollectionPeriodRrmUmts, true
}

// HasCollectionPeriodRrmUmts returns a boolean if a field has been set.
func (o *TraceInfoType) HasCollectionPeriodRrmUmts() bool {
	if o != nil && !isNil(o.CollectionPeriodRrmUmts) {
		return true
	}

	return false
}

// SetCollectionPeriodRrmUmts gets a reference to the given CollectionPeriodRrmUmtsType and assigns it to the CollectionPeriodRrmUmts field.
func (o *TraceInfoType) SetCollectionPeriodRrmUmts(v CollectionPeriodRrmUmtsType) {
	o.CollectionPeriodRrmUmts = &v
}

// GetCollectionPeriodRrmNr returns the CollectionPeriodRrmNr field value if set, zero value otherwise.
func (o *TraceInfoType) GetCollectionPeriodRrmNr() CollectionPeriodRrmNrType {
	if o == nil || isNil(o.CollectionPeriodRrmNr) {
		var ret CollectionPeriodRrmNrType
		return ret
	}
	return *o.CollectionPeriodRrmNr
}

// GetCollectionPeriodRrmNrOk returns a tuple with the CollectionPeriodRrmNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetCollectionPeriodRrmNrOk() (*CollectionPeriodRrmNrType, bool) {
	if o == nil || isNil(o.CollectionPeriodRrmNr) {
		return nil, false
	}
	return o.CollectionPeriodRrmNr, true
}

// HasCollectionPeriodRrmNr returns a boolean if a field has been set.
func (o *TraceInfoType) HasCollectionPeriodRrmNr() bool {
	if o != nil && !isNil(o.CollectionPeriodRrmNr) {
		return true
	}

	return false
}

// SetCollectionPeriodRrmNr gets a reference to the given CollectionPeriodRrmNrType and assigns it to the CollectionPeriodRrmNr field.
func (o *TraceInfoType) SetCollectionPeriodRrmNr(v CollectionPeriodRrmNrType) {
	o.CollectionPeriodRrmNr = &v
}

// GetCollectionPeriodM6Nr returns the CollectionPeriodM6Nr field value if set, zero value otherwise.
func (o *TraceInfoType) GetCollectionPeriodM6Nr() CollectionPeriodM6NrType {
	if o == nil || isNil(o.CollectionPeriodM6Nr) {
		var ret CollectionPeriodM6NrType
		return ret
	}
	return *o.CollectionPeriodM6Nr
}

// GetCollectionPeriodM6NrOk returns a tuple with the CollectionPeriodM6Nr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetCollectionPeriodM6NrOk() (*CollectionPeriodM6NrType, bool) {
	if o == nil || isNil(o.CollectionPeriodM6Nr) {
		return nil, false
	}
	return o.CollectionPeriodM6Nr, true
}

// HasCollectionPeriodM6Nr returns a boolean if a field has been set.
func (o *TraceInfoType) HasCollectionPeriodM6Nr() bool {
	if o != nil && !isNil(o.CollectionPeriodM6Nr) {
		return true
	}

	return false
}

// SetCollectionPeriodM6Nr gets a reference to the given CollectionPeriodM6NrType and assigns it to the CollectionPeriodM6Nr field.
func (o *TraceInfoType) SetCollectionPeriodM6Nr(v CollectionPeriodM6NrType) {
	o.CollectionPeriodM6Nr = &v
}

// GetCollectionPeriodM7Nr returns the CollectionPeriodM7Nr field value if set, zero value otherwise.
func (o *TraceInfoType) GetCollectionPeriodM7Nr() int32 {
	if o == nil || isNil(o.CollectionPeriodM7Nr) {
		var ret int32
		return ret
	}
	return *o.CollectionPeriodM7Nr
}

// GetCollectionPeriodM7NrOk returns a tuple with the CollectionPeriodM7Nr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetCollectionPeriodM7NrOk() (*int32, bool) {
	if o == nil || isNil(o.CollectionPeriodM7Nr) {
		return nil, false
	}
	return o.CollectionPeriodM7Nr, true
}

// HasCollectionPeriodM7Nr returns a boolean if a field has been set.
func (o *TraceInfoType) HasCollectionPeriodM7Nr() bool {
	if o != nil && !isNil(o.CollectionPeriodM7Nr) {
		return true
	}

	return false
}

// SetCollectionPeriodM7Nr gets a reference to the given int32 and assigns it to the CollectionPeriodM7Nr field.
func (o *TraceInfoType) SetCollectionPeriodM7Nr(v int32) {
	o.CollectionPeriodM7Nr = &v
}

// GetEventListForEventTriggeredMeasurement returns the EventListForEventTriggeredMeasurement field value if set, zero value otherwise.
func (o *TraceInfoType) GetEventListForEventTriggeredMeasurement() EventListForEventTriggeredMeasurementType {
	if o == nil || isNil(o.EventListForEventTriggeredMeasurement) {
		var ret EventListForEventTriggeredMeasurementType
		return ret
	}
	return *o.EventListForEventTriggeredMeasurement
}

// GetEventListForEventTriggeredMeasurementOk returns a tuple with the EventListForEventTriggeredMeasurement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetEventListForEventTriggeredMeasurementOk() (*EventListForEventTriggeredMeasurementType, bool) {
	if o == nil || isNil(o.EventListForEventTriggeredMeasurement) {
		return nil, false
	}
	return o.EventListForEventTriggeredMeasurement, true
}

// HasEventListForEventTriggeredMeasurement returns a boolean if a field has been set.
func (o *TraceInfoType) HasEventListForEventTriggeredMeasurement() bool {
	if o != nil && !isNil(o.EventListForEventTriggeredMeasurement) {
		return true
	}

	return false
}

// SetEventListForEventTriggeredMeasurement gets a reference to the given EventListForEventTriggeredMeasurementType and assigns it to the EventListForEventTriggeredMeasurement field.
func (o *TraceInfoType) SetEventListForEventTriggeredMeasurement(v EventListForEventTriggeredMeasurementType) {
	o.EventListForEventTriggeredMeasurement = &v
}

// GetEventThreshold returns the EventThreshold field value if set, zero value otherwise.
func (o *TraceInfoType) GetEventThreshold() EventThresholdType {
	if o == nil || isNil(o.EventThreshold) {
		var ret EventThresholdType
		return ret
	}
	return *o.EventThreshold
}

// GetEventThresholdOk returns a tuple with the EventThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetEventThresholdOk() (*EventThresholdType, bool) {
	if o == nil || isNil(o.EventThreshold) {
		return nil, false
	}
	return o.EventThreshold, true
}

// HasEventThreshold returns a boolean if a field has been set.
func (o *TraceInfoType) HasEventThreshold() bool {
	if o != nil && !isNil(o.EventThreshold) {
		return true
	}

	return false
}

// SetEventThreshold gets a reference to the given EventThresholdType and assigns it to the EventThreshold field.
func (o *TraceInfoType) SetEventThreshold(v EventThresholdType) {
	o.EventThreshold = &v
}

// GetListOfMeasurements returns the ListOfMeasurements field value if set, zero value otherwise.
func (o *TraceInfoType) GetListOfMeasurements() ListOfMeasurementsType {
	if o == nil || isNil(o.ListOfMeasurements) {
		var ret ListOfMeasurementsType
		return ret
	}
	return *o.ListOfMeasurements
}

// GetListOfMeasurementsOk returns a tuple with the ListOfMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetListOfMeasurementsOk() (*ListOfMeasurementsType, bool) {
	if o == nil || isNil(o.ListOfMeasurements) {
		return nil, false
	}
	return o.ListOfMeasurements, true
}

// HasListOfMeasurements returns a boolean if a field has been set.
func (o *TraceInfoType) HasListOfMeasurements() bool {
	if o != nil && !isNil(o.ListOfMeasurements) {
		return true
	}

	return false
}

// SetListOfMeasurements gets a reference to the given ListOfMeasurementsType and assigns it to the ListOfMeasurements field.
func (o *TraceInfoType) SetListOfMeasurements(v ListOfMeasurementsType) {
	o.ListOfMeasurements = &v
}

// GetLoggingDuration returns the LoggingDuration field value if set, zero value otherwise.
func (o *TraceInfoType) GetLoggingDuration() LoggingDurationType {
	if o == nil || isNil(o.LoggingDuration) {
		var ret LoggingDurationType
		return ret
	}
	return *o.LoggingDuration
}

// GetLoggingDurationOk returns a tuple with the LoggingDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetLoggingDurationOk() (*LoggingDurationType, bool) {
	if o == nil || isNil(o.LoggingDuration) {
		return nil, false
	}
	return o.LoggingDuration, true
}

// HasLoggingDuration returns a boolean if a field has been set.
func (o *TraceInfoType) HasLoggingDuration() bool {
	if o != nil && !isNil(o.LoggingDuration) {
		return true
	}

	return false
}

// SetLoggingDuration gets a reference to the given LoggingDurationType and assigns it to the LoggingDuration field.
func (o *TraceInfoType) SetLoggingDuration(v LoggingDurationType) {
	o.LoggingDuration = &v
}

// GetLoggingInterval returns the LoggingInterval field value if set, zero value otherwise.
func (o *TraceInfoType) GetLoggingInterval() LoggingIntervalType {
	if o == nil || isNil(o.LoggingInterval) {
		var ret LoggingIntervalType
		return ret
	}
	return *o.LoggingInterval
}

// GetLoggingIntervalOk returns a tuple with the LoggingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetLoggingIntervalOk() (*LoggingIntervalType, bool) {
	if o == nil || isNil(o.LoggingInterval) {
		return nil, false
	}
	return o.LoggingInterval, true
}

// HasLoggingInterval returns a boolean if a field has been set.
func (o *TraceInfoType) HasLoggingInterval() bool {
	if o != nil && !isNil(o.LoggingInterval) {
		return true
	}

	return false
}

// SetLoggingInterval gets a reference to the given LoggingIntervalType and assigns it to the LoggingInterval field.
func (o *TraceInfoType) SetLoggingInterval(v LoggingIntervalType) {
	o.LoggingInterval = &v
}

// GetEventThresholdL1 returns the EventThresholdL1 field value if set, zero value otherwise.
func (o *TraceInfoType) GetEventThresholdL1() EventThresholdL1Type {
	if o == nil || isNil(o.EventThresholdL1) {
		var ret EventThresholdL1Type
		return ret
	}
	return *o.EventThresholdL1
}

// GetEventThresholdL1Ok returns a tuple with the EventThresholdL1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetEventThresholdL1Ok() (*EventThresholdL1Type, bool) {
	if o == nil || isNil(o.EventThresholdL1) {
		return nil, false
	}
	return o.EventThresholdL1, true
}

// HasEventThresholdL1 returns a boolean if a field has been set.
func (o *TraceInfoType) HasEventThresholdL1() bool {
	if o != nil && !isNil(o.EventThresholdL1) {
		return true
	}

	return false
}

// SetEventThresholdL1 gets a reference to the given EventThresholdL1Type and assigns it to the EventThresholdL1 field.
func (o *TraceInfoType) SetEventThresholdL1(v EventThresholdL1Type) {
	o.EventThresholdL1 = &v
}

// GetHysteresisL1 returns the HysteresisL1 field value if set, zero value otherwise.
func (o *TraceInfoType) GetHysteresisL1() int32 {
	if o == nil || isNil(o.HysteresisL1) {
		var ret int32
		return ret
	}
	return *o.HysteresisL1
}

// GetHysteresisL1Ok returns a tuple with the HysteresisL1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetHysteresisL1Ok() (*int32, bool) {
	if o == nil || isNil(o.HysteresisL1) {
		return nil, false
	}
	return o.HysteresisL1, true
}

// HasHysteresisL1 returns a boolean if a field has been set.
func (o *TraceInfoType) HasHysteresisL1() bool {
	if o != nil && !isNil(o.HysteresisL1) {
		return true
	}

	return false
}

// SetHysteresisL1 gets a reference to the given int32 and assigns it to the HysteresisL1 field.
func (o *TraceInfoType) SetHysteresisL1(v int32) {
	o.HysteresisL1 = &v
}

// GetTimeToTriggerL1 returns the TimeToTriggerL1 field value if set, zero value otherwise.
func (o *TraceInfoType) GetTimeToTriggerL1() TimeToTriggerL1Type {
	if o == nil || isNil(o.TimeToTriggerL1) {
		var ret TimeToTriggerL1Type
		return ret
	}
	return *o.TimeToTriggerL1
}

// GetTimeToTriggerL1Ok returns a tuple with the TimeToTriggerL1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTimeToTriggerL1Ok() (*TimeToTriggerL1Type, bool) {
	if o == nil || isNil(o.TimeToTriggerL1) {
		return nil, false
	}
	return o.TimeToTriggerL1, true
}

// HasTimeToTriggerL1 returns a boolean if a field has been set.
func (o *TraceInfoType) HasTimeToTriggerL1() bool {
	if o != nil && !isNil(o.TimeToTriggerL1) {
		return true
	}

	return false
}

// SetTimeToTriggerL1 gets a reference to the given TimeToTriggerL1Type and assigns it to the TimeToTriggerL1 field.
func (o *TraceInfoType) SetTimeToTriggerL1(v TimeToTriggerL1Type) {
	o.TimeToTriggerL1 = &v
}

// GetMbsfnAreaList returns the MbsfnAreaList field value if set, zero value otherwise.
func (o *TraceInfoType) GetMbsfnAreaList() []MbsfnArea {
	if o == nil || isNil(o.MbsfnAreaList) {
		var ret []MbsfnArea
		return ret
	}
	return o.MbsfnAreaList
}

// GetMbsfnAreaListOk returns a tuple with the MbsfnAreaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetMbsfnAreaListOk() ([]MbsfnArea, bool) {
	if o == nil || isNil(o.MbsfnAreaList) {
		return nil, false
	}
	return o.MbsfnAreaList, true
}

// HasMbsfnAreaList returns a boolean if a field has been set.
func (o *TraceInfoType) HasMbsfnAreaList() bool {
	if o != nil && !isNil(o.MbsfnAreaList) {
		return true
	}

	return false
}

// SetMbsfnAreaList gets a reference to the given []MbsfnArea and assigns it to the MbsfnAreaList field.
func (o *TraceInfoType) SetMbsfnAreaList(v []MbsfnArea) {
	o.MbsfnAreaList = v
}

// GetMeasurementPeriodLte returns the MeasurementPeriodLte field value if set, zero value otherwise.
func (o *TraceInfoType) GetMeasurementPeriodLte() MeasurementPeriodLteType {
	if o == nil || isNil(o.MeasurementPeriodLte) {
		var ret MeasurementPeriodLteType
		return ret
	}
	return *o.MeasurementPeriodLte
}

// GetMeasurementPeriodLteOk returns a tuple with the MeasurementPeriodLte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetMeasurementPeriodLteOk() (*MeasurementPeriodLteType, bool) {
	if o == nil || isNil(o.MeasurementPeriodLte) {
		return nil, false
	}
	return o.MeasurementPeriodLte, true
}

// HasMeasurementPeriodLte returns a boolean if a field has been set.
func (o *TraceInfoType) HasMeasurementPeriodLte() bool {
	if o != nil && !isNil(o.MeasurementPeriodLte) {
		return true
	}

	return false
}

// SetMeasurementPeriodLte gets a reference to the given MeasurementPeriodLteType and assigns it to the MeasurementPeriodLte field.
func (o *TraceInfoType) SetMeasurementPeriodLte(v MeasurementPeriodLteType) {
	o.MeasurementPeriodLte = &v
}

// GetMeasurementPeriodUmts returns the MeasurementPeriodUmts field value if set, zero value otherwise.
func (o *TraceInfoType) GetMeasurementPeriodUmts() MeasurementPeriodUmtsType {
	if o == nil || isNil(o.MeasurementPeriodUmts) {
		var ret MeasurementPeriodUmtsType
		return ret
	}
	return *o.MeasurementPeriodUmts
}

// GetMeasurementPeriodUmtsOk returns a tuple with the MeasurementPeriodUmts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetMeasurementPeriodUmtsOk() (*MeasurementPeriodUmtsType, bool) {
	if o == nil || isNil(o.MeasurementPeriodUmts) {
		return nil, false
	}
	return o.MeasurementPeriodUmts, true
}

// HasMeasurementPeriodUmts returns a boolean if a field has been set.
func (o *TraceInfoType) HasMeasurementPeriodUmts() bool {
	if o != nil && !isNil(o.MeasurementPeriodUmts) {
		return true
	}

	return false
}

// SetMeasurementPeriodUmts gets a reference to the given MeasurementPeriodUmtsType and assigns it to the MeasurementPeriodUmts field.
func (o *TraceInfoType) SetMeasurementPeriodUmts(v MeasurementPeriodUmtsType) {
	o.MeasurementPeriodUmts = &v
}

// GetMeasurementQuantity returns the MeasurementQuantity field value if set, zero value otherwise.
func (o *TraceInfoType) GetMeasurementQuantity() MeasurementQuantityType {
	if o == nil || isNil(o.MeasurementQuantity) {
		var ret MeasurementQuantityType
		return ret
	}
	return *o.MeasurementQuantity
}

// GetMeasurementQuantityOk returns a tuple with the MeasurementQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetMeasurementQuantityOk() (*MeasurementQuantityType, bool) {
	if o == nil || isNil(o.MeasurementQuantity) {
		return nil, false
	}
	return o.MeasurementQuantity, true
}

// HasMeasurementQuantity returns a boolean if a field has been set.
func (o *TraceInfoType) HasMeasurementQuantity() bool {
	if o != nil && !isNil(o.MeasurementQuantity) {
		return true
	}

	return false
}

// SetMeasurementQuantity gets a reference to the given MeasurementQuantityType and assigns it to the MeasurementQuantity field.
func (o *TraceInfoType) SetMeasurementQuantity(v MeasurementQuantityType) {
	o.MeasurementQuantity = &v
}

// GetEventThresholdUphUmts returns the EventThresholdUphUmts field value if set, zero value otherwise.
func (o *TraceInfoType) GetEventThresholdUphUmts() int32 {
	if o == nil || isNil(o.EventThresholdUphUmts) {
		var ret int32
		return ret
	}
	return *o.EventThresholdUphUmts
}

// GetEventThresholdUphUmtsOk returns a tuple with the EventThresholdUphUmts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetEventThresholdUphUmtsOk() (*int32, bool) {
	if o == nil || isNil(o.EventThresholdUphUmts) {
		return nil, false
	}
	return o.EventThresholdUphUmts, true
}

// HasEventThresholdUphUmts returns a boolean if a field has been set.
func (o *TraceInfoType) HasEventThresholdUphUmts() bool {
	if o != nil && !isNil(o.EventThresholdUphUmts) {
		return true
	}

	return false
}

// SetEventThresholdUphUmts gets a reference to the given int32 and assigns it to the EventThresholdUphUmts field.
func (o *TraceInfoType) SetEventThresholdUphUmts(v int32) {
	o.EventThresholdUphUmts = &v
}

// GetPlmnList returns the PlmnList field value if set, zero value otherwise.
func (o *TraceInfoType) GetPlmnList() []PlmnListTypeInner {
	if o == nil || isNil(o.PlmnList) {
		var ret []PlmnListTypeInner
		return ret
	}
	return o.PlmnList
}

// GetPlmnListOk returns a tuple with the PlmnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetPlmnListOk() ([]PlmnListTypeInner, bool) {
	if o == nil || isNil(o.PlmnList) {
		return nil, false
	}
	return o.PlmnList, true
}

// HasPlmnList returns a boolean if a field has been set.
func (o *TraceInfoType) HasPlmnList() bool {
	if o != nil && !isNil(o.PlmnList) {
		return true
	}

	return false
}

// SetPlmnList gets a reference to the given []PlmnListTypeInner and assigns it to the PlmnList field.
func (o *TraceInfoType) SetPlmnList(v []PlmnListTypeInner) {
	o.PlmnList = v
}

// GetPositioningMethod returns the PositioningMethod field value if set, zero value otherwise.
func (o *TraceInfoType) GetPositioningMethod() PositioningMethodType {
	if o == nil || isNil(o.PositioningMethod) {
		var ret PositioningMethodType
		return ret
	}
	return *o.PositioningMethod
}

// GetPositioningMethodOk returns a tuple with the PositioningMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetPositioningMethodOk() (*PositioningMethodType, bool) {
	if o == nil || isNil(o.PositioningMethod) {
		return nil, false
	}
	return o.PositioningMethod, true
}

// HasPositioningMethod returns a boolean if a field has been set.
func (o *TraceInfoType) HasPositioningMethod() bool {
	if o != nil && !isNil(o.PositioningMethod) {
		return true
	}

	return false
}

// SetPositioningMethod gets a reference to the given PositioningMethodType and assigns it to the PositioningMethod field.
func (o *TraceInfoType) SetPositioningMethod(v PositioningMethodType) {
	o.PositioningMethod = &v
}

// GetReportAmount returns the ReportAmount field value if set, zero value otherwise.
func (o *TraceInfoType) GetReportAmount() ReportAmountType {
	if o == nil || isNil(o.ReportAmount) {
		var ret ReportAmountType
		return ret
	}
	return *o.ReportAmount
}

// GetReportAmountOk returns a tuple with the ReportAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetReportAmountOk() (*ReportAmountType, bool) {
	if o == nil || isNil(o.ReportAmount) {
		return nil, false
	}
	return o.ReportAmount, true
}

// HasReportAmount returns a boolean if a field has been set.
func (o *TraceInfoType) HasReportAmount() bool {
	if o != nil && !isNil(o.ReportAmount) {
		return true
	}

	return false
}

// SetReportAmount gets a reference to the given ReportAmountType and assigns it to the ReportAmount field.
func (o *TraceInfoType) SetReportAmount(v ReportAmountType) {
	o.ReportAmount = &v
}

// GetReportingTrigger returns the ReportingTrigger field value if set, zero value otherwise.
func (o *TraceInfoType) GetReportingTrigger() []string {
	if o == nil || isNil(o.ReportingTrigger) {
		var ret []string
		return ret
	}
	return o.ReportingTrigger
}

// GetReportingTriggerOk returns a tuple with the ReportingTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetReportingTriggerOk() ([]string, bool) {
	if o == nil || isNil(o.ReportingTrigger) {
		return nil, false
	}
	return o.ReportingTrigger, true
}

// HasReportingTrigger returns a boolean if a field has been set.
func (o *TraceInfoType) HasReportingTrigger() bool {
	if o != nil && !isNil(o.ReportingTrigger) {
		return true
	}

	return false
}

// SetReportingTrigger gets a reference to the given []string and assigns it to the ReportingTrigger field.
func (o *TraceInfoType) SetReportingTrigger(v []string) {
	o.ReportingTrigger = v
}

// GetReportInterval returns the ReportInterval field value if set, zero value otherwise.
func (o *TraceInfoType) GetReportInterval() ReportIntervalType {
	if o == nil || isNil(o.ReportInterval) {
		var ret ReportIntervalType
		return ret
	}
	return *o.ReportInterval
}

// GetReportIntervalOk returns a tuple with the ReportInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetReportIntervalOk() (*ReportIntervalType, bool) {
	if o == nil || isNil(o.ReportInterval) {
		return nil, false
	}
	return o.ReportInterval, true
}

// HasReportInterval returns a boolean if a field has been set.
func (o *TraceInfoType) HasReportInterval() bool {
	if o != nil && !isNil(o.ReportInterval) {
		return true
	}

	return false
}

// SetReportInterval gets a reference to the given ReportIntervalType and assigns it to the ReportInterval field.
func (o *TraceInfoType) SetReportInterval(v ReportIntervalType) {
	o.ReportInterval = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *TraceInfoType) GetReportType() ReportTypeType {
	if o == nil || isNil(o.ReportType) {
		var ret ReportTypeType
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetReportTypeOk() (*ReportTypeType, bool) {
	if o == nil || isNil(o.ReportType) {
		return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *TraceInfoType) HasReportType() bool {
	if o != nil && !isNil(o.ReportType) {
		return true
	}

	return false
}

// SetReportType gets a reference to the given ReportTypeType and assigns it to the ReportType field.
func (o *TraceInfoType) SetReportType(v ReportTypeType) {
	o.ReportType = &v
}

// GetSensorInformation returns the SensorInformation field value if set, zero value otherwise.
func (o *TraceInfoType) GetSensorInformation() []string {
	if o == nil || isNil(o.SensorInformation) {
		var ret []string
		return ret
	}
	return o.SensorInformation
}

// GetSensorInformationOk returns a tuple with the SensorInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetSensorInformationOk() ([]string, bool) {
	if o == nil || isNil(o.SensorInformation) {
		return nil, false
	}
	return o.SensorInformation, true
}

// HasSensorInformation returns a boolean if a field has been set.
func (o *TraceInfoType) HasSensorInformation() bool {
	if o != nil && !isNil(o.SensorInformation) {
		return true
	}

	return false
}

// SetSensorInformation gets a reference to the given []string and assigns it to the SensorInformation field.
func (o *TraceInfoType) SetSensorInformation(v []string) {
	o.SensorInformation = v
}

// GetTraceCollectionEntityId returns the TraceCollectionEntityId field value if set, zero value otherwise.
func (o *TraceInfoType) GetTraceCollectionEntityId() int32 {
	if o == nil || isNil(o.TraceCollectionEntityId) {
		var ret int32
		return ret
	}
	return *o.TraceCollectionEntityId
}

// GetTraceCollectionEntityIdOk returns a tuple with the TraceCollectionEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetTraceCollectionEntityIdOk() (*int32, bool) {
	if o == nil || isNil(o.TraceCollectionEntityId) {
		return nil, false
	}
	return o.TraceCollectionEntityId, true
}

// HasTraceCollectionEntityId returns a boolean if a field has been set.
func (o *TraceInfoType) HasTraceCollectionEntityId() bool {
	if o != nil && !isNil(o.TraceCollectionEntityId) {
		return true
	}

	return false
}

// SetTraceCollectionEntityId gets a reference to the given int32 and assigns it to the TraceCollectionEntityId field.
func (o *TraceInfoType) SetTraceCollectionEntityId(v int32) {
	o.TraceCollectionEntityId = &v
}

// GetExcessPacketDelayThresholds returns the ExcessPacketDelayThresholds field value if set, zero value otherwise.
func (o *TraceInfoType) GetExcessPacketDelayThresholds() map[string]interface{} {
	if o == nil || isNil(o.ExcessPacketDelayThresholds) {
		var ret map[string]interface{}
		return ret
	}
	return *o.ExcessPacketDelayThresholds
}

// GetExcessPacketDelayThresholdsOk returns a tuple with the ExcessPacketDelayThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceInfoType) GetExcessPacketDelayThresholdsOk() (*map[string]interface{}, bool) {
	if o == nil || isNil(o.ExcessPacketDelayThresholds) {
		return nil, false
	}
	return o.ExcessPacketDelayThresholds, true
}

// HasExcessPacketDelayThresholds returns a boolean if a field has been set.
func (o *TraceInfoType) HasExcessPacketDelayThresholds() bool {
	if o != nil && !isNil(o.ExcessPacketDelayThresholds) {
		return true
	}

	return false
}

// SetExcessPacketDelayThresholds gets a reference to the given map[string]interface{} and assigns it to the ExcessPacketDelayThresholds field.
func (o *TraceInfoType) SetExcessPacketDelayThresholds(v map[string]interface{}) {
	o.ExcessPacketDelayThresholds = &v
}

func (o TraceInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.JobType) {
		toSerialize["jobType"] = o.JobType
	}
	if !isNil(o.ListOfInterfaces) {
		toSerialize["listOfInterfaces"] = o.ListOfInterfaces
	}
	if !isNil(o.ListOfNeTypes) {
		toSerialize["listOfNeTypes"] = o.ListOfNeTypes
	}
	if !isNil(o.PlmnTarget) {
		toSerialize["plmnTarget"] = o.PlmnTarget
	}
	if !isNil(o.TraceReportingConsumerUri) {
		toSerialize["traceReportingConsumerUri"] = o.TraceReportingConsumerUri
	}
	if !isNil(o.TraceCollectionEntityIpAddress) {
		toSerialize["traceCollectionEntityIpAddress"] = o.TraceCollectionEntityIpAddress
	}
	if !isNil(o.TraceDepth) {
		toSerialize["traceDepth"] = o.TraceDepth
	}
	if !isNil(o.TraceReference) {
		toSerialize["traceReference"] = o.TraceReference
	}
	if !isNil(o.TraceRecordingSessionReference) {
		toSerialize["traceRecordingSessionReference"] = o.TraceRecordingSessionReference
	}
	if !isNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !isNil(o.TraceReportingFormat) {
		toSerialize["traceReportingFormat"] = o.TraceReportingFormat
	}
	if !isNil(o.TraceTarget) {
		toSerialize["traceTarget"] = o.TraceTarget
	}
	if !isNil(o.TriggeringEvents) {
		toSerialize["triggeringEvents"] = o.TriggeringEvents
	}
	if !isNil(o.AnonymizationOfMdtData) {
		toSerialize["anonymizationOfMdtData"] = o.AnonymizationOfMdtData
	}
	if !isNil(o.AreaConfigurationForNeighCell) {
		toSerialize["areaConfigurationForNeighCell"] = o.AreaConfigurationForNeighCell
	}
	if !isNil(o.AreaScope) {
		toSerialize["areaScope"] = o.AreaScope
	}
	if !isNil(o.BeamLevelMeasurement) {
		toSerialize["beamLevelMeasurement"] = o.BeamLevelMeasurement
	}
	if !isNil(o.CollectionPeriodRrmLte) {
		toSerialize["collectionPeriodRrmLte"] = o.CollectionPeriodRrmLte
	}
	if !isNil(o.CollectionPeriodM6Lte) {
		toSerialize["collectionPeriodM6Lte"] = o.CollectionPeriodM6Lte
	}
	if !isNil(o.CollectionPeriodM7Lte) {
		toSerialize["collectionPeriodM7Lte"] = o.CollectionPeriodM7Lte
	}
	if !isNil(o.CollectionPeriodRrmUmts) {
		toSerialize["collectionPeriodRrmUmts"] = o.CollectionPeriodRrmUmts
	}
	if !isNil(o.CollectionPeriodRrmNr) {
		toSerialize["collectionPeriodRrmNr"] = o.CollectionPeriodRrmNr
	}
	if !isNil(o.CollectionPeriodM6Nr) {
		toSerialize["collectionPeriodM6Nr"] = o.CollectionPeriodM6Nr
	}
	if !isNil(o.CollectionPeriodM7Nr) {
		toSerialize["collectionPeriodM7Nr"] = o.CollectionPeriodM7Nr
	}
	if !isNil(o.EventListForEventTriggeredMeasurement) {
		toSerialize["eventListForEventTriggeredMeasurement"] = o.EventListForEventTriggeredMeasurement
	}
	if !isNil(o.EventThreshold) {
		toSerialize["eventThreshold"] = o.EventThreshold
	}
	if !isNil(o.ListOfMeasurements) {
		toSerialize["listOfMeasurements"] = o.ListOfMeasurements
	}
	if !isNil(o.LoggingDuration) {
		toSerialize["loggingDuration"] = o.LoggingDuration
	}
	if !isNil(o.LoggingInterval) {
		toSerialize["loggingInterval"] = o.LoggingInterval
	}
	if !isNil(o.EventThresholdL1) {
		toSerialize["eventThresholdL1"] = o.EventThresholdL1
	}
	if !isNil(o.HysteresisL1) {
		toSerialize["hysteresisL1"] = o.HysteresisL1
	}
	if !isNil(o.TimeToTriggerL1) {
		toSerialize["timeToTriggerL1"] = o.TimeToTriggerL1
	}
	if !isNil(o.MbsfnAreaList) {
		toSerialize["mbsfnAreaList"] = o.MbsfnAreaList
	}
	if !isNil(o.MeasurementPeriodLte) {
		toSerialize["measurementPeriodLte"] = o.MeasurementPeriodLte
	}
	if !isNil(o.MeasurementPeriodUmts) {
		toSerialize["measurementPeriodUmts"] = o.MeasurementPeriodUmts
	}
	if !isNil(o.MeasurementQuantity) {
		toSerialize["measurementQuantity"] = o.MeasurementQuantity
	}
	if !isNil(o.EventThresholdUphUmts) {
		toSerialize["eventThresholdUphUmts"] = o.EventThresholdUphUmts
	}
	if !isNil(o.PlmnList) {
		toSerialize["plmnList"] = o.PlmnList
	}
	if !isNil(o.PositioningMethod) {
		toSerialize["positioningMethod"] = o.PositioningMethod
	}
	if !isNil(o.ReportAmount) {
		toSerialize["reportAmount"] = o.ReportAmount
	}
	if !isNil(o.ReportingTrigger) {
		toSerialize["reportingTrigger"] = o.ReportingTrigger
	}
	if !isNil(o.ReportInterval) {
		toSerialize["reportInterval"] = o.ReportInterval
	}
	if !isNil(o.ReportType) {
		toSerialize["reportType"] = o.ReportType
	}
	if !isNil(o.SensorInformation) {
		toSerialize["sensorInformation"] = o.SensorInformation
	}
	if !isNil(o.TraceCollectionEntityId) {
		toSerialize["traceCollectionEntityId"] = o.TraceCollectionEntityId
	}
	if !isNil(o.ExcessPacketDelayThresholds) {
		toSerialize["excessPacketDelayThresholds"] = o.ExcessPacketDelayThresholds
	}
	return toSerialize, nil
}

type NullableTraceInfoType struct {
	value *TraceInfoType
	isSet bool
}

func (v NullableTraceInfoType) Get() *TraceInfoType {
	return v.value
}

func (v *NullableTraceInfoType) Set(val *TraceInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceInfoType(val *TraceInfoType) *NullableTraceInfoType {
	return &NullableTraceInfoType{value: val, isSet: true}
}

func (v NullableTraceInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


