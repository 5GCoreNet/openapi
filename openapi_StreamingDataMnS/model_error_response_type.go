/*
TS 28.532 Streaming data reporting service

OAS 3.0.1 specification for the Streaming data reporting service (Streaming MnS) Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_StreamingDataMnS

import (
	"encoding/json"
)

// checks if the ErrorResponseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseType{}

// ErrorResponseType struct for ErrorResponseType
type ErrorResponseType struct {
	Error *ErrorResponseTypeError `json:"error,omitempty"`
}

// NewErrorResponseType instantiates a new ErrorResponseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseType() *ErrorResponseType {
	this := ErrorResponseType{}
	return &this
}

// NewErrorResponseTypeWithDefaults instantiates a new ErrorResponseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseTypeWithDefaults() *ErrorResponseType {
	this := ErrorResponseType{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ErrorResponseType) GetError() ErrorResponseTypeError {
	if o == nil || isNil(o.Error) {
		var ret ErrorResponseTypeError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseType) GetErrorOk() (*ErrorResponseTypeError, bool) {
	if o == nil || isNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ErrorResponseType) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorResponseTypeError and assigns it to the Error field.
func (o *ErrorResponseType) SetError(v ErrorResponseTypeError) {
	o.Error = &v
}

func (o ErrorResponseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableErrorResponseType struct {
	value *ErrorResponseType
	isSet bool
}

func (v NullableErrorResponseType) Get() *ErrorResponseType {
	return v.value
}

func (v *NullableErrorResponseType) Set(val *ErrorResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseType(val *ErrorResponseType) *NullableErrorResponseType {
	return &NullableErrorResponseType{value: val, isSet: true}
}

func (v NullableErrorResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


