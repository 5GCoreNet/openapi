/*
TS 28.532 Streaming data reporting service

OAS 3.0.1 specification for the Streaming data reporting service (Streaming MnS) Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_StreamingDataMnS

import (
	"encoding/json"
)

// checks if the StreamInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamInfoType{}

// StreamInfoType Reporting stream meta-data.
type StreamInfoType struct {
	StreamType StreamTypeType `json:"streamType"`
	SerializationFormat SerializationFormatType `json:"serializationFormat"`
	StreamId StreamInfoTypeStreamId `json:"streamId"`
	AdditionalInfo *StreamInfoTypeAdditionalInfo `json:"additionalInfo,omitempty"`
}

// NewStreamInfoType instantiates a new StreamInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamInfoType(streamType StreamTypeType, serializationFormat SerializationFormatType, streamId StreamInfoTypeStreamId) *StreamInfoType {
	this := StreamInfoType{}
	this.StreamType = streamType
	this.SerializationFormat = serializationFormat
	this.StreamId = streamId
	return &this
}

// NewStreamInfoTypeWithDefaults instantiates a new StreamInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamInfoTypeWithDefaults() *StreamInfoType {
	this := StreamInfoType{}
	return &this
}

// GetStreamType returns the StreamType field value
func (o *StreamInfoType) GetStreamType() StreamTypeType {
	if o == nil {
		var ret StreamTypeType
		return ret
	}

	return o.StreamType
}

// GetStreamTypeOk returns a tuple with the StreamType field value
// and a boolean to check if the value has been set.
func (o *StreamInfoType) GetStreamTypeOk() (*StreamTypeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamType, true
}

// SetStreamType sets field value
func (o *StreamInfoType) SetStreamType(v StreamTypeType) {
	o.StreamType = v
}

// GetSerializationFormat returns the SerializationFormat field value
func (o *StreamInfoType) GetSerializationFormat() SerializationFormatType {
	if o == nil {
		var ret SerializationFormatType
		return ret
	}

	return o.SerializationFormat
}

// GetSerializationFormatOk returns a tuple with the SerializationFormat field value
// and a boolean to check if the value has been set.
func (o *StreamInfoType) GetSerializationFormatOk() (*SerializationFormatType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerializationFormat, true
}

// SetSerializationFormat sets field value
func (o *StreamInfoType) SetSerializationFormat(v SerializationFormatType) {
	o.SerializationFormat = v
}

// GetStreamId returns the StreamId field value
func (o *StreamInfoType) GetStreamId() StreamInfoTypeStreamId {
	if o == nil {
		var ret StreamInfoTypeStreamId
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *StreamInfoType) GetStreamIdOk() (*StreamInfoTypeStreamId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *StreamInfoType) SetStreamId(v StreamInfoTypeStreamId) {
	o.StreamId = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *StreamInfoType) GetAdditionalInfo() StreamInfoTypeAdditionalInfo {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret StreamInfoTypeAdditionalInfo
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamInfoType) GetAdditionalInfoOk() (*StreamInfoTypeAdditionalInfo, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *StreamInfoType) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given StreamInfoTypeAdditionalInfo and assigns it to the AdditionalInfo field.
func (o *StreamInfoType) SetAdditionalInfo(v StreamInfoTypeAdditionalInfo) {
	o.AdditionalInfo = &v
}

func (o StreamInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["streamType"] = o.StreamType
	toSerialize["serializationFormat"] = o.SerializationFormat
	toSerialize["streamId"] = o.StreamId
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

type NullableStreamInfoType struct {
	value *StreamInfoType
	isSet bool
}

func (v NullableStreamInfoType) Get() *StreamInfoType {
	return v.value
}

func (v *NullableStreamInfoType) Set(val *StreamInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamInfoType(val *StreamInfoType) *NullableStreamInfoType {
	return &NullableStreamInfoType{value: val, isSet: true}
}

func (v NullableStreamInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


