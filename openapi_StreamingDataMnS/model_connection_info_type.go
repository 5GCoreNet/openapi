/*
TS 28.532 Streaming data reporting service

OAS 3.0.1 specification for the Streaming data reporting service (Streaming MnS) Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_StreamingDataMnS

import (
	"encoding/json"
)

// checks if the ConnectionInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionInfoType{}

// ConnectionInfoType struct for ConnectionInfoType
type ConnectionInfoType struct {
	// Resource URI
	Connection *string `json:"connection,omitempty"`
	Producer *ProducerIdType `json:"producer,omitempty"`
	Streams []string `json:"streams,omitempty"`
}

// NewConnectionInfoType instantiates a new ConnectionInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionInfoType() *ConnectionInfoType {
	this := ConnectionInfoType{}
	return &this
}

// NewConnectionInfoTypeWithDefaults instantiates a new ConnectionInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionInfoTypeWithDefaults() *ConnectionInfoType {
	this := ConnectionInfoType{}
	return &this
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *ConnectionInfoType) GetConnection() string {
	if o == nil || IsNil(o.Connection) {
		var ret string
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfoType) GetConnectionOk() (*string, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *ConnectionInfoType) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given string and assigns it to the Connection field.
func (o *ConnectionInfoType) SetConnection(v string) {
	o.Connection = &v
}

// GetProducer returns the Producer field value if set, zero value otherwise.
func (o *ConnectionInfoType) GetProducer() ProducerIdType {
	if o == nil || IsNil(o.Producer) {
		var ret ProducerIdType
		return ret
	}
	return *o.Producer
}

// GetProducerOk returns a tuple with the Producer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfoType) GetProducerOk() (*ProducerIdType, bool) {
	if o == nil || IsNil(o.Producer) {
		return nil, false
	}
	return o.Producer, true
}

// HasProducer returns a boolean if a field has been set.
func (o *ConnectionInfoType) HasProducer() bool {
	if o != nil && !IsNil(o.Producer) {
		return true
	}

	return false
}

// SetProducer gets a reference to the given ProducerIdType and assigns it to the Producer field.
func (o *ConnectionInfoType) SetProducer(v ProducerIdType) {
	o.Producer = &v
}

// GetStreams returns the Streams field value if set, zero value otherwise.
func (o *ConnectionInfoType) GetStreams() []string {
	if o == nil || IsNil(o.Streams) {
		var ret []string
		return ret
	}
	return o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfoType) GetStreamsOk() ([]string, bool) {
	if o == nil || IsNil(o.Streams) {
		return nil, false
	}
	return o.Streams, true
}

// HasStreams returns a boolean if a field has been set.
func (o *ConnectionInfoType) HasStreams() bool {
	if o != nil && !IsNil(o.Streams) {
		return true
	}

	return false
}

// SetStreams gets a reference to the given []string and assigns it to the Streams field.
func (o *ConnectionInfoType) SetStreams(v []string) {
	o.Streams = v
}

func (o ConnectionInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.Producer) {
		toSerialize["producer"] = o.Producer
	}
	if !IsNil(o.Streams) {
		toSerialize["streams"] = o.Streams
	}
	return toSerialize, nil
}

type NullableConnectionInfoType struct {
	value *ConnectionInfoType
	isSet bool
}

func (v NullableConnectionInfoType) Get() *ConnectionInfoType {
	return v.value
}

func (v *NullableConnectionInfoType) Set(val *ConnectionInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionInfoType(val *ConnectionInfoType) *NullableConnectionInfoType {
	return &NullableConnectionInfoType{value: val, isSet: true}
}

func (v NullableConnectionInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


