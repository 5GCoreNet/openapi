/*
TS 28.532 Streaming data reporting service

OAS 3.0.1 specification for the Streaming data reporting service (Streaming MnS) Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_StreamingDataMnS

import (
	"encoding/json"
	"fmt"
)

// SerializationFormatType the model 'SerializationFormatType'
type SerializationFormatType string

// List of serializationFormat-Type
const (
	GPB SerializationFormatType = "GPB"
	ASN1 SerializationFormatType = "ASN1"
)

// All allowed values of SerializationFormatType enum
var AllowedSerializationFormatTypeEnumValues = []SerializationFormatType{
	"GPB",
	"ASN1",
}

func (v *SerializationFormatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SerializationFormatType(value)
	for _, existing := range AllowedSerializationFormatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SerializationFormatType", value)
}

// NewSerializationFormatTypeFromValue returns a pointer to a valid SerializationFormatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSerializationFormatTypeFromValue(v string) (*SerializationFormatType, error) {
	ev := SerializationFormatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SerializationFormatType: valid values are %v", v, AllowedSerializationFormatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SerializationFormatType) IsValid() bool {
	for _, existing := range AllowedSerializationFormatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to serializationFormat-Type value
func (v SerializationFormatType) Ptr() *SerializationFormatType {
	return &v
}

type NullableSerializationFormatType struct {
	value *SerializationFormatType
	isSet bool
}

func (v NullableSerializationFormatType) Get() *SerializationFormatType {
	return v.value
}

func (v *NullableSerializationFormatType) Set(val *SerializationFormatType) {
	v.value = val
	v.isSet = true
}

func (v NullableSerializationFormatType) IsSet() bool {
	return v.isSet
}

func (v *NullableSerializationFormatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSerializationFormatType(val *SerializationFormatType) *NullableSerializationFormatType {
	return &NullableSerializationFormatType{value: val, isSet: true}
}

func (v NullableSerializationFormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSerializationFormatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

