/*
TS 28.532 Streaming data reporting service

OAS 3.0.1 specification for the Streaming data reporting service (Streaming MnS) Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_StreamingDataMnS

import (
	"encoding/json"
)

// checks if the TraceReferenceType1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceReferenceType1{}

// TraceReferenceType1 The Trace Reference parameter shall be globally unique, therefore the Trace Reference shall compose as follows - MCC+MNC+Trace ID, where the MCC and MNC are coming with the Trace activation request from the management system to identify one PLMN containing the management system, and Trace ID is a 3 byte Octet String. See 3GPP TS 32.422 clause 5.6 for additional details.
type TraceReferenceType1 struct {
	Mcc     string `json:"mcc"`
	Mnc     string `json:"mnc"`
	TraceId string `json:"traceId"`
}

// NewTraceReferenceType1 instantiates a new TraceReferenceType1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceReferenceType1(mcc string, mnc string, traceId string) *TraceReferenceType1 {
	this := TraceReferenceType1{}
	this.Mcc = mcc
	this.Mnc = mnc
	this.TraceId = traceId
	return &this
}

// NewTraceReferenceType1WithDefaults instantiates a new TraceReferenceType1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceReferenceType1WithDefaults() *TraceReferenceType1 {
	this := TraceReferenceType1{}
	return &this
}

// GetMcc returns the Mcc field value
func (o *TraceReferenceType1) GetMcc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value
// and a boolean to check if the value has been set.
func (o *TraceReferenceType1) GetMccOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mcc, true
}

// SetMcc sets field value
func (o *TraceReferenceType1) SetMcc(v string) {
	o.Mcc = v
}

// GetMnc returns the Mnc field value
func (o *TraceReferenceType1) GetMnc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mnc
}

// GetMncOk returns a tuple with the Mnc field value
// and a boolean to check if the value has been set.
func (o *TraceReferenceType1) GetMncOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mnc, true
}

// SetMnc sets field value
func (o *TraceReferenceType1) SetMnc(v string) {
	o.Mnc = v
}

// GetTraceId returns the TraceId field value
func (o *TraceReferenceType1) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *TraceReferenceType1) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *TraceReferenceType1) SetTraceId(v string) {
	o.TraceId = v
}

func (o TraceReferenceType1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceReferenceType1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mcc"] = o.Mcc
	toSerialize["mnc"] = o.Mnc
	toSerialize["traceId"] = o.TraceId
	return toSerialize, nil
}

type NullableTraceReferenceType1 struct {
	value *TraceReferenceType1
	isSet bool
}

func (v NullableTraceReferenceType1) Get() *TraceReferenceType1 {
	return v.value
}

func (v *NullableTraceReferenceType1) Set(val *TraceReferenceType1) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceReferenceType1) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceReferenceType1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceReferenceType1(val *TraceReferenceType1) *NullableTraceReferenceType1 {
	return &NullableTraceReferenceType1{value: val, isSet: true}
}

func (v NullableTraceReferenceType1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceReferenceType1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
