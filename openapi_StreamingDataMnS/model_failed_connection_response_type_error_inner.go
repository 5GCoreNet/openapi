/*
TS 28.532 Streaming data reporting service

OAS 3.0.1 specification for the Streaming data reporting service (Streaming MnS) Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_StreamingDataMnS

import (
	"encoding/json"
)

// checks if the FailedConnectionResponseTypeErrorInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailedConnectionResponseTypeErrorInner{}

// FailedConnectionResponseTypeErrorInner struct for FailedConnectionResponseTypeErrorInner
type FailedConnectionResponseTypeErrorInner struct {
	// globally unique stream identifier
	StreamId *string `json:"streamId,omitempty"`
	ErrorReason *string `json:"errorReason,omitempty"`
}

// NewFailedConnectionResponseTypeErrorInner instantiates a new FailedConnectionResponseTypeErrorInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailedConnectionResponseTypeErrorInner() *FailedConnectionResponseTypeErrorInner {
	this := FailedConnectionResponseTypeErrorInner{}
	return &this
}

// NewFailedConnectionResponseTypeErrorInnerWithDefaults instantiates a new FailedConnectionResponseTypeErrorInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailedConnectionResponseTypeErrorInnerWithDefaults() *FailedConnectionResponseTypeErrorInner {
	this := FailedConnectionResponseTypeErrorInner{}
	return &this
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *FailedConnectionResponseTypeErrorInner) GetStreamId() string {
	if o == nil || isNil(o.StreamId) {
		var ret string
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailedConnectionResponseTypeErrorInner) GetStreamIdOk() (*string, bool) {
	if o == nil || isNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *FailedConnectionResponseTypeErrorInner) HasStreamId() bool {
	if o != nil && !isNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given string and assigns it to the StreamId field.
func (o *FailedConnectionResponseTypeErrorInner) SetStreamId(v string) {
	o.StreamId = &v
}

// GetErrorReason returns the ErrorReason field value if set, zero value otherwise.
func (o *FailedConnectionResponseTypeErrorInner) GetErrorReason() string {
	if o == nil || isNil(o.ErrorReason) {
		var ret string
		return ret
	}
	return *o.ErrorReason
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailedConnectionResponseTypeErrorInner) GetErrorReasonOk() (*string, bool) {
	if o == nil || isNil(o.ErrorReason) {
		return nil, false
	}
	return o.ErrorReason, true
}

// HasErrorReason returns a boolean if a field has been set.
func (o *FailedConnectionResponseTypeErrorInner) HasErrorReason() bool {
	if o != nil && !isNil(o.ErrorReason) {
		return true
	}

	return false
}

// SetErrorReason gets a reference to the given string and assigns it to the ErrorReason field.
func (o *FailedConnectionResponseTypeErrorInner) SetErrorReason(v string) {
	o.ErrorReason = &v
}

func (o FailedConnectionResponseTypeErrorInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailedConnectionResponseTypeErrorInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StreamId) {
		toSerialize["streamId"] = o.StreamId
	}
	if !isNil(o.ErrorReason) {
		toSerialize["errorReason"] = o.ErrorReason
	}
	return toSerialize, nil
}

type NullableFailedConnectionResponseTypeErrorInner struct {
	value *FailedConnectionResponseTypeErrorInner
	isSet bool
}

func (v NullableFailedConnectionResponseTypeErrorInner) Get() *FailedConnectionResponseTypeErrorInner {
	return v.value
}

func (v *NullableFailedConnectionResponseTypeErrorInner) Set(val *FailedConnectionResponseTypeErrorInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFailedConnectionResponseTypeErrorInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFailedConnectionResponseTypeErrorInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailedConnectionResponseTypeErrorInner(val *FailedConnectionResponseTypeErrorInner) *NullableFailedConnectionResponseTypeErrorInner {
	return &NullableFailedConnectionResponseTypeErrorInner{value: val, isSet: true}
}

func (v NullableFailedConnectionResponseTypeErrorInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailedConnectionResponseTypeErrorInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


