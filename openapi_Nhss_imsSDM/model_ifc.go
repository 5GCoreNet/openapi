/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
)

// checks if the Ifc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ifc{}

// Ifc Data associated to an individual IFC (Initial Filter Criteria)
type Ifc struct {
	Priority int32 `json:"priority"`
	Trigger *TriggerPoint `json:"trigger,omitempty"`
	AppServer ApplicationServer `json:"appServer"`
}

// NewIfc instantiates a new Ifc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIfc(priority int32, appServer ApplicationServer) *Ifc {
	this := Ifc{}
	this.Priority = priority
	this.AppServer = appServer
	return &this
}

// NewIfcWithDefaults instantiates a new Ifc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIfcWithDefaults() *Ifc {
	this := Ifc{}
	return &this
}

// GetPriority returns the Priority field value
func (o *Ifc) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *Ifc) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *Ifc) SetPriority(v int32) {
	o.Priority = v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *Ifc) GetTrigger() TriggerPoint {
	if o == nil || IsNil(o.Trigger) {
		var ret TriggerPoint
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ifc) GetTriggerOk() (*TriggerPoint, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *Ifc) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given TriggerPoint and assigns it to the Trigger field.
func (o *Ifc) SetTrigger(v TriggerPoint) {
	o.Trigger = &v
}

// GetAppServer returns the AppServer field value
func (o *Ifc) GetAppServer() ApplicationServer {
	if o == nil {
		var ret ApplicationServer
		return ret
	}

	return o.AppServer
}

// GetAppServerOk returns a tuple with the AppServer field value
// and a boolean to check if the value has been set.
func (o *Ifc) GetAppServerOk() (*ApplicationServer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppServer, true
}

// SetAppServer sets field value
func (o *Ifc) SetAppServer(v ApplicationServer) {
	o.AppServer = v
}

func (o Ifc) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ifc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["priority"] = o.Priority
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	toSerialize["appServer"] = o.AppServer
	return toSerialize, nil
}

type NullableIfc struct {
	value *Ifc
	isSet bool
}

func (v NullableIfc) Get() *Ifc {
	return v.value
}

func (v *NullableIfc) Set(val *Ifc) {
	v.value = val
	v.isSet = true
}

func (v NullableIfc) IsSet() bool {
	return v.isSet
}

func (v *NullableIfc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIfc(val *Ifc) *NullableIfc {
	return &NullableIfc{value: val, isSet: true}
}

func (v NullableIfc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIfc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


