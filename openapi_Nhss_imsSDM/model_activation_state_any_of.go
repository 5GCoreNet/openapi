/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
	"fmt"
)

// ActivationStateAnyOf the model 'ActivationStateAnyOf'
type ActivationStateAnyOf string

// List of ActivationState_anyOf
const (
	ACTIVE ActivationStateAnyOf = "ACTIVE"
	INACTIVE ActivationStateAnyOf = "INACTIVE"
)

// All allowed values of ActivationStateAnyOf enum
var AllowedActivationStateAnyOfEnumValues = []ActivationStateAnyOf{
	"ACTIVE",
	"INACTIVE",
}

func (v *ActivationStateAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActivationStateAnyOf(value)
	for _, existing := range AllowedActivationStateAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActivationStateAnyOf", value)
}

// NewActivationStateAnyOfFromValue returns a pointer to a valid ActivationStateAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActivationStateAnyOfFromValue(v string) (*ActivationStateAnyOf, error) {
	ev := ActivationStateAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActivationStateAnyOf: valid values are %v", v, AllowedActivationStateAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActivationStateAnyOf) IsValid() bool {
	for _, existing := range AllowedActivationStateAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActivationState_anyOf value
func (v ActivationStateAnyOf) Ptr() *ActivationStateAnyOf {
	return &v
}

type NullableActivationStateAnyOf struct {
	value *ActivationStateAnyOf
	isSet bool
}

func (v NullableActivationStateAnyOf) Get() *ActivationStateAnyOf {
	return v.value
}

func (v *NullableActivationStateAnyOf) Set(val *ActivationStateAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableActivationStateAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableActivationStateAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivationStateAnyOf(val *ActivationStateAnyOf) *NullableActivationStateAnyOf {
	return &NullableActivationStateAnyOf{value: val, isSet: true}
}

func (v NullableActivationStateAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivationStateAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

