/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
)

// checks if the CallReferenceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallReferenceInfo{}

// CallReferenceInfo Contains a Call Reference Number and the AS-Number; it allows a later retry of the call setup in the context of MTRR 
type CallReferenceInfo struct {
	// The content is according to CallReferenceNumber type described in 3GPP TS 29.002 [30]. Base64 encoded according to IETF RFC 2045 [28] 
	CallRefNumber string `json:"callRefNumber"`
	// The content is according to ISDN-AddressString type described in 3GPP TS 29.002 [30]. Base64 encoded according to IETF RFC 2045 [28] 
	AsNumber string `json:"asNumber"`
}

// NewCallReferenceInfo instantiates a new CallReferenceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallReferenceInfo(callRefNumber string, asNumber string) *CallReferenceInfo {
	this := CallReferenceInfo{}
	this.CallRefNumber = callRefNumber
	this.AsNumber = asNumber
	return &this
}

// NewCallReferenceInfoWithDefaults instantiates a new CallReferenceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallReferenceInfoWithDefaults() *CallReferenceInfo {
	this := CallReferenceInfo{}
	return &this
}

// GetCallRefNumber returns the CallRefNumber field value
func (o *CallReferenceInfo) GetCallRefNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallRefNumber
}

// GetCallRefNumberOk returns a tuple with the CallRefNumber field value
// and a boolean to check if the value has been set.
func (o *CallReferenceInfo) GetCallRefNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallRefNumber, true
}

// SetCallRefNumber sets field value
func (o *CallReferenceInfo) SetCallRefNumber(v string) {
	o.CallRefNumber = v
}

// GetAsNumber returns the AsNumber field value
func (o *CallReferenceInfo) GetAsNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AsNumber
}

// GetAsNumberOk returns a tuple with the AsNumber field value
// and a boolean to check if the value has been set.
func (o *CallReferenceInfo) GetAsNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AsNumber, true
}

// SetAsNumber sets field value
func (o *CallReferenceInfo) SetAsNumber(v string) {
	o.AsNumber = v
}

func (o CallReferenceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallReferenceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["callRefNumber"] = o.CallRefNumber
	toSerialize["asNumber"] = o.AsNumber
	return toSerialize, nil
}

type NullableCallReferenceInfo struct {
	value *CallReferenceInfo
	isSet bool
}

func (v NullableCallReferenceInfo) Get() *CallReferenceInfo {
	return v.value
}

func (v *NullableCallReferenceInfo) Set(val *CallReferenceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCallReferenceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCallReferenceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallReferenceInfo(val *CallReferenceInfo) *NullableCallReferenceInfo {
	return &NullableCallReferenceInfo{value: val, isSet: true}
}

func (v NullableCallReferenceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallReferenceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


