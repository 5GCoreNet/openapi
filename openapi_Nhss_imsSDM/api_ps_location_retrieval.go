/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PSLocationRetrievalApiService PSLocationRetrievalApi service
type PSLocationRetrievalApiService service

type ApiGetLocPsDomainRequest struct {
	ctx               context.Context
	ApiService        *PSLocationRetrievalApiService
	imsUeId           string
	requestedNodes    *[]RequestedNode
	servingNode       *bool
	localTime         *bool
	currentLocation   *bool
	ratType           *bool
	supportedFeatures *string
	privateIdentity   *string
}

// Indicates the serving node(s) for which the request is applicable.
func (r ApiGetLocPsDomainRequest) RequestedNodes(requestedNodes []RequestedNode) ApiGetLocPsDomainRequest {
	r.requestedNodes = &requestedNodes
	return r
}

// Indicates that only the stored NF id/address of the serving node(s) is required
func (r ApiGetLocPsDomainRequest) ServingNode(servingNode bool) ApiGetLocPsDomainRequest {
	r.servingNode = &servingNode
	return r
}

// Indicates that only the Local Time Zone information of the location in the visited network where the UE is attached is requested
func (r ApiGetLocPsDomainRequest) LocalTime(localTime bool) ApiGetLocPsDomainRequest {
	r.localTime = &localTime
	return r
}

// Indicates whether an active location retrieval has to be initiated by the requested node
func (r ApiGetLocPsDomainRequest) CurrentLocation(currentLocation bool) ApiGetLocPsDomainRequest {
	r.currentLocation = &currentLocation
	return r
}

// Indicates whether RAT Type retrieval is requested
func (r ApiGetLocPsDomainRequest) RatType(ratType bool) ApiGetLocPsDomainRequest {
	r.ratType = &ratType
	return r
}

// Supported Features
func (r ApiGetLocPsDomainRequest) SupportedFeatures(supportedFeatures string) ApiGetLocPsDomainRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

// IMS Private Identity
func (r ApiGetLocPsDomainRequest) PrivateIdentity(privateIdentity string) ApiGetLocPsDomainRequest {
	r.privateIdentity = &privateIdentity
	return r
}

func (r ApiGetLocPsDomainRequest) Execute() (*PsLocation, *http.Response, error) {
	return r.ApiService.GetLocPsDomainExecute(r)
}

/*
GetLocPsDomain Retrieve the location data in PS domain

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param imsUeId IMS Public Identity
	@return ApiGetLocPsDomainRequest
*/
func (a *PSLocationRetrievalApiService) GetLocPsDomain(ctx context.Context, imsUeId string) ApiGetLocPsDomainRequest {
	return ApiGetLocPsDomainRequest{
		ApiService: a,
		ctx:        ctx,
		imsUeId:    imsUeId,
	}
}

// Execute executes the request
//
//	@return PsLocation
func (a *PSLocationRetrievalApiService) GetLocPsDomainExecute(r ApiGetLocPsDomainRequest) (*PsLocation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PsLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PSLocationRetrievalApiService.GetLocPsDomain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{imsUeId}/access-data/ps-domain/location-data"
	localVarPath = strings.Replace(localVarPath, "{"+"imsUeId"+"}", url.PathEscape(parameterValueToString(r.imsUeId, "imsUeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.requestedNodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requested-nodes", r.requestedNodes, "csv")
	}
	if r.servingNode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serving-node", r.servingNode, "")
	}
	if r.localTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local-time", r.localTime, "")
	}
	if r.currentLocation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "current-location", r.currentLocation, "")
	}
	if r.ratType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rat-type", r.ratType, "")
	}
	if r.supportedFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	if r.privateIdentity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "private-identity", r.privateIdentity, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
