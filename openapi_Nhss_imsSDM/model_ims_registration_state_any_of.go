/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
	"fmt"
)

// ImsRegistrationStateAnyOf the model 'ImsRegistrationStateAnyOf'
type ImsRegistrationStateAnyOf string

// List of ImsRegistrationState_anyOf
const (
	REGISTERED ImsRegistrationStateAnyOf = "REGISTERED"
	NOT_REGISTERED ImsRegistrationStateAnyOf = "NOT_REGISTERED"
	AUTHENTICATION_PENDING ImsRegistrationStateAnyOf = "AUTHENTICATION_PENDING"
	REGISTERED_UNREG_SERVICES ImsRegistrationStateAnyOf = "REGISTERED_UNREG_SERVICES"
)

// All allowed values of ImsRegistrationStateAnyOf enum
var AllowedImsRegistrationStateAnyOfEnumValues = []ImsRegistrationStateAnyOf{
	"REGISTERED",
	"NOT_REGISTERED",
	"AUTHENTICATION_PENDING",
	"REGISTERED_UNREG_SERVICES",
}

func (v *ImsRegistrationStateAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImsRegistrationStateAnyOf(value)
	for _, existing := range AllowedImsRegistrationStateAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImsRegistrationStateAnyOf", value)
}

// NewImsRegistrationStateAnyOfFromValue returns a pointer to a valid ImsRegistrationStateAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImsRegistrationStateAnyOfFromValue(v string) (*ImsRegistrationStateAnyOf, error) {
	ev := ImsRegistrationStateAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImsRegistrationStateAnyOf: valid values are %v", v, AllowedImsRegistrationStateAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImsRegistrationStateAnyOf) IsValid() bool {
	for _, existing := range AllowedImsRegistrationStateAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImsRegistrationState_anyOf value
func (v ImsRegistrationStateAnyOf) Ptr() *ImsRegistrationStateAnyOf {
	return &v
}

type NullableImsRegistrationStateAnyOf struct {
	value *ImsRegistrationStateAnyOf
	isSet bool
}

func (v NullableImsRegistrationStateAnyOf) Get() *ImsRegistrationStateAnyOf {
	return v.value
}

func (v *NullableImsRegistrationStateAnyOf) Set(val *ImsRegistrationStateAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableImsRegistrationStateAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableImsRegistrationStateAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImsRegistrationStateAnyOf(val *ImsRegistrationStateAnyOf) *NullableImsRegistrationStateAnyOf {
	return &NullableImsRegistrationStateAnyOf{value: val, isSet: true}
}

func (v NullableImsRegistrationStateAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImsRegistrationStateAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

