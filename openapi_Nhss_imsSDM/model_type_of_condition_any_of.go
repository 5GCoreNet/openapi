/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
	"fmt"
)

// TypeOfConditionAnyOf the model 'TypeOfConditionAnyOf'
type TypeOfConditionAnyOf string

// List of TypeOfCondition_anyOf
const (
	CNF TypeOfConditionAnyOf = "CNF"
	DNF TypeOfConditionAnyOf = "DNF"
)

// All allowed values of TypeOfConditionAnyOf enum
var AllowedTypeOfConditionAnyOfEnumValues = []TypeOfConditionAnyOf{
	"CNF",
	"DNF",
}

func (v *TypeOfConditionAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypeOfConditionAnyOf(value)
	for _, existing := range AllowedTypeOfConditionAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypeOfConditionAnyOf", value)
}

// NewTypeOfConditionAnyOfFromValue returns a pointer to a valid TypeOfConditionAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypeOfConditionAnyOfFromValue(v string) (*TypeOfConditionAnyOf, error) {
	ev := TypeOfConditionAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypeOfConditionAnyOf: valid values are %v", v, AllowedTypeOfConditionAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypeOfConditionAnyOf) IsValid() bool {
	for _, existing := range AllowedTypeOfConditionAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeOfCondition_anyOf value
func (v TypeOfConditionAnyOf) Ptr() *TypeOfConditionAnyOf {
	return &v
}

type NullableTypeOfConditionAnyOf struct {
	value *TypeOfConditionAnyOf
	isSet bool
}

func (v NullableTypeOfConditionAnyOf) Get() *TypeOfConditionAnyOf {
	return v.value
}

func (v *NullableTypeOfConditionAnyOf) Set(val *TypeOfConditionAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeOfConditionAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeOfConditionAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeOfConditionAnyOf(val *TypeOfConditionAnyOf) *NullableTypeOfConditionAnyOf {
	return &NullableTypeOfConditionAnyOf{value: val, isSet: true}
}

func (v NullableTypeOfConditionAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeOfConditionAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

