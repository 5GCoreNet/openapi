/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
	"fmt"
)

// AccessTypeAnyOf the model 'AccessTypeAnyOf'
type AccessTypeAnyOf string

// List of AccessType_anyOf
const (
	_3_GPP_ACCESS AccessTypeAnyOf = "3GPP_ACCESS"
	NON_3_GPP_ACCESS AccessTypeAnyOf = "NON_3GPP_ACCESS"
)

// All allowed values of AccessTypeAnyOf enum
var AllowedAccessTypeAnyOfEnumValues = []AccessTypeAnyOf{
	"3GPP_ACCESS",
	"NON_3GPP_ACCESS",
}

func (v *AccessTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessTypeAnyOf(value)
	for _, existing := range AllowedAccessTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessTypeAnyOf", value)
}

// NewAccessTypeAnyOfFromValue returns a pointer to a valid AccessTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessTypeAnyOfFromValue(v string) (*AccessTypeAnyOf, error) {
	ev := AccessTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessTypeAnyOf: valid values are %v", v, AllowedAccessTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedAccessTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessType_anyOf value
func (v AccessTypeAnyOf) Ptr() *AccessTypeAnyOf {
	return &v
}

type NullableAccessTypeAnyOf struct {
	value *AccessTypeAnyOf
	isSet bool
}

func (v NullableAccessTypeAnyOf) Get() *AccessTypeAnyOf {
	return v.value
}

func (v *NullableAccessTypeAnyOf) Set(val *AccessTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessTypeAnyOf(val *AccessTypeAnyOf) *NullableAccessTypeAnyOf {
	return &NullableAccessTypeAnyOf{value: val, isSet: true}
}

func (v NullableAccessTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

