/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
	"fmt"
)

// RegistrationTypeAnyOf the model 'RegistrationTypeAnyOf'
type RegistrationTypeAnyOf string

// List of RegistrationType_anyOf
const (
	INITIAL_REGISTRATION RegistrationTypeAnyOf = "INITIAL_REGISTRATION"
	RE_REGISTRATION RegistrationTypeAnyOf = "RE_REGISTRATION"
	DE_REGISTRATION RegistrationTypeAnyOf = "DE_REGISTRATION"
)

// All allowed values of RegistrationTypeAnyOf enum
var AllowedRegistrationTypeAnyOfEnumValues = []RegistrationTypeAnyOf{
	"INITIAL_REGISTRATION",
	"RE_REGISTRATION",
	"DE_REGISTRATION",
}

func (v *RegistrationTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegistrationTypeAnyOf(value)
	for _, existing := range AllowedRegistrationTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegistrationTypeAnyOf", value)
}

// NewRegistrationTypeAnyOfFromValue returns a pointer to a valid RegistrationTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegistrationTypeAnyOfFromValue(v string) (*RegistrationTypeAnyOf, error) {
	ev := RegistrationTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegistrationTypeAnyOf: valid values are %v", v, AllowedRegistrationTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegistrationTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedRegistrationTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegistrationType_anyOf value
func (v RegistrationTypeAnyOf) Ptr() *RegistrationTypeAnyOf {
	return &v
}

type NullableRegistrationTypeAnyOf struct {
	value *RegistrationTypeAnyOf
	isSet bool
}

func (v NullableRegistrationTypeAnyOf) Get() *RegistrationTypeAnyOf {
	return v.value
}

func (v *NullableRegistrationTypeAnyOf) Set(val *RegistrationTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrationTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrationTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrationTypeAnyOf(val *RegistrationTypeAnyOf) *NullableRegistrationTypeAnyOf {
	return &NullableRegistrationTypeAnyOf{value: val, isSet: true}
}

func (v NullableRegistrationTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrationTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

