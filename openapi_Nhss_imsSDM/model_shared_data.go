/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
)

// checks if the SharedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedData{}

// SharedData Represents a part of the IMS Profile data shared by several UEs
type SharedData struct {
	// Identifies globally and uniquely a piece of subscription data shared by multiple UEs; the value shall start with the HPLMN id (MCC/MNC) followed by a hyphen followed by a local Id as allocated by the home network operator
	SharedDataId     string `json:"sharedDataId"`
	SharedImsIfcData *Ifcs  `json:"sharedImsIfcData,omitempty"`
}

// NewSharedData instantiates a new SharedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedData(sharedDataId string) *SharedData {
	this := SharedData{}
	this.SharedDataId = sharedDataId
	return &this
}

// NewSharedDataWithDefaults instantiates a new SharedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedDataWithDefaults() *SharedData {
	this := SharedData{}
	return &this
}

// GetSharedDataId returns the SharedDataId field value
func (o *SharedData) GetSharedDataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SharedDataId
}

// GetSharedDataIdOk returns a tuple with the SharedDataId field value
// and a boolean to check if the value has been set.
func (o *SharedData) GetSharedDataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SharedDataId, true
}

// SetSharedDataId sets field value
func (o *SharedData) SetSharedDataId(v string) {
	o.SharedDataId = v
}

// GetSharedImsIfcData returns the SharedImsIfcData field value if set, zero value otherwise.
func (o *SharedData) GetSharedImsIfcData() Ifcs {
	if o == nil || IsNil(o.SharedImsIfcData) {
		var ret Ifcs
		return ret
	}
	return *o.SharedImsIfcData
}

// GetSharedImsIfcDataOk returns a tuple with the SharedImsIfcData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedData) GetSharedImsIfcDataOk() (*Ifcs, bool) {
	if o == nil || IsNil(o.SharedImsIfcData) {
		return nil, false
	}
	return o.SharedImsIfcData, true
}

// HasSharedImsIfcData returns a boolean if a field has been set.
func (o *SharedData) HasSharedImsIfcData() bool {
	if o != nil && !IsNil(o.SharedImsIfcData) {
		return true
	}

	return false
}

// SetSharedImsIfcData gets a reference to the given Ifcs and assigns it to the SharedImsIfcData field.
func (o *SharedData) SetSharedImsIfcData(v Ifcs) {
	o.SharedImsIfcData = &v
}

func (o SharedData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sharedDataId"] = o.SharedDataId
	if !IsNil(o.SharedImsIfcData) {
		toSerialize["sharedImsIfcData"] = o.SharedImsIfcData
	}
	return toSerialize, nil
}

type NullableSharedData struct {
	value *SharedData
	isSet bool
}

func (v NullableSharedData) Get() *SharedData {
	return v.value
}

func (v *NullableSharedData) Set(val *SharedData) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedData) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedData(val *SharedData) *NullableSharedData {
	return &NullableSharedData{value: val, isSet: true}
}

func (v NullableSharedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
