/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
	"fmt"
)

// ImsVoiceOverPsSessionSupportAnyOf the model 'ImsVoiceOverPsSessionSupportAnyOf'
type ImsVoiceOverPsSessionSupportAnyOf string

// List of ImsVoiceOverPsSessionSupport_anyOf
const (
	NOT_SUPPORTED ImsVoiceOverPsSessionSupportAnyOf = "IMS_VOICE_OVER_PS_NOT_SUPPORTED"
	SUPPORTED ImsVoiceOverPsSessionSupportAnyOf = "IMS_VOICE_OVER_PS_SUPPORTED"
	SUPPORT_UNKNOWN ImsVoiceOverPsSessionSupportAnyOf = "IMS_VOICE_OVER_PS_SUPPORT_UNKNOWN"
)

// All allowed values of ImsVoiceOverPsSessionSupportAnyOf enum
var AllowedImsVoiceOverPsSessionSupportAnyOfEnumValues = []ImsVoiceOverPsSessionSupportAnyOf{
	"IMS_VOICE_OVER_PS_NOT_SUPPORTED",
	"IMS_VOICE_OVER_PS_SUPPORTED",
	"IMS_VOICE_OVER_PS_SUPPORT_UNKNOWN",
}

func (v *ImsVoiceOverPsSessionSupportAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImsVoiceOverPsSessionSupportAnyOf(value)
	for _, existing := range AllowedImsVoiceOverPsSessionSupportAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImsVoiceOverPsSessionSupportAnyOf", value)
}

// NewImsVoiceOverPsSessionSupportAnyOfFromValue returns a pointer to a valid ImsVoiceOverPsSessionSupportAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImsVoiceOverPsSessionSupportAnyOfFromValue(v string) (*ImsVoiceOverPsSessionSupportAnyOf, error) {
	ev := ImsVoiceOverPsSessionSupportAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImsVoiceOverPsSessionSupportAnyOf: valid values are %v", v, AllowedImsVoiceOverPsSessionSupportAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImsVoiceOverPsSessionSupportAnyOf) IsValid() bool {
	for _, existing := range AllowedImsVoiceOverPsSessionSupportAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImsVoiceOverPsSessionSupport_anyOf value
func (v ImsVoiceOverPsSessionSupportAnyOf) Ptr() *ImsVoiceOverPsSessionSupportAnyOf {
	return &v
}

type NullableImsVoiceOverPsSessionSupportAnyOf struct {
	value *ImsVoiceOverPsSessionSupportAnyOf
	isSet bool
}

func (v NullableImsVoiceOverPsSessionSupportAnyOf) Get() *ImsVoiceOverPsSessionSupportAnyOf {
	return v.value
}

func (v *NullableImsVoiceOverPsSessionSupportAnyOf) Set(val *ImsVoiceOverPsSessionSupportAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableImsVoiceOverPsSessionSupportAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableImsVoiceOverPsSessionSupportAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImsVoiceOverPsSessionSupportAnyOf(val *ImsVoiceOverPsSessionSupportAnyOf) *NullableImsVoiceOverPsSessionSupportAnyOf {
	return &NullableImsVoiceOverPsSessionSupportAnyOf{value: val, isSet: true}
}

func (v NullableImsVoiceOverPsSessionSupportAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImsVoiceOverPsSessionSupportAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

