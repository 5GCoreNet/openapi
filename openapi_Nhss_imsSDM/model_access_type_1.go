/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
	"fmt"
)

// AccessType1 Indicates whether the access is  via 3GPP or via non-3GPP.
type AccessType1 string

// List of AccessType_1
const (
	_3_GPP_ACCESS    AccessType1 = "3GPP_ACCESS"
	NON_3_GPP_ACCESS AccessType1 = "NON_3GPP_ACCESS"
)

// All allowed values of AccessType1 enum
var AllowedAccessType1EnumValues = []AccessType1{
	"3GPP_ACCESS",
	"NON_3GPP_ACCESS",
}

func (v *AccessType1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessType1(value)
	for _, existing := range AllowedAccessType1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessType1", value)
}

// NewAccessType1FromValue returns a pointer to a valid AccessType1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessType1FromValue(v string) (*AccessType1, error) {
	ev := AccessType1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessType1: valid values are %v", v, AllowedAccessType1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessType1) IsValid() bool {
	for _, existing := range AllowedAccessType1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessType_1 value
func (v AccessType1) Ptr() *AccessType1 {
	return &v
}

type NullableAccessType1 struct {
	value *AccessType1
	isSet bool
}

func (v NullableAccessType1) Get() *AccessType1 {
	return v.value
}

func (v *NullableAccessType1) Set(val *AccessType1) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessType1) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessType1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessType1(val *AccessType1) *NullableAccessType1 {
	return &NullableAccessType1{value: val, isSet: true}
}

func (v NullableAccessType1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessType1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
