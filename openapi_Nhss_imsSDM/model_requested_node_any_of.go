/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
	"fmt"
)

// RequestedNodeAnyOf the model 'RequestedNodeAnyOf'
type RequestedNodeAnyOf string

// List of RequestedNode_anyOf
const (
	SGSN RequestedNodeAnyOf = "SGSN"
	MME RequestedNodeAnyOf = "MME"
	AMF RequestedNodeAnyOf = "AMF"
	_3_GPP_AAA_SERVER_TWAN RequestedNodeAnyOf = "3GPP_AAA_SERVER_TWAN"
)

// All allowed values of RequestedNodeAnyOf enum
var AllowedRequestedNodeAnyOfEnumValues = []RequestedNodeAnyOf{
	"SGSN",
	"MME",
	"AMF",
	"3GPP_AAA_SERVER_TWAN",
}

func (v *RequestedNodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestedNodeAnyOf(value)
	for _, existing := range AllowedRequestedNodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestedNodeAnyOf", value)
}

// NewRequestedNodeAnyOfFromValue returns a pointer to a valid RequestedNodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestedNodeAnyOfFromValue(v string) (*RequestedNodeAnyOf, error) {
	ev := RequestedNodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestedNodeAnyOf: valid values are %v", v, AllowedRequestedNodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestedNodeAnyOf) IsValid() bool {
	for _, existing := range AllowedRequestedNodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequestedNode_anyOf value
func (v RequestedNodeAnyOf) Ptr() *RequestedNodeAnyOf {
	return &v
}

type NullableRequestedNodeAnyOf struct {
	value *RequestedNodeAnyOf
	isSet bool
}

func (v NullableRequestedNodeAnyOf) Get() *RequestedNodeAnyOf {
	return v.value
}

func (v *NullableRequestedNodeAnyOf) Set(val *RequestedNodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestedNodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestedNodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestedNodeAnyOf(val *RequestedNodeAnyOf) *NullableRequestedNodeAnyOf {
	return &NullableRequestedNodeAnyOf{value: val, isSet: true}
}

func (v NullableRequestedNodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestedNodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

