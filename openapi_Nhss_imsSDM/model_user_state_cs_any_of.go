/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
	"fmt"
)

// UserStateCsAnyOf the model 'UserStateCsAnyOf'
type UserStateCsAnyOf string

// List of UserStateCs_anyOf
const (
	CAMEL_BUSY UserStateCsAnyOf = "CAMEL_BUSY"
	NETWORK_DETERMINED_NOT_REACHABLE UserStateCsAnyOf = "NETWORK_DETERMINED_NOT_REACHABLE"
	ASSUMED_IDLE UserStateCsAnyOf = "ASSUMED_IDLE"
	NOT_PROVIDED_FROM_VLR UserStateCsAnyOf = "NOT_PROVIDED_FROM_VLR"
)

// All allowed values of UserStateCsAnyOf enum
var AllowedUserStateCsAnyOfEnumValues = []UserStateCsAnyOf{
	"CAMEL_BUSY",
	"NETWORK_DETERMINED_NOT_REACHABLE",
	"ASSUMED_IDLE",
	"NOT_PROVIDED_FROM_VLR",
}

func (v *UserStateCsAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserStateCsAnyOf(value)
	for _, existing := range AllowedUserStateCsAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserStateCsAnyOf", value)
}

// NewUserStateCsAnyOfFromValue returns a pointer to a valid UserStateCsAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserStateCsAnyOfFromValue(v string) (*UserStateCsAnyOf, error) {
	ev := UserStateCsAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserStateCsAnyOf: valid values are %v", v, AllowedUserStateCsAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserStateCsAnyOf) IsValid() bool {
	for _, existing := range AllowedUserStateCsAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserStateCs_anyOf value
func (v UserStateCsAnyOf) Ptr() *UserStateCsAnyOf {
	return &v
}

type NullableUserStateCsAnyOf struct {
	value *UserStateCsAnyOf
	isSet bool
}

func (v NullableUserStateCsAnyOf) Get() *UserStateCsAnyOf {
	return v.value
}

func (v *NullableUserStateCsAnyOf) Set(val *UserStateCsAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStateCsAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStateCsAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStateCsAnyOf(val *UserStateCsAnyOf) *NullableUserStateCsAnyOf {
	return &NullableUserStateCsAnyOf{value: val, isSet: true}
}

func (v NullableUserStateCsAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStateCsAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

