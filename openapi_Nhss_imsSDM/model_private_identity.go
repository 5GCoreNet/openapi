/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"encoding/json"
)

// checks if the PrivateIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateIdentity{}

// PrivateIdentity IMS Private Identity and its identity type (IMPI or IMSI)
type PrivateIdentity struct {
	// String containing a Private User Identity or a Private Service Identity
	PrivateIdentity     string              `json:"privateIdentity"`
	PrivateIdentityType PrivateIdentityType `json:"privateIdentityType"`
}

// NewPrivateIdentity instantiates a new PrivateIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateIdentity(privateIdentity string, privateIdentityType PrivateIdentityType) *PrivateIdentity {
	this := PrivateIdentity{}
	this.PrivateIdentity = privateIdentity
	this.PrivateIdentityType = privateIdentityType
	return &this
}

// NewPrivateIdentityWithDefaults instantiates a new PrivateIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateIdentityWithDefaults() *PrivateIdentity {
	this := PrivateIdentity{}
	return &this
}

// GetPrivateIdentity returns the PrivateIdentity field value
func (o *PrivateIdentity) GetPrivateIdentity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateIdentity
}

// GetPrivateIdentityOk returns a tuple with the PrivateIdentity field value
// and a boolean to check if the value has been set.
func (o *PrivateIdentity) GetPrivateIdentityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateIdentity, true
}

// SetPrivateIdentity sets field value
func (o *PrivateIdentity) SetPrivateIdentity(v string) {
	o.PrivateIdentity = v
}

// GetPrivateIdentityType returns the PrivateIdentityType field value
func (o *PrivateIdentity) GetPrivateIdentityType() PrivateIdentityType {
	if o == nil {
		var ret PrivateIdentityType
		return ret
	}

	return o.PrivateIdentityType
}

// GetPrivateIdentityTypeOk returns a tuple with the PrivateIdentityType field value
// and a boolean to check if the value has been set.
func (o *PrivateIdentity) GetPrivateIdentityTypeOk() (*PrivateIdentityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateIdentityType, true
}

// SetPrivateIdentityType sets field value
func (o *PrivateIdentity) SetPrivateIdentityType(v PrivateIdentityType) {
	o.PrivateIdentityType = v
}

func (o PrivateIdentity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["privateIdentity"] = o.PrivateIdentity
	toSerialize["privateIdentityType"] = o.PrivateIdentityType
	return toSerialize, nil
}

type NullablePrivateIdentity struct {
	value *PrivateIdentity
	isSet bool
}

func (v NullablePrivateIdentity) Get() *PrivateIdentity {
	return v.value
}

func (v *NullablePrivateIdentity) Set(val *PrivateIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateIdentity(val *PrivateIdentity) *NullablePrivateIdentity {
	return &NullablePrivateIdentity{value: val, isSet: true}
}

func (v NullablePrivateIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
