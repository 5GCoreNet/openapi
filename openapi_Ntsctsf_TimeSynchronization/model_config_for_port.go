/*
Ntsctsf_TimeSynchronization Service API

TSCTSF Time Synchronization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ntsctsf_TimeSynchronization

import (
	"encoding/json"
	"fmt"
)

// ConfigForPort - Contains configuration for each port.
type ConfigForPort struct {
	Interface *interface{}
}

// interface{}AsConfigForPort is a convenience function that returns interface{} wrapped in ConfigForPort
func InterfaceAsConfigForPort(v *interface{}) ConfigForPort {
	return ConfigForPort{
		Interface: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConfigForPort) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Interface
	err = newStrictDecoder(data).Decode(&dst.Interface)
	if err == nil {
		jsonInterface, _ := json.Marshal(dst.Interface)
		if string(jsonInterface) == "{}" { // empty struct
			dst.Interface = nil
		} else {
			match++
		}
	} else {
		dst.Interface = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Interface = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ConfigForPort)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ConfigForPort)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConfigForPort) MarshalJSON() ([]byte, error) {
	if src.Interface != nil {
		return json.Marshal(&src.Interface)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConfigForPort) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Interface != nil {
		return obj.Interface
	}

	// all schemas are nil
	return nil
}

type NullableConfigForPort struct {
	value *ConfigForPort
	isSet bool
}

func (v NullableConfigForPort) Get() *ConfigForPort {
	return v.value
}

func (v *NullableConfigForPort) Set(val *ConfigForPort) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigForPort) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigForPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigForPort(val *ConfigForPort) *NullableConfigForPort {
	return &NullableConfigForPort{value: val, isSet: true}
}

func (v NullableConfigForPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigForPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


