/*
Nudm_UECM

Nudm Context Management Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudm_UECM

import (
	"encoding/json"
	"time"
)

// checks if the NwdafRegistration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NwdafRegistration{}

// NwdafRegistration The complete set of information relevant to an NWDAF serving the UE
type NwdafRegistration struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NwdafInstanceId string `json:"nwdafInstanceId"`
	AnalyticsIds []EventId `json:"analyticsIds"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	NwdafSetId *string `json:"nwdafSetId,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	RegistrationTime *time.Time `json:"registrationTime,omitempty"`
	ContextInfo *ContextInfo `json:"contextInfo,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	ResetIds []string `json:"resetIds,omitempty"`
}

// NewNwdafRegistration instantiates a new NwdafRegistration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNwdafRegistration(nwdafInstanceId string, analyticsIds []EventId) *NwdafRegistration {
	this := NwdafRegistration{}
	this.NwdafInstanceId = nwdafInstanceId
	this.AnalyticsIds = analyticsIds
	return &this
}

// NewNwdafRegistrationWithDefaults instantiates a new NwdafRegistration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNwdafRegistrationWithDefaults() *NwdafRegistration {
	this := NwdafRegistration{}
	return &this
}

// GetNwdafInstanceId returns the NwdafInstanceId field value
func (o *NwdafRegistration) GetNwdafInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NwdafInstanceId
}

// GetNwdafInstanceIdOk returns a tuple with the NwdafInstanceId field value
// and a boolean to check if the value has been set.
func (o *NwdafRegistration) GetNwdafInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NwdafInstanceId, true
}

// SetNwdafInstanceId sets field value
func (o *NwdafRegistration) SetNwdafInstanceId(v string) {
	o.NwdafInstanceId = v
}

// GetAnalyticsIds returns the AnalyticsIds field value
func (o *NwdafRegistration) GetAnalyticsIds() []EventId {
	if o == nil {
		var ret []EventId
		return ret
	}

	return o.AnalyticsIds
}

// GetAnalyticsIdsOk returns a tuple with the AnalyticsIds field value
// and a boolean to check if the value has been set.
func (o *NwdafRegistration) GetAnalyticsIdsOk() ([]EventId, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnalyticsIds, true
}

// SetAnalyticsIds sets field value
func (o *NwdafRegistration) SetAnalyticsIds(v []EventId) {
	o.AnalyticsIds = v
}

// GetNwdafSetId returns the NwdafSetId field value if set, zero value otherwise.
func (o *NwdafRegistration) GetNwdafSetId() string {
	if o == nil || IsNil(o.NwdafSetId) {
		var ret string
		return ret
	}
	return *o.NwdafSetId
}

// GetNwdafSetIdOk returns a tuple with the NwdafSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NwdafRegistration) GetNwdafSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.NwdafSetId) {
		return nil, false
	}
	return o.NwdafSetId, true
}

// HasNwdafSetId returns a boolean if a field has been set.
func (o *NwdafRegistration) HasNwdafSetId() bool {
	if o != nil && !IsNil(o.NwdafSetId) {
		return true
	}

	return false
}

// SetNwdafSetId gets a reference to the given string and assigns it to the NwdafSetId field.
func (o *NwdafRegistration) SetNwdafSetId(v string) {
	o.NwdafSetId = &v
}

// GetRegistrationTime returns the RegistrationTime field value if set, zero value otherwise.
func (o *NwdafRegistration) GetRegistrationTime() time.Time {
	if o == nil || IsNil(o.RegistrationTime) {
		var ret time.Time
		return ret
	}
	return *o.RegistrationTime
}

// GetRegistrationTimeOk returns a tuple with the RegistrationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NwdafRegistration) GetRegistrationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RegistrationTime) {
		return nil, false
	}
	return o.RegistrationTime, true
}

// HasRegistrationTime returns a boolean if a field has been set.
func (o *NwdafRegistration) HasRegistrationTime() bool {
	if o != nil && !IsNil(o.RegistrationTime) {
		return true
	}

	return false
}

// SetRegistrationTime gets a reference to the given time.Time and assigns it to the RegistrationTime field.
func (o *NwdafRegistration) SetRegistrationTime(v time.Time) {
	o.RegistrationTime = &v
}

// GetContextInfo returns the ContextInfo field value if set, zero value otherwise.
func (o *NwdafRegistration) GetContextInfo() ContextInfo {
	if o == nil || IsNil(o.ContextInfo) {
		var ret ContextInfo
		return ret
	}
	return *o.ContextInfo
}

// GetContextInfoOk returns a tuple with the ContextInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NwdafRegistration) GetContextInfoOk() (*ContextInfo, bool) {
	if o == nil || IsNil(o.ContextInfo) {
		return nil, false
	}
	return o.ContextInfo, true
}

// HasContextInfo returns a boolean if a field has been set.
func (o *NwdafRegistration) HasContextInfo() bool {
	if o != nil && !IsNil(o.ContextInfo) {
		return true
	}

	return false
}

// SetContextInfo gets a reference to the given ContextInfo and assigns it to the ContextInfo field.
func (o *NwdafRegistration) SetContextInfo(v ContextInfo) {
	o.ContextInfo = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *NwdafRegistration) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NwdafRegistration) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *NwdafRegistration) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *NwdafRegistration) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetResetIds returns the ResetIds field value if set, zero value otherwise.
func (o *NwdafRegistration) GetResetIds() []string {
	if o == nil || IsNil(o.ResetIds) {
		var ret []string
		return ret
	}
	return o.ResetIds
}

// GetResetIdsOk returns a tuple with the ResetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NwdafRegistration) GetResetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ResetIds) {
		return nil, false
	}
	return o.ResetIds, true
}

// HasResetIds returns a boolean if a field has been set.
func (o *NwdafRegistration) HasResetIds() bool {
	if o != nil && !IsNil(o.ResetIds) {
		return true
	}

	return false
}

// SetResetIds gets a reference to the given []string and assigns it to the ResetIds field.
func (o *NwdafRegistration) SetResetIds(v []string) {
	o.ResetIds = v
}

func (o NwdafRegistration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NwdafRegistration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nwdafInstanceId"] = o.NwdafInstanceId
	toSerialize["analyticsIds"] = o.AnalyticsIds
	if !IsNil(o.NwdafSetId) {
		toSerialize["nwdafSetId"] = o.NwdafSetId
	}
	if !IsNil(o.RegistrationTime) {
		toSerialize["registrationTime"] = o.RegistrationTime
	}
	if !IsNil(o.ContextInfo) {
		toSerialize["contextInfo"] = o.ContextInfo
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !IsNil(o.ResetIds) {
		toSerialize["resetIds"] = o.ResetIds
	}
	return toSerialize, nil
}

type NullableNwdafRegistration struct {
	value *NwdafRegistration
	isSet bool
}

func (v NullableNwdafRegistration) Get() *NwdafRegistration {
	return v.value
}

func (v *NullableNwdafRegistration) Set(val *NwdafRegistration) {
	v.value = val
	v.isSet = true
}

func (v NullableNwdafRegistration) IsSet() bool {
	return v.isSet
}

func (v *NullableNwdafRegistration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNwdafRegistration(val *NwdafRegistration) *NullableNwdafRegistration {
	return &NullableNwdafRegistration{value: val, isSet: true}
}

func (v NullableNwdafRegistration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNwdafRegistration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


