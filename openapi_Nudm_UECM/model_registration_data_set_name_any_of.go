/*
Nudm_UECM

Nudm Context Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudm_UECM

import (
	"encoding/json"
	"fmt"
)

// RegistrationDataSetNameAnyOf the model 'RegistrationDataSetNameAnyOf'
type RegistrationDataSetNameAnyOf string

// List of RegistrationDataSetName_anyOf
const (
	AMF_3_GPP RegistrationDataSetNameAnyOf = "AMF_3GPP"
	AMF_NON_3_GPP RegistrationDataSetNameAnyOf = "AMF_NON_3GPP"
	SMF_PDU_SESSIONS RegistrationDataSetNameAnyOf = "SMF_PDU_SESSIONS"
	SMSF_3_GPP RegistrationDataSetNameAnyOf = "SMSF_3GPP"
	SMSF_NON_3_GPP RegistrationDataSetNameAnyOf = "SMSF_NON_3GPP"
	IP_SM_GW RegistrationDataSetNameAnyOf = "IP_SM_GW"
	NWDAF RegistrationDataSetNameAnyOf = "NWDAF"
)

// All allowed values of RegistrationDataSetNameAnyOf enum
var AllowedRegistrationDataSetNameAnyOfEnumValues = []RegistrationDataSetNameAnyOf{
	"AMF_3GPP",
	"AMF_NON_3GPP",
	"SMF_PDU_SESSIONS",
	"SMSF_3GPP",
	"SMSF_NON_3GPP",
	"IP_SM_GW",
	"NWDAF",
}

func (v *RegistrationDataSetNameAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegistrationDataSetNameAnyOf(value)
	for _, existing := range AllowedRegistrationDataSetNameAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegistrationDataSetNameAnyOf", value)
}

// NewRegistrationDataSetNameAnyOfFromValue returns a pointer to a valid RegistrationDataSetNameAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegistrationDataSetNameAnyOfFromValue(v string) (*RegistrationDataSetNameAnyOf, error) {
	ev := RegistrationDataSetNameAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegistrationDataSetNameAnyOf: valid values are %v", v, AllowedRegistrationDataSetNameAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegistrationDataSetNameAnyOf) IsValid() bool {
	for _, existing := range AllowedRegistrationDataSetNameAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegistrationDataSetName_anyOf value
func (v RegistrationDataSetNameAnyOf) Ptr() *RegistrationDataSetNameAnyOf {
	return &v
}

type NullableRegistrationDataSetNameAnyOf struct {
	value *RegistrationDataSetNameAnyOf
	isSet bool
}

func (v NullableRegistrationDataSetNameAnyOf) Get() *RegistrationDataSetNameAnyOf {
	return v.value
}

func (v *NullableRegistrationDataSetNameAnyOf) Set(val *RegistrationDataSetNameAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrationDataSetNameAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrationDataSetNameAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrationDataSetNameAnyOf(val *RegistrationDataSetNameAnyOf) *NullableRegistrationDataSetNameAnyOf {
	return &NullableRegistrationDataSetNameAnyOf{value: val, isSet: true}
}

func (v NullableRegistrationDataSetNameAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrationDataSetNameAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

