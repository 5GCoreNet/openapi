/*
LMF Location

LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nlmf_Location

import (
	"encoding/json"
)

// checks if the EventReportMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventReportMessage{}

// EventReportMessage Indicates an event report message.
type EventReportMessage struct {
	EventClass   EventClass      `json:"eventClass"`
	EventContent RefToBinaryData `json:"eventContent"`
}

// NewEventReportMessage instantiates a new EventReportMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventReportMessage(eventClass EventClass, eventContent RefToBinaryData) *EventReportMessage {
	this := EventReportMessage{}
	this.EventClass = eventClass
	this.EventContent = eventContent
	return &this
}

// NewEventReportMessageWithDefaults instantiates a new EventReportMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventReportMessageWithDefaults() *EventReportMessage {
	this := EventReportMessage{}
	return &this
}

// GetEventClass returns the EventClass field value
func (o *EventReportMessage) GetEventClass() EventClass {
	if o == nil {
		var ret EventClass
		return ret
	}

	return o.EventClass
}

// GetEventClassOk returns a tuple with the EventClass field value
// and a boolean to check if the value has been set.
func (o *EventReportMessage) GetEventClassOk() (*EventClass, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventClass, true
}

// SetEventClass sets field value
func (o *EventReportMessage) SetEventClass(v EventClass) {
	o.EventClass = v
}

// GetEventContent returns the EventContent field value
func (o *EventReportMessage) GetEventContent() RefToBinaryData {
	if o == nil {
		var ret RefToBinaryData
		return ret
	}

	return o.EventContent
}

// GetEventContentOk returns a tuple with the EventContent field value
// and a boolean to check if the value has been set.
func (o *EventReportMessage) GetEventContentOk() (*RefToBinaryData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventContent, true
}

// SetEventContent sets field value
func (o *EventReportMessage) SetEventContent(v RefToBinaryData) {
	o.EventContent = v
}

func (o EventReportMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventReportMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventClass"] = o.EventClass
	toSerialize["eventContent"] = o.EventContent
	return toSerialize, nil
}

type NullableEventReportMessage struct {
	value *EventReportMessage
	isSet bool
}

func (v NullableEventReportMessage) Get() *EventReportMessage {
	return v.value
}

func (v *NullableEventReportMessage) Set(val *EventReportMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableEventReportMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableEventReportMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventReportMessage(val *EventReportMessage) *NullableEventReportMessage {
	return &NullableEventReportMessage{value: val, isSet: true}
}

func (v NullableEventReportMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventReportMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
