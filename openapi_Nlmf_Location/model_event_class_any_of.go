/*
LMF Location

LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nlmf_Location

import (
	"encoding/json"
	"fmt"
)

// EventClassAnyOf the model 'EventClassAnyOf'
type EventClassAnyOf string

// List of EventClass_anyOf
const (
	SUPPLEMENTARY_SERVICES EventClassAnyOf = "SUPPLEMENTARY_SERVICES"
)

// All allowed values of EventClassAnyOf enum
var AllowedEventClassAnyOfEnumValues = []EventClassAnyOf{
	"SUPPLEMENTARY_SERVICES",
}

func (v *EventClassAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventClassAnyOf(value)
	for _, existing := range AllowedEventClassAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventClassAnyOf", value)
}

// NewEventClassAnyOfFromValue returns a pointer to a valid EventClassAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventClassAnyOfFromValue(v string) (*EventClassAnyOf, error) {
	ev := EventClassAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventClassAnyOf: valid values are %v", v, AllowedEventClassAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventClassAnyOf) IsValid() bool {
	for _, existing := range AllowedEventClassAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventClass_anyOf value
func (v EventClassAnyOf) Ptr() *EventClassAnyOf {
	return &v
}

type NullableEventClassAnyOf struct {
	value *EventClassAnyOf
	isSet bool
}

func (v NullableEventClassAnyOf) Get() *EventClassAnyOf {
	return v.value
}

func (v *NullableEventClassAnyOf) Set(val *EventClassAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEventClassAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEventClassAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventClassAnyOf(val *EventClassAnyOf) *NullableEventClassAnyOf {
	return &NullableEventClassAnyOf{value: val, isSet: true}
}

func (v NullableEventClassAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventClassAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

