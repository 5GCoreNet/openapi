/*
LMF Location

LMF Location Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nlmf_Location

import (
	"encoding/json"
	"time"
)

// checks if the InputData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputData{}

// InputData Information within Determine Location Request.
type InputData struct {
	ExternalClientType *ExternalClientType `json:"externalClientType,omitempty"`
	// LCS Correlation ID.
	CorrelationID *string `json:"correlationID,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	AmfId              *string              `json:"amfId,omitempty"`
	LocationQoS        *LocationQoS         `json:"locationQoS,omitempty"`
	SupportedGADShapes []SupportedGADShapes `json:"supportedGADShapes,omitempty"`
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.
	Supi *string `json:"supi,omitempty"`
	// String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.
	Pei *string `json:"pei,omitempty"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.
	Gpsi              *string            `json:"gpsi,omitempty"`
	Ecgi              *Ecgi              `json:"ecgi,omitempty"`
	EcgiOnSecondNode  *Ecgi              `json:"ecgiOnSecondNode,omitempty"`
	Ncgi              *Ncgi              `json:"ncgi,omitempty"`
	NcgiOnSecondNode  *Ncgi              `json:"ncgiOnSecondNode,omitempty"`
	Priority          *LcsPriority       `json:"priority,omitempty"`
	VelocityRequested *VelocityRequested `json:"velocityRequested,omitempty"`
	UeLcsCap          *UeLcsCapability   `json:"ueLcsCap,omitempty"`
	// LCS service type.
	LcsServiceType *int32   `json:"lcsServiceType,omitempty"`
	LdrType        *LdrType `json:"ldrType,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	HgmlcCallBackURI *string `json:"hgmlcCallBackURI,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	VgmlcAddress *string `json:"vgmlcAddress,omitempty"`
	// LDR Reference.
	LdrReference          *string                          `json:"ldrReference,omitempty"`
	PeriodicEventInfo     *PeriodicEventInfo               `json:"periodicEventInfo,omitempty"`
	AreaEventInfo         *AreaEventInfo                   `json:"areaEventInfo,omitempty"`
	MotionEventInfo       *MotionEventInfo                 `json:"motionEventInfo,omitempty"`
	ReportingAccessTypes  []ReportingAccessType            `json:"reportingAccessTypes,omitempty"`
	UeConnectivityStates  *UeConnectivityState             `json:"ueConnectivityStates,omitempty"`
	UeLocationServiceInd  *UeLocationServiceInd            `json:"ueLocationServiceInd,omitempty"`
	MoAssistanceDataTypes *LcsBroadcastAssistanceTypesData `json:"moAssistanceDataTypes,omitempty"`
	LppMessage            *RefToBinaryData                 `json:"lppMessage,omitempty"`
	// Indicates the lpp message extension.
	LppMessageExt []RefToBinaryData `json:"lppMessageExt,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	// Positioning capabilities supported by the UE. A string encoding the \"ProvideCapabilities-r9-IEs\" IE as specified in clause 6.3 of 3GPP TS 37.355 (start from octet 1).
	UePositioningCap *string `json:"uePositioningCap,omitempty"`
	TnapId           *TnapId `json:"tnapId,omitempty"`
	TwapId           *TwapId `json:"twapId,omitempty"`
	UeCountryDetInd  *bool   `json:"ueCountryDetInd,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	ScheduledLocTime *time.Time `json:"scheduledLocTime,omitempty"`
	ReliableLocReq   *bool      `json:"reliableLocReq,omitempty"`
}

// NewInputData instantiates a new InputData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputData() *InputData {
	this := InputData{}
	var reliableLocReq bool = false
	this.ReliableLocReq = &reliableLocReq
	return &this
}

// NewInputDataWithDefaults instantiates a new InputData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputDataWithDefaults() *InputData {
	this := InputData{}
	var reliableLocReq bool = false
	this.ReliableLocReq = &reliableLocReq
	return &this
}

// GetExternalClientType returns the ExternalClientType field value if set, zero value otherwise.
func (o *InputData) GetExternalClientType() ExternalClientType {
	if o == nil || IsNil(o.ExternalClientType) {
		var ret ExternalClientType
		return ret
	}
	return *o.ExternalClientType
}

// GetExternalClientTypeOk returns a tuple with the ExternalClientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetExternalClientTypeOk() (*ExternalClientType, bool) {
	if o == nil || IsNil(o.ExternalClientType) {
		return nil, false
	}
	return o.ExternalClientType, true
}

// HasExternalClientType returns a boolean if a field has been set.
func (o *InputData) HasExternalClientType() bool {
	if o != nil && !IsNil(o.ExternalClientType) {
		return true
	}

	return false
}

// SetExternalClientType gets a reference to the given ExternalClientType and assigns it to the ExternalClientType field.
func (o *InputData) SetExternalClientType(v ExternalClientType) {
	o.ExternalClientType = &v
}

// GetCorrelationID returns the CorrelationID field value if set, zero value otherwise.
func (o *InputData) GetCorrelationID() string {
	if o == nil || IsNil(o.CorrelationID) {
		var ret string
		return ret
	}
	return *o.CorrelationID
}

// GetCorrelationIDOk returns a tuple with the CorrelationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetCorrelationIDOk() (*string, bool) {
	if o == nil || IsNil(o.CorrelationID) {
		return nil, false
	}
	return o.CorrelationID, true
}

// HasCorrelationID returns a boolean if a field has been set.
func (o *InputData) HasCorrelationID() bool {
	if o != nil && !IsNil(o.CorrelationID) {
		return true
	}

	return false
}

// SetCorrelationID gets a reference to the given string and assigns it to the CorrelationID field.
func (o *InputData) SetCorrelationID(v string) {
	o.CorrelationID = &v
}

// GetAmfId returns the AmfId field value if set, zero value otherwise.
func (o *InputData) GetAmfId() string {
	if o == nil || IsNil(o.AmfId) {
		var ret string
		return ret
	}
	return *o.AmfId
}

// GetAmfIdOk returns a tuple with the AmfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetAmfIdOk() (*string, bool) {
	if o == nil || IsNil(o.AmfId) {
		return nil, false
	}
	return o.AmfId, true
}

// HasAmfId returns a boolean if a field has been set.
func (o *InputData) HasAmfId() bool {
	if o != nil && !IsNil(o.AmfId) {
		return true
	}

	return false
}

// SetAmfId gets a reference to the given string and assigns it to the AmfId field.
func (o *InputData) SetAmfId(v string) {
	o.AmfId = &v
}

// GetLocationQoS returns the LocationQoS field value if set, zero value otherwise.
func (o *InputData) GetLocationQoS() LocationQoS {
	if o == nil || IsNil(o.LocationQoS) {
		var ret LocationQoS
		return ret
	}
	return *o.LocationQoS
}

// GetLocationQoSOk returns a tuple with the LocationQoS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetLocationQoSOk() (*LocationQoS, bool) {
	if o == nil || IsNil(o.LocationQoS) {
		return nil, false
	}
	return o.LocationQoS, true
}

// HasLocationQoS returns a boolean if a field has been set.
func (o *InputData) HasLocationQoS() bool {
	if o != nil && !IsNil(o.LocationQoS) {
		return true
	}

	return false
}

// SetLocationQoS gets a reference to the given LocationQoS and assigns it to the LocationQoS field.
func (o *InputData) SetLocationQoS(v LocationQoS) {
	o.LocationQoS = &v
}

// GetSupportedGADShapes returns the SupportedGADShapes field value if set, zero value otherwise.
func (o *InputData) GetSupportedGADShapes() []SupportedGADShapes {
	if o == nil || IsNil(o.SupportedGADShapes) {
		var ret []SupportedGADShapes
		return ret
	}
	return o.SupportedGADShapes
}

// GetSupportedGADShapesOk returns a tuple with the SupportedGADShapes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetSupportedGADShapesOk() ([]SupportedGADShapes, bool) {
	if o == nil || IsNil(o.SupportedGADShapes) {
		return nil, false
	}
	return o.SupportedGADShapes, true
}

// HasSupportedGADShapes returns a boolean if a field has been set.
func (o *InputData) HasSupportedGADShapes() bool {
	if o != nil && !IsNil(o.SupportedGADShapes) {
		return true
	}

	return false
}

// SetSupportedGADShapes gets a reference to the given []SupportedGADShapes and assigns it to the SupportedGADShapes field.
func (o *InputData) SetSupportedGADShapes(v []SupportedGADShapes) {
	o.SupportedGADShapes = v
}

// GetSupi returns the Supi field value if set, zero value otherwise.
func (o *InputData) GetSupi() string {
	if o == nil || IsNil(o.Supi) {
		var ret string
		return ret
	}
	return *o.Supi
}

// GetSupiOk returns a tuple with the Supi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetSupiOk() (*string, bool) {
	if o == nil || IsNil(o.Supi) {
		return nil, false
	}
	return o.Supi, true
}

// HasSupi returns a boolean if a field has been set.
func (o *InputData) HasSupi() bool {
	if o != nil && !IsNil(o.Supi) {
		return true
	}

	return false
}

// SetSupi gets a reference to the given string and assigns it to the Supi field.
func (o *InputData) SetSupi(v string) {
	o.Supi = &v
}

// GetPei returns the Pei field value if set, zero value otherwise.
func (o *InputData) GetPei() string {
	if o == nil || IsNil(o.Pei) {
		var ret string
		return ret
	}
	return *o.Pei
}

// GetPeiOk returns a tuple with the Pei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetPeiOk() (*string, bool) {
	if o == nil || IsNil(o.Pei) {
		return nil, false
	}
	return o.Pei, true
}

// HasPei returns a boolean if a field has been set.
func (o *InputData) HasPei() bool {
	if o != nil && !IsNil(o.Pei) {
		return true
	}

	return false
}

// SetPei gets a reference to the given string and assigns it to the Pei field.
func (o *InputData) SetPei(v string) {
	o.Pei = &v
}

// GetGpsi returns the Gpsi field value if set, zero value otherwise.
func (o *InputData) GetGpsi() string {
	if o == nil || IsNil(o.Gpsi) {
		var ret string
		return ret
	}
	return *o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetGpsiOk() (*string, bool) {
	if o == nil || IsNil(o.Gpsi) {
		return nil, false
	}
	return o.Gpsi, true
}

// HasGpsi returns a boolean if a field has been set.
func (o *InputData) HasGpsi() bool {
	if o != nil && !IsNil(o.Gpsi) {
		return true
	}

	return false
}

// SetGpsi gets a reference to the given string and assigns it to the Gpsi field.
func (o *InputData) SetGpsi(v string) {
	o.Gpsi = &v
}

// GetEcgi returns the Ecgi field value if set, zero value otherwise.
func (o *InputData) GetEcgi() Ecgi {
	if o == nil || IsNil(o.Ecgi) {
		var ret Ecgi
		return ret
	}
	return *o.Ecgi
}

// GetEcgiOk returns a tuple with the Ecgi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetEcgiOk() (*Ecgi, bool) {
	if o == nil || IsNil(o.Ecgi) {
		return nil, false
	}
	return o.Ecgi, true
}

// HasEcgi returns a boolean if a field has been set.
func (o *InputData) HasEcgi() bool {
	if o != nil && !IsNil(o.Ecgi) {
		return true
	}

	return false
}

// SetEcgi gets a reference to the given Ecgi and assigns it to the Ecgi field.
func (o *InputData) SetEcgi(v Ecgi) {
	o.Ecgi = &v
}

// GetEcgiOnSecondNode returns the EcgiOnSecondNode field value if set, zero value otherwise.
func (o *InputData) GetEcgiOnSecondNode() Ecgi {
	if o == nil || IsNil(o.EcgiOnSecondNode) {
		var ret Ecgi
		return ret
	}
	return *o.EcgiOnSecondNode
}

// GetEcgiOnSecondNodeOk returns a tuple with the EcgiOnSecondNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetEcgiOnSecondNodeOk() (*Ecgi, bool) {
	if o == nil || IsNil(o.EcgiOnSecondNode) {
		return nil, false
	}
	return o.EcgiOnSecondNode, true
}

// HasEcgiOnSecondNode returns a boolean if a field has been set.
func (o *InputData) HasEcgiOnSecondNode() bool {
	if o != nil && !IsNil(o.EcgiOnSecondNode) {
		return true
	}

	return false
}

// SetEcgiOnSecondNode gets a reference to the given Ecgi and assigns it to the EcgiOnSecondNode field.
func (o *InputData) SetEcgiOnSecondNode(v Ecgi) {
	o.EcgiOnSecondNode = &v
}

// GetNcgi returns the Ncgi field value if set, zero value otherwise.
func (o *InputData) GetNcgi() Ncgi {
	if o == nil || IsNil(o.Ncgi) {
		var ret Ncgi
		return ret
	}
	return *o.Ncgi
}

// GetNcgiOk returns a tuple with the Ncgi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetNcgiOk() (*Ncgi, bool) {
	if o == nil || IsNil(o.Ncgi) {
		return nil, false
	}
	return o.Ncgi, true
}

// HasNcgi returns a boolean if a field has been set.
func (o *InputData) HasNcgi() bool {
	if o != nil && !IsNil(o.Ncgi) {
		return true
	}

	return false
}

// SetNcgi gets a reference to the given Ncgi and assigns it to the Ncgi field.
func (o *InputData) SetNcgi(v Ncgi) {
	o.Ncgi = &v
}

// GetNcgiOnSecondNode returns the NcgiOnSecondNode field value if set, zero value otherwise.
func (o *InputData) GetNcgiOnSecondNode() Ncgi {
	if o == nil || IsNil(o.NcgiOnSecondNode) {
		var ret Ncgi
		return ret
	}
	return *o.NcgiOnSecondNode
}

// GetNcgiOnSecondNodeOk returns a tuple with the NcgiOnSecondNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetNcgiOnSecondNodeOk() (*Ncgi, bool) {
	if o == nil || IsNil(o.NcgiOnSecondNode) {
		return nil, false
	}
	return o.NcgiOnSecondNode, true
}

// HasNcgiOnSecondNode returns a boolean if a field has been set.
func (o *InputData) HasNcgiOnSecondNode() bool {
	if o != nil && !IsNil(o.NcgiOnSecondNode) {
		return true
	}

	return false
}

// SetNcgiOnSecondNode gets a reference to the given Ncgi and assigns it to the NcgiOnSecondNode field.
func (o *InputData) SetNcgiOnSecondNode(v Ncgi) {
	o.NcgiOnSecondNode = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *InputData) GetPriority() LcsPriority {
	if o == nil || IsNil(o.Priority) {
		var ret LcsPriority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetPriorityOk() (*LcsPriority, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *InputData) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given LcsPriority and assigns it to the Priority field.
func (o *InputData) SetPriority(v LcsPriority) {
	o.Priority = &v
}

// GetVelocityRequested returns the VelocityRequested field value if set, zero value otherwise.
func (o *InputData) GetVelocityRequested() VelocityRequested {
	if o == nil || IsNil(o.VelocityRequested) {
		var ret VelocityRequested
		return ret
	}
	return *o.VelocityRequested
}

// GetVelocityRequestedOk returns a tuple with the VelocityRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetVelocityRequestedOk() (*VelocityRequested, bool) {
	if o == nil || IsNil(o.VelocityRequested) {
		return nil, false
	}
	return o.VelocityRequested, true
}

// HasVelocityRequested returns a boolean if a field has been set.
func (o *InputData) HasVelocityRequested() bool {
	if o != nil && !IsNil(o.VelocityRequested) {
		return true
	}

	return false
}

// SetVelocityRequested gets a reference to the given VelocityRequested and assigns it to the VelocityRequested field.
func (o *InputData) SetVelocityRequested(v VelocityRequested) {
	o.VelocityRequested = &v
}

// GetUeLcsCap returns the UeLcsCap field value if set, zero value otherwise.
func (o *InputData) GetUeLcsCap() UeLcsCapability {
	if o == nil || IsNil(o.UeLcsCap) {
		var ret UeLcsCapability
		return ret
	}
	return *o.UeLcsCap
}

// GetUeLcsCapOk returns a tuple with the UeLcsCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetUeLcsCapOk() (*UeLcsCapability, bool) {
	if o == nil || IsNil(o.UeLcsCap) {
		return nil, false
	}
	return o.UeLcsCap, true
}

// HasUeLcsCap returns a boolean if a field has been set.
func (o *InputData) HasUeLcsCap() bool {
	if o != nil && !IsNil(o.UeLcsCap) {
		return true
	}

	return false
}

// SetUeLcsCap gets a reference to the given UeLcsCapability and assigns it to the UeLcsCap field.
func (o *InputData) SetUeLcsCap(v UeLcsCapability) {
	o.UeLcsCap = &v
}

// GetLcsServiceType returns the LcsServiceType field value if set, zero value otherwise.
func (o *InputData) GetLcsServiceType() int32 {
	if o == nil || IsNil(o.LcsServiceType) {
		var ret int32
		return ret
	}
	return *o.LcsServiceType
}

// GetLcsServiceTypeOk returns a tuple with the LcsServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetLcsServiceTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.LcsServiceType) {
		return nil, false
	}
	return o.LcsServiceType, true
}

// HasLcsServiceType returns a boolean if a field has been set.
func (o *InputData) HasLcsServiceType() bool {
	if o != nil && !IsNil(o.LcsServiceType) {
		return true
	}

	return false
}

// SetLcsServiceType gets a reference to the given int32 and assigns it to the LcsServiceType field.
func (o *InputData) SetLcsServiceType(v int32) {
	o.LcsServiceType = &v
}

// GetLdrType returns the LdrType field value if set, zero value otherwise.
func (o *InputData) GetLdrType() LdrType {
	if o == nil || IsNil(o.LdrType) {
		var ret LdrType
		return ret
	}
	return *o.LdrType
}

// GetLdrTypeOk returns a tuple with the LdrType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetLdrTypeOk() (*LdrType, bool) {
	if o == nil || IsNil(o.LdrType) {
		return nil, false
	}
	return o.LdrType, true
}

// HasLdrType returns a boolean if a field has been set.
func (o *InputData) HasLdrType() bool {
	if o != nil && !IsNil(o.LdrType) {
		return true
	}

	return false
}

// SetLdrType gets a reference to the given LdrType and assigns it to the LdrType field.
func (o *InputData) SetLdrType(v LdrType) {
	o.LdrType = &v
}

// GetHgmlcCallBackURI returns the HgmlcCallBackURI field value if set, zero value otherwise.
func (o *InputData) GetHgmlcCallBackURI() string {
	if o == nil || IsNil(o.HgmlcCallBackURI) {
		var ret string
		return ret
	}
	return *o.HgmlcCallBackURI
}

// GetHgmlcCallBackURIOk returns a tuple with the HgmlcCallBackURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetHgmlcCallBackURIOk() (*string, bool) {
	if o == nil || IsNil(o.HgmlcCallBackURI) {
		return nil, false
	}
	return o.HgmlcCallBackURI, true
}

// HasHgmlcCallBackURI returns a boolean if a field has been set.
func (o *InputData) HasHgmlcCallBackURI() bool {
	if o != nil && !IsNil(o.HgmlcCallBackURI) {
		return true
	}

	return false
}

// SetHgmlcCallBackURI gets a reference to the given string and assigns it to the HgmlcCallBackURI field.
func (o *InputData) SetHgmlcCallBackURI(v string) {
	o.HgmlcCallBackURI = &v
}

// GetVgmlcAddress returns the VgmlcAddress field value if set, zero value otherwise.
func (o *InputData) GetVgmlcAddress() string {
	if o == nil || IsNil(o.VgmlcAddress) {
		var ret string
		return ret
	}
	return *o.VgmlcAddress
}

// GetVgmlcAddressOk returns a tuple with the VgmlcAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetVgmlcAddressOk() (*string, bool) {
	if o == nil || IsNil(o.VgmlcAddress) {
		return nil, false
	}
	return o.VgmlcAddress, true
}

// HasVgmlcAddress returns a boolean if a field has been set.
func (o *InputData) HasVgmlcAddress() bool {
	if o != nil && !IsNil(o.VgmlcAddress) {
		return true
	}

	return false
}

// SetVgmlcAddress gets a reference to the given string and assigns it to the VgmlcAddress field.
func (o *InputData) SetVgmlcAddress(v string) {
	o.VgmlcAddress = &v
}

// GetLdrReference returns the LdrReference field value if set, zero value otherwise.
func (o *InputData) GetLdrReference() string {
	if o == nil || IsNil(o.LdrReference) {
		var ret string
		return ret
	}
	return *o.LdrReference
}

// GetLdrReferenceOk returns a tuple with the LdrReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetLdrReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.LdrReference) {
		return nil, false
	}
	return o.LdrReference, true
}

// HasLdrReference returns a boolean if a field has been set.
func (o *InputData) HasLdrReference() bool {
	if o != nil && !IsNil(o.LdrReference) {
		return true
	}

	return false
}

// SetLdrReference gets a reference to the given string and assigns it to the LdrReference field.
func (o *InputData) SetLdrReference(v string) {
	o.LdrReference = &v
}

// GetPeriodicEventInfo returns the PeriodicEventInfo field value if set, zero value otherwise.
func (o *InputData) GetPeriodicEventInfo() PeriodicEventInfo {
	if o == nil || IsNil(o.PeriodicEventInfo) {
		var ret PeriodicEventInfo
		return ret
	}
	return *o.PeriodicEventInfo
}

// GetPeriodicEventInfoOk returns a tuple with the PeriodicEventInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetPeriodicEventInfoOk() (*PeriodicEventInfo, bool) {
	if o == nil || IsNil(o.PeriodicEventInfo) {
		return nil, false
	}
	return o.PeriodicEventInfo, true
}

// HasPeriodicEventInfo returns a boolean if a field has been set.
func (o *InputData) HasPeriodicEventInfo() bool {
	if o != nil && !IsNil(o.PeriodicEventInfo) {
		return true
	}

	return false
}

// SetPeriodicEventInfo gets a reference to the given PeriodicEventInfo and assigns it to the PeriodicEventInfo field.
func (o *InputData) SetPeriodicEventInfo(v PeriodicEventInfo) {
	o.PeriodicEventInfo = &v
}

// GetAreaEventInfo returns the AreaEventInfo field value if set, zero value otherwise.
func (o *InputData) GetAreaEventInfo() AreaEventInfo {
	if o == nil || IsNil(o.AreaEventInfo) {
		var ret AreaEventInfo
		return ret
	}
	return *o.AreaEventInfo
}

// GetAreaEventInfoOk returns a tuple with the AreaEventInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetAreaEventInfoOk() (*AreaEventInfo, bool) {
	if o == nil || IsNil(o.AreaEventInfo) {
		return nil, false
	}
	return o.AreaEventInfo, true
}

// HasAreaEventInfo returns a boolean if a field has been set.
func (o *InputData) HasAreaEventInfo() bool {
	if o != nil && !IsNil(o.AreaEventInfo) {
		return true
	}

	return false
}

// SetAreaEventInfo gets a reference to the given AreaEventInfo and assigns it to the AreaEventInfo field.
func (o *InputData) SetAreaEventInfo(v AreaEventInfo) {
	o.AreaEventInfo = &v
}

// GetMotionEventInfo returns the MotionEventInfo field value if set, zero value otherwise.
func (o *InputData) GetMotionEventInfo() MotionEventInfo {
	if o == nil || IsNil(o.MotionEventInfo) {
		var ret MotionEventInfo
		return ret
	}
	return *o.MotionEventInfo
}

// GetMotionEventInfoOk returns a tuple with the MotionEventInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetMotionEventInfoOk() (*MotionEventInfo, bool) {
	if o == nil || IsNil(o.MotionEventInfo) {
		return nil, false
	}
	return o.MotionEventInfo, true
}

// HasMotionEventInfo returns a boolean if a field has been set.
func (o *InputData) HasMotionEventInfo() bool {
	if o != nil && !IsNil(o.MotionEventInfo) {
		return true
	}

	return false
}

// SetMotionEventInfo gets a reference to the given MotionEventInfo and assigns it to the MotionEventInfo field.
func (o *InputData) SetMotionEventInfo(v MotionEventInfo) {
	o.MotionEventInfo = &v
}

// GetReportingAccessTypes returns the ReportingAccessTypes field value if set, zero value otherwise.
func (o *InputData) GetReportingAccessTypes() []ReportingAccessType {
	if o == nil || IsNil(o.ReportingAccessTypes) {
		var ret []ReportingAccessType
		return ret
	}
	return o.ReportingAccessTypes
}

// GetReportingAccessTypesOk returns a tuple with the ReportingAccessTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetReportingAccessTypesOk() ([]ReportingAccessType, bool) {
	if o == nil || IsNil(o.ReportingAccessTypes) {
		return nil, false
	}
	return o.ReportingAccessTypes, true
}

// HasReportingAccessTypes returns a boolean if a field has been set.
func (o *InputData) HasReportingAccessTypes() bool {
	if o != nil && !IsNil(o.ReportingAccessTypes) {
		return true
	}

	return false
}

// SetReportingAccessTypes gets a reference to the given []ReportingAccessType and assigns it to the ReportingAccessTypes field.
func (o *InputData) SetReportingAccessTypes(v []ReportingAccessType) {
	o.ReportingAccessTypes = v
}

// GetUeConnectivityStates returns the UeConnectivityStates field value if set, zero value otherwise.
func (o *InputData) GetUeConnectivityStates() UeConnectivityState {
	if o == nil || IsNil(o.UeConnectivityStates) {
		var ret UeConnectivityState
		return ret
	}
	return *o.UeConnectivityStates
}

// GetUeConnectivityStatesOk returns a tuple with the UeConnectivityStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetUeConnectivityStatesOk() (*UeConnectivityState, bool) {
	if o == nil || IsNil(o.UeConnectivityStates) {
		return nil, false
	}
	return o.UeConnectivityStates, true
}

// HasUeConnectivityStates returns a boolean if a field has been set.
func (o *InputData) HasUeConnectivityStates() bool {
	if o != nil && !IsNil(o.UeConnectivityStates) {
		return true
	}

	return false
}

// SetUeConnectivityStates gets a reference to the given UeConnectivityState and assigns it to the UeConnectivityStates field.
func (o *InputData) SetUeConnectivityStates(v UeConnectivityState) {
	o.UeConnectivityStates = &v
}

// GetUeLocationServiceInd returns the UeLocationServiceInd field value if set, zero value otherwise.
func (o *InputData) GetUeLocationServiceInd() UeLocationServiceInd {
	if o == nil || IsNil(o.UeLocationServiceInd) {
		var ret UeLocationServiceInd
		return ret
	}
	return *o.UeLocationServiceInd
}

// GetUeLocationServiceIndOk returns a tuple with the UeLocationServiceInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetUeLocationServiceIndOk() (*UeLocationServiceInd, bool) {
	if o == nil || IsNil(o.UeLocationServiceInd) {
		return nil, false
	}
	return o.UeLocationServiceInd, true
}

// HasUeLocationServiceInd returns a boolean if a field has been set.
func (o *InputData) HasUeLocationServiceInd() bool {
	if o != nil && !IsNil(o.UeLocationServiceInd) {
		return true
	}

	return false
}

// SetUeLocationServiceInd gets a reference to the given UeLocationServiceInd and assigns it to the UeLocationServiceInd field.
func (o *InputData) SetUeLocationServiceInd(v UeLocationServiceInd) {
	o.UeLocationServiceInd = &v
}

// GetMoAssistanceDataTypes returns the MoAssistanceDataTypes field value if set, zero value otherwise.
func (o *InputData) GetMoAssistanceDataTypes() LcsBroadcastAssistanceTypesData {
	if o == nil || IsNil(o.MoAssistanceDataTypes) {
		var ret LcsBroadcastAssistanceTypesData
		return ret
	}
	return *o.MoAssistanceDataTypes
}

// GetMoAssistanceDataTypesOk returns a tuple with the MoAssistanceDataTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetMoAssistanceDataTypesOk() (*LcsBroadcastAssistanceTypesData, bool) {
	if o == nil || IsNil(o.MoAssistanceDataTypes) {
		return nil, false
	}
	return o.MoAssistanceDataTypes, true
}

// HasMoAssistanceDataTypes returns a boolean if a field has been set.
func (o *InputData) HasMoAssistanceDataTypes() bool {
	if o != nil && !IsNil(o.MoAssistanceDataTypes) {
		return true
	}

	return false
}

// SetMoAssistanceDataTypes gets a reference to the given LcsBroadcastAssistanceTypesData and assigns it to the MoAssistanceDataTypes field.
func (o *InputData) SetMoAssistanceDataTypes(v LcsBroadcastAssistanceTypesData) {
	o.MoAssistanceDataTypes = &v
}

// GetLppMessage returns the LppMessage field value if set, zero value otherwise.
func (o *InputData) GetLppMessage() RefToBinaryData {
	if o == nil || IsNil(o.LppMessage) {
		var ret RefToBinaryData
		return ret
	}
	return *o.LppMessage
}

// GetLppMessageOk returns a tuple with the LppMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetLppMessageOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.LppMessage) {
		return nil, false
	}
	return o.LppMessage, true
}

// HasLppMessage returns a boolean if a field has been set.
func (o *InputData) HasLppMessage() bool {
	if o != nil && !IsNil(o.LppMessage) {
		return true
	}

	return false
}

// SetLppMessage gets a reference to the given RefToBinaryData and assigns it to the LppMessage field.
func (o *InputData) SetLppMessage(v RefToBinaryData) {
	o.LppMessage = &v
}

// GetLppMessageExt returns the LppMessageExt field value if set, zero value otherwise.
func (o *InputData) GetLppMessageExt() []RefToBinaryData {
	if o == nil || IsNil(o.LppMessageExt) {
		var ret []RefToBinaryData
		return ret
	}
	return o.LppMessageExt
}

// GetLppMessageExtOk returns a tuple with the LppMessageExt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetLppMessageExtOk() ([]RefToBinaryData, bool) {
	if o == nil || IsNil(o.LppMessageExt) {
		return nil, false
	}
	return o.LppMessageExt, true
}

// HasLppMessageExt returns a boolean if a field has been set.
func (o *InputData) HasLppMessageExt() bool {
	if o != nil && !IsNil(o.LppMessageExt) {
		return true
	}

	return false
}

// SetLppMessageExt gets a reference to the given []RefToBinaryData and assigns it to the LppMessageExt field.
func (o *InputData) SetLppMessageExt(v []RefToBinaryData) {
	o.LppMessageExt = v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *InputData) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *InputData) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *InputData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetUePositioningCap returns the UePositioningCap field value if set, zero value otherwise.
func (o *InputData) GetUePositioningCap() string {
	if o == nil || IsNil(o.UePositioningCap) {
		var ret string
		return ret
	}
	return *o.UePositioningCap
}

// GetUePositioningCapOk returns a tuple with the UePositioningCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetUePositioningCapOk() (*string, bool) {
	if o == nil || IsNil(o.UePositioningCap) {
		return nil, false
	}
	return o.UePositioningCap, true
}

// HasUePositioningCap returns a boolean if a field has been set.
func (o *InputData) HasUePositioningCap() bool {
	if o != nil && !IsNil(o.UePositioningCap) {
		return true
	}

	return false
}

// SetUePositioningCap gets a reference to the given string and assigns it to the UePositioningCap field.
func (o *InputData) SetUePositioningCap(v string) {
	o.UePositioningCap = &v
}

// GetTnapId returns the TnapId field value if set, zero value otherwise.
func (o *InputData) GetTnapId() TnapId {
	if o == nil || IsNil(o.TnapId) {
		var ret TnapId
		return ret
	}
	return *o.TnapId
}

// GetTnapIdOk returns a tuple with the TnapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetTnapIdOk() (*TnapId, bool) {
	if o == nil || IsNil(o.TnapId) {
		return nil, false
	}
	return o.TnapId, true
}

// HasTnapId returns a boolean if a field has been set.
func (o *InputData) HasTnapId() bool {
	if o != nil && !IsNil(o.TnapId) {
		return true
	}

	return false
}

// SetTnapId gets a reference to the given TnapId and assigns it to the TnapId field.
func (o *InputData) SetTnapId(v TnapId) {
	o.TnapId = &v
}

// GetTwapId returns the TwapId field value if set, zero value otherwise.
func (o *InputData) GetTwapId() TwapId {
	if o == nil || IsNil(o.TwapId) {
		var ret TwapId
		return ret
	}
	return *o.TwapId
}

// GetTwapIdOk returns a tuple with the TwapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetTwapIdOk() (*TwapId, bool) {
	if o == nil || IsNil(o.TwapId) {
		return nil, false
	}
	return o.TwapId, true
}

// HasTwapId returns a boolean if a field has been set.
func (o *InputData) HasTwapId() bool {
	if o != nil && !IsNil(o.TwapId) {
		return true
	}

	return false
}

// SetTwapId gets a reference to the given TwapId and assigns it to the TwapId field.
func (o *InputData) SetTwapId(v TwapId) {
	o.TwapId = &v
}

// GetUeCountryDetInd returns the UeCountryDetInd field value if set, zero value otherwise.
func (o *InputData) GetUeCountryDetInd() bool {
	if o == nil || IsNil(o.UeCountryDetInd) {
		var ret bool
		return ret
	}
	return *o.UeCountryDetInd
}

// GetUeCountryDetIndOk returns a tuple with the UeCountryDetInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetUeCountryDetIndOk() (*bool, bool) {
	if o == nil || IsNil(o.UeCountryDetInd) {
		return nil, false
	}
	return o.UeCountryDetInd, true
}

// HasUeCountryDetInd returns a boolean if a field has been set.
func (o *InputData) HasUeCountryDetInd() bool {
	if o != nil && !IsNil(o.UeCountryDetInd) {
		return true
	}

	return false
}

// SetUeCountryDetInd gets a reference to the given bool and assigns it to the UeCountryDetInd field.
func (o *InputData) SetUeCountryDetInd(v bool) {
	o.UeCountryDetInd = &v
}

// GetScheduledLocTime returns the ScheduledLocTime field value if set, zero value otherwise.
func (o *InputData) GetScheduledLocTime() time.Time {
	if o == nil || IsNil(o.ScheduledLocTime) {
		var ret time.Time
		return ret
	}
	return *o.ScheduledLocTime
}

// GetScheduledLocTimeOk returns a tuple with the ScheduledLocTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetScheduledLocTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduledLocTime) {
		return nil, false
	}
	return o.ScheduledLocTime, true
}

// HasScheduledLocTime returns a boolean if a field has been set.
func (o *InputData) HasScheduledLocTime() bool {
	if o != nil && !IsNil(o.ScheduledLocTime) {
		return true
	}

	return false
}

// SetScheduledLocTime gets a reference to the given time.Time and assigns it to the ScheduledLocTime field.
func (o *InputData) SetScheduledLocTime(v time.Time) {
	o.ScheduledLocTime = &v
}

// GetReliableLocReq returns the ReliableLocReq field value if set, zero value otherwise.
func (o *InputData) GetReliableLocReq() bool {
	if o == nil || IsNil(o.ReliableLocReq) {
		var ret bool
		return ret
	}
	return *o.ReliableLocReq
}

// GetReliableLocReqOk returns a tuple with the ReliableLocReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputData) GetReliableLocReqOk() (*bool, bool) {
	if o == nil || IsNil(o.ReliableLocReq) {
		return nil, false
	}
	return o.ReliableLocReq, true
}

// HasReliableLocReq returns a boolean if a field has been set.
func (o *InputData) HasReliableLocReq() bool {
	if o != nil && !IsNil(o.ReliableLocReq) {
		return true
	}

	return false
}

// SetReliableLocReq gets a reference to the given bool and assigns it to the ReliableLocReq field.
func (o *InputData) SetReliableLocReq(v bool) {
	o.ReliableLocReq = &v
}

func (o InputData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalClientType) {
		toSerialize["externalClientType"] = o.ExternalClientType
	}
	if !IsNil(o.CorrelationID) {
		toSerialize["correlationID"] = o.CorrelationID
	}
	if !IsNil(o.AmfId) {
		toSerialize["amfId"] = o.AmfId
	}
	if !IsNil(o.LocationQoS) {
		toSerialize["locationQoS"] = o.LocationQoS
	}
	if !IsNil(o.SupportedGADShapes) {
		toSerialize["supportedGADShapes"] = o.SupportedGADShapes
	}
	if !IsNil(o.Supi) {
		toSerialize["supi"] = o.Supi
	}
	if !IsNil(o.Pei) {
		toSerialize["pei"] = o.Pei
	}
	if !IsNil(o.Gpsi) {
		toSerialize["gpsi"] = o.Gpsi
	}
	if !IsNil(o.Ecgi) {
		toSerialize["ecgi"] = o.Ecgi
	}
	if !IsNil(o.EcgiOnSecondNode) {
		toSerialize["ecgiOnSecondNode"] = o.EcgiOnSecondNode
	}
	if !IsNil(o.Ncgi) {
		toSerialize["ncgi"] = o.Ncgi
	}
	if !IsNil(o.NcgiOnSecondNode) {
		toSerialize["ncgiOnSecondNode"] = o.NcgiOnSecondNode
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.VelocityRequested) {
		toSerialize["velocityRequested"] = o.VelocityRequested
	}
	if !IsNil(o.UeLcsCap) {
		toSerialize["ueLcsCap"] = o.UeLcsCap
	}
	if !IsNil(o.LcsServiceType) {
		toSerialize["lcsServiceType"] = o.LcsServiceType
	}
	if !IsNil(o.LdrType) {
		toSerialize["ldrType"] = o.LdrType
	}
	if !IsNil(o.HgmlcCallBackURI) {
		toSerialize["hgmlcCallBackURI"] = o.HgmlcCallBackURI
	}
	if !IsNil(o.VgmlcAddress) {
		toSerialize["vgmlcAddress"] = o.VgmlcAddress
	}
	if !IsNil(o.LdrReference) {
		toSerialize["ldrReference"] = o.LdrReference
	}
	if !IsNil(o.PeriodicEventInfo) {
		toSerialize["periodicEventInfo"] = o.PeriodicEventInfo
	}
	if !IsNil(o.AreaEventInfo) {
		toSerialize["areaEventInfo"] = o.AreaEventInfo
	}
	if !IsNil(o.MotionEventInfo) {
		toSerialize["motionEventInfo"] = o.MotionEventInfo
	}
	if !IsNil(o.ReportingAccessTypes) {
		toSerialize["reportingAccessTypes"] = o.ReportingAccessTypes
	}
	if !IsNil(o.UeConnectivityStates) {
		toSerialize["ueConnectivityStates"] = o.UeConnectivityStates
	}
	if !IsNil(o.UeLocationServiceInd) {
		toSerialize["ueLocationServiceInd"] = o.UeLocationServiceInd
	}
	if !IsNil(o.MoAssistanceDataTypes) {
		toSerialize["moAssistanceDataTypes"] = o.MoAssistanceDataTypes
	}
	if !IsNil(o.LppMessage) {
		toSerialize["lppMessage"] = o.LppMessage
	}
	if !IsNil(o.LppMessageExt) {
		toSerialize["lppMessageExt"] = o.LppMessageExt
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !IsNil(o.UePositioningCap) {
		toSerialize["uePositioningCap"] = o.UePositioningCap
	}
	if !IsNil(o.TnapId) {
		toSerialize["tnapId"] = o.TnapId
	}
	if !IsNil(o.TwapId) {
		toSerialize["twapId"] = o.TwapId
	}
	if !IsNil(o.UeCountryDetInd) {
		toSerialize["ueCountryDetInd"] = o.UeCountryDetInd
	}
	if !IsNil(o.ScheduledLocTime) {
		toSerialize["scheduledLocTime"] = o.ScheduledLocTime
	}
	if !IsNil(o.ReliableLocReq) {
		toSerialize["reliableLocReq"] = o.ReliableLocReq
	}
	return toSerialize, nil
}

type NullableInputData struct {
	value *InputData
	isSet bool
}

func (v NullableInputData) Get() *InputData {
	return v.value
}

func (v *NullableInputData) Set(val *InputData) {
	v.value = val
	v.isSet = true
}

func (v NullableInputData) IsSet() bool {
	return v.isSet
}

func (v *NullableInputData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputData(val *InputData) *NullableInputData {
	return &NullableInputData{value: val, isSet: true}
}

func (v NullableInputData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
