/*
LMF Location

LMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nlmf_Location

import (
	"encoding/json"
	"time"
)

// checks if the UELocationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UELocationInfo{}

// UELocationInfo Indicates location information of a UE.
type UELocationInfo struct {
	LocationEstimate *GeographicArea `json:"locationEstimate,omitempty"`
	// Indicates value of the age of the location estimate.
	AgeOfLocationEstimate *int32 `json:"ageOfLocationEstimate,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	TimestampOfLocationEstimate *time.Time `json:"timestampOfLocationEstimate,omitempty"`
	VelocityEstimate *VelocityEstimate `json:"velocityEstimate,omitempty"`
	// Indicates value of the age of the location estimate.
	AgeOfVelocityEstimate *int32 `json:"ageOfVelocityEstimate,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	TimestampOfVelocityEstimate *time.Time `json:"timestampOfVelocityEstimate,omitempty"`
}

// NewUELocationInfo instantiates a new UELocationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUELocationInfo() *UELocationInfo {
	this := UELocationInfo{}
	return &this
}

// NewUELocationInfoWithDefaults instantiates a new UELocationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUELocationInfoWithDefaults() *UELocationInfo {
	this := UELocationInfo{}
	return &this
}

// GetLocationEstimate returns the LocationEstimate field value if set, zero value otherwise.
func (o *UELocationInfo) GetLocationEstimate() GeographicArea {
	if o == nil || IsNil(o.LocationEstimate) {
		var ret GeographicArea
		return ret
	}
	return *o.LocationEstimate
}

// GetLocationEstimateOk returns a tuple with the LocationEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UELocationInfo) GetLocationEstimateOk() (*GeographicArea, bool) {
	if o == nil || IsNil(o.LocationEstimate) {
		return nil, false
	}
	return o.LocationEstimate, true
}

// HasLocationEstimate returns a boolean if a field has been set.
func (o *UELocationInfo) HasLocationEstimate() bool {
	if o != nil && !IsNil(o.LocationEstimate) {
		return true
	}

	return false
}

// SetLocationEstimate gets a reference to the given GeographicArea and assigns it to the LocationEstimate field.
func (o *UELocationInfo) SetLocationEstimate(v GeographicArea) {
	o.LocationEstimate = &v
}

// GetAgeOfLocationEstimate returns the AgeOfLocationEstimate field value if set, zero value otherwise.
func (o *UELocationInfo) GetAgeOfLocationEstimate() int32 {
	if o == nil || IsNil(o.AgeOfLocationEstimate) {
		var ret int32
		return ret
	}
	return *o.AgeOfLocationEstimate
}

// GetAgeOfLocationEstimateOk returns a tuple with the AgeOfLocationEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UELocationInfo) GetAgeOfLocationEstimateOk() (*int32, bool) {
	if o == nil || IsNil(o.AgeOfLocationEstimate) {
		return nil, false
	}
	return o.AgeOfLocationEstimate, true
}

// HasAgeOfLocationEstimate returns a boolean if a field has been set.
func (o *UELocationInfo) HasAgeOfLocationEstimate() bool {
	if o != nil && !IsNil(o.AgeOfLocationEstimate) {
		return true
	}

	return false
}

// SetAgeOfLocationEstimate gets a reference to the given int32 and assigns it to the AgeOfLocationEstimate field.
func (o *UELocationInfo) SetAgeOfLocationEstimate(v int32) {
	o.AgeOfLocationEstimate = &v
}

// GetTimestampOfLocationEstimate returns the TimestampOfLocationEstimate field value if set, zero value otherwise.
func (o *UELocationInfo) GetTimestampOfLocationEstimate() time.Time {
	if o == nil || IsNil(o.TimestampOfLocationEstimate) {
		var ret time.Time
		return ret
	}
	return *o.TimestampOfLocationEstimate
}

// GetTimestampOfLocationEstimateOk returns a tuple with the TimestampOfLocationEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UELocationInfo) GetTimestampOfLocationEstimateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimestampOfLocationEstimate) {
		return nil, false
	}
	return o.TimestampOfLocationEstimate, true
}

// HasTimestampOfLocationEstimate returns a boolean if a field has been set.
func (o *UELocationInfo) HasTimestampOfLocationEstimate() bool {
	if o != nil && !IsNil(o.TimestampOfLocationEstimate) {
		return true
	}

	return false
}

// SetTimestampOfLocationEstimate gets a reference to the given time.Time and assigns it to the TimestampOfLocationEstimate field.
func (o *UELocationInfo) SetTimestampOfLocationEstimate(v time.Time) {
	o.TimestampOfLocationEstimate = &v
}

// GetVelocityEstimate returns the VelocityEstimate field value if set, zero value otherwise.
func (o *UELocationInfo) GetVelocityEstimate() VelocityEstimate {
	if o == nil || IsNil(o.VelocityEstimate) {
		var ret VelocityEstimate
		return ret
	}
	return *o.VelocityEstimate
}

// GetVelocityEstimateOk returns a tuple with the VelocityEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UELocationInfo) GetVelocityEstimateOk() (*VelocityEstimate, bool) {
	if o == nil || IsNil(o.VelocityEstimate) {
		return nil, false
	}
	return o.VelocityEstimate, true
}

// HasVelocityEstimate returns a boolean if a field has been set.
func (o *UELocationInfo) HasVelocityEstimate() bool {
	if o != nil && !IsNil(o.VelocityEstimate) {
		return true
	}

	return false
}

// SetVelocityEstimate gets a reference to the given VelocityEstimate and assigns it to the VelocityEstimate field.
func (o *UELocationInfo) SetVelocityEstimate(v VelocityEstimate) {
	o.VelocityEstimate = &v
}

// GetAgeOfVelocityEstimate returns the AgeOfVelocityEstimate field value if set, zero value otherwise.
func (o *UELocationInfo) GetAgeOfVelocityEstimate() int32 {
	if o == nil || IsNil(o.AgeOfVelocityEstimate) {
		var ret int32
		return ret
	}
	return *o.AgeOfVelocityEstimate
}

// GetAgeOfVelocityEstimateOk returns a tuple with the AgeOfVelocityEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UELocationInfo) GetAgeOfVelocityEstimateOk() (*int32, bool) {
	if o == nil || IsNil(o.AgeOfVelocityEstimate) {
		return nil, false
	}
	return o.AgeOfVelocityEstimate, true
}

// HasAgeOfVelocityEstimate returns a boolean if a field has been set.
func (o *UELocationInfo) HasAgeOfVelocityEstimate() bool {
	if o != nil && !IsNil(o.AgeOfVelocityEstimate) {
		return true
	}

	return false
}

// SetAgeOfVelocityEstimate gets a reference to the given int32 and assigns it to the AgeOfVelocityEstimate field.
func (o *UELocationInfo) SetAgeOfVelocityEstimate(v int32) {
	o.AgeOfVelocityEstimate = &v
}

// GetTimestampOfVelocityEstimate returns the TimestampOfVelocityEstimate field value if set, zero value otherwise.
func (o *UELocationInfo) GetTimestampOfVelocityEstimate() time.Time {
	if o == nil || IsNil(o.TimestampOfVelocityEstimate) {
		var ret time.Time
		return ret
	}
	return *o.TimestampOfVelocityEstimate
}

// GetTimestampOfVelocityEstimateOk returns a tuple with the TimestampOfVelocityEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UELocationInfo) GetTimestampOfVelocityEstimateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimestampOfVelocityEstimate) {
		return nil, false
	}
	return o.TimestampOfVelocityEstimate, true
}

// HasTimestampOfVelocityEstimate returns a boolean if a field has been set.
func (o *UELocationInfo) HasTimestampOfVelocityEstimate() bool {
	if o != nil && !IsNil(o.TimestampOfVelocityEstimate) {
		return true
	}

	return false
}

// SetTimestampOfVelocityEstimate gets a reference to the given time.Time and assigns it to the TimestampOfVelocityEstimate field.
func (o *UELocationInfo) SetTimestampOfVelocityEstimate(v time.Time) {
	o.TimestampOfVelocityEstimate = &v
}

func (o UELocationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UELocationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationEstimate) {
		toSerialize["locationEstimate"] = o.LocationEstimate
	}
	if !IsNil(o.AgeOfLocationEstimate) {
		toSerialize["ageOfLocationEstimate"] = o.AgeOfLocationEstimate
	}
	if !IsNil(o.TimestampOfLocationEstimate) {
		toSerialize["timestampOfLocationEstimate"] = o.TimestampOfLocationEstimate
	}
	if !IsNil(o.VelocityEstimate) {
		toSerialize["velocityEstimate"] = o.VelocityEstimate
	}
	if !IsNil(o.AgeOfVelocityEstimate) {
		toSerialize["ageOfVelocityEstimate"] = o.AgeOfVelocityEstimate
	}
	if !IsNil(o.TimestampOfVelocityEstimate) {
		toSerialize["timestampOfVelocityEstimate"] = o.TimestampOfVelocityEstimate
	}
	return toSerialize, nil
}

type NullableUELocationInfo struct {
	value *UELocationInfo
	isSet bool
}

func (v NullableUELocationInfo) Get() *UELocationInfo {
	return v.value
}

func (v *NullableUELocationInfo) Set(val *UELocationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUELocationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUELocationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUELocationInfo(val *UELocationInfo) *NullableUELocationInfo {
	return &NullableUELocationInfo{value: val, isSet: true}
}

func (v NullableUELocationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUELocationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


