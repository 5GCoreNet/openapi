/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
)

// checks if the SteeringMode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SteeringMode{}

// SteeringMode Contains the steering mode value and parameters determined by the PCF.
type SteeringMode struct {
	SteerModeValue SteerModeValue `json:"steerModeValue"`
	Active *AccessType `json:"active,omitempty"`
	Standby *AccessTypeRm `json:"standby,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Var3gLoad *int32 `json:"3gLoad,omitempty"`
	PrioAcc *AccessType `json:"prioAcc,omitempty"`
	ThresValue NullableThresholdValue `json:"thresValue,omitempty"`
	SteerModeInd *SteerModeIndicator `json:"steerModeInd,omitempty"`
}

// NewSteeringMode instantiates a new SteeringMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSteeringMode(steerModeValue SteerModeValue) *SteeringMode {
	this := SteeringMode{}
	this.SteerModeValue = steerModeValue
	return &this
}

// NewSteeringModeWithDefaults instantiates a new SteeringMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSteeringModeWithDefaults() *SteeringMode {
	this := SteeringMode{}
	return &this
}

// GetSteerModeValue returns the SteerModeValue field value
func (o *SteeringMode) GetSteerModeValue() SteerModeValue {
	if o == nil {
		var ret SteerModeValue
		return ret
	}

	return o.SteerModeValue
}

// GetSteerModeValueOk returns a tuple with the SteerModeValue field value
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetSteerModeValueOk() (*SteerModeValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SteerModeValue, true
}

// SetSteerModeValue sets field value
func (o *SteeringMode) SetSteerModeValue(v SteerModeValue) {
	o.SteerModeValue = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SteeringMode) GetActive() AccessType {
	if o == nil || isNil(o.Active) {
		var ret AccessType
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetActiveOk() (*AccessType, bool) {
	if o == nil || isNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SteeringMode) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given AccessType and assigns it to the Active field.
func (o *SteeringMode) SetActive(v AccessType) {
	o.Active = &v
}

// GetStandby returns the Standby field value if set, zero value otherwise.
func (o *SteeringMode) GetStandby() AccessTypeRm {
	if o == nil || isNil(o.Standby) {
		var ret AccessTypeRm
		return ret
	}
	return *o.Standby
}

// GetStandbyOk returns a tuple with the Standby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetStandbyOk() (*AccessTypeRm, bool) {
	if o == nil || isNil(o.Standby) {
		return nil, false
	}
	return o.Standby, true
}

// HasStandby returns a boolean if a field has been set.
func (o *SteeringMode) HasStandby() bool {
	if o != nil && !isNil(o.Standby) {
		return true
	}

	return false
}

// SetStandby gets a reference to the given AccessTypeRm and assigns it to the Standby field.
func (o *SteeringMode) SetStandby(v AccessTypeRm) {
	o.Standby = &v
}

// GetVar3gLoad returns the Var3gLoad field value if set, zero value otherwise.
func (o *SteeringMode) GetVar3gLoad() int32 {
	if o == nil || isNil(o.Var3gLoad) {
		var ret int32
		return ret
	}
	return *o.Var3gLoad
}

// GetVar3gLoadOk returns a tuple with the Var3gLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetVar3gLoadOk() (*int32, bool) {
	if o == nil || isNil(o.Var3gLoad) {
		return nil, false
	}
	return o.Var3gLoad, true
}

// HasVar3gLoad returns a boolean if a field has been set.
func (o *SteeringMode) HasVar3gLoad() bool {
	if o != nil && !isNil(o.Var3gLoad) {
		return true
	}

	return false
}

// SetVar3gLoad gets a reference to the given int32 and assigns it to the Var3gLoad field.
func (o *SteeringMode) SetVar3gLoad(v int32) {
	o.Var3gLoad = &v
}

// GetPrioAcc returns the PrioAcc field value if set, zero value otherwise.
func (o *SteeringMode) GetPrioAcc() AccessType {
	if o == nil || isNil(o.PrioAcc) {
		var ret AccessType
		return ret
	}
	return *o.PrioAcc
}

// GetPrioAccOk returns a tuple with the PrioAcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetPrioAccOk() (*AccessType, bool) {
	if o == nil || isNil(o.PrioAcc) {
		return nil, false
	}
	return o.PrioAcc, true
}

// HasPrioAcc returns a boolean if a field has been set.
func (o *SteeringMode) HasPrioAcc() bool {
	if o != nil && !isNil(o.PrioAcc) {
		return true
	}

	return false
}

// SetPrioAcc gets a reference to the given AccessType and assigns it to the PrioAcc field.
func (o *SteeringMode) SetPrioAcc(v AccessType) {
	o.PrioAcc = &v
}

// GetThresValue returns the ThresValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SteeringMode) GetThresValue() ThresholdValue {
	if o == nil || isNil(o.ThresValue.Get()) {
		var ret ThresholdValue
		return ret
	}
	return *o.ThresValue.Get()
}

// GetThresValueOk returns a tuple with the ThresValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SteeringMode) GetThresValueOk() (*ThresholdValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThresValue.Get(), o.ThresValue.IsSet()
}

// HasThresValue returns a boolean if a field has been set.
func (o *SteeringMode) HasThresValue() bool {
	if o != nil && o.ThresValue.IsSet() {
		return true
	}

	return false
}

// SetThresValue gets a reference to the given NullableThresholdValue and assigns it to the ThresValue field.
func (o *SteeringMode) SetThresValue(v ThresholdValue) {
	o.ThresValue.Set(&v)
}
// SetThresValueNil sets the value for ThresValue to be an explicit nil
func (o *SteeringMode) SetThresValueNil() {
	o.ThresValue.Set(nil)
}

// UnsetThresValue ensures that no value is present for ThresValue, not even an explicit nil
func (o *SteeringMode) UnsetThresValue() {
	o.ThresValue.Unset()
}

// GetSteerModeInd returns the SteerModeInd field value if set, zero value otherwise.
func (o *SteeringMode) GetSteerModeInd() SteerModeIndicator {
	if o == nil || isNil(o.SteerModeInd) {
		var ret SteerModeIndicator
		return ret
	}
	return *o.SteerModeInd
}

// GetSteerModeIndOk returns a tuple with the SteerModeInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetSteerModeIndOk() (*SteerModeIndicator, bool) {
	if o == nil || isNil(o.SteerModeInd) {
		return nil, false
	}
	return o.SteerModeInd, true
}

// HasSteerModeInd returns a boolean if a field has been set.
func (o *SteeringMode) HasSteerModeInd() bool {
	if o != nil && !isNil(o.SteerModeInd) {
		return true
	}

	return false
}

// SetSteerModeInd gets a reference to the given SteerModeIndicator and assigns it to the SteerModeInd field.
func (o *SteeringMode) SetSteerModeInd(v SteerModeIndicator) {
	o.SteerModeInd = &v
}

func (o SteeringMode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SteeringMode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["steerModeValue"] = o.SteerModeValue
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.Standby) {
		toSerialize["standby"] = o.Standby
	}
	if !isNil(o.Var3gLoad) {
		toSerialize["3gLoad"] = o.Var3gLoad
	}
	if !isNil(o.PrioAcc) {
		toSerialize["prioAcc"] = o.PrioAcc
	}
	if o.ThresValue.IsSet() {
		toSerialize["thresValue"] = o.ThresValue.Get()
	}
	if !isNil(o.SteerModeInd) {
		toSerialize["steerModeInd"] = o.SteerModeInd
	}
	return toSerialize, nil
}

type NullableSteeringMode struct {
	value *SteeringMode
	isSet bool
}

func (v NullableSteeringMode) Get() *SteeringMode {
	return v.value
}

func (v *NullableSteeringMode) Set(val *SteeringMode) {
	v.value = val
	v.isSet = true
}

func (v NullableSteeringMode) IsSet() bool {
	return v.isSet
}

func (v *NullableSteeringMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSteeringMode(val *SteeringMode) *NullableSteeringMode {
	return &NullableSteeringMode{value: val, isSet: true}
}

func (v NullableSteeringMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSteeringMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


