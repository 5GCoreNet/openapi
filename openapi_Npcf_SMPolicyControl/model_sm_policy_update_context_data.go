/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"time"
)

// checks if the SmPolicyUpdateContextData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmPolicyUpdateContextData{}

// SmPolicyUpdateContextData Contains the policy control request trigger(s) that were met and the corresponding new  value(s) or the error report of the policy enforcement. 
type SmPolicyUpdateContextData struct {
	// The policy control reqeust trigges which are met.
	RepPolicyCtrlReqTriggers []PolicyControlRequestTrigger `json:"repPolicyCtrlReqTriggers,omitempty"`
	// Indicates the access network charging identifier for the PCC rule(s) or whole PDU  session. 
	AccNetChIds []AccNetChId `json:"accNetChIds,omitempty"`
	AccessType *AccessType `json:"accessType,omitempty"`
	RatType *RatType `json:"ratType,omitempty"`
	AddAccessInfo *AdditionalAccessInfo `json:"addAccessInfo,omitempty"`
	RelAccessInfo *AdditionalAccessInfo `json:"relAccessInfo,omitempty"`
	ServingNetwork *PlmnIdNid `json:"servingNetwork,omitempty"`
	UserLocationInfo *UserLocation `json:"userLocationInfo,omitempty"`
	// String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time. 
	UeTimeZone *string `json:"ueTimeZone,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166. 
	RelIpv4Address *string `json:"relIpv4Address,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166. 
	Ipv4Address *string `json:"ipv4Address,omitempty"`
	// Indicates the IPv4 address domain
	IpDomain *string `json:"ipDomain,omitempty"`
	Ipv6AddressPrefix *Ipv6Prefix `json:"ipv6AddressPrefix,omitempty"`
	RelIpv6AddressPrefix *Ipv6Prefix `json:"relIpv6AddressPrefix,omitempty"`
	AddIpv6AddrPrefixes *Ipv6Prefix `json:"addIpv6AddrPrefixes,omitempty"`
	AddRelIpv6AddrPrefixes *Ipv6Prefix `json:"addRelIpv6AddrPrefixes,omitempty"`
	// String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042. 
	RelUeMac *string `json:"relUeMac,omitempty"`
	// String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042. 
	UeMac *string `json:"ueMac,omitempty"`
	SubsSessAmbr *Ambr `json:"subsSessAmbr,omitempty"`
	// Indicates the DN-AAA authorization profile index
	AuthProfIndex *string `json:"authProfIndex,omitempty"`
	SubsDefQos *SubscribedDefaultQos `json:"subsDefQos,omitempty"`
	VplmnQos *VplmnQos `json:"vplmnQos,omitempty"`
	// If it is included and set to true, indicates that the QoS constraints in the VPLMN are  not applicable. 
	VplmnQosNotApp *bool `json:"vplmnQosNotApp,omitempty"`
	// Contains the number of supported packet filter for signalled QoS rules.
	NumOfPackFilter *int32 `json:"numOfPackFilter,omitempty"`
	// Contains the usage report
	AccuUsageReports []AccuUsageReport `json:"accuUsageReports,omitempty"`
	// If it is included and set to true, the 3GPP PS Data Off is activated by the UE.
	Var3gppPsDataOffStatus *bool `json:"3gppPsDataOffStatus,omitempty"`
	// Report the start/stop of the application traffic and detected SDF descriptions  if applicable. 
	AppDetectionInfos []AppDetectionInfo `json:"appDetectionInfos,omitempty"`
	// Used to report the PCC rule failure.
	RuleReports []RuleReport `json:"ruleReports,omitempty"`
	// Used to report the session rule failure.
	SessRuleReports []SessionRuleReport `json:"sessRuleReports,omitempty"`
	// QoS Notification Control information.
	QncReports []QosNotificationControlInfo `json:"qncReports,omitempty"`
	QosMonReports []QosMonitoringReport `json:"qosMonReports,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	UserLocationInfoTime *time.Time `json:"userLocationInfoTime,omitempty"`
	// Reports the changes of presence reporting area. The praId attribute within the PresenceInfo data type is the key of the map. 
	RepPraInfos *map[string]PresenceInfo `json:"repPraInfos,omitempty"`
	UeInitResReq *UeInitiatedResourceRequest `json:"ueInitResReq,omitempty"`
	// If it is included and set to true, the reflective QoS is supported by the UE. If it is included and set to false, the reflective QoS is revoked by the UE. 
	RefQosIndication *bool `json:"refQosIndication,omitempty"`
	QosFlowUsage *QosFlowUsage `json:"qosFlowUsage,omitempty"`
	CreditManageStatus *CreditManagementStatus `json:"creditManageStatus,omitempty"`
	ServNfId *ServingNfIdentity `json:"servNfId,omitempty"`
	TraceReq NullableTraceData `json:"traceReq,omitempty"`
	MaPduInd *MaPduIndication `json:"maPduInd,omitempty"`
	AtsssCapab *AtsssCapability `json:"atsssCapab,omitempty"`
	TsnBridgeInfo *TsnBridgeInfo `json:"tsnBridgeInfo,omitempty"`
	TsnBridgeManCont *BridgeManagementContainer `json:"tsnBridgeManCont,omitempty"`
	TsnPortManContDstt *PortManagementContainer `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts []PortManagementContainer `json:"tsnPortManContNwtts,omitempty"`
	MulAddrInfos []IpMulticastAddressInfo `json:"mulAddrInfos,omitempty"`
	// Contains the type(s) of failed policy decision and/or condition data.
	PolicyDecFailureReports []PolicyDecisionFailureCode `json:"policyDecFailureReports,omitempty"`
	// Indicates the invalid parameters for the reported type(s) of the failed policy decision  and/or condition data. 
	InvalidPolicyDecs []InvalidParam `json:"invalidPolicyDecs,omitempty"`
	TrafficDescriptors []DddTrafficDescriptor `json:"trafficDescriptors,omitempty"`
	// Contains the identifier of the PCC rule which is used for traffic detection of event. 
	PccRuleId *string `json:"pccRuleId,omitempty"`
	TypesOfNotif []DlDataDeliveryStatus `json:"typesOfNotif,omitempty"`
	InterGrpIds []string `json:"interGrpIds,omitempty"`
	SatBackhaulCategory *SatelliteBackhaulCategory `json:"satBackhaulCategory,omitempty"`
	PcfUeInfo NullablePcfUeCallbackInfo `json:"pcfUeInfo,omitempty"`
	NwdafDatas []NwdafData `json:"nwdafDatas,omitempty"`
	// When it is included and set to true, it indicates that the AN-Gateway has failed and that the PCF should refrain from sending policy decisions to the SMF until it is informed that the AN-Gateway has been recovered. 
	AnGwStatus *bool `json:"anGwStatus,omitempty"`
}

// NewSmPolicyUpdateContextData instantiates a new SmPolicyUpdateContextData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmPolicyUpdateContextData() *SmPolicyUpdateContextData {
	this := SmPolicyUpdateContextData{}
	return &this
}

// NewSmPolicyUpdateContextDataWithDefaults instantiates a new SmPolicyUpdateContextData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmPolicyUpdateContextDataWithDefaults() *SmPolicyUpdateContextData {
	this := SmPolicyUpdateContextData{}
	return &this
}

// GetRepPolicyCtrlReqTriggers returns the RepPolicyCtrlReqTriggers field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetRepPolicyCtrlReqTriggers() []PolicyControlRequestTrigger {
	if o == nil || IsNil(o.RepPolicyCtrlReqTriggers) {
		var ret []PolicyControlRequestTrigger
		return ret
	}
	return o.RepPolicyCtrlReqTriggers
}

// GetRepPolicyCtrlReqTriggersOk returns a tuple with the RepPolicyCtrlReqTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetRepPolicyCtrlReqTriggersOk() ([]PolicyControlRequestTrigger, bool) {
	if o == nil || IsNil(o.RepPolicyCtrlReqTriggers) {
		return nil, false
	}
	return o.RepPolicyCtrlReqTriggers, true
}

// HasRepPolicyCtrlReqTriggers returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasRepPolicyCtrlReqTriggers() bool {
	if o != nil && !IsNil(o.RepPolicyCtrlReqTriggers) {
		return true
	}

	return false
}

// SetRepPolicyCtrlReqTriggers gets a reference to the given []PolicyControlRequestTrigger and assigns it to the RepPolicyCtrlReqTriggers field.
func (o *SmPolicyUpdateContextData) SetRepPolicyCtrlReqTriggers(v []PolicyControlRequestTrigger) {
	o.RepPolicyCtrlReqTriggers = v
}

// GetAccNetChIds returns the AccNetChIds field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAccNetChIds() []AccNetChId {
	if o == nil || IsNil(o.AccNetChIds) {
		var ret []AccNetChId
		return ret
	}
	return o.AccNetChIds
}

// GetAccNetChIdsOk returns a tuple with the AccNetChIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAccNetChIdsOk() ([]AccNetChId, bool) {
	if o == nil || IsNil(o.AccNetChIds) {
		return nil, false
	}
	return o.AccNetChIds, true
}

// HasAccNetChIds returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAccNetChIds() bool {
	if o != nil && !IsNil(o.AccNetChIds) {
		return true
	}

	return false
}

// SetAccNetChIds gets a reference to the given []AccNetChId and assigns it to the AccNetChIds field.
func (o *SmPolicyUpdateContextData) SetAccNetChIds(v []AccNetChId) {
	o.AccNetChIds = v
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAccessType() AccessType {
	if o == nil || IsNil(o.AccessType) {
		var ret AccessType
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil || IsNil(o.AccessType) {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAccessType() bool {
	if o != nil && !IsNil(o.AccessType) {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given AccessType and assigns it to the AccessType field.
func (o *SmPolicyUpdateContextData) SetAccessType(v AccessType) {
	o.AccessType = &v
}

// GetRatType returns the RatType field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetRatType() RatType {
	if o == nil || IsNil(o.RatType) {
		var ret RatType
		return ret
	}
	return *o.RatType
}

// GetRatTypeOk returns a tuple with the RatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetRatTypeOk() (*RatType, bool) {
	if o == nil || IsNil(o.RatType) {
		return nil, false
	}
	return o.RatType, true
}

// HasRatType returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasRatType() bool {
	if o != nil && !IsNil(o.RatType) {
		return true
	}

	return false
}

// SetRatType gets a reference to the given RatType and assigns it to the RatType field.
func (o *SmPolicyUpdateContextData) SetRatType(v RatType) {
	o.RatType = &v
}

// GetAddAccessInfo returns the AddAccessInfo field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAddAccessInfo() AdditionalAccessInfo {
	if o == nil || IsNil(o.AddAccessInfo) {
		var ret AdditionalAccessInfo
		return ret
	}
	return *o.AddAccessInfo
}

// GetAddAccessInfoOk returns a tuple with the AddAccessInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAddAccessInfoOk() (*AdditionalAccessInfo, bool) {
	if o == nil || IsNil(o.AddAccessInfo) {
		return nil, false
	}
	return o.AddAccessInfo, true
}

// HasAddAccessInfo returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAddAccessInfo() bool {
	if o != nil && !IsNil(o.AddAccessInfo) {
		return true
	}

	return false
}

// SetAddAccessInfo gets a reference to the given AdditionalAccessInfo and assigns it to the AddAccessInfo field.
func (o *SmPolicyUpdateContextData) SetAddAccessInfo(v AdditionalAccessInfo) {
	o.AddAccessInfo = &v
}

// GetRelAccessInfo returns the RelAccessInfo field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetRelAccessInfo() AdditionalAccessInfo {
	if o == nil || IsNil(o.RelAccessInfo) {
		var ret AdditionalAccessInfo
		return ret
	}
	return *o.RelAccessInfo
}

// GetRelAccessInfoOk returns a tuple with the RelAccessInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetRelAccessInfoOk() (*AdditionalAccessInfo, bool) {
	if o == nil || IsNil(o.RelAccessInfo) {
		return nil, false
	}
	return o.RelAccessInfo, true
}

// HasRelAccessInfo returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasRelAccessInfo() bool {
	if o != nil && !IsNil(o.RelAccessInfo) {
		return true
	}

	return false
}

// SetRelAccessInfo gets a reference to the given AdditionalAccessInfo and assigns it to the RelAccessInfo field.
func (o *SmPolicyUpdateContextData) SetRelAccessInfo(v AdditionalAccessInfo) {
	o.RelAccessInfo = &v
}

// GetServingNetwork returns the ServingNetwork field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetServingNetwork() PlmnIdNid {
	if o == nil || IsNil(o.ServingNetwork) {
		var ret PlmnIdNid
		return ret
	}
	return *o.ServingNetwork
}

// GetServingNetworkOk returns a tuple with the ServingNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetServingNetworkOk() (*PlmnIdNid, bool) {
	if o == nil || IsNil(o.ServingNetwork) {
		return nil, false
	}
	return o.ServingNetwork, true
}

// HasServingNetwork returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasServingNetwork() bool {
	if o != nil && !IsNil(o.ServingNetwork) {
		return true
	}

	return false
}

// SetServingNetwork gets a reference to the given PlmnIdNid and assigns it to the ServingNetwork field.
func (o *SmPolicyUpdateContextData) SetServingNetwork(v PlmnIdNid) {
	o.ServingNetwork = &v
}

// GetUserLocationInfo returns the UserLocationInfo field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetUserLocationInfo() UserLocation {
	if o == nil || IsNil(o.UserLocationInfo) {
		var ret UserLocation
		return ret
	}
	return *o.UserLocationInfo
}

// GetUserLocationInfoOk returns a tuple with the UserLocationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetUserLocationInfoOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.UserLocationInfo) {
		return nil, false
	}
	return o.UserLocationInfo, true
}

// HasUserLocationInfo returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasUserLocationInfo() bool {
	if o != nil && !IsNil(o.UserLocationInfo) {
		return true
	}

	return false
}

// SetUserLocationInfo gets a reference to the given UserLocation and assigns it to the UserLocationInfo field.
func (o *SmPolicyUpdateContextData) SetUserLocationInfo(v UserLocation) {
	o.UserLocationInfo = &v
}

// GetUeTimeZone returns the UeTimeZone field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetUeTimeZone() string {
	if o == nil || IsNil(o.UeTimeZone) {
		var ret string
		return ret
	}
	return *o.UeTimeZone
}

// GetUeTimeZoneOk returns a tuple with the UeTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetUeTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.UeTimeZone) {
		return nil, false
	}
	return o.UeTimeZone, true
}

// HasUeTimeZone returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasUeTimeZone() bool {
	if o != nil && !IsNil(o.UeTimeZone) {
		return true
	}

	return false
}

// SetUeTimeZone gets a reference to the given string and assigns it to the UeTimeZone field.
func (o *SmPolicyUpdateContextData) SetUeTimeZone(v string) {
	o.UeTimeZone = &v
}

// GetRelIpv4Address returns the RelIpv4Address field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetRelIpv4Address() string {
	if o == nil || IsNil(o.RelIpv4Address) {
		var ret string
		return ret
	}
	return *o.RelIpv4Address
}

// GetRelIpv4AddressOk returns a tuple with the RelIpv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetRelIpv4AddressOk() (*string, bool) {
	if o == nil || IsNil(o.RelIpv4Address) {
		return nil, false
	}
	return o.RelIpv4Address, true
}

// HasRelIpv4Address returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasRelIpv4Address() bool {
	if o != nil && !IsNil(o.RelIpv4Address) {
		return true
	}

	return false
}

// SetRelIpv4Address gets a reference to the given string and assigns it to the RelIpv4Address field.
func (o *SmPolicyUpdateContextData) SetRelIpv4Address(v string) {
	o.RelIpv4Address = &v
}

// GetIpv4Address returns the Ipv4Address field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetIpv4Address() string {
	if o == nil || IsNil(o.Ipv4Address) {
		var ret string
		return ret
	}
	return *o.Ipv4Address
}

// GetIpv4AddressOk returns a tuple with the Ipv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetIpv4AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Address) {
		return nil, false
	}
	return o.Ipv4Address, true
}

// HasIpv4Address returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasIpv4Address() bool {
	if o != nil && !IsNil(o.Ipv4Address) {
		return true
	}

	return false
}

// SetIpv4Address gets a reference to the given string and assigns it to the Ipv4Address field.
func (o *SmPolicyUpdateContextData) SetIpv4Address(v string) {
	o.Ipv4Address = &v
}

// GetIpDomain returns the IpDomain field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetIpDomain() string {
	if o == nil || IsNil(o.IpDomain) {
		var ret string
		return ret
	}
	return *o.IpDomain
}

// GetIpDomainOk returns a tuple with the IpDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetIpDomainOk() (*string, bool) {
	if o == nil || IsNil(o.IpDomain) {
		return nil, false
	}
	return o.IpDomain, true
}

// HasIpDomain returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasIpDomain() bool {
	if o != nil && !IsNil(o.IpDomain) {
		return true
	}

	return false
}

// SetIpDomain gets a reference to the given string and assigns it to the IpDomain field.
func (o *SmPolicyUpdateContextData) SetIpDomain(v string) {
	o.IpDomain = &v
}

// GetIpv6AddressPrefix returns the Ipv6AddressPrefix field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetIpv6AddressPrefix() Ipv6Prefix {
	if o == nil || IsNil(o.Ipv6AddressPrefix) {
		var ret Ipv6Prefix
		return ret
	}
	return *o.Ipv6AddressPrefix
}

// GetIpv6AddressPrefixOk returns a tuple with the Ipv6AddressPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetIpv6AddressPrefixOk() (*Ipv6Prefix, bool) {
	if o == nil || IsNil(o.Ipv6AddressPrefix) {
		return nil, false
	}
	return o.Ipv6AddressPrefix, true
}

// HasIpv6AddressPrefix returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasIpv6AddressPrefix() bool {
	if o != nil && !IsNil(o.Ipv6AddressPrefix) {
		return true
	}

	return false
}

// SetIpv6AddressPrefix gets a reference to the given Ipv6Prefix and assigns it to the Ipv6AddressPrefix field.
func (o *SmPolicyUpdateContextData) SetIpv6AddressPrefix(v Ipv6Prefix) {
	o.Ipv6AddressPrefix = &v
}

// GetRelIpv6AddressPrefix returns the RelIpv6AddressPrefix field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetRelIpv6AddressPrefix() Ipv6Prefix {
	if o == nil || IsNil(o.RelIpv6AddressPrefix) {
		var ret Ipv6Prefix
		return ret
	}
	return *o.RelIpv6AddressPrefix
}

// GetRelIpv6AddressPrefixOk returns a tuple with the RelIpv6AddressPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetRelIpv6AddressPrefixOk() (*Ipv6Prefix, bool) {
	if o == nil || IsNil(o.RelIpv6AddressPrefix) {
		return nil, false
	}
	return o.RelIpv6AddressPrefix, true
}

// HasRelIpv6AddressPrefix returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasRelIpv6AddressPrefix() bool {
	if o != nil && !IsNil(o.RelIpv6AddressPrefix) {
		return true
	}

	return false
}

// SetRelIpv6AddressPrefix gets a reference to the given Ipv6Prefix and assigns it to the RelIpv6AddressPrefix field.
func (o *SmPolicyUpdateContextData) SetRelIpv6AddressPrefix(v Ipv6Prefix) {
	o.RelIpv6AddressPrefix = &v
}

// GetAddIpv6AddrPrefixes returns the AddIpv6AddrPrefixes field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAddIpv6AddrPrefixes() Ipv6Prefix {
	if o == nil || IsNil(o.AddIpv6AddrPrefixes) {
		var ret Ipv6Prefix
		return ret
	}
	return *o.AddIpv6AddrPrefixes
}

// GetAddIpv6AddrPrefixesOk returns a tuple with the AddIpv6AddrPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAddIpv6AddrPrefixesOk() (*Ipv6Prefix, bool) {
	if o == nil || IsNil(o.AddIpv6AddrPrefixes) {
		return nil, false
	}
	return o.AddIpv6AddrPrefixes, true
}

// HasAddIpv6AddrPrefixes returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAddIpv6AddrPrefixes() bool {
	if o != nil && !IsNil(o.AddIpv6AddrPrefixes) {
		return true
	}

	return false
}

// SetAddIpv6AddrPrefixes gets a reference to the given Ipv6Prefix and assigns it to the AddIpv6AddrPrefixes field.
func (o *SmPolicyUpdateContextData) SetAddIpv6AddrPrefixes(v Ipv6Prefix) {
	o.AddIpv6AddrPrefixes = &v
}

// GetAddRelIpv6AddrPrefixes returns the AddRelIpv6AddrPrefixes field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAddRelIpv6AddrPrefixes() Ipv6Prefix {
	if o == nil || IsNil(o.AddRelIpv6AddrPrefixes) {
		var ret Ipv6Prefix
		return ret
	}
	return *o.AddRelIpv6AddrPrefixes
}

// GetAddRelIpv6AddrPrefixesOk returns a tuple with the AddRelIpv6AddrPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAddRelIpv6AddrPrefixesOk() (*Ipv6Prefix, bool) {
	if o == nil || IsNil(o.AddRelIpv6AddrPrefixes) {
		return nil, false
	}
	return o.AddRelIpv6AddrPrefixes, true
}

// HasAddRelIpv6AddrPrefixes returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAddRelIpv6AddrPrefixes() bool {
	if o != nil && !IsNil(o.AddRelIpv6AddrPrefixes) {
		return true
	}

	return false
}

// SetAddRelIpv6AddrPrefixes gets a reference to the given Ipv6Prefix and assigns it to the AddRelIpv6AddrPrefixes field.
func (o *SmPolicyUpdateContextData) SetAddRelIpv6AddrPrefixes(v Ipv6Prefix) {
	o.AddRelIpv6AddrPrefixes = &v
}

// GetRelUeMac returns the RelUeMac field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetRelUeMac() string {
	if o == nil || IsNil(o.RelUeMac) {
		var ret string
		return ret
	}
	return *o.RelUeMac
}

// GetRelUeMacOk returns a tuple with the RelUeMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetRelUeMacOk() (*string, bool) {
	if o == nil || IsNil(o.RelUeMac) {
		return nil, false
	}
	return o.RelUeMac, true
}

// HasRelUeMac returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasRelUeMac() bool {
	if o != nil && !IsNil(o.RelUeMac) {
		return true
	}

	return false
}

// SetRelUeMac gets a reference to the given string and assigns it to the RelUeMac field.
func (o *SmPolicyUpdateContextData) SetRelUeMac(v string) {
	o.RelUeMac = &v
}

// GetUeMac returns the UeMac field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetUeMac() string {
	if o == nil || IsNil(o.UeMac) {
		var ret string
		return ret
	}
	return *o.UeMac
}

// GetUeMacOk returns a tuple with the UeMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetUeMacOk() (*string, bool) {
	if o == nil || IsNil(o.UeMac) {
		return nil, false
	}
	return o.UeMac, true
}

// HasUeMac returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasUeMac() bool {
	if o != nil && !IsNil(o.UeMac) {
		return true
	}

	return false
}

// SetUeMac gets a reference to the given string and assigns it to the UeMac field.
func (o *SmPolicyUpdateContextData) SetUeMac(v string) {
	o.UeMac = &v
}

// GetSubsSessAmbr returns the SubsSessAmbr field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetSubsSessAmbr() Ambr {
	if o == nil || IsNil(o.SubsSessAmbr) {
		var ret Ambr
		return ret
	}
	return *o.SubsSessAmbr
}

// GetSubsSessAmbrOk returns a tuple with the SubsSessAmbr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetSubsSessAmbrOk() (*Ambr, bool) {
	if o == nil || IsNil(o.SubsSessAmbr) {
		return nil, false
	}
	return o.SubsSessAmbr, true
}

// HasSubsSessAmbr returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasSubsSessAmbr() bool {
	if o != nil && !IsNil(o.SubsSessAmbr) {
		return true
	}

	return false
}

// SetSubsSessAmbr gets a reference to the given Ambr and assigns it to the SubsSessAmbr field.
func (o *SmPolicyUpdateContextData) SetSubsSessAmbr(v Ambr) {
	o.SubsSessAmbr = &v
}

// GetAuthProfIndex returns the AuthProfIndex field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAuthProfIndex() string {
	if o == nil || IsNil(o.AuthProfIndex) {
		var ret string
		return ret
	}
	return *o.AuthProfIndex
}

// GetAuthProfIndexOk returns a tuple with the AuthProfIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAuthProfIndexOk() (*string, bool) {
	if o == nil || IsNil(o.AuthProfIndex) {
		return nil, false
	}
	return o.AuthProfIndex, true
}

// HasAuthProfIndex returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAuthProfIndex() bool {
	if o != nil && !IsNil(o.AuthProfIndex) {
		return true
	}

	return false
}

// SetAuthProfIndex gets a reference to the given string and assigns it to the AuthProfIndex field.
func (o *SmPolicyUpdateContextData) SetAuthProfIndex(v string) {
	o.AuthProfIndex = &v
}

// GetSubsDefQos returns the SubsDefQos field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetSubsDefQos() SubscribedDefaultQos {
	if o == nil || IsNil(o.SubsDefQos) {
		var ret SubscribedDefaultQos
		return ret
	}
	return *o.SubsDefQos
}

// GetSubsDefQosOk returns a tuple with the SubsDefQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetSubsDefQosOk() (*SubscribedDefaultQos, bool) {
	if o == nil || IsNil(o.SubsDefQos) {
		return nil, false
	}
	return o.SubsDefQos, true
}

// HasSubsDefQos returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasSubsDefQos() bool {
	if o != nil && !IsNil(o.SubsDefQos) {
		return true
	}

	return false
}

// SetSubsDefQos gets a reference to the given SubscribedDefaultQos and assigns it to the SubsDefQos field.
func (o *SmPolicyUpdateContextData) SetSubsDefQos(v SubscribedDefaultQos) {
	o.SubsDefQos = &v
}

// GetVplmnQos returns the VplmnQos field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetVplmnQos() VplmnQos {
	if o == nil || IsNil(o.VplmnQos) {
		var ret VplmnQos
		return ret
	}
	return *o.VplmnQos
}

// GetVplmnQosOk returns a tuple with the VplmnQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetVplmnQosOk() (*VplmnQos, bool) {
	if o == nil || IsNil(o.VplmnQos) {
		return nil, false
	}
	return o.VplmnQos, true
}

// HasVplmnQos returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasVplmnQos() bool {
	if o != nil && !IsNil(o.VplmnQos) {
		return true
	}

	return false
}

// SetVplmnQos gets a reference to the given VplmnQos and assigns it to the VplmnQos field.
func (o *SmPolicyUpdateContextData) SetVplmnQos(v VplmnQos) {
	o.VplmnQos = &v
}

// GetVplmnQosNotApp returns the VplmnQosNotApp field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetVplmnQosNotApp() bool {
	if o == nil || IsNil(o.VplmnQosNotApp) {
		var ret bool
		return ret
	}
	return *o.VplmnQosNotApp
}

// GetVplmnQosNotAppOk returns a tuple with the VplmnQosNotApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetVplmnQosNotAppOk() (*bool, bool) {
	if o == nil || IsNil(o.VplmnQosNotApp) {
		return nil, false
	}
	return o.VplmnQosNotApp, true
}

// HasVplmnQosNotApp returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasVplmnQosNotApp() bool {
	if o != nil && !IsNil(o.VplmnQosNotApp) {
		return true
	}

	return false
}

// SetVplmnQosNotApp gets a reference to the given bool and assigns it to the VplmnQosNotApp field.
func (o *SmPolicyUpdateContextData) SetVplmnQosNotApp(v bool) {
	o.VplmnQosNotApp = &v
}

// GetNumOfPackFilter returns the NumOfPackFilter field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetNumOfPackFilter() int32 {
	if o == nil || IsNil(o.NumOfPackFilter) {
		var ret int32
		return ret
	}
	return *o.NumOfPackFilter
}

// GetNumOfPackFilterOk returns a tuple with the NumOfPackFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetNumOfPackFilterOk() (*int32, bool) {
	if o == nil || IsNil(o.NumOfPackFilter) {
		return nil, false
	}
	return o.NumOfPackFilter, true
}

// HasNumOfPackFilter returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasNumOfPackFilter() bool {
	if o != nil && !IsNil(o.NumOfPackFilter) {
		return true
	}

	return false
}

// SetNumOfPackFilter gets a reference to the given int32 and assigns it to the NumOfPackFilter field.
func (o *SmPolicyUpdateContextData) SetNumOfPackFilter(v int32) {
	o.NumOfPackFilter = &v
}

// GetAccuUsageReports returns the AccuUsageReports field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAccuUsageReports() []AccuUsageReport {
	if o == nil || IsNil(o.AccuUsageReports) {
		var ret []AccuUsageReport
		return ret
	}
	return o.AccuUsageReports
}

// GetAccuUsageReportsOk returns a tuple with the AccuUsageReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAccuUsageReportsOk() ([]AccuUsageReport, bool) {
	if o == nil || IsNil(o.AccuUsageReports) {
		return nil, false
	}
	return o.AccuUsageReports, true
}

// HasAccuUsageReports returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAccuUsageReports() bool {
	if o != nil && !IsNil(o.AccuUsageReports) {
		return true
	}

	return false
}

// SetAccuUsageReports gets a reference to the given []AccuUsageReport and assigns it to the AccuUsageReports field.
func (o *SmPolicyUpdateContextData) SetAccuUsageReports(v []AccuUsageReport) {
	o.AccuUsageReports = v
}

// GetVar3gppPsDataOffStatus returns the Var3gppPsDataOffStatus field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetVar3gppPsDataOffStatus() bool {
	if o == nil || IsNil(o.Var3gppPsDataOffStatus) {
		var ret bool
		return ret
	}
	return *o.Var3gppPsDataOffStatus
}

// GetVar3gppPsDataOffStatusOk returns a tuple with the Var3gppPsDataOffStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetVar3gppPsDataOffStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Var3gppPsDataOffStatus) {
		return nil, false
	}
	return o.Var3gppPsDataOffStatus, true
}

// HasVar3gppPsDataOffStatus returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasVar3gppPsDataOffStatus() bool {
	if o != nil && !IsNil(o.Var3gppPsDataOffStatus) {
		return true
	}

	return false
}

// SetVar3gppPsDataOffStatus gets a reference to the given bool and assigns it to the Var3gppPsDataOffStatus field.
func (o *SmPolicyUpdateContextData) SetVar3gppPsDataOffStatus(v bool) {
	o.Var3gppPsDataOffStatus = &v
}

// GetAppDetectionInfos returns the AppDetectionInfos field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAppDetectionInfos() []AppDetectionInfo {
	if o == nil || IsNil(o.AppDetectionInfos) {
		var ret []AppDetectionInfo
		return ret
	}
	return o.AppDetectionInfos
}

// GetAppDetectionInfosOk returns a tuple with the AppDetectionInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAppDetectionInfosOk() ([]AppDetectionInfo, bool) {
	if o == nil || IsNil(o.AppDetectionInfos) {
		return nil, false
	}
	return o.AppDetectionInfos, true
}

// HasAppDetectionInfos returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAppDetectionInfos() bool {
	if o != nil && !IsNil(o.AppDetectionInfos) {
		return true
	}

	return false
}

// SetAppDetectionInfos gets a reference to the given []AppDetectionInfo and assigns it to the AppDetectionInfos field.
func (o *SmPolicyUpdateContextData) SetAppDetectionInfos(v []AppDetectionInfo) {
	o.AppDetectionInfos = v
}

// GetRuleReports returns the RuleReports field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetRuleReports() []RuleReport {
	if o == nil || IsNil(o.RuleReports) {
		var ret []RuleReport
		return ret
	}
	return o.RuleReports
}

// GetRuleReportsOk returns a tuple with the RuleReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetRuleReportsOk() ([]RuleReport, bool) {
	if o == nil || IsNil(o.RuleReports) {
		return nil, false
	}
	return o.RuleReports, true
}

// HasRuleReports returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasRuleReports() bool {
	if o != nil && !IsNil(o.RuleReports) {
		return true
	}

	return false
}

// SetRuleReports gets a reference to the given []RuleReport and assigns it to the RuleReports field.
func (o *SmPolicyUpdateContextData) SetRuleReports(v []RuleReport) {
	o.RuleReports = v
}

// GetSessRuleReports returns the SessRuleReports field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetSessRuleReports() []SessionRuleReport {
	if o == nil || IsNil(o.SessRuleReports) {
		var ret []SessionRuleReport
		return ret
	}
	return o.SessRuleReports
}

// GetSessRuleReportsOk returns a tuple with the SessRuleReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetSessRuleReportsOk() ([]SessionRuleReport, bool) {
	if o == nil || IsNil(o.SessRuleReports) {
		return nil, false
	}
	return o.SessRuleReports, true
}

// HasSessRuleReports returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasSessRuleReports() bool {
	if o != nil && !IsNil(o.SessRuleReports) {
		return true
	}

	return false
}

// SetSessRuleReports gets a reference to the given []SessionRuleReport and assigns it to the SessRuleReports field.
func (o *SmPolicyUpdateContextData) SetSessRuleReports(v []SessionRuleReport) {
	o.SessRuleReports = v
}

// GetQncReports returns the QncReports field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetQncReports() []QosNotificationControlInfo {
	if o == nil || IsNil(o.QncReports) {
		var ret []QosNotificationControlInfo
		return ret
	}
	return o.QncReports
}

// GetQncReportsOk returns a tuple with the QncReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetQncReportsOk() ([]QosNotificationControlInfo, bool) {
	if o == nil || IsNil(o.QncReports) {
		return nil, false
	}
	return o.QncReports, true
}

// HasQncReports returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasQncReports() bool {
	if o != nil && !IsNil(o.QncReports) {
		return true
	}

	return false
}

// SetQncReports gets a reference to the given []QosNotificationControlInfo and assigns it to the QncReports field.
func (o *SmPolicyUpdateContextData) SetQncReports(v []QosNotificationControlInfo) {
	o.QncReports = v
}

// GetQosMonReports returns the QosMonReports field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetQosMonReports() []QosMonitoringReport {
	if o == nil || IsNil(o.QosMonReports) {
		var ret []QosMonitoringReport
		return ret
	}
	return o.QosMonReports
}

// GetQosMonReportsOk returns a tuple with the QosMonReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetQosMonReportsOk() ([]QosMonitoringReport, bool) {
	if o == nil || IsNil(o.QosMonReports) {
		return nil, false
	}
	return o.QosMonReports, true
}

// HasQosMonReports returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasQosMonReports() bool {
	if o != nil && !IsNil(o.QosMonReports) {
		return true
	}

	return false
}

// SetQosMonReports gets a reference to the given []QosMonitoringReport and assigns it to the QosMonReports field.
func (o *SmPolicyUpdateContextData) SetQosMonReports(v []QosMonitoringReport) {
	o.QosMonReports = v
}

// GetUserLocationInfoTime returns the UserLocationInfoTime field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetUserLocationInfoTime() time.Time {
	if o == nil || IsNil(o.UserLocationInfoTime) {
		var ret time.Time
		return ret
	}
	return *o.UserLocationInfoTime
}

// GetUserLocationInfoTimeOk returns a tuple with the UserLocationInfoTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetUserLocationInfoTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UserLocationInfoTime) {
		return nil, false
	}
	return o.UserLocationInfoTime, true
}

// HasUserLocationInfoTime returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasUserLocationInfoTime() bool {
	if o != nil && !IsNil(o.UserLocationInfoTime) {
		return true
	}

	return false
}

// SetUserLocationInfoTime gets a reference to the given time.Time and assigns it to the UserLocationInfoTime field.
func (o *SmPolicyUpdateContextData) SetUserLocationInfoTime(v time.Time) {
	o.UserLocationInfoTime = &v
}

// GetRepPraInfos returns the RepPraInfos field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetRepPraInfos() map[string]PresenceInfo {
	if o == nil || IsNil(o.RepPraInfos) {
		var ret map[string]PresenceInfo
		return ret
	}
	return *o.RepPraInfos
}

// GetRepPraInfosOk returns a tuple with the RepPraInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetRepPraInfosOk() (*map[string]PresenceInfo, bool) {
	if o == nil || IsNil(o.RepPraInfos) {
		return nil, false
	}
	return o.RepPraInfos, true
}

// HasRepPraInfos returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasRepPraInfos() bool {
	if o != nil && !IsNil(o.RepPraInfos) {
		return true
	}

	return false
}

// SetRepPraInfos gets a reference to the given map[string]PresenceInfo and assigns it to the RepPraInfos field.
func (o *SmPolicyUpdateContextData) SetRepPraInfos(v map[string]PresenceInfo) {
	o.RepPraInfos = &v
}

// GetUeInitResReq returns the UeInitResReq field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetUeInitResReq() UeInitiatedResourceRequest {
	if o == nil || IsNil(o.UeInitResReq) {
		var ret UeInitiatedResourceRequest
		return ret
	}
	return *o.UeInitResReq
}

// GetUeInitResReqOk returns a tuple with the UeInitResReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetUeInitResReqOk() (*UeInitiatedResourceRequest, bool) {
	if o == nil || IsNil(o.UeInitResReq) {
		return nil, false
	}
	return o.UeInitResReq, true
}

// HasUeInitResReq returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasUeInitResReq() bool {
	if o != nil && !IsNil(o.UeInitResReq) {
		return true
	}

	return false
}

// SetUeInitResReq gets a reference to the given UeInitiatedResourceRequest and assigns it to the UeInitResReq field.
func (o *SmPolicyUpdateContextData) SetUeInitResReq(v UeInitiatedResourceRequest) {
	o.UeInitResReq = &v
}

// GetRefQosIndication returns the RefQosIndication field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetRefQosIndication() bool {
	if o == nil || IsNil(o.RefQosIndication) {
		var ret bool
		return ret
	}
	return *o.RefQosIndication
}

// GetRefQosIndicationOk returns a tuple with the RefQosIndication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetRefQosIndicationOk() (*bool, bool) {
	if o == nil || IsNil(o.RefQosIndication) {
		return nil, false
	}
	return o.RefQosIndication, true
}

// HasRefQosIndication returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasRefQosIndication() bool {
	if o != nil && !IsNil(o.RefQosIndication) {
		return true
	}

	return false
}

// SetRefQosIndication gets a reference to the given bool and assigns it to the RefQosIndication field.
func (o *SmPolicyUpdateContextData) SetRefQosIndication(v bool) {
	o.RefQosIndication = &v
}

// GetQosFlowUsage returns the QosFlowUsage field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetQosFlowUsage() QosFlowUsage {
	if o == nil || IsNil(o.QosFlowUsage) {
		var ret QosFlowUsage
		return ret
	}
	return *o.QosFlowUsage
}

// GetQosFlowUsageOk returns a tuple with the QosFlowUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetQosFlowUsageOk() (*QosFlowUsage, bool) {
	if o == nil || IsNil(o.QosFlowUsage) {
		return nil, false
	}
	return o.QosFlowUsage, true
}

// HasQosFlowUsage returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasQosFlowUsage() bool {
	if o != nil && !IsNil(o.QosFlowUsage) {
		return true
	}

	return false
}

// SetQosFlowUsage gets a reference to the given QosFlowUsage and assigns it to the QosFlowUsage field.
func (o *SmPolicyUpdateContextData) SetQosFlowUsage(v QosFlowUsage) {
	o.QosFlowUsage = &v
}

// GetCreditManageStatus returns the CreditManageStatus field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetCreditManageStatus() CreditManagementStatus {
	if o == nil || IsNil(o.CreditManageStatus) {
		var ret CreditManagementStatus
		return ret
	}
	return *o.CreditManageStatus
}

// GetCreditManageStatusOk returns a tuple with the CreditManageStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetCreditManageStatusOk() (*CreditManagementStatus, bool) {
	if o == nil || IsNil(o.CreditManageStatus) {
		return nil, false
	}
	return o.CreditManageStatus, true
}

// HasCreditManageStatus returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasCreditManageStatus() bool {
	if o != nil && !IsNil(o.CreditManageStatus) {
		return true
	}

	return false
}

// SetCreditManageStatus gets a reference to the given CreditManagementStatus and assigns it to the CreditManageStatus field.
func (o *SmPolicyUpdateContextData) SetCreditManageStatus(v CreditManagementStatus) {
	o.CreditManageStatus = &v
}

// GetServNfId returns the ServNfId field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetServNfId() ServingNfIdentity {
	if o == nil || IsNil(o.ServNfId) {
		var ret ServingNfIdentity
		return ret
	}
	return *o.ServNfId
}

// GetServNfIdOk returns a tuple with the ServNfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetServNfIdOk() (*ServingNfIdentity, bool) {
	if o == nil || IsNil(o.ServNfId) {
		return nil, false
	}
	return o.ServNfId, true
}

// HasServNfId returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasServNfId() bool {
	if o != nil && !IsNil(o.ServNfId) {
		return true
	}

	return false
}

// SetServNfId gets a reference to the given ServingNfIdentity and assigns it to the ServNfId field.
func (o *SmPolicyUpdateContextData) SetServNfId(v ServingNfIdentity) {
	o.ServNfId = &v
}

// GetTraceReq returns the TraceReq field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyUpdateContextData) GetTraceReq() TraceData {
	if o == nil || IsNil(o.TraceReq.Get()) {
		var ret TraceData
		return ret
	}
	return *o.TraceReq.Get()
}

// GetTraceReqOk returns a tuple with the TraceReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyUpdateContextData) GetTraceReqOk() (*TraceData, bool) {
	if o == nil {
		return nil, false
	}
	return o.TraceReq.Get(), o.TraceReq.IsSet()
}

// HasTraceReq returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasTraceReq() bool {
	if o != nil && o.TraceReq.IsSet() {
		return true
	}

	return false
}

// SetTraceReq gets a reference to the given NullableTraceData and assigns it to the TraceReq field.
func (o *SmPolicyUpdateContextData) SetTraceReq(v TraceData) {
	o.TraceReq.Set(&v)
}
// SetTraceReqNil sets the value for TraceReq to be an explicit nil
func (o *SmPolicyUpdateContextData) SetTraceReqNil() {
	o.TraceReq.Set(nil)
}

// UnsetTraceReq ensures that no value is present for TraceReq, not even an explicit nil
func (o *SmPolicyUpdateContextData) UnsetTraceReq() {
	o.TraceReq.Unset()
}

// GetMaPduInd returns the MaPduInd field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetMaPduInd() MaPduIndication {
	if o == nil || IsNil(o.MaPduInd) {
		var ret MaPduIndication
		return ret
	}
	return *o.MaPduInd
}

// GetMaPduIndOk returns a tuple with the MaPduInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetMaPduIndOk() (*MaPduIndication, bool) {
	if o == nil || IsNil(o.MaPduInd) {
		return nil, false
	}
	return o.MaPduInd, true
}

// HasMaPduInd returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasMaPduInd() bool {
	if o != nil && !IsNil(o.MaPduInd) {
		return true
	}

	return false
}

// SetMaPduInd gets a reference to the given MaPduIndication and assigns it to the MaPduInd field.
func (o *SmPolicyUpdateContextData) SetMaPduInd(v MaPduIndication) {
	o.MaPduInd = &v
}

// GetAtsssCapab returns the AtsssCapab field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAtsssCapab() AtsssCapability {
	if o == nil || IsNil(o.AtsssCapab) {
		var ret AtsssCapability
		return ret
	}
	return *o.AtsssCapab
}

// GetAtsssCapabOk returns a tuple with the AtsssCapab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAtsssCapabOk() (*AtsssCapability, bool) {
	if o == nil || IsNil(o.AtsssCapab) {
		return nil, false
	}
	return o.AtsssCapab, true
}

// HasAtsssCapab returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAtsssCapab() bool {
	if o != nil && !IsNil(o.AtsssCapab) {
		return true
	}

	return false
}

// SetAtsssCapab gets a reference to the given AtsssCapability and assigns it to the AtsssCapab field.
func (o *SmPolicyUpdateContextData) SetAtsssCapab(v AtsssCapability) {
	o.AtsssCapab = &v
}

// GetTsnBridgeInfo returns the TsnBridgeInfo field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetTsnBridgeInfo() TsnBridgeInfo {
	if o == nil || IsNil(o.TsnBridgeInfo) {
		var ret TsnBridgeInfo
		return ret
	}
	return *o.TsnBridgeInfo
}

// GetTsnBridgeInfoOk returns a tuple with the TsnBridgeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetTsnBridgeInfoOk() (*TsnBridgeInfo, bool) {
	if o == nil || IsNil(o.TsnBridgeInfo) {
		return nil, false
	}
	return o.TsnBridgeInfo, true
}

// HasTsnBridgeInfo returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasTsnBridgeInfo() bool {
	if o != nil && !IsNil(o.TsnBridgeInfo) {
		return true
	}

	return false
}

// SetTsnBridgeInfo gets a reference to the given TsnBridgeInfo and assigns it to the TsnBridgeInfo field.
func (o *SmPolicyUpdateContextData) SetTsnBridgeInfo(v TsnBridgeInfo) {
	o.TsnBridgeInfo = &v
}

// GetTsnBridgeManCont returns the TsnBridgeManCont field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetTsnBridgeManCont() BridgeManagementContainer {
	if o == nil || IsNil(o.TsnBridgeManCont) {
		var ret BridgeManagementContainer
		return ret
	}
	return *o.TsnBridgeManCont
}

// GetTsnBridgeManContOk returns a tuple with the TsnBridgeManCont field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetTsnBridgeManContOk() (*BridgeManagementContainer, bool) {
	if o == nil || IsNil(o.TsnBridgeManCont) {
		return nil, false
	}
	return o.TsnBridgeManCont, true
}

// HasTsnBridgeManCont returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasTsnBridgeManCont() bool {
	if o != nil && !IsNil(o.TsnBridgeManCont) {
		return true
	}

	return false
}

// SetTsnBridgeManCont gets a reference to the given BridgeManagementContainer and assigns it to the TsnBridgeManCont field.
func (o *SmPolicyUpdateContextData) SetTsnBridgeManCont(v BridgeManagementContainer) {
	o.TsnBridgeManCont = &v
}

// GetTsnPortManContDstt returns the TsnPortManContDstt field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetTsnPortManContDstt() PortManagementContainer {
	if o == nil || IsNil(o.TsnPortManContDstt) {
		var ret PortManagementContainer
		return ret
	}
	return *o.TsnPortManContDstt
}

// GetTsnPortManContDsttOk returns a tuple with the TsnPortManContDstt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetTsnPortManContDsttOk() (*PortManagementContainer, bool) {
	if o == nil || IsNil(o.TsnPortManContDstt) {
		return nil, false
	}
	return o.TsnPortManContDstt, true
}

// HasTsnPortManContDstt returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasTsnPortManContDstt() bool {
	if o != nil && !IsNil(o.TsnPortManContDstt) {
		return true
	}

	return false
}

// SetTsnPortManContDstt gets a reference to the given PortManagementContainer and assigns it to the TsnPortManContDstt field.
func (o *SmPolicyUpdateContextData) SetTsnPortManContDstt(v PortManagementContainer) {
	o.TsnPortManContDstt = &v
}

// GetTsnPortManContNwtts returns the TsnPortManContNwtts field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetTsnPortManContNwtts() []PortManagementContainer {
	if o == nil || IsNil(o.TsnPortManContNwtts) {
		var ret []PortManagementContainer
		return ret
	}
	return o.TsnPortManContNwtts
}

// GetTsnPortManContNwttsOk returns a tuple with the TsnPortManContNwtts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetTsnPortManContNwttsOk() ([]PortManagementContainer, bool) {
	if o == nil || IsNil(o.TsnPortManContNwtts) {
		return nil, false
	}
	return o.TsnPortManContNwtts, true
}

// HasTsnPortManContNwtts returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasTsnPortManContNwtts() bool {
	if o != nil && !IsNil(o.TsnPortManContNwtts) {
		return true
	}

	return false
}

// SetTsnPortManContNwtts gets a reference to the given []PortManagementContainer and assigns it to the TsnPortManContNwtts field.
func (o *SmPolicyUpdateContextData) SetTsnPortManContNwtts(v []PortManagementContainer) {
	o.TsnPortManContNwtts = v
}

// GetMulAddrInfos returns the MulAddrInfos field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetMulAddrInfos() []IpMulticastAddressInfo {
	if o == nil || IsNil(o.MulAddrInfos) {
		var ret []IpMulticastAddressInfo
		return ret
	}
	return o.MulAddrInfos
}

// GetMulAddrInfosOk returns a tuple with the MulAddrInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetMulAddrInfosOk() ([]IpMulticastAddressInfo, bool) {
	if o == nil || IsNil(o.MulAddrInfos) {
		return nil, false
	}
	return o.MulAddrInfos, true
}

// HasMulAddrInfos returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasMulAddrInfos() bool {
	if o != nil && !IsNil(o.MulAddrInfos) {
		return true
	}

	return false
}

// SetMulAddrInfos gets a reference to the given []IpMulticastAddressInfo and assigns it to the MulAddrInfos field.
func (o *SmPolicyUpdateContextData) SetMulAddrInfos(v []IpMulticastAddressInfo) {
	o.MulAddrInfos = v
}

// GetPolicyDecFailureReports returns the PolicyDecFailureReports field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetPolicyDecFailureReports() []PolicyDecisionFailureCode {
	if o == nil || IsNil(o.PolicyDecFailureReports) {
		var ret []PolicyDecisionFailureCode
		return ret
	}
	return o.PolicyDecFailureReports
}

// GetPolicyDecFailureReportsOk returns a tuple with the PolicyDecFailureReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetPolicyDecFailureReportsOk() ([]PolicyDecisionFailureCode, bool) {
	if o == nil || IsNil(o.PolicyDecFailureReports) {
		return nil, false
	}
	return o.PolicyDecFailureReports, true
}

// HasPolicyDecFailureReports returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasPolicyDecFailureReports() bool {
	if o != nil && !IsNil(o.PolicyDecFailureReports) {
		return true
	}

	return false
}

// SetPolicyDecFailureReports gets a reference to the given []PolicyDecisionFailureCode and assigns it to the PolicyDecFailureReports field.
func (o *SmPolicyUpdateContextData) SetPolicyDecFailureReports(v []PolicyDecisionFailureCode) {
	o.PolicyDecFailureReports = v
}

// GetInvalidPolicyDecs returns the InvalidPolicyDecs field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetInvalidPolicyDecs() []InvalidParam {
	if o == nil || IsNil(o.InvalidPolicyDecs) {
		var ret []InvalidParam
		return ret
	}
	return o.InvalidPolicyDecs
}

// GetInvalidPolicyDecsOk returns a tuple with the InvalidPolicyDecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetInvalidPolicyDecsOk() ([]InvalidParam, bool) {
	if o == nil || IsNil(o.InvalidPolicyDecs) {
		return nil, false
	}
	return o.InvalidPolicyDecs, true
}

// HasInvalidPolicyDecs returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasInvalidPolicyDecs() bool {
	if o != nil && !IsNil(o.InvalidPolicyDecs) {
		return true
	}

	return false
}

// SetInvalidPolicyDecs gets a reference to the given []InvalidParam and assigns it to the InvalidPolicyDecs field.
func (o *SmPolicyUpdateContextData) SetInvalidPolicyDecs(v []InvalidParam) {
	o.InvalidPolicyDecs = v
}

// GetTrafficDescriptors returns the TrafficDescriptors field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetTrafficDescriptors() []DddTrafficDescriptor {
	if o == nil || IsNil(o.TrafficDescriptors) {
		var ret []DddTrafficDescriptor
		return ret
	}
	return o.TrafficDescriptors
}

// GetTrafficDescriptorsOk returns a tuple with the TrafficDescriptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetTrafficDescriptorsOk() ([]DddTrafficDescriptor, bool) {
	if o == nil || IsNil(o.TrafficDescriptors) {
		return nil, false
	}
	return o.TrafficDescriptors, true
}

// HasTrafficDescriptors returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasTrafficDescriptors() bool {
	if o != nil && !IsNil(o.TrafficDescriptors) {
		return true
	}

	return false
}

// SetTrafficDescriptors gets a reference to the given []DddTrafficDescriptor and assigns it to the TrafficDescriptors field.
func (o *SmPolicyUpdateContextData) SetTrafficDescriptors(v []DddTrafficDescriptor) {
	o.TrafficDescriptors = v
}

// GetPccRuleId returns the PccRuleId field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetPccRuleId() string {
	if o == nil || IsNil(o.PccRuleId) {
		var ret string
		return ret
	}
	return *o.PccRuleId
}

// GetPccRuleIdOk returns a tuple with the PccRuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetPccRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.PccRuleId) {
		return nil, false
	}
	return o.PccRuleId, true
}

// HasPccRuleId returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasPccRuleId() bool {
	if o != nil && !IsNil(o.PccRuleId) {
		return true
	}

	return false
}

// SetPccRuleId gets a reference to the given string and assigns it to the PccRuleId field.
func (o *SmPolicyUpdateContextData) SetPccRuleId(v string) {
	o.PccRuleId = &v
}

// GetTypesOfNotif returns the TypesOfNotif field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetTypesOfNotif() []DlDataDeliveryStatus {
	if o == nil || IsNil(o.TypesOfNotif) {
		var ret []DlDataDeliveryStatus
		return ret
	}
	return o.TypesOfNotif
}

// GetTypesOfNotifOk returns a tuple with the TypesOfNotif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetTypesOfNotifOk() ([]DlDataDeliveryStatus, bool) {
	if o == nil || IsNil(o.TypesOfNotif) {
		return nil, false
	}
	return o.TypesOfNotif, true
}

// HasTypesOfNotif returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasTypesOfNotif() bool {
	if o != nil && !IsNil(o.TypesOfNotif) {
		return true
	}

	return false
}

// SetTypesOfNotif gets a reference to the given []DlDataDeliveryStatus and assigns it to the TypesOfNotif field.
func (o *SmPolicyUpdateContextData) SetTypesOfNotif(v []DlDataDeliveryStatus) {
	o.TypesOfNotif = v
}

// GetInterGrpIds returns the InterGrpIds field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetInterGrpIds() []string {
	if o == nil || IsNil(o.InterGrpIds) {
		var ret []string
		return ret
	}
	return o.InterGrpIds
}

// GetInterGrpIdsOk returns a tuple with the InterGrpIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetInterGrpIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.InterGrpIds) {
		return nil, false
	}
	return o.InterGrpIds, true
}

// HasInterGrpIds returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasInterGrpIds() bool {
	if o != nil && !IsNil(o.InterGrpIds) {
		return true
	}

	return false
}

// SetInterGrpIds gets a reference to the given []string and assigns it to the InterGrpIds field.
func (o *SmPolicyUpdateContextData) SetInterGrpIds(v []string) {
	o.InterGrpIds = v
}

// GetSatBackhaulCategory returns the SatBackhaulCategory field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetSatBackhaulCategory() SatelliteBackhaulCategory {
	if o == nil || IsNil(o.SatBackhaulCategory) {
		var ret SatelliteBackhaulCategory
		return ret
	}
	return *o.SatBackhaulCategory
}

// GetSatBackhaulCategoryOk returns a tuple with the SatBackhaulCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetSatBackhaulCategoryOk() (*SatelliteBackhaulCategory, bool) {
	if o == nil || IsNil(o.SatBackhaulCategory) {
		return nil, false
	}
	return o.SatBackhaulCategory, true
}

// HasSatBackhaulCategory returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasSatBackhaulCategory() bool {
	if o != nil && !IsNil(o.SatBackhaulCategory) {
		return true
	}

	return false
}

// SetSatBackhaulCategory gets a reference to the given SatelliteBackhaulCategory and assigns it to the SatBackhaulCategory field.
func (o *SmPolicyUpdateContextData) SetSatBackhaulCategory(v SatelliteBackhaulCategory) {
	o.SatBackhaulCategory = &v
}

// GetPcfUeInfo returns the PcfUeInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyUpdateContextData) GetPcfUeInfo() PcfUeCallbackInfo {
	if o == nil || IsNil(o.PcfUeInfo.Get()) {
		var ret PcfUeCallbackInfo
		return ret
	}
	return *o.PcfUeInfo.Get()
}

// GetPcfUeInfoOk returns a tuple with the PcfUeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyUpdateContextData) GetPcfUeInfoOk() (*PcfUeCallbackInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.PcfUeInfo.Get(), o.PcfUeInfo.IsSet()
}

// HasPcfUeInfo returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasPcfUeInfo() bool {
	if o != nil && o.PcfUeInfo.IsSet() {
		return true
	}

	return false
}

// SetPcfUeInfo gets a reference to the given NullablePcfUeCallbackInfo and assigns it to the PcfUeInfo field.
func (o *SmPolicyUpdateContextData) SetPcfUeInfo(v PcfUeCallbackInfo) {
	o.PcfUeInfo.Set(&v)
}
// SetPcfUeInfoNil sets the value for PcfUeInfo to be an explicit nil
func (o *SmPolicyUpdateContextData) SetPcfUeInfoNil() {
	o.PcfUeInfo.Set(nil)
}

// UnsetPcfUeInfo ensures that no value is present for PcfUeInfo, not even an explicit nil
func (o *SmPolicyUpdateContextData) UnsetPcfUeInfo() {
	o.PcfUeInfo.Unset()
}

// GetNwdafDatas returns the NwdafDatas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyUpdateContextData) GetNwdafDatas() []NwdafData {
	if o == nil {
		var ret []NwdafData
		return ret
	}
	return o.NwdafDatas
}

// GetNwdafDatasOk returns a tuple with the NwdafDatas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyUpdateContextData) GetNwdafDatasOk() ([]NwdafData, bool) {
	if o == nil || IsNil(o.NwdafDatas) {
		return nil, false
	}
	return o.NwdafDatas, true
}

// HasNwdafDatas returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasNwdafDatas() bool {
	if o != nil && IsNil(o.NwdafDatas) {
		return true
	}

	return false
}

// SetNwdafDatas gets a reference to the given []NwdafData and assigns it to the NwdafDatas field.
func (o *SmPolicyUpdateContextData) SetNwdafDatas(v []NwdafData) {
	o.NwdafDatas = v
}

// GetAnGwStatus returns the AnGwStatus field value if set, zero value otherwise.
func (o *SmPolicyUpdateContextData) GetAnGwStatus() bool {
	if o == nil || IsNil(o.AnGwStatus) {
		var ret bool
		return ret
	}
	return *o.AnGwStatus
}

// GetAnGwStatusOk returns a tuple with the AnGwStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyUpdateContextData) GetAnGwStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.AnGwStatus) {
		return nil, false
	}
	return o.AnGwStatus, true
}

// HasAnGwStatus returns a boolean if a field has been set.
func (o *SmPolicyUpdateContextData) HasAnGwStatus() bool {
	if o != nil && !IsNil(o.AnGwStatus) {
		return true
	}

	return false
}

// SetAnGwStatus gets a reference to the given bool and assigns it to the AnGwStatus field.
func (o *SmPolicyUpdateContextData) SetAnGwStatus(v bool) {
	o.AnGwStatus = &v
}

func (o SmPolicyUpdateContextData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmPolicyUpdateContextData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RepPolicyCtrlReqTriggers) {
		toSerialize["repPolicyCtrlReqTriggers"] = o.RepPolicyCtrlReqTriggers
	}
	if !IsNil(o.AccNetChIds) {
		toSerialize["accNetChIds"] = o.AccNetChIds
	}
	if !IsNil(o.AccessType) {
		toSerialize["accessType"] = o.AccessType
	}
	if !IsNil(o.RatType) {
		toSerialize["ratType"] = o.RatType
	}
	if !IsNil(o.AddAccessInfo) {
		toSerialize["addAccessInfo"] = o.AddAccessInfo
	}
	if !IsNil(o.RelAccessInfo) {
		toSerialize["relAccessInfo"] = o.RelAccessInfo
	}
	if !IsNil(o.ServingNetwork) {
		toSerialize["servingNetwork"] = o.ServingNetwork
	}
	if !IsNil(o.UserLocationInfo) {
		toSerialize["userLocationInfo"] = o.UserLocationInfo
	}
	if !IsNil(o.UeTimeZone) {
		toSerialize["ueTimeZone"] = o.UeTimeZone
	}
	if !IsNil(o.RelIpv4Address) {
		toSerialize["relIpv4Address"] = o.RelIpv4Address
	}
	if !IsNil(o.Ipv4Address) {
		toSerialize["ipv4Address"] = o.Ipv4Address
	}
	if !IsNil(o.IpDomain) {
		toSerialize["ipDomain"] = o.IpDomain
	}
	if !IsNil(o.Ipv6AddressPrefix) {
		toSerialize["ipv6AddressPrefix"] = o.Ipv6AddressPrefix
	}
	if !IsNil(o.RelIpv6AddressPrefix) {
		toSerialize["relIpv6AddressPrefix"] = o.RelIpv6AddressPrefix
	}
	if !IsNil(o.AddIpv6AddrPrefixes) {
		toSerialize["addIpv6AddrPrefixes"] = o.AddIpv6AddrPrefixes
	}
	if !IsNil(o.AddRelIpv6AddrPrefixes) {
		toSerialize["addRelIpv6AddrPrefixes"] = o.AddRelIpv6AddrPrefixes
	}
	if !IsNil(o.RelUeMac) {
		toSerialize["relUeMac"] = o.RelUeMac
	}
	if !IsNil(o.UeMac) {
		toSerialize["ueMac"] = o.UeMac
	}
	if !IsNil(o.SubsSessAmbr) {
		toSerialize["subsSessAmbr"] = o.SubsSessAmbr
	}
	if !IsNil(o.AuthProfIndex) {
		toSerialize["authProfIndex"] = o.AuthProfIndex
	}
	if !IsNil(o.SubsDefQos) {
		toSerialize["subsDefQos"] = o.SubsDefQos
	}
	if !IsNil(o.VplmnQos) {
		toSerialize["vplmnQos"] = o.VplmnQos
	}
	if !IsNil(o.VplmnQosNotApp) {
		toSerialize["vplmnQosNotApp"] = o.VplmnQosNotApp
	}
	if !IsNil(o.NumOfPackFilter) {
		toSerialize["numOfPackFilter"] = o.NumOfPackFilter
	}
	if !IsNil(o.AccuUsageReports) {
		toSerialize["accuUsageReports"] = o.AccuUsageReports
	}
	if !IsNil(o.Var3gppPsDataOffStatus) {
		toSerialize["3gppPsDataOffStatus"] = o.Var3gppPsDataOffStatus
	}
	if !IsNil(o.AppDetectionInfos) {
		toSerialize["appDetectionInfos"] = o.AppDetectionInfos
	}
	if !IsNil(o.RuleReports) {
		toSerialize["ruleReports"] = o.RuleReports
	}
	if !IsNil(o.SessRuleReports) {
		toSerialize["sessRuleReports"] = o.SessRuleReports
	}
	if !IsNil(o.QncReports) {
		toSerialize["qncReports"] = o.QncReports
	}
	if !IsNil(o.QosMonReports) {
		toSerialize["qosMonReports"] = o.QosMonReports
	}
	if !IsNil(o.UserLocationInfoTime) {
		toSerialize["userLocationInfoTime"] = o.UserLocationInfoTime
	}
	if !IsNil(o.RepPraInfos) {
		toSerialize["repPraInfos"] = o.RepPraInfos
	}
	if !IsNil(o.UeInitResReq) {
		toSerialize["ueInitResReq"] = o.UeInitResReq
	}
	if !IsNil(o.RefQosIndication) {
		toSerialize["refQosIndication"] = o.RefQosIndication
	}
	if !IsNil(o.QosFlowUsage) {
		toSerialize["qosFlowUsage"] = o.QosFlowUsage
	}
	if !IsNil(o.CreditManageStatus) {
		toSerialize["creditManageStatus"] = o.CreditManageStatus
	}
	if !IsNil(o.ServNfId) {
		toSerialize["servNfId"] = o.ServNfId
	}
	if o.TraceReq.IsSet() {
		toSerialize["traceReq"] = o.TraceReq.Get()
	}
	if !IsNil(o.MaPduInd) {
		toSerialize["maPduInd"] = o.MaPduInd
	}
	if !IsNil(o.AtsssCapab) {
		toSerialize["atsssCapab"] = o.AtsssCapab
	}
	if !IsNil(o.TsnBridgeInfo) {
		toSerialize["tsnBridgeInfo"] = o.TsnBridgeInfo
	}
	if !IsNil(o.TsnBridgeManCont) {
		toSerialize["tsnBridgeManCont"] = o.TsnBridgeManCont
	}
	if !IsNil(o.TsnPortManContDstt) {
		toSerialize["tsnPortManContDstt"] = o.TsnPortManContDstt
	}
	if !IsNil(o.TsnPortManContNwtts) {
		toSerialize["tsnPortManContNwtts"] = o.TsnPortManContNwtts
	}
	if !IsNil(o.MulAddrInfos) {
		toSerialize["mulAddrInfos"] = o.MulAddrInfos
	}
	if !IsNil(o.PolicyDecFailureReports) {
		toSerialize["policyDecFailureReports"] = o.PolicyDecFailureReports
	}
	if !IsNil(o.InvalidPolicyDecs) {
		toSerialize["invalidPolicyDecs"] = o.InvalidPolicyDecs
	}
	if !IsNil(o.TrafficDescriptors) {
		toSerialize["trafficDescriptors"] = o.TrafficDescriptors
	}
	if !IsNil(o.PccRuleId) {
		toSerialize["pccRuleId"] = o.PccRuleId
	}
	if !IsNil(o.TypesOfNotif) {
		toSerialize["typesOfNotif"] = o.TypesOfNotif
	}
	if !IsNil(o.InterGrpIds) {
		toSerialize["interGrpIds"] = o.InterGrpIds
	}
	if !IsNil(o.SatBackhaulCategory) {
		toSerialize["satBackhaulCategory"] = o.SatBackhaulCategory
	}
	if o.PcfUeInfo.IsSet() {
		toSerialize["pcfUeInfo"] = o.PcfUeInfo.Get()
	}
	if o.NwdafDatas != nil {
		toSerialize["nwdafDatas"] = o.NwdafDatas
	}
	if !IsNil(o.AnGwStatus) {
		toSerialize["anGwStatus"] = o.AnGwStatus
	}
	return toSerialize, nil
}

type NullableSmPolicyUpdateContextData struct {
	value *SmPolicyUpdateContextData
	isSet bool
}

func (v NullableSmPolicyUpdateContextData) Get() *SmPolicyUpdateContextData {
	return v.value
}

func (v *NullableSmPolicyUpdateContextData) Set(val *SmPolicyUpdateContextData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmPolicyUpdateContextData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmPolicyUpdateContextData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmPolicyUpdateContextData(val *SmPolicyUpdateContextData) *NullableSmPolicyUpdateContextData {
	return &NullableSmPolicyUpdateContextData{value: val, isSet: true}
}

func (v NullableSmPolicyUpdateContextData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmPolicyUpdateContextData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


