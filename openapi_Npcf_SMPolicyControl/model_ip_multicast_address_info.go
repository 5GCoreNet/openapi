/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
)

// checks if the IpMulticastAddressInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpMulticastAddressInfo{}

// IpMulticastAddressInfo Contains the IP multicast addressing information.
type IpMulticastAddressInfo struct {
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
	SrcIpv4Addr *string `json:"srcIpv4Addr,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
	Ipv4MulAddr *string   `json:"ipv4MulAddr,omitempty"`
	SrcIpv6Addr *Ipv6Addr `json:"srcIpv6Addr,omitempty"`
	Ipv6MulAddr *Ipv6Addr `json:"ipv6MulAddr,omitempty"`
}

// NewIpMulticastAddressInfo instantiates a new IpMulticastAddressInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpMulticastAddressInfo() *IpMulticastAddressInfo {
	this := IpMulticastAddressInfo{}
	return &this
}

// NewIpMulticastAddressInfoWithDefaults instantiates a new IpMulticastAddressInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpMulticastAddressInfoWithDefaults() *IpMulticastAddressInfo {
	this := IpMulticastAddressInfo{}
	return &this
}

// GetSrcIpv4Addr returns the SrcIpv4Addr field value if set, zero value otherwise.
func (o *IpMulticastAddressInfo) GetSrcIpv4Addr() string {
	if o == nil || IsNil(o.SrcIpv4Addr) {
		var ret string
		return ret
	}
	return *o.SrcIpv4Addr
}

// GetSrcIpv4AddrOk returns a tuple with the SrcIpv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpMulticastAddressInfo) GetSrcIpv4AddrOk() (*string, bool) {
	if o == nil || IsNil(o.SrcIpv4Addr) {
		return nil, false
	}
	return o.SrcIpv4Addr, true
}

// HasSrcIpv4Addr returns a boolean if a field has been set.
func (o *IpMulticastAddressInfo) HasSrcIpv4Addr() bool {
	if o != nil && !IsNil(o.SrcIpv4Addr) {
		return true
	}

	return false
}

// SetSrcIpv4Addr gets a reference to the given string and assigns it to the SrcIpv4Addr field.
func (o *IpMulticastAddressInfo) SetSrcIpv4Addr(v string) {
	o.SrcIpv4Addr = &v
}

// GetIpv4MulAddr returns the Ipv4MulAddr field value if set, zero value otherwise.
func (o *IpMulticastAddressInfo) GetIpv4MulAddr() string {
	if o == nil || IsNil(o.Ipv4MulAddr) {
		var ret string
		return ret
	}
	return *o.Ipv4MulAddr
}

// GetIpv4MulAddrOk returns a tuple with the Ipv4MulAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpMulticastAddressInfo) GetIpv4MulAddrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4MulAddr) {
		return nil, false
	}
	return o.Ipv4MulAddr, true
}

// HasIpv4MulAddr returns a boolean if a field has been set.
func (o *IpMulticastAddressInfo) HasIpv4MulAddr() bool {
	if o != nil && !IsNil(o.Ipv4MulAddr) {
		return true
	}

	return false
}

// SetIpv4MulAddr gets a reference to the given string and assigns it to the Ipv4MulAddr field.
func (o *IpMulticastAddressInfo) SetIpv4MulAddr(v string) {
	o.Ipv4MulAddr = &v
}

// GetSrcIpv6Addr returns the SrcIpv6Addr field value if set, zero value otherwise.
func (o *IpMulticastAddressInfo) GetSrcIpv6Addr() Ipv6Addr {
	if o == nil || IsNil(o.SrcIpv6Addr) {
		var ret Ipv6Addr
		return ret
	}
	return *o.SrcIpv6Addr
}

// GetSrcIpv6AddrOk returns a tuple with the SrcIpv6Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpMulticastAddressInfo) GetSrcIpv6AddrOk() (*Ipv6Addr, bool) {
	if o == nil || IsNil(o.SrcIpv6Addr) {
		return nil, false
	}
	return o.SrcIpv6Addr, true
}

// HasSrcIpv6Addr returns a boolean if a field has been set.
func (o *IpMulticastAddressInfo) HasSrcIpv6Addr() bool {
	if o != nil && !IsNil(o.SrcIpv6Addr) {
		return true
	}

	return false
}

// SetSrcIpv6Addr gets a reference to the given Ipv6Addr and assigns it to the SrcIpv6Addr field.
func (o *IpMulticastAddressInfo) SetSrcIpv6Addr(v Ipv6Addr) {
	o.SrcIpv6Addr = &v
}

// GetIpv6MulAddr returns the Ipv6MulAddr field value if set, zero value otherwise.
func (o *IpMulticastAddressInfo) GetIpv6MulAddr() Ipv6Addr {
	if o == nil || IsNil(o.Ipv6MulAddr) {
		var ret Ipv6Addr
		return ret
	}
	return *o.Ipv6MulAddr
}

// GetIpv6MulAddrOk returns a tuple with the Ipv6MulAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpMulticastAddressInfo) GetIpv6MulAddrOk() (*Ipv6Addr, bool) {
	if o == nil || IsNil(o.Ipv6MulAddr) {
		return nil, false
	}
	return o.Ipv6MulAddr, true
}

// HasIpv6MulAddr returns a boolean if a field has been set.
func (o *IpMulticastAddressInfo) HasIpv6MulAddr() bool {
	if o != nil && !IsNil(o.Ipv6MulAddr) {
		return true
	}

	return false
}

// SetIpv6MulAddr gets a reference to the given Ipv6Addr and assigns it to the Ipv6MulAddr field.
func (o *IpMulticastAddressInfo) SetIpv6MulAddr(v Ipv6Addr) {
	o.Ipv6MulAddr = &v
}

func (o IpMulticastAddressInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpMulticastAddressInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SrcIpv4Addr) {
		toSerialize["srcIpv4Addr"] = o.SrcIpv4Addr
	}
	if !IsNil(o.Ipv4MulAddr) {
		toSerialize["ipv4MulAddr"] = o.Ipv4MulAddr
	}
	if !IsNil(o.SrcIpv6Addr) {
		toSerialize["srcIpv6Addr"] = o.SrcIpv6Addr
	}
	if !IsNil(o.Ipv6MulAddr) {
		toSerialize["ipv6MulAddr"] = o.Ipv6MulAddr
	}
	return toSerialize, nil
}

type NullableIpMulticastAddressInfo struct {
	value *IpMulticastAddressInfo
	isSet bool
}

func (v NullableIpMulticastAddressInfo) Get() *IpMulticastAddressInfo {
	return v.value
}

func (v *NullableIpMulticastAddressInfo) Set(val *IpMulticastAddressInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIpMulticastAddressInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIpMulticastAddressInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpMulticastAddressInfo(val *IpMulticastAddressInfo) *NullableIpMulticastAddressInfo {
	return &NullableIpMulticastAddressInfo{value: val, isSet: true}
}

func (v NullableIpMulticastAddressInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpMulticastAddressInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
