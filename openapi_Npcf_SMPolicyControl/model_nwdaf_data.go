/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
)

// checks if the NwdafData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NwdafData{}

// NwdafData Indicates the list of Analytic ID(s) per NWDAF instance ID used for the PDU Session consumed  by the SMF. 
type NwdafData struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NwdafInstanceId string `json:"nwdafInstanceId"`
	NwdafEvents []NwdafEvent `json:"nwdafEvents,omitempty"`
}

// NewNwdafData instantiates a new NwdafData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNwdafData(nwdafInstanceId string) *NwdafData {
	this := NwdafData{}
	this.NwdafInstanceId = nwdafInstanceId
	return &this
}

// NewNwdafDataWithDefaults instantiates a new NwdafData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNwdafDataWithDefaults() *NwdafData {
	this := NwdafData{}
	return &this
}

// GetNwdafInstanceId returns the NwdafInstanceId field value
func (o *NwdafData) GetNwdafInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NwdafInstanceId
}

// GetNwdafInstanceIdOk returns a tuple with the NwdafInstanceId field value
// and a boolean to check if the value has been set.
func (o *NwdafData) GetNwdafInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NwdafInstanceId, true
}

// SetNwdafInstanceId sets field value
func (o *NwdafData) SetNwdafInstanceId(v string) {
	o.NwdafInstanceId = v
}

// GetNwdafEvents returns the NwdafEvents field value if set, zero value otherwise.
func (o *NwdafData) GetNwdafEvents() []NwdafEvent {
	if o == nil || IsNil(o.NwdafEvents) {
		var ret []NwdafEvent
		return ret
	}
	return o.NwdafEvents
}

// GetNwdafEventsOk returns a tuple with the NwdafEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NwdafData) GetNwdafEventsOk() ([]NwdafEvent, bool) {
	if o == nil || IsNil(o.NwdafEvents) {
		return nil, false
	}
	return o.NwdafEvents, true
}

// HasNwdafEvents returns a boolean if a field has been set.
func (o *NwdafData) HasNwdafEvents() bool {
	if o != nil && !IsNil(o.NwdafEvents) {
		return true
	}

	return false
}

// SetNwdafEvents gets a reference to the given []NwdafEvent and assigns it to the NwdafEvents field.
func (o *NwdafData) SetNwdafEvents(v []NwdafEvent) {
	o.NwdafEvents = v
}

func (o NwdafData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NwdafData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nwdafInstanceId"] = o.NwdafInstanceId
	if !IsNil(o.NwdafEvents) {
		toSerialize["nwdafEvents"] = o.NwdafEvents
	}
	return toSerialize, nil
}

type NullableNwdafData struct {
	value *NwdafData
	isSet bool
}

func (v NullableNwdafData) Get() *NwdafData {
	return v.value
}

func (v *NullableNwdafData) Set(val *NwdafData) {
	v.value = val
	v.isSet = true
}

func (v NullableNwdafData) IsSet() bool {
	return v.isSet
}

func (v *NullableNwdafData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNwdafData(val *NwdafData) *NullableNwdafData {
	return &NullableNwdafData{value: val, isSet: true}
}

func (v NullableNwdafData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNwdafData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


