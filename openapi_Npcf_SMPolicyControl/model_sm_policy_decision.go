/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"time"
)

// checks if the SmPolicyDecision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmPolicyDecision{}

// SmPolicyDecision Contains the SM policies authorized by the PCF.
type SmPolicyDecision struct {
	// A map of Sessionrules with the content being the SessionRule as described in clause 5.6.2.7. The key used in this map for each entry is the sessRuleId attribute of the corresponding SessionRule. 
	SessRules *map[string]SessionRule `json:"sessRules,omitempty"`
	// A map of PCC rules with the content being the PCCRule as described in  clause 5.6.2.6. The key used in this map for each entry is the pccRuleId attribute of the corresponding PccRule. 
	PccRules map[string]PccRule `json:"pccRules,omitempty"`
	// If it is included and set to true, it indicates the P-CSCF Restoration is requested. 
	PcscfRestIndication *bool `json:"pcscfRestIndication,omitempty"`
	// Map of QoS data policy decisions. The key used in this map for each entry is the qosId attribute of the corresponding QosData. 
	QosDecs *map[string]QosData `json:"qosDecs,omitempty"`
	// Map of Charging data policy decisions. The key used in this map for each entry is the chgId attribute of the corresponding ChargingData. 
	ChgDecs map[string]ChargingData `json:"chgDecs,omitempty"`
	ChargingInfo *ChargingInformation `json:"chargingInfo,omitempty"`
	// Map of Traffic Control data policy decisions. The key used in this map for each entry is the tcId attribute of the corresponding TrafficControlData. 
	TraffContDecs *map[string]TrafficControlData `json:"traffContDecs,omitempty"`
	// Map of Usage Monitoring data policy decisions. The key used in this map for each entry is the umId attribute of the corresponding UsageMonitoringData. 
	UmDecs map[string]UsageMonitoringData `json:"umDecs,omitempty"`
	// Map of QoS characteristics for non standard 5QIs. This map uses the 5QI values as keys. 
	QosChars *map[string]QosCharacteristics `json:"qosChars,omitempty"`
	// Map of QoS Monitoring data policy decisions. The key used in this map for each entry is the qmId attribute of the corresponding QosMonitoringData. 
	QosMonDecs map[string]QosMonitoringData `json:"qosMonDecs,omitempty"`
	// indicating a time in seconds.
	ReflectiveQoSTimer *int32 `json:"reflectiveQoSTimer,omitempty"`
	// A map of condition data with the content being as described in clause 5.6.2.9. The key used in this map for each entry is the condId attribute of the corresponding ConditionData. 
	Conds map[string]ConditionData `json:"conds,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	RevalidationTime *time.Time `json:"revalidationTime,omitempty"`
	// Indicates the offline charging is applicable to the PDU session when it is included and  set to true. 
	Offline *bool `json:"offline,omitempty"`
	// Indicates the online charging is applicable to the PDU session when it is included and  set to true. 
	Online *bool `json:"online,omitempty"`
	// Indicates that the online charging method shall never be used for any PCC rule activated during the lifetime of the PDU session. 
	OfflineChOnly *bool `json:"offlineChOnly,omitempty"`
	// Defines the policy control request triggers subscribed by the PCF.
	PolicyCtrlReqTriggers []PolicyControlRequestTrigger `json:"policyCtrlReqTriggers,omitempty"`
	// Defines the last list of rule control data requested by the PCF.
	LastReqRuleData []RequestedRuleData `json:"lastReqRuleData,omitempty"`
	LastReqUsageData *RequestedUsageData `json:"lastReqUsageData,omitempty"`
	// Map of PRA information. The praId attribute within the PresenceInfo data type is the key  of the map. 
	PraInfos map[string]PresenceInfoRm `json:"praInfos,omitempty"`
	// Represents information that identifies which IP pool or external server is used to allocate the IP address. 
	Ipv4Index *int32 `json:"ipv4Index,omitempty"`
	// Represents information that identifies which IP pool or external server is used to allocate the IP address. 
	Ipv6Index *int32 `json:"ipv6Index,omitempty"`
	QosFlowUsage *QosFlowUsage `json:"qosFlowUsage,omitempty"`
	RelCause *SmPolicyAssociationReleaseCause `json:"relCause,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
	TsnBridgeManCont *BridgeManagementContainer `json:"tsnBridgeManCont,omitempty"`
	TsnPortManContDstt *PortManagementContainer `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts []PortManagementContainer `json:"tsnPortManContNwtts,omitempty"`
	// Indicates whether the PDU session is a redundant PDU session. If absent it means the PDU session is not a redundant PDU session. 
	RedSessIndication *bool `json:"redSessIndication,omitempty"`
}

// NewSmPolicyDecision instantiates a new SmPolicyDecision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmPolicyDecision() *SmPolicyDecision {
	this := SmPolicyDecision{}
	var offlineChOnly bool = false
	this.OfflineChOnly = &offlineChOnly
	return &this
}

// NewSmPolicyDecisionWithDefaults instantiates a new SmPolicyDecision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmPolicyDecisionWithDefaults() *SmPolicyDecision {
	this := SmPolicyDecision{}
	var offlineChOnly bool = false
	this.OfflineChOnly = &offlineChOnly
	return &this
}

// GetSessRules returns the SessRules field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetSessRules() map[string]SessionRule {
	if o == nil || IsNil(o.SessRules) {
		var ret map[string]SessionRule
		return ret
	}
	return *o.SessRules
}

// GetSessRulesOk returns a tuple with the SessRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetSessRulesOk() (*map[string]SessionRule, bool) {
	if o == nil || IsNil(o.SessRules) {
		return nil, false
	}
	return o.SessRules, true
}

// HasSessRules returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasSessRules() bool {
	if o != nil && !IsNil(o.SessRules) {
		return true
	}

	return false
}

// SetSessRules gets a reference to the given map[string]SessionRule and assigns it to the SessRules field.
func (o *SmPolicyDecision) SetSessRules(v map[string]SessionRule) {
	o.SessRules = &v
}

// GetPccRules returns the PccRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDecision) GetPccRules() map[string]PccRule {
	if o == nil {
		var ret map[string]PccRule
		return ret
	}
	return o.PccRules
}

// GetPccRulesOk returns a tuple with the PccRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDecision) GetPccRulesOk() (*map[string]PccRule, bool) {
	if o == nil || IsNil(o.PccRules) {
		return nil, false
	}
	return &o.PccRules, true
}

// HasPccRules returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasPccRules() bool {
	if o != nil && IsNil(o.PccRules) {
		return true
	}

	return false
}

// SetPccRules gets a reference to the given map[string]PccRule and assigns it to the PccRules field.
func (o *SmPolicyDecision) SetPccRules(v map[string]PccRule) {
	o.PccRules = v
}

// GetPcscfRestIndication returns the PcscfRestIndication field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetPcscfRestIndication() bool {
	if o == nil || IsNil(o.PcscfRestIndication) {
		var ret bool
		return ret
	}
	return *o.PcscfRestIndication
}

// GetPcscfRestIndicationOk returns a tuple with the PcscfRestIndication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetPcscfRestIndicationOk() (*bool, bool) {
	if o == nil || IsNil(o.PcscfRestIndication) {
		return nil, false
	}
	return o.PcscfRestIndication, true
}

// HasPcscfRestIndication returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasPcscfRestIndication() bool {
	if o != nil && !IsNil(o.PcscfRestIndication) {
		return true
	}

	return false
}

// SetPcscfRestIndication gets a reference to the given bool and assigns it to the PcscfRestIndication field.
func (o *SmPolicyDecision) SetPcscfRestIndication(v bool) {
	o.PcscfRestIndication = &v
}

// GetQosDecs returns the QosDecs field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetQosDecs() map[string]QosData {
	if o == nil || IsNil(o.QosDecs) {
		var ret map[string]QosData
		return ret
	}
	return *o.QosDecs
}

// GetQosDecsOk returns a tuple with the QosDecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetQosDecsOk() (*map[string]QosData, bool) {
	if o == nil || IsNil(o.QosDecs) {
		return nil, false
	}
	return o.QosDecs, true
}

// HasQosDecs returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasQosDecs() bool {
	if o != nil && !IsNil(o.QosDecs) {
		return true
	}

	return false
}

// SetQosDecs gets a reference to the given map[string]QosData and assigns it to the QosDecs field.
func (o *SmPolicyDecision) SetQosDecs(v map[string]QosData) {
	o.QosDecs = &v
}

// GetChgDecs returns the ChgDecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDecision) GetChgDecs() map[string]ChargingData {
	if o == nil {
		var ret map[string]ChargingData
		return ret
	}
	return o.ChgDecs
}

// GetChgDecsOk returns a tuple with the ChgDecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDecision) GetChgDecsOk() (*map[string]ChargingData, bool) {
	if o == nil || IsNil(o.ChgDecs) {
		return nil, false
	}
	return &o.ChgDecs, true
}

// HasChgDecs returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasChgDecs() bool {
	if o != nil && IsNil(o.ChgDecs) {
		return true
	}

	return false
}

// SetChgDecs gets a reference to the given map[string]ChargingData and assigns it to the ChgDecs field.
func (o *SmPolicyDecision) SetChgDecs(v map[string]ChargingData) {
	o.ChgDecs = v
}

// GetChargingInfo returns the ChargingInfo field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetChargingInfo() ChargingInformation {
	if o == nil || IsNil(o.ChargingInfo) {
		var ret ChargingInformation
		return ret
	}
	return *o.ChargingInfo
}

// GetChargingInfoOk returns a tuple with the ChargingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetChargingInfoOk() (*ChargingInformation, bool) {
	if o == nil || IsNil(o.ChargingInfo) {
		return nil, false
	}
	return o.ChargingInfo, true
}

// HasChargingInfo returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasChargingInfo() bool {
	if o != nil && !IsNil(o.ChargingInfo) {
		return true
	}

	return false
}

// SetChargingInfo gets a reference to the given ChargingInformation and assigns it to the ChargingInfo field.
func (o *SmPolicyDecision) SetChargingInfo(v ChargingInformation) {
	o.ChargingInfo = &v
}

// GetTraffContDecs returns the TraffContDecs field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetTraffContDecs() map[string]TrafficControlData {
	if o == nil || IsNil(o.TraffContDecs) {
		var ret map[string]TrafficControlData
		return ret
	}
	return *o.TraffContDecs
}

// GetTraffContDecsOk returns a tuple with the TraffContDecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetTraffContDecsOk() (*map[string]TrafficControlData, bool) {
	if o == nil || IsNil(o.TraffContDecs) {
		return nil, false
	}
	return o.TraffContDecs, true
}

// HasTraffContDecs returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasTraffContDecs() bool {
	if o != nil && !IsNil(o.TraffContDecs) {
		return true
	}

	return false
}

// SetTraffContDecs gets a reference to the given map[string]TrafficControlData and assigns it to the TraffContDecs field.
func (o *SmPolicyDecision) SetTraffContDecs(v map[string]TrafficControlData) {
	o.TraffContDecs = &v
}

// GetUmDecs returns the UmDecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDecision) GetUmDecs() map[string]UsageMonitoringData {
	if o == nil {
		var ret map[string]UsageMonitoringData
		return ret
	}
	return o.UmDecs
}

// GetUmDecsOk returns a tuple with the UmDecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDecision) GetUmDecsOk() (*map[string]UsageMonitoringData, bool) {
	if o == nil || IsNil(o.UmDecs) {
		return nil, false
	}
	return &o.UmDecs, true
}

// HasUmDecs returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasUmDecs() bool {
	if o != nil && IsNil(o.UmDecs) {
		return true
	}

	return false
}

// SetUmDecs gets a reference to the given map[string]UsageMonitoringData and assigns it to the UmDecs field.
func (o *SmPolicyDecision) SetUmDecs(v map[string]UsageMonitoringData) {
	o.UmDecs = v
}

// GetQosChars returns the QosChars field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetQosChars() map[string]QosCharacteristics {
	if o == nil || IsNil(o.QosChars) {
		var ret map[string]QosCharacteristics
		return ret
	}
	return *o.QosChars
}

// GetQosCharsOk returns a tuple with the QosChars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetQosCharsOk() (*map[string]QosCharacteristics, bool) {
	if o == nil || IsNil(o.QosChars) {
		return nil, false
	}
	return o.QosChars, true
}

// HasQosChars returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasQosChars() bool {
	if o != nil && !IsNil(o.QosChars) {
		return true
	}

	return false
}

// SetQosChars gets a reference to the given map[string]QosCharacteristics and assigns it to the QosChars field.
func (o *SmPolicyDecision) SetQosChars(v map[string]QosCharacteristics) {
	o.QosChars = &v
}

// GetQosMonDecs returns the QosMonDecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDecision) GetQosMonDecs() map[string]QosMonitoringData {
	if o == nil {
		var ret map[string]QosMonitoringData
		return ret
	}
	return o.QosMonDecs
}

// GetQosMonDecsOk returns a tuple with the QosMonDecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDecision) GetQosMonDecsOk() (*map[string]QosMonitoringData, bool) {
	if o == nil || IsNil(o.QosMonDecs) {
		return nil, false
	}
	return &o.QosMonDecs, true
}

// HasQosMonDecs returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasQosMonDecs() bool {
	if o != nil && IsNil(o.QosMonDecs) {
		return true
	}

	return false
}

// SetQosMonDecs gets a reference to the given map[string]QosMonitoringData and assigns it to the QosMonDecs field.
func (o *SmPolicyDecision) SetQosMonDecs(v map[string]QosMonitoringData) {
	o.QosMonDecs = v
}

// GetReflectiveQoSTimer returns the ReflectiveQoSTimer field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetReflectiveQoSTimer() int32 {
	if o == nil || IsNil(o.ReflectiveQoSTimer) {
		var ret int32
		return ret
	}
	return *o.ReflectiveQoSTimer
}

// GetReflectiveQoSTimerOk returns a tuple with the ReflectiveQoSTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetReflectiveQoSTimerOk() (*int32, bool) {
	if o == nil || IsNil(o.ReflectiveQoSTimer) {
		return nil, false
	}
	return o.ReflectiveQoSTimer, true
}

// HasReflectiveQoSTimer returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasReflectiveQoSTimer() bool {
	if o != nil && !IsNil(o.ReflectiveQoSTimer) {
		return true
	}

	return false
}

// SetReflectiveQoSTimer gets a reference to the given int32 and assigns it to the ReflectiveQoSTimer field.
func (o *SmPolicyDecision) SetReflectiveQoSTimer(v int32) {
	o.ReflectiveQoSTimer = &v
}

// GetConds returns the Conds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDecision) GetConds() map[string]ConditionData {
	if o == nil {
		var ret map[string]ConditionData
		return ret
	}
	return o.Conds
}

// GetCondsOk returns a tuple with the Conds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDecision) GetCondsOk() (*map[string]ConditionData, bool) {
	if o == nil || IsNil(o.Conds) {
		return nil, false
	}
	return &o.Conds, true
}

// HasConds returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasConds() bool {
	if o != nil && IsNil(o.Conds) {
		return true
	}

	return false
}

// SetConds gets a reference to the given map[string]ConditionData and assigns it to the Conds field.
func (o *SmPolicyDecision) SetConds(v map[string]ConditionData) {
	o.Conds = v
}

// GetRevalidationTime returns the RevalidationTime field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetRevalidationTime() time.Time {
	if o == nil || IsNil(o.RevalidationTime) {
		var ret time.Time
		return ret
	}
	return *o.RevalidationTime
}

// GetRevalidationTimeOk returns a tuple with the RevalidationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetRevalidationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RevalidationTime) {
		return nil, false
	}
	return o.RevalidationTime, true
}

// HasRevalidationTime returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasRevalidationTime() bool {
	if o != nil && !IsNil(o.RevalidationTime) {
		return true
	}

	return false
}

// SetRevalidationTime gets a reference to the given time.Time and assigns it to the RevalidationTime field.
func (o *SmPolicyDecision) SetRevalidationTime(v time.Time) {
	o.RevalidationTime = &v
}

// GetOffline returns the Offline field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetOffline() bool {
	if o == nil || IsNil(o.Offline) {
		var ret bool
		return ret
	}
	return *o.Offline
}

// GetOfflineOk returns a tuple with the Offline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetOfflineOk() (*bool, bool) {
	if o == nil || IsNil(o.Offline) {
		return nil, false
	}
	return o.Offline, true
}

// HasOffline returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasOffline() bool {
	if o != nil && !IsNil(o.Offline) {
		return true
	}

	return false
}

// SetOffline gets a reference to the given bool and assigns it to the Offline field.
func (o *SmPolicyDecision) SetOffline(v bool) {
	o.Offline = &v
}

// GetOnline returns the Online field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetOnline() bool {
	if o == nil || IsNil(o.Online) {
		var ret bool
		return ret
	}
	return *o.Online
}

// GetOnlineOk returns a tuple with the Online field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetOnlineOk() (*bool, bool) {
	if o == nil || IsNil(o.Online) {
		return nil, false
	}
	return o.Online, true
}

// HasOnline returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasOnline() bool {
	if o != nil && !IsNil(o.Online) {
		return true
	}

	return false
}

// SetOnline gets a reference to the given bool and assigns it to the Online field.
func (o *SmPolicyDecision) SetOnline(v bool) {
	o.Online = &v
}

// GetOfflineChOnly returns the OfflineChOnly field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetOfflineChOnly() bool {
	if o == nil || IsNil(o.OfflineChOnly) {
		var ret bool
		return ret
	}
	return *o.OfflineChOnly
}

// GetOfflineChOnlyOk returns a tuple with the OfflineChOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetOfflineChOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.OfflineChOnly) {
		return nil, false
	}
	return o.OfflineChOnly, true
}

// HasOfflineChOnly returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasOfflineChOnly() bool {
	if o != nil && !IsNil(o.OfflineChOnly) {
		return true
	}

	return false
}

// SetOfflineChOnly gets a reference to the given bool and assigns it to the OfflineChOnly field.
func (o *SmPolicyDecision) SetOfflineChOnly(v bool) {
	o.OfflineChOnly = &v
}

// GetPolicyCtrlReqTriggers returns the PolicyCtrlReqTriggers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDecision) GetPolicyCtrlReqTriggers() []PolicyControlRequestTrigger {
	if o == nil {
		var ret []PolicyControlRequestTrigger
		return ret
	}
	return o.PolicyCtrlReqTriggers
}

// GetPolicyCtrlReqTriggersOk returns a tuple with the PolicyCtrlReqTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDecision) GetPolicyCtrlReqTriggersOk() ([]PolicyControlRequestTrigger, bool) {
	if o == nil || IsNil(o.PolicyCtrlReqTriggers) {
		return nil, false
	}
	return o.PolicyCtrlReqTriggers, true
}

// HasPolicyCtrlReqTriggers returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasPolicyCtrlReqTriggers() bool {
	if o != nil && IsNil(o.PolicyCtrlReqTriggers) {
		return true
	}

	return false
}

// SetPolicyCtrlReqTriggers gets a reference to the given []PolicyControlRequestTrigger and assigns it to the PolicyCtrlReqTriggers field.
func (o *SmPolicyDecision) SetPolicyCtrlReqTriggers(v []PolicyControlRequestTrigger) {
	o.PolicyCtrlReqTriggers = v
}

// GetLastReqRuleData returns the LastReqRuleData field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetLastReqRuleData() []RequestedRuleData {
	if o == nil || IsNil(o.LastReqRuleData) {
		var ret []RequestedRuleData
		return ret
	}
	return o.LastReqRuleData
}

// GetLastReqRuleDataOk returns a tuple with the LastReqRuleData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetLastReqRuleDataOk() ([]RequestedRuleData, bool) {
	if o == nil || IsNil(o.LastReqRuleData) {
		return nil, false
	}
	return o.LastReqRuleData, true
}

// HasLastReqRuleData returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasLastReqRuleData() bool {
	if o != nil && !IsNil(o.LastReqRuleData) {
		return true
	}

	return false
}

// SetLastReqRuleData gets a reference to the given []RequestedRuleData and assigns it to the LastReqRuleData field.
func (o *SmPolicyDecision) SetLastReqRuleData(v []RequestedRuleData) {
	o.LastReqRuleData = v
}

// GetLastReqUsageData returns the LastReqUsageData field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetLastReqUsageData() RequestedUsageData {
	if o == nil || IsNil(o.LastReqUsageData) {
		var ret RequestedUsageData
		return ret
	}
	return *o.LastReqUsageData
}

// GetLastReqUsageDataOk returns a tuple with the LastReqUsageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetLastReqUsageDataOk() (*RequestedUsageData, bool) {
	if o == nil || IsNil(o.LastReqUsageData) {
		return nil, false
	}
	return o.LastReqUsageData, true
}

// HasLastReqUsageData returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasLastReqUsageData() bool {
	if o != nil && !IsNil(o.LastReqUsageData) {
		return true
	}

	return false
}

// SetLastReqUsageData gets a reference to the given RequestedUsageData and assigns it to the LastReqUsageData field.
func (o *SmPolicyDecision) SetLastReqUsageData(v RequestedUsageData) {
	o.LastReqUsageData = &v
}

// GetPraInfos returns the PraInfos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDecision) GetPraInfos() map[string]PresenceInfoRm {
	if o == nil {
		var ret map[string]PresenceInfoRm
		return ret
	}
	return o.PraInfos
}

// GetPraInfosOk returns a tuple with the PraInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDecision) GetPraInfosOk() (*map[string]PresenceInfoRm, bool) {
	if o == nil || IsNil(o.PraInfos) {
		return nil, false
	}
	return &o.PraInfos, true
}

// HasPraInfos returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasPraInfos() bool {
	if o != nil && IsNil(o.PraInfos) {
		return true
	}

	return false
}

// SetPraInfos gets a reference to the given map[string]PresenceInfoRm and assigns it to the PraInfos field.
func (o *SmPolicyDecision) SetPraInfos(v map[string]PresenceInfoRm) {
	o.PraInfos = v
}

// GetIpv4Index returns the Ipv4Index field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetIpv4Index() int32 {
	if o == nil || IsNil(o.Ipv4Index) {
		var ret int32
		return ret
	}
	return *o.Ipv4Index
}

// GetIpv4IndexOk returns a tuple with the Ipv4Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetIpv4IndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Ipv4Index) {
		return nil, false
	}
	return o.Ipv4Index, true
}

// HasIpv4Index returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasIpv4Index() bool {
	if o != nil && !IsNil(o.Ipv4Index) {
		return true
	}

	return false
}

// SetIpv4Index gets a reference to the given int32 and assigns it to the Ipv4Index field.
func (o *SmPolicyDecision) SetIpv4Index(v int32) {
	o.Ipv4Index = &v
}

// GetIpv6Index returns the Ipv6Index field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetIpv6Index() int32 {
	if o == nil || IsNil(o.Ipv6Index) {
		var ret int32
		return ret
	}
	return *o.Ipv6Index
}

// GetIpv6IndexOk returns a tuple with the Ipv6Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetIpv6IndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Ipv6Index) {
		return nil, false
	}
	return o.Ipv6Index, true
}

// HasIpv6Index returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasIpv6Index() bool {
	if o != nil && !IsNil(o.Ipv6Index) {
		return true
	}

	return false
}

// SetIpv6Index gets a reference to the given int32 and assigns it to the Ipv6Index field.
func (o *SmPolicyDecision) SetIpv6Index(v int32) {
	o.Ipv6Index = &v
}

// GetQosFlowUsage returns the QosFlowUsage field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetQosFlowUsage() QosFlowUsage {
	if o == nil || IsNil(o.QosFlowUsage) {
		var ret QosFlowUsage
		return ret
	}
	return *o.QosFlowUsage
}

// GetQosFlowUsageOk returns a tuple with the QosFlowUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetQosFlowUsageOk() (*QosFlowUsage, bool) {
	if o == nil || IsNil(o.QosFlowUsage) {
		return nil, false
	}
	return o.QosFlowUsage, true
}

// HasQosFlowUsage returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasQosFlowUsage() bool {
	if o != nil && !IsNil(o.QosFlowUsage) {
		return true
	}

	return false
}

// SetQosFlowUsage gets a reference to the given QosFlowUsage and assigns it to the QosFlowUsage field.
func (o *SmPolicyDecision) SetQosFlowUsage(v QosFlowUsage) {
	o.QosFlowUsage = &v
}

// GetRelCause returns the RelCause field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetRelCause() SmPolicyAssociationReleaseCause {
	if o == nil || IsNil(o.RelCause) {
		var ret SmPolicyAssociationReleaseCause
		return ret
	}
	return *o.RelCause
}

// GetRelCauseOk returns a tuple with the RelCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetRelCauseOk() (*SmPolicyAssociationReleaseCause, bool) {
	if o == nil || IsNil(o.RelCause) {
		return nil, false
	}
	return o.RelCause, true
}

// HasRelCause returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasRelCause() bool {
	if o != nil && !IsNil(o.RelCause) {
		return true
	}

	return false
}

// SetRelCause gets a reference to the given SmPolicyAssociationReleaseCause and assigns it to the RelCause field.
func (o *SmPolicyDecision) SetRelCause(v SmPolicyAssociationReleaseCause) {
	o.RelCause = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *SmPolicyDecision) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

// GetTsnBridgeManCont returns the TsnBridgeManCont field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetTsnBridgeManCont() BridgeManagementContainer {
	if o == nil || IsNil(o.TsnBridgeManCont) {
		var ret BridgeManagementContainer
		return ret
	}
	return *o.TsnBridgeManCont
}

// GetTsnBridgeManContOk returns a tuple with the TsnBridgeManCont field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetTsnBridgeManContOk() (*BridgeManagementContainer, bool) {
	if o == nil || IsNil(o.TsnBridgeManCont) {
		return nil, false
	}
	return o.TsnBridgeManCont, true
}

// HasTsnBridgeManCont returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasTsnBridgeManCont() bool {
	if o != nil && !IsNil(o.TsnBridgeManCont) {
		return true
	}

	return false
}

// SetTsnBridgeManCont gets a reference to the given BridgeManagementContainer and assigns it to the TsnBridgeManCont field.
func (o *SmPolicyDecision) SetTsnBridgeManCont(v BridgeManagementContainer) {
	o.TsnBridgeManCont = &v
}

// GetTsnPortManContDstt returns the TsnPortManContDstt field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetTsnPortManContDstt() PortManagementContainer {
	if o == nil || IsNil(o.TsnPortManContDstt) {
		var ret PortManagementContainer
		return ret
	}
	return *o.TsnPortManContDstt
}

// GetTsnPortManContDsttOk returns a tuple with the TsnPortManContDstt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetTsnPortManContDsttOk() (*PortManagementContainer, bool) {
	if o == nil || IsNil(o.TsnPortManContDstt) {
		return nil, false
	}
	return o.TsnPortManContDstt, true
}

// HasTsnPortManContDstt returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasTsnPortManContDstt() bool {
	if o != nil && !IsNil(o.TsnPortManContDstt) {
		return true
	}

	return false
}

// SetTsnPortManContDstt gets a reference to the given PortManagementContainer and assigns it to the TsnPortManContDstt field.
func (o *SmPolicyDecision) SetTsnPortManContDstt(v PortManagementContainer) {
	o.TsnPortManContDstt = &v
}

// GetTsnPortManContNwtts returns the TsnPortManContNwtts field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetTsnPortManContNwtts() []PortManagementContainer {
	if o == nil || IsNil(o.TsnPortManContNwtts) {
		var ret []PortManagementContainer
		return ret
	}
	return o.TsnPortManContNwtts
}

// GetTsnPortManContNwttsOk returns a tuple with the TsnPortManContNwtts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetTsnPortManContNwttsOk() ([]PortManagementContainer, bool) {
	if o == nil || IsNil(o.TsnPortManContNwtts) {
		return nil, false
	}
	return o.TsnPortManContNwtts, true
}

// HasTsnPortManContNwtts returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasTsnPortManContNwtts() bool {
	if o != nil && !IsNil(o.TsnPortManContNwtts) {
		return true
	}

	return false
}

// SetTsnPortManContNwtts gets a reference to the given []PortManagementContainer and assigns it to the TsnPortManContNwtts field.
func (o *SmPolicyDecision) SetTsnPortManContNwtts(v []PortManagementContainer) {
	o.TsnPortManContNwtts = v
}

// GetRedSessIndication returns the RedSessIndication field value if set, zero value otherwise.
func (o *SmPolicyDecision) GetRedSessIndication() bool {
	if o == nil || IsNil(o.RedSessIndication) {
		var ret bool
		return ret
	}
	return *o.RedSessIndication
}

// GetRedSessIndicationOk returns a tuple with the RedSessIndication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDecision) GetRedSessIndicationOk() (*bool, bool) {
	if o == nil || IsNil(o.RedSessIndication) {
		return nil, false
	}
	return o.RedSessIndication, true
}

// HasRedSessIndication returns a boolean if a field has been set.
func (o *SmPolicyDecision) HasRedSessIndication() bool {
	if o != nil && !IsNil(o.RedSessIndication) {
		return true
	}

	return false
}

// SetRedSessIndication gets a reference to the given bool and assigns it to the RedSessIndication field.
func (o *SmPolicyDecision) SetRedSessIndication(v bool) {
	o.RedSessIndication = &v
}

func (o SmPolicyDecision) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmPolicyDecision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SessRules) {
		toSerialize["sessRules"] = o.SessRules
	}
	if o.PccRules != nil {
		toSerialize["pccRules"] = o.PccRules
	}
	if !IsNil(o.PcscfRestIndication) {
		toSerialize["pcscfRestIndication"] = o.PcscfRestIndication
	}
	if !IsNil(o.QosDecs) {
		toSerialize["qosDecs"] = o.QosDecs
	}
	if o.ChgDecs != nil {
		toSerialize["chgDecs"] = o.ChgDecs
	}
	if !IsNil(o.ChargingInfo) {
		toSerialize["chargingInfo"] = o.ChargingInfo
	}
	if !IsNil(o.TraffContDecs) {
		toSerialize["traffContDecs"] = o.TraffContDecs
	}
	if o.UmDecs != nil {
		toSerialize["umDecs"] = o.UmDecs
	}
	if !IsNil(o.QosChars) {
		toSerialize["qosChars"] = o.QosChars
	}
	if o.QosMonDecs != nil {
		toSerialize["qosMonDecs"] = o.QosMonDecs
	}
	if !IsNil(o.ReflectiveQoSTimer) {
		toSerialize["reflectiveQoSTimer"] = o.ReflectiveQoSTimer
	}
	if o.Conds != nil {
		toSerialize["conds"] = o.Conds
	}
	if !IsNil(o.RevalidationTime) {
		toSerialize["revalidationTime"] = o.RevalidationTime
	}
	if !IsNil(o.Offline) {
		toSerialize["offline"] = o.Offline
	}
	if !IsNil(o.Online) {
		toSerialize["online"] = o.Online
	}
	if !IsNil(o.OfflineChOnly) {
		toSerialize["offlineChOnly"] = o.OfflineChOnly
	}
	if o.PolicyCtrlReqTriggers != nil {
		toSerialize["policyCtrlReqTriggers"] = o.PolicyCtrlReqTriggers
	}
	if !IsNil(o.LastReqRuleData) {
		toSerialize["lastReqRuleData"] = o.LastReqRuleData
	}
	if !IsNil(o.LastReqUsageData) {
		toSerialize["lastReqUsageData"] = o.LastReqUsageData
	}
	if o.PraInfos != nil {
		toSerialize["praInfos"] = o.PraInfos
	}
	if !IsNil(o.Ipv4Index) {
		toSerialize["ipv4Index"] = o.Ipv4Index
	}
	if !IsNil(o.Ipv6Index) {
		toSerialize["ipv6Index"] = o.Ipv6Index
	}
	if !IsNil(o.QosFlowUsage) {
		toSerialize["qosFlowUsage"] = o.QosFlowUsage
	}
	if !IsNil(o.RelCause) {
		toSerialize["relCause"] = o.RelCause
	}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	if !IsNil(o.TsnBridgeManCont) {
		toSerialize["tsnBridgeManCont"] = o.TsnBridgeManCont
	}
	if !IsNil(o.TsnPortManContDstt) {
		toSerialize["tsnPortManContDstt"] = o.TsnPortManContDstt
	}
	if !IsNil(o.TsnPortManContNwtts) {
		toSerialize["tsnPortManContNwtts"] = o.TsnPortManContNwtts
	}
	if !IsNil(o.RedSessIndication) {
		toSerialize["redSessIndication"] = o.RedSessIndication
	}
	return toSerialize, nil
}

type NullableSmPolicyDecision struct {
	value *SmPolicyDecision
	isSet bool
}

func (v NullableSmPolicyDecision) Get() *SmPolicyDecision {
	return v.value
}

func (v *NullableSmPolicyDecision) Set(val *SmPolicyDecision) {
	v.value = val
	v.isSet = true
}

func (v NullableSmPolicyDecision) IsSet() bool {
	return v.isSet
}

func (v *NullableSmPolicyDecision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmPolicyDecision(val *SmPolicyDecision) *NullableSmPolicyDecision {
	return &NullableSmPolicyDecision{value: val, isSet: true}
}

func (v NullableSmPolicyDecision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmPolicyDecision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


