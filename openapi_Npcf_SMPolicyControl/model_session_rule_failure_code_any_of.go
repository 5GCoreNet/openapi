/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// SessionRuleFailureCodeAnyOf the model 'SessionRuleFailureCodeAnyOf'
type SessionRuleFailureCodeAnyOf string

// List of SessionRuleFailureCode_anyOf
const (
	NF_MAL SessionRuleFailureCodeAnyOf = "NF_MAL"
	RES_LIM SessionRuleFailureCodeAnyOf = "RES_LIM"
	SESSION_RESOURCE_ALLOCATION_FAILURE SessionRuleFailureCodeAnyOf = "SESSION_RESOURCE_ALLOCATION_FAILURE"
	UNSUCC_QOS_VAL SessionRuleFailureCodeAnyOf = "UNSUCC_QOS_VAL"
	INCORRECT_UM SessionRuleFailureCodeAnyOf = "INCORRECT_UM"
	UE_STA_SUSP SessionRuleFailureCodeAnyOf = "UE_STA_SUSP"
	UNKNOWN_REF_ID SessionRuleFailureCodeAnyOf = "UNKNOWN_REF_ID"
	INCORRECT_COND_DATA SessionRuleFailureCodeAnyOf = "INCORRECT_COND_DATA"
	REF_ID_COLLISION SessionRuleFailureCodeAnyOf = "REF_ID_COLLISION"
	AN_GW_FAILED SessionRuleFailureCodeAnyOf = "AN_GW_FAILED"
)

// All allowed values of SessionRuleFailureCodeAnyOf enum
var AllowedSessionRuleFailureCodeAnyOfEnumValues = []SessionRuleFailureCodeAnyOf{
	"NF_MAL",
	"RES_LIM",
	"SESSION_RESOURCE_ALLOCATION_FAILURE",
	"UNSUCC_QOS_VAL",
	"INCORRECT_UM",
	"UE_STA_SUSP",
	"UNKNOWN_REF_ID",
	"INCORRECT_COND_DATA",
	"REF_ID_COLLISION",
	"AN_GW_FAILED",
}

func (v *SessionRuleFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionRuleFailureCodeAnyOf(value)
	for _, existing := range AllowedSessionRuleFailureCodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionRuleFailureCodeAnyOf", value)
}

// NewSessionRuleFailureCodeAnyOfFromValue returns a pointer to a valid SessionRuleFailureCodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionRuleFailureCodeAnyOfFromValue(v string) (*SessionRuleFailureCodeAnyOf, error) {
	ev := SessionRuleFailureCodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SessionRuleFailureCodeAnyOf: valid values are %v", v, AllowedSessionRuleFailureCodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionRuleFailureCodeAnyOf) IsValid() bool {
	for _, existing := range AllowedSessionRuleFailureCodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SessionRuleFailureCode_anyOf value
func (v SessionRuleFailureCodeAnyOf) Ptr() *SessionRuleFailureCodeAnyOf {
	return &v
}

type NullableSessionRuleFailureCodeAnyOf struct {
	value *SessionRuleFailureCodeAnyOf
	isSet bool
}

func (v NullableSessionRuleFailureCodeAnyOf) Get() *SessionRuleFailureCodeAnyOf {
	return v.value
}

func (v *NullableSessionRuleFailureCodeAnyOf) Set(val *SessionRuleFailureCodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionRuleFailureCodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionRuleFailureCodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionRuleFailureCodeAnyOf(val *SessionRuleFailureCodeAnyOf) *NullableSessionRuleFailureCodeAnyOf {
	return &NullableSessionRuleFailureCodeAnyOf{value: val, isSet: true}
}

func (v NullableSessionRuleFailureCodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionRuleFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

