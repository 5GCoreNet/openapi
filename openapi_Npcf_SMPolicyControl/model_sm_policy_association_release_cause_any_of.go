/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// SmPolicyAssociationReleaseCauseAnyOf the model 'SmPolicyAssociationReleaseCauseAnyOf'
type SmPolicyAssociationReleaseCauseAnyOf string

// List of SmPolicyAssociationReleaseCause_anyOf
const (
	UNSPECIFIED SmPolicyAssociationReleaseCauseAnyOf = "UNSPECIFIED"
	UE_SUBSCRIPTION SmPolicyAssociationReleaseCauseAnyOf = "UE_SUBSCRIPTION"
	INSUFFICIENT_RES SmPolicyAssociationReleaseCauseAnyOf = "INSUFFICIENT_RES"
	VALIDATION_CONDITION_NOT_MET SmPolicyAssociationReleaseCauseAnyOf = "VALIDATION_CONDITION_NOT_MET"
	REACTIVATION_REQUESTED SmPolicyAssociationReleaseCauseAnyOf = "REACTIVATION_REQUESTED"
)

// All allowed values of SmPolicyAssociationReleaseCauseAnyOf enum
var AllowedSmPolicyAssociationReleaseCauseAnyOfEnumValues = []SmPolicyAssociationReleaseCauseAnyOf{
	"UNSPECIFIED",
	"UE_SUBSCRIPTION",
	"INSUFFICIENT_RES",
	"VALIDATION_CONDITION_NOT_MET",
	"REACTIVATION_REQUESTED",
}

func (v *SmPolicyAssociationReleaseCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmPolicyAssociationReleaseCauseAnyOf(value)
	for _, existing := range AllowedSmPolicyAssociationReleaseCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmPolicyAssociationReleaseCauseAnyOf", value)
}

// NewSmPolicyAssociationReleaseCauseAnyOfFromValue returns a pointer to a valid SmPolicyAssociationReleaseCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmPolicyAssociationReleaseCauseAnyOfFromValue(v string) (*SmPolicyAssociationReleaseCauseAnyOf, error) {
	ev := SmPolicyAssociationReleaseCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmPolicyAssociationReleaseCauseAnyOf: valid values are %v", v, AllowedSmPolicyAssociationReleaseCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmPolicyAssociationReleaseCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedSmPolicyAssociationReleaseCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmPolicyAssociationReleaseCause_anyOf value
func (v SmPolicyAssociationReleaseCauseAnyOf) Ptr() *SmPolicyAssociationReleaseCauseAnyOf {
	return &v
}

type NullableSmPolicyAssociationReleaseCauseAnyOf struct {
	value *SmPolicyAssociationReleaseCauseAnyOf
	isSet bool
}

func (v NullableSmPolicyAssociationReleaseCauseAnyOf) Get() *SmPolicyAssociationReleaseCauseAnyOf {
	return v.value
}

func (v *NullableSmPolicyAssociationReleaseCauseAnyOf) Set(val *SmPolicyAssociationReleaseCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSmPolicyAssociationReleaseCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSmPolicyAssociationReleaseCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmPolicyAssociationReleaseCauseAnyOf(val *SmPolicyAssociationReleaseCauseAnyOf) *NullableSmPolicyAssociationReleaseCauseAnyOf {
	return &NullableSmPolicyAssociationReleaseCauseAnyOf{value: val, isSet: true}
}

func (v NullableSmPolicyAssociationReleaseCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmPolicyAssociationReleaseCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

