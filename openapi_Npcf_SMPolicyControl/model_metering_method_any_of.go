/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// MeteringMethodAnyOf the model 'MeteringMethodAnyOf'
type MeteringMethodAnyOf string

// List of MeteringMethod_anyOf
const (
	DURATION MeteringMethodAnyOf = "DURATION"
	VOLUME MeteringMethodAnyOf = "VOLUME"
	DURATION_VOLUME MeteringMethodAnyOf = "DURATION_VOLUME"
	EVENT MeteringMethodAnyOf = "EVENT"
)

// All allowed values of MeteringMethodAnyOf enum
var AllowedMeteringMethodAnyOfEnumValues = []MeteringMethodAnyOf{
	"DURATION",
	"VOLUME",
	"DURATION_VOLUME",
	"EVENT",
}

func (v *MeteringMethodAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MeteringMethodAnyOf(value)
	for _, existing := range AllowedMeteringMethodAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MeteringMethodAnyOf", value)
}

// NewMeteringMethodAnyOfFromValue returns a pointer to a valid MeteringMethodAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMeteringMethodAnyOfFromValue(v string) (*MeteringMethodAnyOf, error) {
	ev := MeteringMethodAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MeteringMethodAnyOf: valid values are %v", v, AllowedMeteringMethodAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MeteringMethodAnyOf) IsValid() bool {
	for _, existing := range AllowedMeteringMethodAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MeteringMethod_anyOf value
func (v MeteringMethodAnyOf) Ptr() *MeteringMethodAnyOf {
	return &v
}

type NullableMeteringMethodAnyOf struct {
	value *MeteringMethodAnyOf
	isSet bool
}

func (v NullableMeteringMethodAnyOf) Get() *MeteringMethodAnyOf {
	return v.value
}

func (v *NullableMeteringMethodAnyOf) Set(val *MeteringMethodAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteringMethodAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteringMethodAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteringMethodAnyOf(val *MeteringMethodAnyOf) *NullableMeteringMethodAnyOf {
	return &NullableMeteringMethodAnyOf{value: val, isSet: true}
}

func (v NullableMeteringMethodAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteringMethodAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

