/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
)

// checks if the SmPolicyNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmPolicyNotification{}

// SmPolicyNotification Represents a notification on the update of the SM policies.
type SmPolicyNotification struct {
	// String providing an URI formatted according to RFC 3986.
	ResourceUri *string `json:"resourceUri,omitempty"`
	SmPolicyDecision *SmPolicyDecision `json:"smPolicyDecision,omitempty"`
}

// NewSmPolicyNotification instantiates a new SmPolicyNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmPolicyNotification() *SmPolicyNotification {
	this := SmPolicyNotification{}
	return &this
}

// NewSmPolicyNotificationWithDefaults instantiates a new SmPolicyNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmPolicyNotificationWithDefaults() *SmPolicyNotification {
	this := SmPolicyNotification{}
	return &this
}

// GetResourceUri returns the ResourceUri field value if set, zero value otherwise.
func (o *SmPolicyNotification) GetResourceUri() string {
	if o == nil || IsNil(o.ResourceUri) {
		var ret string
		return ret
	}
	return *o.ResourceUri
}

// GetResourceUriOk returns a tuple with the ResourceUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyNotification) GetResourceUriOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceUri) {
		return nil, false
	}
	return o.ResourceUri, true
}

// HasResourceUri returns a boolean if a field has been set.
func (o *SmPolicyNotification) HasResourceUri() bool {
	if o != nil && !IsNil(o.ResourceUri) {
		return true
	}

	return false
}

// SetResourceUri gets a reference to the given string and assigns it to the ResourceUri field.
func (o *SmPolicyNotification) SetResourceUri(v string) {
	o.ResourceUri = &v
}

// GetSmPolicyDecision returns the SmPolicyDecision field value if set, zero value otherwise.
func (o *SmPolicyNotification) GetSmPolicyDecision() SmPolicyDecision {
	if o == nil || IsNil(o.SmPolicyDecision) {
		var ret SmPolicyDecision
		return ret
	}
	return *o.SmPolicyDecision
}

// GetSmPolicyDecisionOk returns a tuple with the SmPolicyDecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyNotification) GetSmPolicyDecisionOk() (*SmPolicyDecision, bool) {
	if o == nil || IsNil(o.SmPolicyDecision) {
		return nil, false
	}
	return o.SmPolicyDecision, true
}

// HasSmPolicyDecision returns a boolean if a field has been set.
func (o *SmPolicyNotification) HasSmPolicyDecision() bool {
	if o != nil && !IsNil(o.SmPolicyDecision) {
		return true
	}

	return false
}

// SetSmPolicyDecision gets a reference to the given SmPolicyDecision and assigns it to the SmPolicyDecision field.
func (o *SmPolicyNotification) SetSmPolicyDecision(v SmPolicyDecision) {
	o.SmPolicyDecision = &v
}

func (o SmPolicyNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmPolicyNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceUri) {
		toSerialize["resourceUri"] = o.ResourceUri
	}
	if !IsNil(o.SmPolicyDecision) {
		toSerialize["smPolicyDecision"] = o.SmPolicyDecision
	}
	return toSerialize, nil
}

type NullableSmPolicyNotification struct {
	value *SmPolicyNotification
	isSet bool
}

func (v NullableSmPolicyNotification) Get() *SmPolicyNotification {
	return v.value
}

func (v *NullableSmPolicyNotification) Set(val *SmPolicyNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableSmPolicyNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableSmPolicyNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmPolicyNotification(val *SmPolicyNotification) *NullableSmPolicyNotification {
	return &NullableSmPolicyNotification{value: val, isSet: true}
}

func (v NullableSmPolicyNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmPolicyNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


