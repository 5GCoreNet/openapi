/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// RuleStatusAnyOf the model 'RuleStatusAnyOf'
type RuleStatusAnyOf string

// List of RuleStatus_anyOf
const (
	ACTIVE RuleStatusAnyOf = "ACTIVE"
	INACTIVE RuleStatusAnyOf = "INACTIVE"
)

// All allowed values of RuleStatusAnyOf enum
var AllowedRuleStatusAnyOfEnumValues = []RuleStatusAnyOf{
	"ACTIVE",
	"INACTIVE",
}

func (v *RuleStatusAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleStatusAnyOf(value)
	for _, existing := range AllowedRuleStatusAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleStatusAnyOf", value)
}

// NewRuleStatusAnyOfFromValue returns a pointer to a valid RuleStatusAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleStatusAnyOfFromValue(v string) (*RuleStatusAnyOf, error) {
	ev := RuleStatusAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleStatusAnyOf: valid values are %v", v, AllowedRuleStatusAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleStatusAnyOf) IsValid() bool {
	for _, existing := range AllowedRuleStatusAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleStatus_anyOf value
func (v RuleStatusAnyOf) Ptr() *RuleStatusAnyOf {
	return &v
}

type NullableRuleStatusAnyOf struct {
	value *RuleStatusAnyOf
	isSet bool
}

func (v NullableRuleStatusAnyOf) Get() *RuleStatusAnyOf {
	return v.value
}

func (v *NullableRuleStatusAnyOf) Set(val *RuleStatusAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleStatusAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleStatusAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleStatusAnyOf(val *RuleStatusAnyOf) *NullableRuleStatusAnyOf {
	return &NullableRuleStatusAnyOf{value: val, isSet: true}
}

func (v NullableRuleStatusAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleStatusAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

