/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
)

// checks if the ServingNfIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServingNfIdentity{}

// ServingNfIdentity Contains the serving Network Function identity.
type ServingNfIdentity struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	ServNfInstId *string `json:"servNfInstId,omitempty"`
	Guami *Guami `json:"guami,omitempty"`
	AnGwAddr *AnGwAddress `json:"anGwAddr,omitempty"`
	SgsnAddr *SgsnAddress `json:"sgsnAddr,omitempty"`
}

// NewServingNfIdentity instantiates a new ServingNfIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServingNfIdentity() *ServingNfIdentity {
	this := ServingNfIdentity{}
	return &this
}

// NewServingNfIdentityWithDefaults instantiates a new ServingNfIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServingNfIdentityWithDefaults() *ServingNfIdentity {
	this := ServingNfIdentity{}
	return &this
}

// GetServNfInstId returns the ServNfInstId field value if set, zero value otherwise.
func (o *ServingNfIdentity) GetServNfInstId() string {
	if o == nil || isNil(o.ServNfInstId) {
		var ret string
		return ret
	}
	return *o.ServNfInstId
}

// GetServNfInstIdOk returns a tuple with the ServNfInstId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServingNfIdentity) GetServNfInstIdOk() (*string, bool) {
	if o == nil || isNil(o.ServNfInstId) {
		return nil, false
	}
	return o.ServNfInstId, true
}

// HasServNfInstId returns a boolean if a field has been set.
func (o *ServingNfIdentity) HasServNfInstId() bool {
	if o != nil && !isNil(o.ServNfInstId) {
		return true
	}

	return false
}

// SetServNfInstId gets a reference to the given string and assigns it to the ServNfInstId field.
func (o *ServingNfIdentity) SetServNfInstId(v string) {
	o.ServNfInstId = &v
}

// GetGuami returns the Guami field value if set, zero value otherwise.
func (o *ServingNfIdentity) GetGuami() Guami {
	if o == nil || isNil(o.Guami) {
		var ret Guami
		return ret
	}
	return *o.Guami
}

// GetGuamiOk returns a tuple with the Guami field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServingNfIdentity) GetGuamiOk() (*Guami, bool) {
	if o == nil || isNil(o.Guami) {
		return nil, false
	}
	return o.Guami, true
}

// HasGuami returns a boolean if a field has been set.
func (o *ServingNfIdentity) HasGuami() bool {
	if o != nil && !isNil(o.Guami) {
		return true
	}

	return false
}

// SetGuami gets a reference to the given Guami and assigns it to the Guami field.
func (o *ServingNfIdentity) SetGuami(v Guami) {
	o.Guami = &v
}

// GetAnGwAddr returns the AnGwAddr field value if set, zero value otherwise.
func (o *ServingNfIdentity) GetAnGwAddr() AnGwAddress {
	if o == nil || isNil(o.AnGwAddr) {
		var ret AnGwAddress
		return ret
	}
	return *o.AnGwAddr
}

// GetAnGwAddrOk returns a tuple with the AnGwAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServingNfIdentity) GetAnGwAddrOk() (*AnGwAddress, bool) {
	if o == nil || isNil(o.AnGwAddr) {
		return nil, false
	}
	return o.AnGwAddr, true
}

// HasAnGwAddr returns a boolean if a field has been set.
func (o *ServingNfIdentity) HasAnGwAddr() bool {
	if o != nil && !isNil(o.AnGwAddr) {
		return true
	}

	return false
}

// SetAnGwAddr gets a reference to the given AnGwAddress and assigns it to the AnGwAddr field.
func (o *ServingNfIdentity) SetAnGwAddr(v AnGwAddress) {
	o.AnGwAddr = &v
}

// GetSgsnAddr returns the SgsnAddr field value if set, zero value otherwise.
func (o *ServingNfIdentity) GetSgsnAddr() SgsnAddress {
	if o == nil || isNil(o.SgsnAddr) {
		var ret SgsnAddress
		return ret
	}
	return *o.SgsnAddr
}

// GetSgsnAddrOk returns a tuple with the SgsnAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServingNfIdentity) GetSgsnAddrOk() (*SgsnAddress, bool) {
	if o == nil || isNil(o.SgsnAddr) {
		return nil, false
	}
	return o.SgsnAddr, true
}

// HasSgsnAddr returns a boolean if a field has been set.
func (o *ServingNfIdentity) HasSgsnAddr() bool {
	if o != nil && !isNil(o.SgsnAddr) {
		return true
	}

	return false
}

// SetSgsnAddr gets a reference to the given SgsnAddress and assigns it to the SgsnAddr field.
func (o *ServingNfIdentity) SetSgsnAddr(v SgsnAddress) {
	o.SgsnAddr = &v
}

func (o ServingNfIdentity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServingNfIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ServNfInstId) {
		toSerialize["servNfInstId"] = o.ServNfInstId
	}
	if !isNil(o.Guami) {
		toSerialize["guami"] = o.Guami
	}
	if !isNil(o.AnGwAddr) {
		toSerialize["anGwAddr"] = o.AnGwAddr
	}
	if !isNil(o.SgsnAddr) {
		toSerialize["sgsnAddr"] = o.SgsnAddr
	}
	return toSerialize, nil
}

type NullableServingNfIdentity struct {
	value *ServingNfIdentity
	isSet bool
}

func (v NullableServingNfIdentity) Get() *ServingNfIdentity {
	return v.value
}

func (v *NullableServingNfIdentity) Set(val *ServingNfIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableServingNfIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableServingNfIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServingNfIdentity(val *ServingNfIdentity) *NullableServingNfIdentity {
	return &NullableServingNfIdentity{value: val, isSet: true}
}

func (v NullableServingNfIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServingNfIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


