/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// AtsssCapabilityAnyOf the model 'AtsssCapabilityAnyOf'
type AtsssCapabilityAnyOf string

// List of AtsssCapability_anyOf
const (
	MPTCP_ATSSS_LL_WITH_ASMODE_UL AtsssCapabilityAnyOf = "MPTCP_ATSSS_LL_WITH_ASMODE_UL"
	MPTCP_ATSSS_LL_WITH_EXSDMODE_DL_ASMODE_UL AtsssCapabilityAnyOf = "MPTCP_ATSSS_LL_WITH_EXSDMODE_DL_ASMODE_UL"
	MPTCP_ATSSS_LL_WITH_ASMODE_DLUL AtsssCapabilityAnyOf = "MPTCP_ATSSS_LL_WITH_ASMODE_DLUL"
	ATSSS_LL AtsssCapabilityAnyOf = "ATSSS_LL"
	MPTCP_ATSSS_LL AtsssCapabilityAnyOf = "MPTCP_ATSSS_LL"
)

// All allowed values of AtsssCapabilityAnyOf enum
var AllowedAtsssCapabilityAnyOfEnumValues = []AtsssCapabilityAnyOf{
	"MPTCP_ATSSS_LL_WITH_ASMODE_UL",
	"MPTCP_ATSSS_LL_WITH_EXSDMODE_DL_ASMODE_UL",
	"MPTCP_ATSSS_LL_WITH_ASMODE_DLUL",
	"ATSSS_LL",
	"MPTCP_ATSSS_LL",
}

func (v *AtsssCapabilityAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AtsssCapabilityAnyOf(value)
	for _, existing := range AllowedAtsssCapabilityAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AtsssCapabilityAnyOf", value)
}

// NewAtsssCapabilityAnyOfFromValue returns a pointer to a valid AtsssCapabilityAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAtsssCapabilityAnyOfFromValue(v string) (*AtsssCapabilityAnyOf, error) {
	ev := AtsssCapabilityAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AtsssCapabilityAnyOf: valid values are %v", v, AllowedAtsssCapabilityAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AtsssCapabilityAnyOf) IsValid() bool {
	for _, existing := range AllowedAtsssCapabilityAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AtsssCapability_anyOf value
func (v AtsssCapabilityAnyOf) Ptr() *AtsssCapabilityAnyOf {
	return &v
}

type NullableAtsssCapabilityAnyOf struct {
	value *AtsssCapabilityAnyOf
	isSet bool
}

func (v NullableAtsssCapabilityAnyOf) Get() *AtsssCapabilityAnyOf {
	return v.value
}

func (v *NullableAtsssCapabilityAnyOf) Set(val *AtsssCapabilityAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAtsssCapabilityAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAtsssCapabilityAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtsssCapabilityAnyOf(val *AtsssCapabilityAnyOf) *NullableAtsssCapabilityAnyOf {
	return &NullableAtsssCapabilityAnyOf{value: val, isSet: true}
}

func (v NullableAtsssCapabilityAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtsssCapabilityAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

