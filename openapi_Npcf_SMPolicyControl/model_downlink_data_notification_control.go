/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
)

// checks if the DownlinkDataNotificationControl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DownlinkDataNotificationControl{}

// DownlinkDataNotificationControl Contains the downlink data notification control information.
type DownlinkDataNotificationControl struct {
	NotifCtrlInds []NotificationControlIndication `json:"notifCtrlInds,omitempty"`
	TypesOfNotif []DlDataDeliveryStatus `json:"typesOfNotif,omitempty"`
}

// NewDownlinkDataNotificationControl instantiates a new DownlinkDataNotificationControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownlinkDataNotificationControl() *DownlinkDataNotificationControl {
	this := DownlinkDataNotificationControl{}
	return &this
}

// NewDownlinkDataNotificationControlWithDefaults instantiates a new DownlinkDataNotificationControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownlinkDataNotificationControlWithDefaults() *DownlinkDataNotificationControl {
	this := DownlinkDataNotificationControl{}
	return &this
}

// GetNotifCtrlInds returns the NotifCtrlInds field value if set, zero value otherwise.
func (o *DownlinkDataNotificationControl) GetNotifCtrlInds() []NotificationControlIndication {
	if o == nil || isNil(o.NotifCtrlInds) {
		var ret []NotificationControlIndication
		return ret
	}
	return o.NotifCtrlInds
}

// GetNotifCtrlIndsOk returns a tuple with the NotifCtrlInds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownlinkDataNotificationControl) GetNotifCtrlIndsOk() ([]NotificationControlIndication, bool) {
	if o == nil || isNil(o.NotifCtrlInds) {
		return nil, false
	}
	return o.NotifCtrlInds, true
}

// HasNotifCtrlInds returns a boolean if a field has been set.
func (o *DownlinkDataNotificationControl) HasNotifCtrlInds() bool {
	if o != nil && !isNil(o.NotifCtrlInds) {
		return true
	}

	return false
}

// SetNotifCtrlInds gets a reference to the given []NotificationControlIndication and assigns it to the NotifCtrlInds field.
func (o *DownlinkDataNotificationControl) SetNotifCtrlInds(v []NotificationControlIndication) {
	o.NotifCtrlInds = v
}

// GetTypesOfNotif returns the TypesOfNotif field value if set, zero value otherwise.
func (o *DownlinkDataNotificationControl) GetTypesOfNotif() []DlDataDeliveryStatus {
	if o == nil || isNil(o.TypesOfNotif) {
		var ret []DlDataDeliveryStatus
		return ret
	}
	return o.TypesOfNotif
}

// GetTypesOfNotifOk returns a tuple with the TypesOfNotif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownlinkDataNotificationControl) GetTypesOfNotifOk() ([]DlDataDeliveryStatus, bool) {
	if o == nil || isNil(o.TypesOfNotif) {
		return nil, false
	}
	return o.TypesOfNotif, true
}

// HasTypesOfNotif returns a boolean if a field has been set.
func (o *DownlinkDataNotificationControl) HasTypesOfNotif() bool {
	if o != nil && !isNil(o.TypesOfNotif) {
		return true
	}

	return false
}

// SetTypesOfNotif gets a reference to the given []DlDataDeliveryStatus and assigns it to the TypesOfNotif field.
func (o *DownlinkDataNotificationControl) SetTypesOfNotif(v []DlDataDeliveryStatus) {
	o.TypesOfNotif = v
}

func (o DownlinkDataNotificationControl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DownlinkDataNotificationControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NotifCtrlInds) {
		toSerialize["notifCtrlInds"] = o.NotifCtrlInds
	}
	if !isNil(o.TypesOfNotif) {
		toSerialize["typesOfNotif"] = o.TypesOfNotif
	}
	return toSerialize, nil
}

type NullableDownlinkDataNotificationControl struct {
	value *DownlinkDataNotificationControl
	isSet bool
}

func (v NullableDownlinkDataNotificationControl) Get() *DownlinkDataNotificationControl {
	return v.value
}

func (v *NullableDownlinkDataNotificationControl) Set(val *DownlinkDataNotificationControl) {
	v.value = val
	v.isSet = true
}

func (v NullableDownlinkDataNotificationControl) IsSet() bool {
	return v.isSet
}

func (v *NullableDownlinkDataNotificationControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownlinkDataNotificationControl(val *DownlinkDataNotificationControl) *NullableDownlinkDataNotificationControl {
	return &NullableDownlinkDataNotificationControl{value: val, isSet: true}
}

func (v NullableDownlinkDataNotificationControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownlinkDataNotificationControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


