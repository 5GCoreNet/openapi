/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// RequestedRuleDataTypeAnyOf the model 'RequestedRuleDataTypeAnyOf'
type RequestedRuleDataTypeAnyOf string

// List of RequestedRuleDataType_anyOf
const (
	CH_ID RequestedRuleDataTypeAnyOf = "CH_ID"
	MS_TIME_ZONE RequestedRuleDataTypeAnyOf = "MS_TIME_ZONE"
	USER_LOC_INFO RequestedRuleDataTypeAnyOf = "USER_LOC_INFO"
	RES_RELEASE RequestedRuleDataTypeAnyOf = "RES_RELEASE"
	SUCC_RES_ALLO RequestedRuleDataTypeAnyOf = "SUCC_RES_ALLO"
	EPS_FALLBACK RequestedRuleDataTypeAnyOf = "EPS_FALLBACK"
)

// All allowed values of RequestedRuleDataTypeAnyOf enum
var AllowedRequestedRuleDataTypeAnyOfEnumValues = []RequestedRuleDataTypeAnyOf{
	"CH_ID",
	"MS_TIME_ZONE",
	"USER_LOC_INFO",
	"RES_RELEASE",
	"SUCC_RES_ALLO",
	"EPS_FALLBACK",
}

func (v *RequestedRuleDataTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestedRuleDataTypeAnyOf(value)
	for _, existing := range AllowedRequestedRuleDataTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestedRuleDataTypeAnyOf", value)
}

// NewRequestedRuleDataTypeAnyOfFromValue returns a pointer to a valid RequestedRuleDataTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestedRuleDataTypeAnyOfFromValue(v string) (*RequestedRuleDataTypeAnyOf, error) {
	ev := RequestedRuleDataTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestedRuleDataTypeAnyOf: valid values are %v", v, AllowedRequestedRuleDataTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestedRuleDataTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedRequestedRuleDataTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequestedRuleDataType_anyOf value
func (v RequestedRuleDataTypeAnyOf) Ptr() *RequestedRuleDataTypeAnyOf {
	return &v
}

type NullableRequestedRuleDataTypeAnyOf struct {
	value *RequestedRuleDataTypeAnyOf
	isSet bool
}

func (v NullableRequestedRuleDataTypeAnyOf) Get() *RequestedRuleDataTypeAnyOf {
	return v.value
}

func (v *NullableRequestedRuleDataTypeAnyOf) Set(val *RequestedRuleDataTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestedRuleDataTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestedRuleDataTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestedRuleDataTypeAnyOf(val *RequestedRuleDataTypeAnyOf) *NullableRequestedRuleDataTypeAnyOf {
	return &NullableRequestedRuleDataTypeAnyOf{value: val, isSet: true}
}

func (v NullableRequestedRuleDataTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestedRuleDataTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

