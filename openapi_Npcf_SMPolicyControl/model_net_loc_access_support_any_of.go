/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// NetLocAccessSupportAnyOf the model 'NetLocAccessSupportAnyOf'
type NetLocAccessSupportAnyOf string

// List of NetLocAccessSupport_anyOf
const (
	ANR_NOT_SUPPORTED NetLocAccessSupportAnyOf = "ANR_NOT_SUPPORTED"
	TZR_NOT_SUPPORTED NetLocAccessSupportAnyOf = "TZR_NOT_SUPPORTED"
	LOC_NOT_SUPPORTED NetLocAccessSupportAnyOf = "LOC_NOT_SUPPORTED"
)

// All allowed values of NetLocAccessSupportAnyOf enum
var AllowedNetLocAccessSupportAnyOfEnumValues = []NetLocAccessSupportAnyOf{
	"ANR_NOT_SUPPORTED",
	"TZR_NOT_SUPPORTED",
	"LOC_NOT_SUPPORTED",
}

func (v *NetLocAccessSupportAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetLocAccessSupportAnyOf(value)
	for _, existing := range AllowedNetLocAccessSupportAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetLocAccessSupportAnyOf", value)
}

// NewNetLocAccessSupportAnyOfFromValue returns a pointer to a valid NetLocAccessSupportAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetLocAccessSupportAnyOfFromValue(v string) (*NetLocAccessSupportAnyOf, error) {
	ev := NetLocAccessSupportAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetLocAccessSupportAnyOf: valid values are %v", v, AllowedNetLocAccessSupportAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetLocAccessSupportAnyOf) IsValid() bool {
	for _, existing := range AllowedNetLocAccessSupportAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetLocAccessSupport_anyOf value
func (v NetLocAccessSupportAnyOf) Ptr() *NetLocAccessSupportAnyOf {
	return &v
}

type NullableNetLocAccessSupportAnyOf struct {
	value *NetLocAccessSupportAnyOf
	isSet bool
}

func (v NullableNetLocAccessSupportAnyOf) Get() *NetLocAccessSupportAnyOf {
	return v.value
}

func (v *NullableNetLocAccessSupportAnyOf) Set(val *NetLocAccessSupportAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetLocAccessSupportAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetLocAccessSupportAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetLocAccessSupportAnyOf(val *NetLocAccessSupportAnyOf) *NullableNetLocAccessSupportAnyOf {
	return &NullableNetLocAccessSupportAnyOf{value: val, isSet: true}
}

func (v NullableNetLocAccessSupportAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetLocAccessSupportAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

