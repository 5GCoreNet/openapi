/*
Npcf_SMPolicyControl API

Session Management Policy Control Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_SMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// FailureCodeAnyOf the model 'FailureCodeAnyOf'
type FailureCodeAnyOf string

// List of FailureCode_anyOf
const (
	UNK_RULE_ID FailureCodeAnyOf = "UNK_RULE_ID"
	RA_GR_ERR FailureCodeAnyOf = "RA_GR_ERR"
	SER_ID_ERR FailureCodeAnyOf = "SER_ID_ERR"
	NF_MAL FailureCodeAnyOf = "NF_MAL"
	RES_LIM FailureCodeAnyOf = "RES_LIM"
	MAX_NR_QO_S_FLOW FailureCodeAnyOf = "MAX_NR_QoS_FLOW"
	MISS_FLOW_INFO FailureCodeAnyOf = "MISS_FLOW_INFO"
	RES_ALLO_FAIL FailureCodeAnyOf = "RES_ALLO_FAIL"
	UNSUCC_QOS_VAL FailureCodeAnyOf = "UNSUCC_QOS_VAL"
	INCOR_FLOW_INFO FailureCodeAnyOf = "INCOR_FLOW_INFO"
	PS_TO_CS_HAN FailureCodeAnyOf = "PS_TO_CS_HAN"
	APP_ID_ERR FailureCodeAnyOf = "APP_ID_ERR"
	NO_QOS_FLOW_BOUND FailureCodeAnyOf = "NO_QOS_FLOW_BOUND"
	FILTER_RES FailureCodeAnyOf = "FILTER_RES"
	MISS_REDI_SER_ADDR FailureCodeAnyOf = "MISS_REDI_SER_ADDR"
	CM_END_USER_SER_DENIED FailureCodeAnyOf = "CM_END_USER_SER_DENIED"
	CM_CREDIT_CON_NOT_APP FailureCodeAnyOf = "CM_CREDIT_CON_NOT_APP"
	CM_AUTH_REJ FailureCodeAnyOf = "CM_AUTH_REJ"
	CM_USER_UNK FailureCodeAnyOf = "CM_USER_UNK"
	CM_RAT_FAILED FailureCodeAnyOf = "CM_RAT_FAILED"
	UE_STA_SUSP FailureCodeAnyOf = "UE_STA_SUSP"
	UNKNOWN_REF_ID FailureCodeAnyOf = "UNKNOWN_REF_ID"
	INCORRECT_COND_DATA FailureCodeAnyOf = "INCORRECT_COND_DATA"
	REF_ID_COLLISION FailureCodeAnyOf = "REF_ID_COLLISION"
	TRAFFIC_STEERING_ERROR FailureCodeAnyOf = "TRAFFIC_STEERING_ERROR"
	DNAI_STEERING_ERROR FailureCodeAnyOf = "DNAI_STEERING_ERROR"
	AN_GW_FAILE FailureCodeAnyOf = "AN_GW_FAILE"
	MAX_NR_PACKET_FILTERS_EXCEEDED FailureCodeAnyOf = "MAX_NR_PACKET_FILTERS_EXCEEDED"
	PACKET_FILTER_TFT_ALLOCATION_EXCEEDED FailureCodeAnyOf = "PACKET_FILTER_TFT_ALLOCATION_EXCEEDED"
	MUTE_CHG_NOT_ALLOWED FailureCodeAnyOf = "MUTE_CHG_NOT_ALLOWED"
	UE_TEMPORARILY_UNAVAILABLE FailureCodeAnyOf = "UE_TEMPORARILY_UNAVAILABLE"
)

// All allowed values of FailureCodeAnyOf enum
var AllowedFailureCodeAnyOfEnumValues = []FailureCodeAnyOf{
	"UNK_RULE_ID",
	"RA_GR_ERR",
	"SER_ID_ERR",
	"NF_MAL",
	"RES_LIM",
	"MAX_NR_QoS_FLOW",
	"MISS_FLOW_INFO",
	"RES_ALLO_FAIL",
	"UNSUCC_QOS_VAL",
	"INCOR_FLOW_INFO",
	"PS_TO_CS_HAN",
	"APP_ID_ERR",
	"NO_QOS_FLOW_BOUND",
	"FILTER_RES",
	"MISS_REDI_SER_ADDR",
	"CM_END_USER_SER_DENIED",
	"CM_CREDIT_CON_NOT_APP",
	"CM_AUTH_REJ",
	"CM_USER_UNK",
	"CM_RAT_FAILED",
	"UE_STA_SUSP",
	"UNKNOWN_REF_ID",
	"INCORRECT_COND_DATA",
	"REF_ID_COLLISION",
	"TRAFFIC_STEERING_ERROR",
	"DNAI_STEERING_ERROR",
	"AN_GW_FAILE",
	"MAX_NR_PACKET_FILTERS_EXCEEDED",
	"PACKET_FILTER_TFT_ALLOCATION_EXCEEDED",
	"MUTE_CHG_NOT_ALLOWED",
	"UE_TEMPORARILY_UNAVAILABLE",
}

func (v *FailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FailureCodeAnyOf(value)
	for _, existing := range AllowedFailureCodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FailureCodeAnyOf", value)
}

// NewFailureCodeAnyOfFromValue returns a pointer to a valid FailureCodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFailureCodeAnyOfFromValue(v string) (*FailureCodeAnyOf, error) {
	ev := FailureCodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FailureCodeAnyOf: valid values are %v", v, AllowedFailureCodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FailureCodeAnyOf) IsValid() bool {
	for _, existing := range AllowedFailureCodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FailureCode_anyOf value
func (v FailureCodeAnyOf) Ptr() *FailureCodeAnyOf {
	return &v
}

type NullableFailureCodeAnyOf struct {
	value *FailureCodeAnyOf
	isSet bool
}

func (v NullableFailureCodeAnyOf) Get() *FailureCodeAnyOf {
	return v.value
}

func (v *NullableFailureCodeAnyOf) Set(val *FailureCodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureCodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureCodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureCodeAnyOf(val *FailureCodeAnyOf) *NullableFailureCodeAnyOf {
	return &NullableFailureCodeAnyOf{value: val, isSet: true}
}

func (v NullableFailureCodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

