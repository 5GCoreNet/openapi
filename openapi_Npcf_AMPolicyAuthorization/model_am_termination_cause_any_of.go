/*
Npcf_AMPolicyAuthorization Service API

PCF Access and Mobility Policy Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_AMPolicyAuthorization

import (
	"encoding/json"
	"fmt"
)

// AmTerminationCauseAnyOf the model 'AmTerminationCauseAnyOf'
type AmTerminationCauseAnyOf string

// List of AmTerminationCause_anyOf
const (
	UE_DEREGISTERED AmTerminationCauseAnyOf = "UE_DEREGISTERED"
	UNSPECIFIED AmTerminationCauseAnyOf = "UNSPECIFIED"
	INSUFFICIENT_RESOURCES AmTerminationCauseAnyOf = "INSUFFICIENT_RESOURCES"
)

// All allowed values of AmTerminationCauseAnyOf enum
var AllowedAmTerminationCauseAnyOfEnumValues = []AmTerminationCauseAnyOf{
	"UE_DEREGISTERED",
	"UNSPECIFIED",
	"INSUFFICIENT_RESOURCES",
}

func (v *AmTerminationCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AmTerminationCauseAnyOf(value)
	for _, existing := range AllowedAmTerminationCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AmTerminationCauseAnyOf", value)
}

// NewAmTerminationCauseAnyOfFromValue returns a pointer to a valid AmTerminationCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAmTerminationCauseAnyOfFromValue(v string) (*AmTerminationCauseAnyOf, error) {
	ev := AmTerminationCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AmTerminationCauseAnyOf: valid values are %v", v, AllowedAmTerminationCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AmTerminationCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedAmTerminationCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AmTerminationCause_anyOf value
func (v AmTerminationCauseAnyOf) Ptr() *AmTerminationCauseAnyOf {
	return &v
}

type NullableAmTerminationCauseAnyOf struct {
	value *AmTerminationCauseAnyOf
	isSet bool
}

func (v NullableAmTerminationCauseAnyOf) Get() *AmTerminationCauseAnyOf {
	return v.value
}

func (v *NullableAmTerminationCauseAnyOf) Set(val *AmTerminationCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAmTerminationCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAmTerminationCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmTerminationCauseAnyOf(val *AmTerminationCauseAnyOf) *NullableAmTerminationCauseAnyOf {
	return &NullableAmTerminationCauseAnyOf{value: val, isSet: true}
}

func (v NullableAmTerminationCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmTerminationCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

