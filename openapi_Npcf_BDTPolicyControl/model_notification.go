/*
Npcf_BDTPolicyControl Service API

PCF BDT Policy Control Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_BDTPolicyControl

import (
	"encoding/json"
)

// checks if the Notification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Notification{}

// Notification Describes a BDT notification.
type Notification struct {
	// string identifying a BDT Reference ID as defined in clause 5.3.3 of 3GPP TS 29.154.
	BdtRefId string `json:"bdtRefId"`
	// Contains a list of the candidate transfer policies from which the AF may select a new transfer policy due to a network performance is below the criteria set by the operator. 
	CandPolicies []TransferPolicy `json:"candPolicies,omitempty"`
	NwAreaInfo *NetworkAreaInfo `json:"nwAreaInfo,omitempty"`
	TimeWindow *TimeWindow `json:"timeWindow,omitempty"`
}

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification(bdtRefId string) *Notification {
	this := Notification{}
	this.BdtRefId = bdtRefId
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	return &this
}

// GetBdtRefId returns the BdtRefId field value
func (o *Notification) GetBdtRefId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BdtRefId
}

// GetBdtRefIdOk returns a tuple with the BdtRefId field value
// and a boolean to check if the value has been set.
func (o *Notification) GetBdtRefIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BdtRefId, true
}

// SetBdtRefId sets field value
func (o *Notification) SetBdtRefId(v string) {
	o.BdtRefId = v
}

// GetCandPolicies returns the CandPolicies field value if set, zero value otherwise.
func (o *Notification) GetCandPolicies() []TransferPolicy {
	if o == nil || isNil(o.CandPolicies) {
		var ret []TransferPolicy
		return ret
	}
	return o.CandPolicies
}

// GetCandPoliciesOk returns a tuple with the CandPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetCandPoliciesOk() ([]TransferPolicy, bool) {
	if o == nil || isNil(o.CandPolicies) {
		return nil, false
	}
	return o.CandPolicies, true
}

// HasCandPolicies returns a boolean if a field has been set.
func (o *Notification) HasCandPolicies() bool {
	if o != nil && !isNil(o.CandPolicies) {
		return true
	}

	return false
}

// SetCandPolicies gets a reference to the given []TransferPolicy and assigns it to the CandPolicies field.
func (o *Notification) SetCandPolicies(v []TransferPolicy) {
	o.CandPolicies = v
}

// GetNwAreaInfo returns the NwAreaInfo field value if set, zero value otherwise.
func (o *Notification) GetNwAreaInfo() NetworkAreaInfo {
	if o == nil || isNil(o.NwAreaInfo) {
		var ret NetworkAreaInfo
		return ret
	}
	return *o.NwAreaInfo
}

// GetNwAreaInfoOk returns a tuple with the NwAreaInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetNwAreaInfoOk() (*NetworkAreaInfo, bool) {
	if o == nil || isNil(o.NwAreaInfo) {
		return nil, false
	}
	return o.NwAreaInfo, true
}

// HasNwAreaInfo returns a boolean if a field has been set.
func (o *Notification) HasNwAreaInfo() bool {
	if o != nil && !isNil(o.NwAreaInfo) {
		return true
	}

	return false
}

// SetNwAreaInfo gets a reference to the given NetworkAreaInfo and assigns it to the NwAreaInfo field.
func (o *Notification) SetNwAreaInfo(v NetworkAreaInfo) {
	o.NwAreaInfo = &v
}

// GetTimeWindow returns the TimeWindow field value if set, zero value otherwise.
func (o *Notification) GetTimeWindow() TimeWindow {
	if o == nil || isNil(o.TimeWindow) {
		var ret TimeWindow
		return ret
	}
	return *o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetTimeWindowOk() (*TimeWindow, bool) {
	if o == nil || isNil(o.TimeWindow) {
		return nil, false
	}
	return o.TimeWindow, true
}

// HasTimeWindow returns a boolean if a field has been set.
func (o *Notification) HasTimeWindow() bool {
	if o != nil && !isNil(o.TimeWindow) {
		return true
	}

	return false
}

// SetTimeWindow gets a reference to the given TimeWindow and assigns it to the TimeWindow field.
func (o *Notification) SetTimeWindow(v TimeWindow) {
	o.TimeWindow = &v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Notification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bdtRefId"] = o.BdtRefId
	if !isNil(o.CandPolicies) {
		toSerialize["candPolicies"] = o.CandPolicies
	}
	if !isNil(o.NwAreaInfo) {
		toSerialize["nwAreaInfo"] = o.NwAreaInfo
	}
	if !isNil(o.TimeWindow) {
		toSerialize["timeWindow"] = o.TimeWindow
	}
	return toSerialize, nil
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


