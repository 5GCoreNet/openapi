/*
Eecs_ServiceProvisioning

API for ECS Service Provisioning. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eecs_ServiceProvisioning

import (
	"encoding/json"
	"time"
)

// checks if the ECSServProvSubscriptionPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECSServProvSubscriptionPatch{}

// ECSServProvSubscriptionPatch Represents an individual service provisioning subscription resource.
type ECSServProvSubscriptionPatch struct {
	// Information about services the EEC wants to connect to.
	AcProfs []ACProfile `json:"acProfs,omitempty"`
	// string with format \"date-time\" as defined in OpenAPI.
	ExpTime *time.Time `json:"expTime,omitempty"`
	// Indicates if the EEC supports service continuity or not, also indicates which ACR scenarios are supported by the EEC. 
	EecSvcContSupp []ACRScenario `json:"eecSvcContSupp,omitempty"`
	// List of connectivity information for the UE.
	ConnInfo []ConnectivityInfo `json:"connInfo,omitempty"`
}

// NewECSServProvSubscriptionPatch instantiates a new ECSServProvSubscriptionPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECSServProvSubscriptionPatch() *ECSServProvSubscriptionPatch {
	this := ECSServProvSubscriptionPatch{}
	return &this
}

// NewECSServProvSubscriptionPatchWithDefaults instantiates a new ECSServProvSubscriptionPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECSServProvSubscriptionPatchWithDefaults() *ECSServProvSubscriptionPatch {
	this := ECSServProvSubscriptionPatch{}
	return &this
}

// GetAcProfs returns the AcProfs field value if set, zero value otherwise.
func (o *ECSServProvSubscriptionPatch) GetAcProfs() []ACProfile {
	if o == nil || IsNil(o.AcProfs) {
		var ret []ACProfile
		return ret
	}
	return o.AcProfs
}

// GetAcProfsOk returns a tuple with the AcProfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSServProvSubscriptionPatch) GetAcProfsOk() ([]ACProfile, bool) {
	if o == nil || IsNil(o.AcProfs) {
		return nil, false
	}
	return o.AcProfs, true
}

// HasAcProfs returns a boolean if a field has been set.
func (o *ECSServProvSubscriptionPatch) HasAcProfs() bool {
	if o != nil && !IsNil(o.AcProfs) {
		return true
	}

	return false
}

// SetAcProfs gets a reference to the given []ACProfile and assigns it to the AcProfs field.
func (o *ECSServProvSubscriptionPatch) SetAcProfs(v []ACProfile) {
	o.AcProfs = v
}

// GetExpTime returns the ExpTime field value if set, zero value otherwise.
func (o *ECSServProvSubscriptionPatch) GetExpTime() time.Time {
	if o == nil || IsNil(o.ExpTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpTime
}

// GetExpTimeOk returns a tuple with the ExpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSServProvSubscriptionPatch) GetExpTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpTime) {
		return nil, false
	}
	return o.ExpTime, true
}

// HasExpTime returns a boolean if a field has been set.
func (o *ECSServProvSubscriptionPatch) HasExpTime() bool {
	if o != nil && !IsNil(o.ExpTime) {
		return true
	}

	return false
}

// SetExpTime gets a reference to the given time.Time and assigns it to the ExpTime field.
func (o *ECSServProvSubscriptionPatch) SetExpTime(v time.Time) {
	o.ExpTime = &v
}

// GetEecSvcContSupp returns the EecSvcContSupp field value if set, zero value otherwise.
func (o *ECSServProvSubscriptionPatch) GetEecSvcContSupp() []ACRScenario {
	if o == nil || IsNil(o.EecSvcContSupp) {
		var ret []ACRScenario
		return ret
	}
	return o.EecSvcContSupp
}

// GetEecSvcContSuppOk returns a tuple with the EecSvcContSupp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSServProvSubscriptionPatch) GetEecSvcContSuppOk() ([]ACRScenario, bool) {
	if o == nil || IsNil(o.EecSvcContSupp) {
		return nil, false
	}
	return o.EecSvcContSupp, true
}

// HasEecSvcContSupp returns a boolean if a field has been set.
func (o *ECSServProvSubscriptionPatch) HasEecSvcContSupp() bool {
	if o != nil && !IsNil(o.EecSvcContSupp) {
		return true
	}

	return false
}

// SetEecSvcContSupp gets a reference to the given []ACRScenario and assigns it to the EecSvcContSupp field.
func (o *ECSServProvSubscriptionPatch) SetEecSvcContSupp(v []ACRScenario) {
	o.EecSvcContSupp = v
}

// GetConnInfo returns the ConnInfo field value if set, zero value otherwise.
func (o *ECSServProvSubscriptionPatch) GetConnInfo() []ConnectivityInfo {
	if o == nil || IsNil(o.ConnInfo) {
		var ret []ConnectivityInfo
		return ret
	}
	return o.ConnInfo
}

// GetConnInfoOk returns a tuple with the ConnInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSServProvSubscriptionPatch) GetConnInfoOk() ([]ConnectivityInfo, bool) {
	if o == nil || IsNil(o.ConnInfo) {
		return nil, false
	}
	return o.ConnInfo, true
}

// HasConnInfo returns a boolean if a field has been set.
func (o *ECSServProvSubscriptionPatch) HasConnInfo() bool {
	if o != nil && !IsNil(o.ConnInfo) {
		return true
	}

	return false
}

// SetConnInfo gets a reference to the given []ConnectivityInfo and assigns it to the ConnInfo field.
func (o *ECSServProvSubscriptionPatch) SetConnInfo(v []ConnectivityInfo) {
	o.ConnInfo = v
}

func (o ECSServProvSubscriptionPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECSServProvSubscriptionPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcProfs) {
		toSerialize["acProfs"] = o.AcProfs
	}
	if !IsNil(o.ExpTime) {
		toSerialize["expTime"] = o.ExpTime
	}
	if !IsNil(o.EecSvcContSupp) {
		toSerialize["eecSvcContSupp"] = o.EecSvcContSupp
	}
	if !IsNil(o.ConnInfo) {
		toSerialize["connInfo"] = o.ConnInfo
	}
	return toSerialize, nil
}

type NullableECSServProvSubscriptionPatch struct {
	value *ECSServProvSubscriptionPatch
	isSet bool
}

func (v NullableECSServProvSubscriptionPatch) Get() *ECSServProvSubscriptionPatch {
	return v.value
}

func (v *NullableECSServProvSubscriptionPatch) Set(val *ECSServProvSubscriptionPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableECSServProvSubscriptionPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableECSServProvSubscriptionPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECSServProvSubscriptionPatch(val *ECSServProvSubscriptionPatch) *NullableECSServProvSubscriptionPatch {
	return &NullableECSServProvSubscriptionPatch{value: val, isSet: true}
}

func (v NullableECSServProvSubscriptionPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECSServProvSubscriptionPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


