/*
Eecs_ServiceProvisioning

API for ECS Service Provisioning. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eecs_ServiceProvisioning

import (
	"encoding/json"
)

// checks if the ConnectivityInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectivityInfo{}

// ConnectivityInfo Represents the connectivity information for the UE.
type ConnectivityInfo struct {
	PlmnId *PlmnId `json:"plmnId,omitempty"`
	// Identifies the SSID of the access point to which the UE is attached.
	SsId *string `json:"ssId,omitempty"`
}

// NewConnectivityInfo instantiates a new ConnectivityInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectivityInfo() *ConnectivityInfo {
	this := ConnectivityInfo{}
	return &this
}

// NewConnectivityInfoWithDefaults instantiates a new ConnectivityInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectivityInfoWithDefaults() *ConnectivityInfo {
	this := ConnectivityInfo{}
	return &this
}

// GetPlmnId returns the PlmnId field value if set, zero value otherwise.
func (o *ConnectivityInfo) GetPlmnId() PlmnId {
	if o == nil || IsNil(o.PlmnId) {
		var ret PlmnId
		return ret
	}
	return *o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectivityInfo) GetPlmnIdOk() (*PlmnId, bool) {
	if o == nil || IsNil(o.PlmnId) {
		return nil, false
	}
	return o.PlmnId, true
}

// HasPlmnId returns a boolean if a field has been set.
func (o *ConnectivityInfo) HasPlmnId() bool {
	if o != nil && !IsNil(o.PlmnId) {
		return true
	}

	return false
}

// SetPlmnId gets a reference to the given PlmnId and assigns it to the PlmnId field.
func (o *ConnectivityInfo) SetPlmnId(v PlmnId) {
	o.PlmnId = &v
}

// GetSsId returns the SsId field value if set, zero value otherwise.
func (o *ConnectivityInfo) GetSsId() string {
	if o == nil || IsNil(o.SsId) {
		var ret string
		return ret
	}
	return *o.SsId
}

// GetSsIdOk returns a tuple with the SsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectivityInfo) GetSsIdOk() (*string, bool) {
	if o == nil || IsNil(o.SsId) {
		return nil, false
	}
	return o.SsId, true
}

// HasSsId returns a boolean if a field has been set.
func (o *ConnectivityInfo) HasSsId() bool {
	if o != nil && !IsNil(o.SsId) {
		return true
	}

	return false
}

// SetSsId gets a reference to the given string and assigns it to the SsId field.
func (o *ConnectivityInfo) SetSsId(v string) {
	o.SsId = &v
}

func (o ConnectivityInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectivityInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlmnId) {
		toSerialize["plmnId"] = o.PlmnId
	}
	if !IsNil(o.SsId) {
		toSerialize["ssId"] = o.SsId
	}
	return toSerialize, nil
}

type NullableConnectivityInfo struct {
	value *ConnectivityInfo
	isSet bool
}

func (v NullableConnectivityInfo) Get() *ConnectivityInfo {
	return v.value
}

func (v *NullableConnectivityInfo) Set(val *ConnectivityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectivityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectivityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectivityInfo(val *ConnectivityInfo) *NullableConnectivityInfo {
	return &NullableConnectivityInfo{value: val, isSet: true}
}

func (v NullableConnectivityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectivityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


