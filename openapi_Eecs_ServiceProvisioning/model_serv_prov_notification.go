/*
Eecs_ServiceProvisioning

API for ECS Service Provisioning. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eecs_ServiceProvisioning

import (
	"encoding/json"
)

// checks if the ServProvNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServProvNotification{}

// ServProvNotification Represents notification information of a service provisioning Event.
type ServProvNotification struct {
	// Identifier of the individual service provisioning subscription for which the service provisioning notification is delivered. 
	SubId string `json:"subId"`
	// List of EDN configuration information.
	EdnCnfgInfo []EDNConfigInfo `json:"ednCnfgInfo"`
}

// NewServProvNotification instantiates a new ServProvNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServProvNotification(subId string, ednCnfgInfo []EDNConfigInfo) *ServProvNotification {
	this := ServProvNotification{}
	this.SubId = subId
	this.EdnCnfgInfo = ednCnfgInfo
	return &this
}

// NewServProvNotificationWithDefaults instantiates a new ServProvNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServProvNotificationWithDefaults() *ServProvNotification {
	this := ServProvNotification{}
	return &this
}

// GetSubId returns the SubId field value
func (o *ServProvNotification) GetSubId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubId
}

// GetSubIdOk returns a tuple with the SubId field value
// and a boolean to check if the value has been set.
func (o *ServProvNotification) GetSubIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubId, true
}

// SetSubId sets field value
func (o *ServProvNotification) SetSubId(v string) {
	o.SubId = v
}

// GetEdnCnfgInfo returns the EdnCnfgInfo field value
func (o *ServProvNotification) GetEdnCnfgInfo() []EDNConfigInfo {
	if o == nil {
		var ret []EDNConfigInfo
		return ret
	}

	return o.EdnCnfgInfo
}

// GetEdnCnfgInfoOk returns a tuple with the EdnCnfgInfo field value
// and a boolean to check if the value has been set.
func (o *ServProvNotification) GetEdnCnfgInfoOk() ([]EDNConfigInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.EdnCnfgInfo, true
}

// SetEdnCnfgInfo sets field value
func (o *ServProvNotification) SetEdnCnfgInfo(v []EDNConfigInfo) {
	o.EdnCnfgInfo = v
}

func (o ServProvNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServProvNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subId"] = o.SubId
	toSerialize["ednCnfgInfo"] = o.EdnCnfgInfo
	return toSerialize, nil
}

type NullableServProvNotification struct {
	value *ServProvNotification
	isSet bool
}

func (v NullableServProvNotification) Get() *ServProvNotification {
	return v.value
}

func (v *NullableServProvNotification) Set(val *ServProvNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableServProvNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableServProvNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServProvNotification(val *ServProvNotification) *NullableServProvNotification {
	return &NullableServProvNotification{value: val, isSet: true}
}

func (v NullableServProvNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServProvNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


