/*
Eecs_ServiceProvisioning

API for ECS Service Provisioning. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eecs_ServiceProvisioning

import (
	"encoding/json"
)

// checks if the ECSServProvReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECSServProvReq{}

// ECSServProvReq ECS service provisioning request information.
type ECSServProvReq struct {
	// Represents a unique identifier of the EEC.
	EecId string `json:"eecId"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	UeId *string `json:"ueId,omitempty"`
	// Information about services the EEC wants to connect to.
	AcProfs []ACProfile `json:"acProfs,omitempty"`
	// Indicates if the EEC supports service continuity or not, also indicates which ACR scenarios are supported by the EEC. 
	EecSvcContSupp []ACRScenario `json:"eecSvcContSupp,omitempty"`
	// List of connectivity information for the UE.
	ConnInfo []ConnectivityInfo `json:"connInfo,omitempty"`
	LocInf *LocationInfo `json:"locInf,omitempty"`
}

// NewECSServProvReq instantiates a new ECSServProvReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECSServProvReq(eecId string) *ECSServProvReq {
	this := ECSServProvReq{}
	this.EecId = eecId
	return &this
}

// NewECSServProvReqWithDefaults instantiates a new ECSServProvReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECSServProvReqWithDefaults() *ECSServProvReq {
	this := ECSServProvReq{}
	return &this
}

// GetEecId returns the EecId field value
func (o *ECSServProvReq) GetEecId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EecId
}

// GetEecIdOk returns a tuple with the EecId field value
// and a boolean to check if the value has been set.
func (o *ECSServProvReq) GetEecIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EecId, true
}

// SetEecId sets field value
func (o *ECSServProvReq) SetEecId(v string) {
	o.EecId = v
}

// GetUeId returns the UeId field value if set, zero value otherwise.
func (o *ECSServProvReq) GetUeId() string {
	if o == nil || isNil(o.UeId) {
		var ret string
		return ret
	}
	return *o.UeId
}

// GetUeIdOk returns a tuple with the UeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSServProvReq) GetUeIdOk() (*string, bool) {
	if o == nil || isNil(o.UeId) {
		return nil, false
	}
	return o.UeId, true
}

// HasUeId returns a boolean if a field has been set.
func (o *ECSServProvReq) HasUeId() bool {
	if o != nil && !isNil(o.UeId) {
		return true
	}

	return false
}

// SetUeId gets a reference to the given string and assigns it to the UeId field.
func (o *ECSServProvReq) SetUeId(v string) {
	o.UeId = &v
}

// GetAcProfs returns the AcProfs field value if set, zero value otherwise.
func (o *ECSServProvReq) GetAcProfs() []ACProfile {
	if o == nil || isNil(o.AcProfs) {
		var ret []ACProfile
		return ret
	}
	return o.AcProfs
}

// GetAcProfsOk returns a tuple with the AcProfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSServProvReq) GetAcProfsOk() ([]ACProfile, bool) {
	if o == nil || isNil(o.AcProfs) {
		return nil, false
	}
	return o.AcProfs, true
}

// HasAcProfs returns a boolean if a field has been set.
func (o *ECSServProvReq) HasAcProfs() bool {
	if o != nil && !isNil(o.AcProfs) {
		return true
	}

	return false
}

// SetAcProfs gets a reference to the given []ACProfile and assigns it to the AcProfs field.
func (o *ECSServProvReq) SetAcProfs(v []ACProfile) {
	o.AcProfs = v
}

// GetEecSvcContSupp returns the EecSvcContSupp field value if set, zero value otherwise.
func (o *ECSServProvReq) GetEecSvcContSupp() []ACRScenario {
	if o == nil || isNil(o.EecSvcContSupp) {
		var ret []ACRScenario
		return ret
	}
	return o.EecSvcContSupp
}

// GetEecSvcContSuppOk returns a tuple with the EecSvcContSupp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSServProvReq) GetEecSvcContSuppOk() ([]ACRScenario, bool) {
	if o == nil || isNil(o.EecSvcContSupp) {
		return nil, false
	}
	return o.EecSvcContSupp, true
}

// HasEecSvcContSupp returns a boolean if a field has been set.
func (o *ECSServProvReq) HasEecSvcContSupp() bool {
	if o != nil && !isNil(o.EecSvcContSupp) {
		return true
	}

	return false
}

// SetEecSvcContSupp gets a reference to the given []ACRScenario and assigns it to the EecSvcContSupp field.
func (o *ECSServProvReq) SetEecSvcContSupp(v []ACRScenario) {
	o.EecSvcContSupp = v
}

// GetConnInfo returns the ConnInfo field value if set, zero value otherwise.
func (o *ECSServProvReq) GetConnInfo() []ConnectivityInfo {
	if o == nil || isNil(o.ConnInfo) {
		var ret []ConnectivityInfo
		return ret
	}
	return o.ConnInfo
}

// GetConnInfoOk returns a tuple with the ConnInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSServProvReq) GetConnInfoOk() ([]ConnectivityInfo, bool) {
	if o == nil || isNil(o.ConnInfo) {
		return nil, false
	}
	return o.ConnInfo, true
}

// HasConnInfo returns a boolean if a field has been set.
func (o *ECSServProvReq) HasConnInfo() bool {
	if o != nil && !isNil(o.ConnInfo) {
		return true
	}

	return false
}

// SetConnInfo gets a reference to the given []ConnectivityInfo and assigns it to the ConnInfo field.
func (o *ECSServProvReq) SetConnInfo(v []ConnectivityInfo) {
	o.ConnInfo = v
}

// GetLocInf returns the LocInf field value if set, zero value otherwise.
func (o *ECSServProvReq) GetLocInf() LocationInfo {
	if o == nil || isNil(o.LocInf) {
		var ret LocationInfo
		return ret
	}
	return *o.LocInf
}

// GetLocInfOk returns a tuple with the LocInf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSServProvReq) GetLocInfOk() (*LocationInfo, bool) {
	if o == nil || isNil(o.LocInf) {
		return nil, false
	}
	return o.LocInf, true
}

// HasLocInf returns a boolean if a field has been set.
func (o *ECSServProvReq) HasLocInf() bool {
	if o != nil && !isNil(o.LocInf) {
		return true
	}

	return false
}

// SetLocInf gets a reference to the given LocationInfo and assigns it to the LocInf field.
func (o *ECSServProvReq) SetLocInf(v LocationInfo) {
	o.LocInf = &v
}

func (o ECSServProvReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECSServProvReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eecId"] = o.EecId
	if !isNil(o.UeId) {
		toSerialize["ueId"] = o.UeId
	}
	if !isNil(o.AcProfs) {
		toSerialize["acProfs"] = o.AcProfs
	}
	if !isNil(o.EecSvcContSupp) {
		toSerialize["eecSvcContSupp"] = o.EecSvcContSupp
	}
	if !isNil(o.ConnInfo) {
		toSerialize["connInfo"] = o.ConnInfo
	}
	if !isNil(o.LocInf) {
		toSerialize["locInf"] = o.LocInf
	}
	return toSerialize, nil
}

type NullableECSServProvReq struct {
	value *ECSServProvReq
	isSet bool
}

func (v NullableECSServProvReq) Get() *ECSServProvReq {
	return v.value
}

func (v *NullableECSServProvReq) Set(val *ECSServProvReq) {
	v.value = val
	v.isSet = true
}

func (v NullableECSServProvReq) IsSet() bool {
	return v.isSet
}

func (v *NullableECSServProvReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECSServProvReq(val *ECSServProvReq) *NullableECSServProvReq {
	return &NullableECSServProvReq{value: val, isSet: true}
}

func (v NullableECSServProvReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECSServProvReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


