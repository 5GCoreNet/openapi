/*
N5g-ddnmf_Discovery API

N5g-ddnmf_Discovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N5g_ddnmf_Discovery

import (
	"encoding/json"
)

// checks if the MatchReportReqData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchReportReqData{}

// MatchReportReqData Represents the Match Report information
type MatchReportReqData struct {
	DiscType        DiscoveryType `json:"discType"`
	ProseAppCodes   []string      `json:"proseAppCodes,omitempty"`
	MoniteredPlmnId *PlmnId       `json:"moniteredPlmnId,omitempty"`
}

// NewMatchReportReqData instantiates a new MatchReportReqData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchReportReqData(discType DiscoveryType) *MatchReportReqData {
	this := MatchReportReqData{}
	this.DiscType = discType
	return &this
}

// NewMatchReportReqDataWithDefaults instantiates a new MatchReportReqData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchReportReqDataWithDefaults() *MatchReportReqData {
	this := MatchReportReqData{}
	return &this
}

// GetDiscType returns the DiscType field value
func (o *MatchReportReqData) GetDiscType() DiscoveryType {
	if o == nil {
		var ret DiscoveryType
		return ret
	}

	return o.DiscType
}

// GetDiscTypeOk returns a tuple with the DiscType field value
// and a boolean to check if the value has been set.
func (o *MatchReportReqData) GetDiscTypeOk() (*DiscoveryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscType, true
}

// SetDiscType sets field value
func (o *MatchReportReqData) SetDiscType(v DiscoveryType) {
	o.DiscType = v
}

// GetProseAppCodes returns the ProseAppCodes field value if set, zero value otherwise.
func (o *MatchReportReqData) GetProseAppCodes() []string {
	if o == nil || IsNil(o.ProseAppCodes) {
		var ret []string
		return ret
	}
	return o.ProseAppCodes
}

// GetProseAppCodesOk returns a tuple with the ProseAppCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchReportReqData) GetProseAppCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.ProseAppCodes) {
		return nil, false
	}
	return o.ProseAppCodes, true
}

// HasProseAppCodes returns a boolean if a field has been set.
func (o *MatchReportReqData) HasProseAppCodes() bool {
	if o != nil && !IsNil(o.ProseAppCodes) {
		return true
	}

	return false
}

// SetProseAppCodes gets a reference to the given []string and assigns it to the ProseAppCodes field.
func (o *MatchReportReqData) SetProseAppCodes(v []string) {
	o.ProseAppCodes = v
}

// GetMoniteredPlmnId returns the MoniteredPlmnId field value if set, zero value otherwise.
func (o *MatchReportReqData) GetMoniteredPlmnId() PlmnId {
	if o == nil || IsNil(o.MoniteredPlmnId) {
		var ret PlmnId
		return ret
	}
	return *o.MoniteredPlmnId
}

// GetMoniteredPlmnIdOk returns a tuple with the MoniteredPlmnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchReportReqData) GetMoniteredPlmnIdOk() (*PlmnId, bool) {
	if o == nil || IsNil(o.MoniteredPlmnId) {
		return nil, false
	}
	return o.MoniteredPlmnId, true
}

// HasMoniteredPlmnId returns a boolean if a field has been set.
func (o *MatchReportReqData) HasMoniteredPlmnId() bool {
	if o != nil && !IsNil(o.MoniteredPlmnId) {
		return true
	}

	return false
}

// SetMoniteredPlmnId gets a reference to the given PlmnId and assigns it to the MoniteredPlmnId field.
func (o *MatchReportReqData) SetMoniteredPlmnId(v PlmnId) {
	o.MoniteredPlmnId = &v
}

func (o MatchReportReqData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchReportReqData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["discType"] = o.DiscType
	if !IsNil(o.ProseAppCodes) {
		toSerialize["proseAppCodes"] = o.ProseAppCodes
	}
	if !IsNil(o.MoniteredPlmnId) {
		toSerialize["moniteredPlmnId"] = o.MoniteredPlmnId
	}
	return toSerialize, nil
}

type NullableMatchReportReqData struct {
	value *MatchReportReqData
	isSet bool
}

func (v NullableMatchReportReqData) Get() *MatchReportReqData {
	return v.value
}

func (v *NullableMatchReportReqData) Set(val *MatchReportReqData) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchReportReqData) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchReportReqData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchReportReqData(val *MatchReportReqData) *NullableMatchReportReqData {
	return &NullableMatchReportReqData{value: val, isSet: true}
}

func (v NullableMatchReportReqData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchReportReqData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
