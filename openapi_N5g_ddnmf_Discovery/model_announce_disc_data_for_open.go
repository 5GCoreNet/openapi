/*
N5g-ddnmf_Discovery API

N5g-ddnmf_Discovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N5g_ddnmf_Discovery

import (
	"encoding/json"
	"time"
)

// checks if the AnnounceDiscDataForOpen type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnounceDiscDataForOpen{}

// AnnounceDiscDataForOpen Represents Data for open discovery used to request the authorization to announce for a UE
type AnnounceDiscDataForOpen struct {
	// Contains the ProSe Application ID.
	ProseAppId string `json:"proseAppId"`
	// string with format 'date-time' as defined in OpenAPI.
	ValidityTime time.Time `json:"validityTime"`
	// Contains the ProSe Application Code.
	ProseAppCode *string `json:"proseAppCode,omitempty"`
	// Contains the Prose Application Code Prefix.
	ProseAppCodePrefix     *string                         `json:"proseAppCodePrefix,omitempty"`
	ProseAppCodeSuffixPool *ProseApplicationCodeSuffixPool `json:"proseAppCodeSuffixPool,omitempty"`
	// Contains the metadata.
	MetaData *string `json:"metaData,omitempty"`
}

// NewAnnounceDiscDataForOpen instantiates a new AnnounceDiscDataForOpen object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnounceDiscDataForOpen(proseAppId string, validityTime time.Time) *AnnounceDiscDataForOpen {
	this := AnnounceDiscDataForOpen{}
	this.ProseAppId = proseAppId
	this.ValidityTime = validityTime
	return &this
}

// NewAnnounceDiscDataForOpenWithDefaults instantiates a new AnnounceDiscDataForOpen object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnounceDiscDataForOpenWithDefaults() *AnnounceDiscDataForOpen {
	this := AnnounceDiscDataForOpen{}
	return &this
}

// GetProseAppId returns the ProseAppId field value
func (o *AnnounceDiscDataForOpen) GetProseAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProseAppId
}

// GetProseAppIdOk returns a tuple with the ProseAppId field value
// and a boolean to check if the value has been set.
func (o *AnnounceDiscDataForOpen) GetProseAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProseAppId, true
}

// SetProseAppId sets field value
func (o *AnnounceDiscDataForOpen) SetProseAppId(v string) {
	o.ProseAppId = v
}

// GetValidityTime returns the ValidityTime field value
func (o *AnnounceDiscDataForOpen) GetValidityTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ValidityTime
}

// GetValidityTimeOk returns a tuple with the ValidityTime field value
// and a boolean to check if the value has been set.
func (o *AnnounceDiscDataForOpen) GetValidityTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidityTime, true
}

// SetValidityTime sets field value
func (o *AnnounceDiscDataForOpen) SetValidityTime(v time.Time) {
	o.ValidityTime = v
}

// GetProseAppCode returns the ProseAppCode field value if set, zero value otherwise.
func (o *AnnounceDiscDataForOpen) GetProseAppCode() string {
	if o == nil || IsNil(o.ProseAppCode) {
		var ret string
		return ret
	}
	return *o.ProseAppCode
}

// GetProseAppCodeOk returns a tuple with the ProseAppCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnounceDiscDataForOpen) GetProseAppCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProseAppCode) {
		return nil, false
	}
	return o.ProseAppCode, true
}

// HasProseAppCode returns a boolean if a field has been set.
func (o *AnnounceDiscDataForOpen) HasProseAppCode() bool {
	if o != nil && !IsNil(o.ProseAppCode) {
		return true
	}

	return false
}

// SetProseAppCode gets a reference to the given string and assigns it to the ProseAppCode field.
func (o *AnnounceDiscDataForOpen) SetProseAppCode(v string) {
	o.ProseAppCode = &v
}

// GetProseAppCodePrefix returns the ProseAppCodePrefix field value if set, zero value otherwise.
func (o *AnnounceDiscDataForOpen) GetProseAppCodePrefix() string {
	if o == nil || IsNil(o.ProseAppCodePrefix) {
		var ret string
		return ret
	}
	return *o.ProseAppCodePrefix
}

// GetProseAppCodePrefixOk returns a tuple with the ProseAppCodePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnounceDiscDataForOpen) GetProseAppCodePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.ProseAppCodePrefix) {
		return nil, false
	}
	return o.ProseAppCodePrefix, true
}

// HasProseAppCodePrefix returns a boolean if a field has been set.
func (o *AnnounceDiscDataForOpen) HasProseAppCodePrefix() bool {
	if o != nil && !IsNil(o.ProseAppCodePrefix) {
		return true
	}

	return false
}

// SetProseAppCodePrefix gets a reference to the given string and assigns it to the ProseAppCodePrefix field.
func (o *AnnounceDiscDataForOpen) SetProseAppCodePrefix(v string) {
	o.ProseAppCodePrefix = &v
}

// GetProseAppCodeSuffixPool returns the ProseAppCodeSuffixPool field value if set, zero value otherwise.
func (o *AnnounceDiscDataForOpen) GetProseAppCodeSuffixPool() ProseApplicationCodeSuffixPool {
	if o == nil || IsNil(o.ProseAppCodeSuffixPool) {
		var ret ProseApplicationCodeSuffixPool
		return ret
	}
	return *o.ProseAppCodeSuffixPool
}

// GetProseAppCodeSuffixPoolOk returns a tuple with the ProseAppCodeSuffixPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnounceDiscDataForOpen) GetProseAppCodeSuffixPoolOk() (*ProseApplicationCodeSuffixPool, bool) {
	if o == nil || IsNil(o.ProseAppCodeSuffixPool) {
		return nil, false
	}
	return o.ProseAppCodeSuffixPool, true
}

// HasProseAppCodeSuffixPool returns a boolean if a field has been set.
func (o *AnnounceDiscDataForOpen) HasProseAppCodeSuffixPool() bool {
	if o != nil && !IsNil(o.ProseAppCodeSuffixPool) {
		return true
	}

	return false
}

// SetProseAppCodeSuffixPool gets a reference to the given ProseApplicationCodeSuffixPool and assigns it to the ProseAppCodeSuffixPool field.
func (o *AnnounceDiscDataForOpen) SetProseAppCodeSuffixPool(v ProseApplicationCodeSuffixPool) {
	o.ProseAppCodeSuffixPool = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *AnnounceDiscDataForOpen) GetMetaData() string {
	if o == nil || IsNil(o.MetaData) {
		var ret string
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnounceDiscDataForOpen) GetMetaDataOk() (*string, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *AnnounceDiscDataForOpen) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given string and assigns it to the MetaData field.
func (o *AnnounceDiscDataForOpen) SetMetaData(v string) {
	o.MetaData = &v
}

func (o AnnounceDiscDataForOpen) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnounceDiscDataForOpen) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["proseAppId"] = o.ProseAppId
	toSerialize["validityTime"] = o.ValidityTime
	if !IsNil(o.ProseAppCode) {
		toSerialize["proseAppCode"] = o.ProseAppCode
	}
	if !IsNil(o.ProseAppCodePrefix) {
		toSerialize["proseAppCodePrefix"] = o.ProseAppCodePrefix
	}
	if !IsNil(o.ProseAppCodeSuffixPool) {
		toSerialize["proseAppCodeSuffixPool"] = o.ProseAppCodeSuffixPool
	}
	if !IsNil(o.MetaData) {
		toSerialize["metaData"] = o.MetaData
	}
	return toSerialize, nil
}

type NullableAnnounceDiscDataForOpen struct {
	value *AnnounceDiscDataForOpen
	isSet bool
}

func (v NullableAnnounceDiscDataForOpen) Get() *AnnounceDiscDataForOpen {
	return v.value
}

func (v *NullableAnnounceDiscDataForOpen) Set(val *AnnounceDiscDataForOpen) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnounceDiscDataForOpen) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnounceDiscDataForOpen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnounceDiscDataForOpen(val *AnnounceDiscDataForOpen) *NullableAnnounceDiscDataForOpen {
	return &NullableAnnounceDiscDataForOpen{value: val, isSet: true}
}

func (v NullableAnnounceDiscDataForOpen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnounceDiscDataForOpen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
