/*
N5g-ddnmf_Discovery API

N5g-ddnmf_Discovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N5g_ddnmf_Discovery

import (
	"encoding/json"
)

// checks if the MatchInfoForRestricted type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchInfoForRestricted{}

// MatchInfoForRestricted Represents a report including a matching result, and the information that can be used for charging purpose for the restricted discovery type.
type MatchInfoForRestricted struct {
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.
	Supi string `json:"supi"`
	// Contains the RPAUID.
	Rpauid string `json:"rpauid"`
	// Contains the RPAUID.
	TargetRpauid string `json:"targetRpauid"`
	// Contains the ProSe Restricted Code.
	ProseRestrictedCode string `json:"proseRestrictedCode"`
}

// NewMatchInfoForRestricted instantiates a new MatchInfoForRestricted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchInfoForRestricted(supi string, rpauid string, targetRpauid string, proseRestrictedCode string) *MatchInfoForRestricted {
	this := MatchInfoForRestricted{}
	this.Supi = supi
	this.Rpauid = rpauid
	this.TargetRpauid = targetRpauid
	this.ProseRestrictedCode = proseRestrictedCode
	return &this
}

// NewMatchInfoForRestrictedWithDefaults instantiates a new MatchInfoForRestricted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchInfoForRestrictedWithDefaults() *MatchInfoForRestricted {
	this := MatchInfoForRestricted{}
	return &this
}

// GetSupi returns the Supi field value
func (o *MatchInfoForRestricted) GetSupi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Supi
}

// GetSupiOk returns a tuple with the Supi field value
// and a boolean to check if the value has been set.
func (o *MatchInfoForRestricted) GetSupiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supi, true
}

// SetSupi sets field value
func (o *MatchInfoForRestricted) SetSupi(v string) {
	o.Supi = v
}

// GetRpauid returns the Rpauid field value
func (o *MatchInfoForRestricted) GetRpauid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rpauid
}

// GetRpauidOk returns a tuple with the Rpauid field value
// and a boolean to check if the value has been set.
func (o *MatchInfoForRestricted) GetRpauidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rpauid, true
}

// SetRpauid sets field value
func (o *MatchInfoForRestricted) SetRpauid(v string) {
	o.Rpauid = v
}

// GetTargetRpauid returns the TargetRpauid field value
func (o *MatchInfoForRestricted) GetTargetRpauid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetRpauid
}

// GetTargetRpauidOk returns a tuple with the TargetRpauid field value
// and a boolean to check if the value has been set.
func (o *MatchInfoForRestricted) GetTargetRpauidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetRpauid, true
}

// SetTargetRpauid sets field value
func (o *MatchInfoForRestricted) SetTargetRpauid(v string) {
	o.TargetRpauid = v
}

// GetProseRestrictedCode returns the ProseRestrictedCode field value
func (o *MatchInfoForRestricted) GetProseRestrictedCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProseRestrictedCode
}

// GetProseRestrictedCodeOk returns a tuple with the ProseRestrictedCode field value
// and a boolean to check if the value has been set.
func (o *MatchInfoForRestricted) GetProseRestrictedCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProseRestrictedCode, true
}

// SetProseRestrictedCode sets field value
func (o *MatchInfoForRestricted) SetProseRestrictedCode(v string) {
	o.ProseRestrictedCode = v
}

func (o MatchInfoForRestricted) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchInfoForRestricted) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["supi"] = o.Supi
	toSerialize["rpauid"] = o.Rpauid
	toSerialize["targetRpauid"] = o.TargetRpauid
	toSerialize["proseRestrictedCode"] = o.ProseRestrictedCode
	return toSerialize, nil
}

type NullableMatchInfoForRestricted struct {
	value *MatchInfoForRestricted
	isSet bool
}

func (v NullableMatchInfoForRestricted) Get() *MatchInfoForRestricted {
	return v.value
}

func (v *NullableMatchInfoForRestricted) Set(val *MatchInfoForRestricted) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchInfoForRestricted) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchInfoForRestricted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchInfoForRestricted(val *MatchInfoForRestricted) *NullableMatchInfoForRestricted {
	return &NullableMatchInfoForRestricted{value: val, isSet: true}
}

func (v NullableMatchInfoForRestricted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchInfoForRestricted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
