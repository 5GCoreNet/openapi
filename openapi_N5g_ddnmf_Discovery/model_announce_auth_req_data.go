/*
N5g-ddnmf_Discovery API

N5g-ddnmf_Discovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N5g_ddnmf_Discovery

import (
	"encoding/json"
)

// checks if the AnnounceAuthReqData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnounceAuthReqData{}

// AnnounceAuthReqData Represents Data used to request the authorization to announce for a UE
type AnnounceAuthReqData struct {
	DiscType           DiscoveryType                  `json:"discType"`
	OpenDiscData       *AnnounceDiscDataForOpen       `json:"openDiscData,omitempty"`
	RestrictedDiscData *AnnounceDiscDataForRestricted `json:"restrictedDiscData,omitempty"`
}

// NewAnnounceAuthReqData instantiates a new AnnounceAuthReqData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnounceAuthReqData(discType DiscoveryType) *AnnounceAuthReqData {
	this := AnnounceAuthReqData{}
	this.DiscType = discType
	return &this
}

// NewAnnounceAuthReqDataWithDefaults instantiates a new AnnounceAuthReqData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnounceAuthReqDataWithDefaults() *AnnounceAuthReqData {
	this := AnnounceAuthReqData{}
	return &this
}

// GetDiscType returns the DiscType field value
func (o *AnnounceAuthReqData) GetDiscType() DiscoveryType {
	if o == nil {
		var ret DiscoveryType
		return ret
	}

	return o.DiscType
}

// GetDiscTypeOk returns a tuple with the DiscType field value
// and a boolean to check if the value has been set.
func (o *AnnounceAuthReqData) GetDiscTypeOk() (*DiscoveryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscType, true
}

// SetDiscType sets field value
func (o *AnnounceAuthReqData) SetDiscType(v DiscoveryType) {
	o.DiscType = v
}

// GetOpenDiscData returns the OpenDiscData field value if set, zero value otherwise.
func (o *AnnounceAuthReqData) GetOpenDiscData() AnnounceDiscDataForOpen {
	if o == nil || IsNil(o.OpenDiscData) {
		var ret AnnounceDiscDataForOpen
		return ret
	}
	return *o.OpenDiscData
}

// GetOpenDiscDataOk returns a tuple with the OpenDiscData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnounceAuthReqData) GetOpenDiscDataOk() (*AnnounceDiscDataForOpen, bool) {
	if o == nil || IsNil(o.OpenDiscData) {
		return nil, false
	}
	return o.OpenDiscData, true
}

// HasOpenDiscData returns a boolean if a field has been set.
func (o *AnnounceAuthReqData) HasOpenDiscData() bool {
	if o != nil && !IsNil(o.OpenDiscData) {
		return true
	}

	return false
}

// SetOpenDiscData gets a reference to the given AnnounceDiscDataForOpen and assigns it to the OpenDiscData field.
func (o *AnnounceAuthReqData) SetOpenDiscData(v AnnounceDiscDataForOpen) {
	o.OpenDiscData = &v
}

// GetRestrictedDiscData returns the RestrictedDiscData field value if set, zero value otherwise.
func (o *AnnounceAuthReqData) GetRestrictedDiscData() AnnounceDiscDataForRestricted {
	if o == nil || IsNil(o.RestrictedDiscData) {
		var ret AnnounceDiscDataForRestricted
		return ret
	}
	return *o.RestrictedDiscData
}

// GetRestrictedDiscDataOk returns a tuple with the RestrictedDiscData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnounceAuthReqData) GetRestrictedDiscDataOk() (*AnnounceDiscDataForRestricted, bool) {
	if o == nil || IsNil(o.RestrictedDiscData) {
		return nil, false
	}
	return o.RestrictedDiscData, true
}

// HasRestrictedDiscData returns a boolean if a field has been set.
func (o *AnnounceAuthReqData) HasRestrictedDiscData() bool {
	if o != nil && !IsNil(o.RestrictedDiscData) {
		return true
	}

	return false
}

// SetRestrictedDiscData gets a reference to the given AnnounceDiscDataForRestricted and assigns it to the RestrictedDiscData field.
func (o *AnnounceAuthReqData) SetRestrictedDiscData(v AnnounceDiscDataForRestricted) {
	o.RestrictedDiscData = &v
}

func (o AnnounceAuthReqData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnounceAuthReqData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["discType"] = o.DiscType
	if !IsNil(o.OpenDiscData) {
		toSerialize["openDiscData"] = o.OpenDiscData
	}
	if !IsNil(o.RestrictedDiscData) {
		toSerialize["restrictedDiscData"] = o.RestrictedDiscData
	}
	return toSerialize, nil
}

type NullableAnnounceAuthReqData struct {
	value *AnnounceAuthReqData
	isSet bool
}

func (v NullableAnnounceAuthReqData) Get() *AnnounceAuthReqData {
	return v.value
}

func (v *NullableAnnounceAuthReqData) Set(val *AnnounceAuthReqData) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnounceAuthReqData) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnounceAuthReqData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnounceAuthReqData(val *AnnounceAuthReqData) *NullableAnnounceAuthReqData {
	return &NullableAnnounceAuthReqData{value: val, isSet: true}
}

func (v NullableAnnounceAuthReqData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnounceAuthReqData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
