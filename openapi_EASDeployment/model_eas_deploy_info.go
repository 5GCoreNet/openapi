/*
3gpp-eas-deployment

API for AF provisioned EAS Deployment.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_EASDeployment

import (
	"encoding/json"
)

// checks if the EasDeployInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EasDeployInfo{}

// EasDeployInfo Represents EAS Deployment Information.
type EasDeployInfo struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self *string `json:"self,omitempty"`
	AfServiceId *string `json:"afServiceId,omitempty"`
	FqdnPatternList []FqdnPatternMatchingRule `json:"fqdnPatternList"`
	AppId *string `json:"appId,omitempty"`
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn *string `json:"dnn,omitempty"`
	Snssai *Snssai `json:"snssai,omitempty"`
	// string containing a local identifier followed by \"@\" and a domain identifier. Both the local identifier and the domain identifier shall be encoded as strings that do not contain any \"@\" characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more information.
	ExternalGroupId *string `json:"externalGroupId,omitempty"`
	// list of DNS server identifier (consisting of IP address and port) and/or IP address(s) of the EAS in the local DN for each DNAI. The key of map is the DNAI. 
	DnaiInfos *map[string]DnaiInformation `json:"dnaiInfos,omitempty"`
}

// NewEasDeployInfo instantiates a new EasDeployInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEasDeployInfo(fqdnPatternList []FqdnPatternMatchingRule) *EasDeployInfo {
	this := EasDeployInfo{}
	this.FqdnPatternList = fqdnPatternList
	return &this
}

// NewEasDeployInfoWithDefaults instantiates a new EasDeployInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEasDeployInfoWithDefaults() *EasDeployInfo {
	this := EasDeployInfo{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *EasDeployInfo) GetSelf() string {
	if o == nil || IsNil(o.Self) {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDeployInfo) GetSelfOk() (*string, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *EasDeployInfo) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *EasDeployInfo) SetSelf(v string) {
	o.Self = &v
}

// GetAfServiceId returns the AfServiceId field value if set, zero value otherwise.
func (o *EasDeployInfo) GetAfServiceId() string {
	if o == nil || IsNil(o.AfServiceId) {
		var ret string
		return ret
	}
	return *o.AfServiceId
}

// GetAfServiceIdOk returns a tuple with the AfServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDeployInfo) GetAfServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.AfServiceId) {
		return nil, false
	}
	return o.AfServiceId, true
}

// HasAfServiceId returns a boolean if a field has been set.
func (o *EasDeployInfo) HasAfServiceId() bool {
	if o != nil && !IsNil(o.AfServiceId) {
		return true
	}

	return false
}

// SetAfServiceId gets a reference to the given string and assigns it to the AfServiceId field.
func (o *EasDeployInfo) SetAfServiceId(v string) {
	o.AfServiceId = &v
}

// GetFqdnPatternList returns the FqdnPatternList field value
func (o *EasDeployInfo) GetFqdnPatternList() []FqdnPatternMatchingRule {
	if o == nil {
		var ret []FqdnPatternMatchingRule
		return ret
	}

	return o.FqdnPatternList
}

// GetFqdnPatternListOk returns a tuple with the FqdnPatternList field value
// and a boolean to check if the value has been set.
func (o *EasDeployInfo) GetFqdnPatternListOk() ([]FqdnPatternMatchingRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.FqdnPatternList, true
}

// SetFqdnPatternList sets field value
func (o *EasDeployInfo) SetFqdnPatternList(v []FqdnPatternMatchingRule) {
	o.FqdnPatternList = v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *EasDeployInfo) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDeployInfo) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *EasDeployInfo) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *EasDeployInfo) SetAppId(v string) {
	o.AppId = &v
}

// GetDnn returns the Dnn field value if set, zero value otherwise.
func (o *EasDeployInfo) GetDnn() string {
	if o == nil || IsNil(o.Dnn) {
		var ret string
		return ret
	}
	return *o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDeployInfo) GetDnnOk() (*string, bool) {
	if o == nil || IsNil(o.Dnn) {
		return nil, false
	}
	return o.Dnn, true
}

// HasDnn returns a boolean if a field has been set.
func (o *EasDeployInfo) HasDnn() bool {
	if o != nil && !IsNil(o.Dnn) {
		return true
	}

	return false
}

// SetDnn gets a reference to the given string and assigns it to the Dnn field.
func (o *EasDeployInfo) SetDnn(v string) {
	o.Dnn = &v
}

// GetSnssai returns the Snssai field value if set, zero value otherwise.
func (o *EasDeployInfo) GetSnssai() Snssai {
	if o == nil || IsNil(o.Snssai) {
		var ret Snssai
		return ret
	}
	return *o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDeployInfo) GetSnssaiOk() (*Snssai, bool) {
	if o == nil || IsNil(o.Snssai) {
		return nil, false
	}
	return o.Snssai, true
}

// HasSnssai returns a boolean if a field has been set.
func (o *EasDeployInfo) HasSnssai() bool {
	if o != nil && !IsNil(o.Snssai) {
		return true
	}

	return false
}

// SetSnssai gets a reference to the given Snssai and assigns it to the Snssai field.
func (o *EasDeployInfo) SetSnssai(v Snssai) {
	o.Snssai = &v
}

// GetExternalGroupId returns the ExternalGroupId field value if set, zero value otherwise.
func (o *EasDeployInfo) GetExternalGroupId() string {
	if o == nil || IsNil(o.ExternalGroupId) {
		var ret string
		return ret
	}
	return *o.ExternalGroupId
}

// GetExternalGroupIdOk returns a tuple with the ExternalGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDeployInfo) GetExternalGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalGroupId) {
		return nil, false
	}
	return o.ExternalGroupId, true
}

// HasExternalGroupId returns a boolean if a field has been set.
func (o *EasDeployInfo) HasExternalGroupId() bool {
	if o != nil && !IsNil(o.ExternalGroupId) {
		return true
	}

	return false
}

// SetExternalGroupId gets a reference to the given string and assigns it to the ExternalGroupId field.
func (o *EasDeployInfo) SetExternalGroupId(v string) {
	o.ExternalGroupId = &v
}

// GetDnaiInfos returns the DnaiInfos field value if set, zero value otherwise.
func (o *EasDeployInfo) GetDnaiInfos() map[string]DnaiInformation {
	if o == nil || IsNil(o.DnaiInfos) {
		var ret map[string]DnaiInformation
		return ret
	}
	return *o.DnaiInfos
}

// GetDnaiInfosOk returns a tuple with the DnaiInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EasDeployInfo) GetDnaiInfosOk() (*map[string]DnaiInformation, bool) {
	if o == nil || IsNil(o.DnaiInfos) {
		return nil, false
	}
	return o.DnaiInfos, true
}

// HasDnaiInfos returns a boolean if a field has been set.
func (o *EasDeployInfo) HasDnaiInfos() bool {
	if o != nil && !IsNil(o.DnaiInfos) {
		return true
	}

	return false
}

// SetDnaiInfos gets a reference to the given map[string]DnaiInformation and assigns it to the DnaiInfos field.
func (o *EasDeployInfo) SetDnaiInfos(v map[string]DnaiInformation) {
	o.DnaiInfos = &v
}

func (o EasDeployInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EasDeployInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	if !IsNil(o.AfServiceId) {
		toSerialize["afServiceId"] = o.AfServiceId
	}
	toSerialize["fqdnPatternList"] = o.FqdnPatternList
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.Dnn) {
		toSerialize["dnn"] = o.Dnn
	}
	if !IsNil(o.Snssai) {
		toSerialize["snssai"] = o.Snssai
	}
	if !IsNil(o.ExternalGroupId) {
		toSerialize["externalGroupId"] = o.ExternalGroupId
	}
	if !IsNil(o.DnaiInfos) {
		toSerialize["dnaiInfos"] = o.DnaiInfos
	}
	return toSerialize, nil
}

type NullableEasDeployInfo struct {
	value *EasDeployInfo
	isSet bool
}

func (v NullableEasDeployInfo) Get() *EasDeployInfo {
	return v.value
}

func (v *NullableEasDeployInfo) Set(val *EasDeployInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEasDeployInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEasDeployInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEasDeployInfo(val *EasDeployInfo) *NullableEasDeployInfo {
	return &NullableEasDeployInfo{value: val, isSet: true}
}

func (v NullableEasDeployInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEasDeployInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


