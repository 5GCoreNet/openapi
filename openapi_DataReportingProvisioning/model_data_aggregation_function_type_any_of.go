/*
3gpp-data-reporting-provisioning

API for 3GPP Data Reporting and Provisioning.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_DataReportingProvisioning

import (
	"encoding/json"
	"fmt"
)

// DataAggregationFunctionTypeAnyOf the model 'DataAggregationFunctionTypeAnyOf'
type DataAggregationFunctionTypeAnyOf string

// List of DataAggregationFunctionType_anyOf
const (
	NULL DataAggregationFunctionTypeAnyOf = "NULL"
	COUNT DataAggregationFunctionTypeAnyOf = "COUNT"
	MEAN DataAggregationFunctionTypeAnyOf = "MEAN"
	MAXIMUM DataAggregationFunctionTypeAnyOf = "MAXIMUM"
	MINIMUM DataAggregationFunctionTypeAnyOf = "MINIMUM"
	SUM DataAggregationFunctionTypeAnyOf = "SUM"
)

// All allowed values of DataAggregationFunctionTypeAnyOf enum
var AllowedDataAggregationFunctionTypeAnyOfEnumValues = []DataAggregationFunctionTypeAnyOf{
	"NULL",
	"COUNT",
	"MEAN",
	"MAXIMUM",
	"MINIMUM",
	"SUM",
}

func (v *DataAggregationFunctionTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataAggregationFunctionTypeAnyOf(value)
	for _, existing := range AllowedDataAggregationFunctionTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataAggregationFunctionTypeAnyOf", value)
}

// NewDataAggregationFunctionTypeAnyOfFromValue returns a pointer to a valid DataAggregationFunctionTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataAggregationFunctionTypeAnyOfFromValue(v string) (*DataAggregationFunctionTypeAnyOf, error) {
	ev := DataAggregationFunctionTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataAggregationFunctionTypeAnyOf: valid values are %v", v, AllowedDataAggregationFunctionTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataAggregationFunctionTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedDataAggregationFunctionTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataAggregationFunctionType_anyOf value
func (v DataAggregationFunctionTypeAnyOf) Ptr() *DataAggregationFunctionTypeAnyOf {
	return &v
}

type NullableDataAggregationFunctionTypeAnyOf struct {
	value *DataAggregationFunctionTypeAnyOf
	isSet bool
}

func (v NullableDataAggregationFunctionTypeAnyOf) Get() *DataAggregationFunctionTypeAnyOf {
	return v.value
}

func (v *NullableDataAggregationFunctionTypeAnyOf) Set(val *DataAggregationFunctionTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDataAggregationFunctionTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDataAggregationFunctionTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataAggregationFunctionTypeAnyOf(val *DataAggregationFunctionTypeAnyOf) *NullableDataAggregationFunctionTypeAnyOf {
	return &NullableDataAggregationFunctionTypeAnyOf{value: val, isSet: true}
}

func (v NullableDataAggregationFunctionTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataAggregationFunctionTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

