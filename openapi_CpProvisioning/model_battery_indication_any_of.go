/*
3gpp-cp-parameter-provisioning

API for provisioning communication pattern parameters.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CpProvisioning

import (
	"encoding/json"
	"fmt"
)

// BatteryIndicationAnyOf the model 'BatteryIndicationAnyOf'
type BatteryIndicationAnyOf string

// List of BatteryIndication_anyOf
const (
	BATTERY_RECHARGE BatteryIndicationAnyOf = "BATTERY_RECHARGE"
	BATTERY_REPLACE BatteryIndicationAnyOf = "BATTERY_REPLACE"
	BATTERY_NO_RECHARGE BatteryIndicationAnyOf = "BATTERY_NO_RECHARGE"
	BATTERY_NO_REPLACE BatteryIndicationAnyOf = "BATTERY_NO_REPLACE"
	NO_BATTERY BatteryIndicationAnyOf = "NO_BATTERY"
)

// All allowed values of BatteryIndicationAnyOf enum
var AllowedBatteryIndicationAnyOfEnumValues = []BatteryIndicationAnyOf{
	"BATTERY_RECHARGE",
	"BATTERY_REPLACE",
	"BATTERY_NO_RECHARGE",
	"BATTERY_NO_REPLACE",
	"NO_BATTERY",
}

func (v *BatteryIndicationAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BatteryIndicationAnyOf(value)
	for _, existing := range AllowedBatteryIndicationAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BatteryIndicationAnyOf", value)
}

// NewBatteryIndicationAnyOfFromValue returns a pointer to a valid BatteryIndicationAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBatteryIndicationAnyOfFromValue(v string) (*BatteryIndicationAnyOf, error) {
	ev := BatteryIndicationAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BatteryIndicationAnyOf: valid values are %v", v, AllowedBatteryIndicationAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BatteryIndicationAnyOf) IsValid() bool {
	for _, existing := range AllowedBatteryIndicationAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BatteryIndication_anyOf value
func (v BatteryIndicationAnyOf) Ptr() *BatteryIndicationAnyOf {
	return &v
}

type NullableBatteryIndicationAnyOf struct {
	value *BatteryIndicationAnyOf
	isSet bool
}

func (v NullableBatteryIndicationAnyOf) Get() *BatteryIndicationAnyOf {
	return v.value
}

func (v *NullableBatteryIndicationAnyOf) Set(val *BatteryIndicationAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBatteryIndicationAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBatteryIndicationAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatteryIndicationAnyOf(val *BatteryIndicationAnyOf) *NullableBatteryIndicationAnyOf {
	return &NullableBatteryIndicationAnyOf{value: val, isSet: true}
}

func (v NullableBatteryIndicationAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatteryIndicationAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

