/*
3gpp-cp-parameter-provisioning

API for provisioning communication pattern parameters.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CpProvisioning

import (
	"encoding/json"
	"fmt"
)

// CpFailureCodeAnyOf the model 'CpFailureCodeAnyOf'
type CpFailureCodeAnyOf string

// List of CpFailureCode_anyOf
const (
	MALFUNCTION CpFailureCodeAnyOf = "MALFUNCTION"
	SET_ID_DUPLICATED CpFailureCodeAnyOf = "SET_ID_DUPLICATED"
	OTHER_REASON CpFailureCodeAnyOf = "OTHER_REASON"
)

// All allowed values of CpFailureCodeAnyOf enum
var AllowedCpFailureCodeAnyOfEnumValues = []CpFailureCodeAnyOf{
	"MALFUNCTION",
	"SET_ID_DUPLICATED",
	"OTHER_REASON",
}

func (v *CpFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CpFailureCodeAnyOf(value)
	for _, existing := range AllowedCpFailureCodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CpFailureCodeAnyOf", value)
}

// NewCpFailureCodeAnyOfFromValue returns a pointer to a valid CpFailureCodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCpFailureCodeAnyOfFromValue(v string) (*CpFailureCodeAnyOf, error) {
	ev := CpFailureCodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CpFailureCodeAnyOf: valid values are %v", v, AllowedCpFailureCodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CpFailureCodeAnyOf) IsValid() bool {
	for _, existing := range AllowedCpFailureCodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CpFailureCode_anyOf value
func (v CpFailureCodeAnyOf) Ptr() *CpFailureCodeAnyOf {
	return &v
}

type NullableCpFailureCodeAnyOf struct {
	value *CpFailureCodeAnyOf
	isSet bool
}

func (v NullableCpFailureCodeAnyOf) Get() *CpFailureCodeAnyOf {
	return v.value
}

func (v *NullableCpFailureCodeAnyOf) Set(val *CpFailureCodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCpFailureCodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCpFailureCodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpFailureCodeAnyOf(val *CpFailureCodeAnyOf) *NullableCpFailureCodeAnyOf {
	return &NullableCpFailureCodeAnyOf{value: val, isSet: true}
}

func (v NullableCpFailureCodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpFailureCodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

