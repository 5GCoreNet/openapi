/*
Nchf_SpendingLimitControl

Nchf Spending Limit Control Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_SpendingLimitControl

import (
	"encoding/json"
)

// checks if the SubscriptionTerminationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionTerminationInfo{}

// SubscriptionTerminationInfo Represents the data structure presenting the indication of the termination of the  subscription. 
type SubscriptionTerminationInfo struct {
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi string `json:"supi"`
	NotifId *string `json:"notifId,omitempty"`
	TermCause *TerminationCause `json:"termCause,omitempty"`
}

// NewSubscriptionTerminationInfo instantiates a new SubscriptionTerminationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionTerminationInfo(supi string) *SubscriptionTerminationInfo {
	this := SubscriptionTerminationInfo{}
	this.Supi = supi
	return &this
}

// NewSubscriptionTerminationInfoWithDefaults instantiates a new SubscriptionTerminationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionTerminationInfoWithDefaults() *SubscriptionTerminationInfo {
	this := SubscriptionTerminationInfo{}
	return &this
}

// GetSupi returns the Supi field value
func (o *SubscriptionTerminationInfo) GetSupi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Supi
}

// GetSupiOk returns a tuple with the Supi field value
// and a boolean to check if the value has been set.
func (o *SubscriptionTerminationInfo) GetSupiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supi, true
}

// SetSupi sets field value
func (o *SubscriptionTerminationInfo) SetSupi(v string) {
	o.Supi = v
}

// GetNotifId returns the NotifId field value if set, zero value otherwise.
func (o *SubscriptionTerminationInfo) GetNotifId() string {
	if o == nil || isNil(o.NotifId) {
		var ret string
		return ret
	}
	return *o.NotifId
}

// GetNotifIdOk returns a tuple with the NotifId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionTerminationInfo) GetNotifIdOk() (*string, bool) {
	if o == nil || isNil(o.NotifId) {
		return nil, false
	}
	return o.NotifId, true
}

// HasNotifId returns a boolean if a field has been set.
func (o *SubscriptionTerminationInfo) HasNotifId() bool {
	if o != nil && !isNil(o.NotifId) {
		return true
	}

	return false
}

// SetNotifId gets a reference to the given string and assigns it to the NotifId field.
func (o *SubscriptionTerminationInfo) SetNotifId(v string) {
	o.NotifId = &v
}

// GetTermCause returns the TermCause field value if set, zero value otherwise.
func (o *SubscriptionTerminationInfo) GetTermCause() TerminationCause {
	if o == nil || isNil(o.TermCause) {
		var ret TerminationCause
		return ret
	}
	return *o.TermCause
}

// GetTermCauseOk returns a tuple with the TermCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionTerminationInfo) GetTermCauseOk() (*TerminationCause, bool) {
	if o == nil || isNil(o.TermCause) {
		return nil, false
	}
	return o.TermCause, true
}

// HasTermCause returns a boolean if a field has been set.
func (o *SubscriptionTerminationInfo) HasTermCause() bool {
	if o != nil && !isNil(o.TermCause) {
		return true
	}

	return false
}

// SetTermCause gets a reference to the given TerminationCause and assigns it to the TermCause field.
func (o *SubscriptionTerminationInfo) SetTermCause(v TerminationCause) {
	o.TermCause = &v
}

func (o SubscriptionTerminationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionTerminationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["supi"] = o.Supi
	if !isNil(o.NotifId) {
		toSerialize["notifId"] = o.NotifId
	}
	if !isNil(o.TermCause) {
		toSerialize["termCause"] = o.TermCause
	}
	return toSerialize, nil
}

type NullableSubscriptionTerminationInfo struct {
	value *SubscriptionTerminationInfo
	isSet bool
}

func (v NullableSubscriptionTerminationInfo) Get() *SubscriptionTerminationInfo {
	return v.value
}

func (v *NullableSubscriptionTerminationInfo) Set(val *SubscriptionTerminationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionTerminationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionTerminationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionTerminationInfo(val *SubscriptionTerminationInfo) *NullableSubscriptionTerminationInfo {
	return &NullableSubscriptionTerminationInfo{value: val, isSet: true}
}

func (v NullableSubscriptionTerminationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionTerminationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


