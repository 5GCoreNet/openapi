/*
Common Data Types

Common Data Types for Service Based Interfaces.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.5.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
	"fmt"
)

// UpIntegrityRm indicates whether UP integrity protection is required, preferred or not needed for all the traffic on the PDU Session. It shall comply with the provisions defined in table 5.4.3.4-1.
type UpIntegrityRm struct {
	NullValue   *NullValue
	UpIntegrity *UpIntegrity
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *UpIntegrityRm) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into NullValue
	err = json.Unmarshal(data, &dst.NullValue)
	if err == nil {
		jsonNullValue, _ := json.Marshal(dst.NullValue)
		if string(jsonNullValue) == "{}" { // empty struct
			dst.NullValue = nil
		} else {
			return nil // data stored in dst.NullValue, return on the first match
		}
	} else {
		dst.NullValue = nil
	}

	// try to unmarshal JSON data into UpIntegrity
	err = json.Unmarshal(data, &dst.UpIntegrity)
	if err == nil {
		jsonUpIntegrity, _ := json.Marshal(dst.UpIntegrity)
		if string(jsonUpIntegrity) == "{}" { // empty struct
			dst.UpIntegrity = nil
		} else {
			return nil // data stored in dst.UpIntegrity, return on the first match
		}
	} else {
		dst.UpIntegrity = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(UpIntegrityRm)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *UpIntegrityRm) MarshalJSON() ([]byte, error) {
	if src.NullValue != nil {
		return json.Marshal(&src.NullValue)
	}

	if src.UpIntegrity != nil {
		return json.Marshal(&src.UpIntegrity)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUpIntegrityRm struct {
	value *UpIntegrityRm
	isSet bool
}

func (v NullableUpIntegrityRm) Get() *UpIntegrityRm {
	return v.value
}

func (v *NullableUpIntegrityRm) Set(val *UpIntegrityRm) {
	v.value = val
	v.isSet = true
}

func (v NullableUpIntegrityRm) IsSet() bool {
	return v.isSet
}

func (v *NullableUpIntegrityRm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpIntegrityRm(val *UpIntegrityRm) *NullableUpIntegrityRm {
	return &NullableUpIntegrityRm{value: val, isSet: true}
}

func (v NullableUpIntegrityRm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpIntegrityRm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
