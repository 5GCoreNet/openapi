/*
Common Data Types

Common Data Types for Service Based Interfaces.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   

API version: 1.5.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
	"fmt"
)

// MbsSessionEventTypeAnyOf the model 'MbsSessionEventTypeAnyOf'
type MbsSessionEventTypeAnyOf string

// List of MbsSessionEventType_anyOf
const (
	MBS_REL_TMGI_EXPIRY MbsSessionEventTypeAnyOf = "MBS_REL_TMGI_EXPIRY"
	BROADCAST_DELIVERY_STATUS MbsSessionEventTypeAnyOf = "BROADCAST_DELIVERY_STATUS"
	INGRESS_TUNNEL_ADD_CHANGE MbsSessionEventTypeAnyOf = "INGRESS_TUNNEL_ADD_CHANGE"
)

// All allowed values of MbsSessionEventTypeAnyOf enum
var AllowedMbsSessionEventTypeAnyOfEnumValues = []MbsSessionEventTypeAnyOf{
	"MBS_REL_TMGI_EXPIRY",
	"BROADCAST_DELIVERY_STATUS",
	"INGRESS_TUNNEL_ADD_CHANGE",
}

func (v *MbsSessionEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MbsSessionEventTypeAnyOf(value)
	for _, existing := range AllowedMbsSessionEventTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MbsSessionEventTypeAnyOf", value)
}

// NewMbsSessionEventTypeAnyOfFromValue returns a pointer to a valid MbsSessionEventTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMbsSessionEventTypeAnyOfFromValue(v string) (*MbsSessionEventTypeAnyOf, error) {
	ev := MbsSessionEventTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MbsSessionEventTypeAnyOf: valid values are %v", v, AllowedMbsSessionEventTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MbsSessionEventTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedMbsSessionEventTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MbsSessionEventType_anyOf value
func (v MbsSessionEventTypeAnyOf) Ptr() *MbsSessionEventTypeAnyOf {
	return &v
}

type NullableMbsSessionEventTypeAnyOf struct {
	value *MbsSessionEventTypeAnyOf
	isSet bool
}

func (v NullableMbsSessionEventTypeAnyOf) Get() *MbsSessionEventTypeAnyOf {
	return v.value
}

func (v *NullableMbsSessionEventTypeAnyOf) Set(val *MbsSessionEventTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMbsSessionEventTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMbsSessionEventTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMbsSessionEventTypeAnyOf(val *MbsSessionEventTypeAnyOf) *NullableMbsSessionEventTypeAnyOf {
	return &NullableMbsSessionEventTypeAnyOf{value: val, isSet: true}
}

func (v NullableMbsSessionEventTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMbsSessionEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

