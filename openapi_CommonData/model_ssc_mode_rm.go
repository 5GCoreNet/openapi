/*
Common Data Types

Common Data Types for Service Based Interfaces.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.5.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
	"fmt"
)

// SscModeRm represents the service and session continuity mode It shall comply with the provisions defined in table 5.4.3.6-1 but with the OpenAPI 'nullable: true' property.
type SscModeRm struct {
	NullValue *NullValue
	SscMode   *SscMode
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SscModeRm) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into NullValue
	err = json.Unmarshal(data, &dst.NullValue)
	if err == nil {
		jsonNullValue, _ := json.Marshal(dst.NullValue)
		if string(jsonNullValue) == "{}" { // empty struct
			dst.NullValue = nil
		} else {
			return nil // data stored in dst.NullValue, return on the first match
		}
	} else {
		dst.NullValue = nil
	}

	// try to unmarshal JSON data into SscMode
	err = json.Unmarshal(data, &dst.SscMode)
	if err == nil {
		jsonSscMode, _ := json.Marshal(dst.SscMode)
		if string(jsonSscMode) == "{}" { // empty struct
			dst.SscMode = nil
		} else {
			return nil // data stored in dst.SscMode, return on the first match
		}
	} else {
		dst.SscMode = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SscModeRm)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SscModeRm) MarshalJSON() ([]byte, error) {
	if src.NullValue != nil {
		return json.Marshal(&src.NullValue)
	}

	if src.SscMode != nil {
		return json.Marshal(&src.SscMode)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSscModeRm struct {
	value *SscModeRm
	isSet bool
}

func (v NullableSscModeRm) Get() *SscModeRm {
	return v.value
}

func (v *NullableSscModeRm) Set(val *SscModeRm) {
	v.value = val
	v.isSet = true
}

func (v NullableSscModeRm) IsSet() bool {
	return v.isSet
}

func (v *NullableSscModeRm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSscModeRm(val *SscModeRm) *NullableSscModeRm {
	return &NullableSscModeRm{value: val, isSet: true}
}

func (v NullableSscModeRm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSscModeRm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
