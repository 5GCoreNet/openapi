/*
Common Data Types

Common Data Types for Service Based Interfaces.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.5.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
	"fmt"
)

// LinksValueSchema - A list of mutually exclusive alternatives of 1 or more links.
type LinksValueSchema struct {
	Link        *Link
	ArrayOfLink *[]Link
}

// LinkAsLinksValueSchema is a convenience function that returns Link wrapped in LinksValueSchema
func LinkAsLinksValueSchema(v *Link) LinksValueSchema {
	return LinksValueSchema{
		Link: v,
	}
}

// []LinkAsLinksValueSchema is a convenience function that returns []Link wrapped in LinksValueSchema
func ArrayOfLinkAsLinksValueSchema(v *[]Link) LinksValueSchema {
	return LinksValueSchema{
		ArrayOfLink: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *LinksValueSchema) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Link
	err = newStrictDecoder(data).Decode(&dst.Link)
	if err == nil {
		jsonLink, _ := json.Marshal(dst.Link)
		if string(jsonLink) == "{}" { // empty struct
			dst.Link = nil
		} else {
			match++
		}
	} else {
		dst.Link = nil
	}

	// try to unmarshal data into ArrayOfLink
	err = newStrictDecoder(data).Decode(&dst.ArrayOfLink)
	if err == nil {
		jsonArrayOfLink, _ := json.Marshal(dst.ArrayOfLink)
		if string(jsonArrayOfLink) == "{}" { // empty struct
			dst.ArrayOfLink = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfLink = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Link = nil
		dst.ArrayOfLink = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LinksValueSchema)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LinksValueSchema)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LinksValueSchema) MarshalJSON() ([]byte, error) {
	if src.Link != nil {
		return json.Marshal(&src.Link)
	}

	if src.ArrayOfLink != nil {
		return json.Marshal(&src.ArrayOfLink)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LinksValueSchema) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Link != nil {
		return obj.Link
	}

	if obj.ArrayOfLink != nil {
		return obj.ArrayOfLink
	}

	// all schemas are nil
	return nil
}

type NullableLinksValueSchema struct {
	value *LinksValueSchema
	isSet bool
}

func (v NullableLinksValueSchema) Get() *LinksValueSchema {
	return v.value
}

func (v *NullableLinksValueSchema) Set(val *LinksValueSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableLinksValueSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableLinksValueSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinksValueSchema(val *LinksValueSchema) *NullableLinksValueSchema {
	return &NullableLinksValueSchema{value: val, isSet: true}
}

func (v NullableLinksValueSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinksValueSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
