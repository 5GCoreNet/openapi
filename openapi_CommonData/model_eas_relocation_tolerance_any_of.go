/*
5GMS Common Data Types

5GMS Common Data Types Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
	"fmt"
)

// EASRelocationToleranceAnyOf the model 'EASRelocationToleranceAnyOf'
type EASRelocationToleranceAnyOf string

// List of EASRelocationTolerance_anyOf
const (
	UNAWARE EASRelocationToleranceAnyOf = "RELOCATION_UNAWARE"
	TOLERANT EASRelocationToleranceAnyOf = "RELOCATION_TOLERANT"
	INTOLERANT EASRelocationToleranceAnyOf = "RELOCATION_INTOLERANT"
)

// All allowed values of EASRelocationToleranceAnyOf enum
var AllowedEASRelocationToleranceAnyOfEnumValues = []EASRelocationToleranceAnyOf{
	"RELOCATION_UNAWARE",
	"RELOCATION_TOLERANT",
	"RELOCATION_INTOLERANT",
}

func (v *EASRelocationToleranceAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EASRelocationToleranceAnyOf(value)
	for _, existing := range AllowedEASRelocationToleranceAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EASRelocationToleranceAnyOf", value)
}

// NewEASRelocationToleranceAnyOfFromValue returns a pointer to a valid EASRelocationToleranceAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEASRelocationToleranceAnyOfFromValue(v string) (*EASRelocationToleranceAnyOf, error) {
	ev := EASRelocationToleranceAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EASRelocationToleranceAnyOf: valid values are %v", v, AllowedEASRelocationToleranceAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EASRelocationToleranceAnyOf) IsValid() bool {
	for _, existing := range AllowedEASRelocationToleranceAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EASRelocationTolerance_anyOf value
func (v EASRelocationToleranceAnyOf) Ptr() *EASRelocationToleranceAnyOf {
	return &v
}

type NullableEASRelocationToleranceAnyOf struct {
	value *EASRelocationToleranceAnyOf
	isSet bool
}

func (v NullableEASRelocationToleranceAnyOf) Get() *EASRelocationToleranceAnyOf {
	return v.value
}

func (v *NullableEASRelocationToleranceAnyOf) Set(val *EASRelocationToleranceAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEASRelocationToleranceAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEASRelocationToleranceAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEASRelocationToleranceAnyOf(val *EASRelocationToleranceAnyOf) *NullableEASRelocationToleranceAnyOf {
	return &NullableEASRelocationToleranceAnyOf{value: val, isSet: true}
}

func (v NullableEASRelocationToleranceAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEASRelocationToleranceAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

