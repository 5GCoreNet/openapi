/*
Common Data Types

Common Data Types for Service Based Interfaces.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   

API version: 1.5.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
	"fmt"
)

// NssaaStatusRm This data type is defined in the same way as the 'NssaaStatus' data type, but with the OpenAPI 'nullable: true' property. 
type NssaaStatusRm struct {
	NssaaStatus *NssaaStatus
	NullValue *NullValue
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *NssaaStatusRm) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into NssaaStatus
	err = json.Unmarshal(data, &dst.NssaaStatus);
	if err == nil {
		jsonNssaaStatus, _ := json.Marshal(dst.NssaaStatus)
		if string(jsonNssaaStatus) == "{}" { // empty struct
			dst.NssaaStatus = nil
		} else {
			return nil // data stored in dst.NssaaStatus, return on the first match
		}
	} else {
		dst.NssaaStatus = nil
	}

	// try to unmarshal JSON data into NullValue
	err = json.Unmarshal(data, &dst.NullValue);
	if err == nil {
		jsonNullValue, _ := json.Marshal(dst.NullValue)
		if string(jsonNullValue) == "{}" { // empty struct
			dst.NullValue = nil
		} else {
			return nil // data stored in dst.NullValue, return on the first match
		}
	} else {
		dst.NullValue = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(NssaaStatusRm)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *NssaaStatusRm) MarshalJSON() ([]byte, error) {
	if src.NssaaStatus != nil {
		return json.Marshal(&src.NssaaStatus)
	}

	if src.NullValue != nil {
		return json.Marshal(&src.NullValue)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableNssaaStatusRm struct {
	value *NssaaStatusRm
	isSet bool
}

func (v NullableNssaaStatusRm) Get() *NssaaStatusRm {
	return v.value
}

func (v *NullableNssaaStatusRm) Set(val *NssaaStatusRm) {
	v.value = val
	v.isSet = true
}

func (v NullableNssaaStatusRm) IsSet() bool {
	return v.isSet
}

func (v *NullableNssaaStatusRm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNssaaStatusRm(val *NssaaStatusRm) *NullableNssaaStatusRm {
	return &NullableNssaaStatusRm{value: val, isSet: true}
}

func (v NullableNssaaStatusRm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNssaaStatusRm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


