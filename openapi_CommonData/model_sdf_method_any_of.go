/*
5GMS Common Data Types

5GMS Common Data Types Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
	"fmt"
)

// SdfMethodAnyOf the model 'SdfMethodAnyOf'
type SdfMethodAnyOf string

// List of SdfMethod_anyOf
const (
	_5_TUPLE SdfMethodAnyOf = "5_TUPLE"
	_2_TUPLE SdfMethodAnyOf = "2_TUPLE"
	TYPE_OF_SERVICE_MARKING SdfMethodAnyOf = "TYPE_OF_SERVICE_MARKING"
	FLOW_LABEL SdfMethodAnyOf = "FLOW_LABEL"
	DOMAIN_NAME SdfMethodAnyOf = "DOMAIN_NAME"
)

// All allowed values of SdfMethodAnyOf enum
var AllowedSdfMethodAnyOfEnumValues = []SdfMethodAnyOf{
	"5_TUPLE",
	"2_TUPLE",
	"TYPE_OF_SERVICE_MARKING",
	"FLOW_LABEL",
	"DOMAIN_NAME",
}

func (v *SdfMethodAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SdfMethodAnyOf(value)
	for _, existing := range AllowedSdfMethodAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SdfMethodAnyOf", value)
}

// NewSdfMethodAnyOfFromValue returns a pointer to a valid SdfMethodAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSdfMethodAnyOfFromValue(v string) (*SdfMethodAnyOf, error) {
	ev := SdfMethodAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SdfMethodAnyOf: valid values are %v", v, AllowedSdfMethodAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SdfMethodAnyOf) IsValid() bool {
	for _, existing := range AllowedSdfMethodAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SdfMethod_anyOf value
func (v SdfMethodAnyOf) Ptr() *SdfMethodAnyOf {
	return &v
}

type NullableSdfMethodAnyOf struct {
	value *SdfMethodAnyOf
	isSet bool
}

func (v NullableSdfMethodAnyOf) Get() *SdfMethodAnyOf {
	return v.value
}

func (v *NullableSdfMethodAnyOf) Set(val *SdfMethodAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSdfMethodAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSdfMethodAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdfMethodAnyOf(val *SdfMethodAnyOf) *NullableSdfMethodAnyOf {
	return &NullableSdfMethodAnyOf{value: val, isSet: true}
}

func (v NullableSdfMethodAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdfMethodAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

