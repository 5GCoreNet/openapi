/*
TS 29.122 Common Data Types

Data types applicable to several APIs.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
)

// checks if the TestNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestNotification{}

// TestNotification Represents a notification that can be sent to test whether a chosen notification mechanism works.
type TestNotification struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Subscription string `json:"subscription"`
}

// NewTestNotification instantiates a new TestNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestNotification(subscription string) *TestNotification {
	this := TestNotification{}
	this.Subscription = subscription
	return &this
}

// NewTestNotificationWithDefaults instantiates a new TestNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestNotificationWithDefaults() *TestNotification {
	this := TestNotification{}
	return &this
}

// GetSubscription returns the Subscription field value
func (o *TestNotification) GetSubscription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
func (o *TestNotification) GetSubscriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *TestNotification) SetSubscription(v string) {
	o.Subscription = v
}

func (o TestNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscription"] = o.Subscription
	return toSerialize, nil
}

type NullableTestNotification struct {
	value *TestNotification
	isSet bool
}

func (v NullableTestNotification) Get() *TestNotification {
	return v.value
}

func (v *NullableTestNotification) Set(val *TestNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableTestNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableTestNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestNotification(val *TestNotification) *NullableTestNotification {
	return &NullableTestNotification{value: val, isSet: true}
}

func (v NullableTestNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


