/*
Common Data Types

Common Data Types for Service Based Interfaces.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.   

API version: 1.5.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
)

// checks if the HalTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HalTemplate{}

// HalTemplate Hypertext Application Language (HAL) template contains the extended 3GPP hypermedia format. 
type HalTemplate struct {
	// A human-readable string that can be used to identify this template
	Title *string `json:"title,omitempty"`
	Method HttpMethod `json:"method"`
	// The media type that should be used for the corresponding request. If the attribute is missing, or contains an unrecognized value, the client should act as if the  contentType is set to \"application/json\". 
	ContentType *string `json:"contentType,omitempty"`
	// The properties that should be included in the body of the corresponding request.  If the contentType attribute is set to \"application/json\", then this attribute  describes the attributes of the JSON object of the body. 
	Properties []Property `json:"properties,omitempty"`
}

// NewHalTemplate instantiates a new HalTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHalTemplate(method HttpMethod) *HalTemplate {
	this := HalTemplate{}
	this.Method = method
	return &this
}

// NewHalTemplateWithDefaults instantiates a new HalTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHalTemplateWithDefaults() *HalTemplate {
	this := HalTemplate{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *HalTemplate) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HalTemplate) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *HalTemplate) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *HalTemplate) SetTitle(v string) {
	o.Title = &v
}

// GetMethod returns the Method field value
func (o *HalTemplate) GetMethod() HttpMethod {
	if o == nil {
		var ret HttpMethod
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *HalTemplate) GetMethodOk() (*HttpMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *HalTemplate) SetMethod(v HttpMethod) {
	o.Method = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *HalTemplate) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HalTemplate) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *HalTemplate) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *HalTemplate) SetContentType(v string) {
	o.ContentType = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *HalTemplate) GetProperties() []Property {
	if o == nil || IsNil(o.Properties) {
		var ret []Property
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HalTemplate) GetPropertiesOk() ([]Property, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *HalTemplate) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []Property and assigns it to the Properties field.
func (o *HalTemplate) SetProperties(v []Property) {
	o.Properties = v
}

func (o HalTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HalTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["method"] = o.Method
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableHalTemplate struct {
	value *HalTemplate
	isSet bool
}

func (v NullableHalTemplate) Get() *HalTemplate {
	return v.value
}

func (v *NullableHalTemplate) Set(val *HalTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableHalTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableHalTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHalTemplate(val *HalTemplate) *NullableHalTemplate {
	return &NullableHalTemplate{value: val, isSet: true}
}

func (v NullableHalTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHalTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


