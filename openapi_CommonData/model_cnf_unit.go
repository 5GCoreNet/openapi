/*
Common Data Types

Common Data Types for Service Based Interfaces.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.5.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CommonData

import (
	"encoding/json"
)

// checks if the CnfUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CnfUnit{}

// CnfUnit During the processing of cnfUnits attribute, all the members in the array shall be  interpreted as logically concatenated with logical \"AND\".
type CnfUnit struct {
	CnfUnit []Atom `json:"cnfUnit"`
}

// NewCnfUnit instantiates a new CnfUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCnfUnit(cnfUnit []Atom) *CnfUnit {
	this := CnfUnit{}
	this.CnfUnit = cnfUnit
	return &this
}

// NewCnfUnitWithDefaults instantiates a new CnfUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCnfUnitWithDefaults() *CnfUnit {
	this := CnfUnit{}
	return &this
}

// GetCnfUnit returns the CnfUnit field value
func (o *CnfUnit) GetCnfUnit() []Atom {
	if o == nil {
		var ret []Atom
		return ret
	}

	return o.CnfUnit
}

// GetCnfUnitOk returns a tuple with the CnfUnit field value
// and a boolean to check if the value has been set.
func (o *CnfUnit) GetCnfUnitOk() ([]Atom, bool) {
	if o == nil {
		return nil, false
	}
	return o.CnfUnit, true
}

// SetCnfUnit sets field value
func (o *CnfUnit) SetCnfUnit(v []Atom) {
	o.CnfUnit = v
}

func (o CnfUnit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CnfUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cnfUnit"] = o.CnfUnit
	return toSerialize, nil
}

type NullableCnfUnit struct {
	value *CnfUnit
	isSet bool
}

func (v NullableCnfUnit) Get() *CnfUnit {
	return v.value
}

func (v *NullableCnfUnit) Set(val *CnfUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableCnfUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableCnfUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCnfUnit(val *CnfUnit) *NullableCnfUnit {
	return &NullableCnfUnit{value: val, isSet: true}
}

func (v NullableCnfUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCnfUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
