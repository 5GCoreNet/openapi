/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// SupplementaryServiceModeAnyOf the model 'SupplementaryServiceModeAnyOf'
type SupplementaryServiceModeAnyOf string

// List of SupplementaryServiceMode_anyOf
const (
	CFU SupplementaryServiceModeAnyOf = "CFU"
	CFB SupplementaryServiceModeAnyOf = "CFB"
	CFNR SupplementaryServiceModeAnyOf = "CFNR"
	CFNL SupplementaryServiceModeAnyOf = "CFNL"
	CD SupplementaryServiceModeAnyOf = "CD"
	CFNRC SupplementaryServiceModeAnyOf = "CFNRC"
	ICB SupplementaryServiceModeAnyOf = "ICB"
	OCB SupplementaryServiceModeAnyOf = "OCB"
	ACR SupplementaryServiceModeAnyOf = "ACR"
	BLIND_TRANFER SupplementaryServiceModeAnyOf = "BLIND_TRANFER"
	CONSULTATIVE_TRANFER SupplementaryServiceModeAnyOf = "CONSULTATIVE_TRANFER"
)

// All allowed values of SupplementaryServiceModeAnyOf enum
var AllowedSupplementaryServiceModeAnyOfEnumValues = []SupplementaryServiceModeAnyOf{
	"CFU",
	"CFB",
	"CFNR",
	"CFNL",
	"CD",
	"CFNRC",
	"ICB",
	"OCB",
	"ACR",
	"BLIND_TRANFER",
	"CONSULTATIVE_TRANFER",
}

func (v *SupplementaryServiceModeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupplementaryServiceModeAnyOf(value)
	for _, existing := range AllowedSupplementaryServiceModeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupplementaryServiceModeAnyOf", value)
}

// NewSupplementaryServiceModeAnyOfFromValue returns a pointer to a valid SupplementaryServiceModeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupplementaryServiceModeAnyOfFromValue(v string) (*SupplementaryServiceModeAnyOf, error) {
	ev := SupplementaryServiceModeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupplementaryServiceModeAnyOf: valid values are %v", v, AllowedSupplementaryServiceModeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupplementaryServiceModeAnyOf) IsValid() bool {
	for _, existing := range AllowedSupplementaryServiceModeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupplementaryServiceMode_anyOf value
func (v SupplementaryServiceModeAnyOf) Ptr() *SupplementaryServiceModeAnyOf {
	return &v
}

type NullableSupplementaryServiceModeAnyOf struct {
	value *SupplementaryServiceModeAnyOf
	isSet bool
}

func (v NullableSupplementaryServiceModeAnyOf) Get() *SupplementaryServiceModeAnyOf {
	return v.value
}

func (v *NullableSupplementaryServiceModeAnyOf) Set(val *SupplementaryServiceModeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplementaryServiceModeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplementaryServiceModeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplementaryServiceModeAnyOf(val *SupplementaryServiceModeAnyOf) *NullableSupplementaryServiceModeAnyOf {
	return &NullableSupplementaryServiceModeAnyOf{value: val, isSet: true}
}

func (v NullableSupplementaryServiceModeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplementaryServiceModeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

