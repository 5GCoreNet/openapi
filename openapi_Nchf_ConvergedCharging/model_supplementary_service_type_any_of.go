/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// SupplementaryServiceTypeAnyOf the model 'SupplementaryServiceTypeAnyOf'
type SupplementaryServiceTypeAnyOf string

// List of SupplementaryServiceType_anyOf
const (
	OIP SupplementaryServiceTypeAnyOf = "OIP"
	OIR SupplementaryServiceTypeAnyOf = "OIR"
	TIP SupplementaryServiceTypeAnyOf = "TIP"
	TIR SupplementaryServiceTypeAnyOf = "TIR"
	HOLD SupplementaryServiceTypeAnyOf = "HOLD"
	CB SupplementaryServiceTypeAnyOf = "CB"
	CDIV SupplementaryServiceTypeAnyOf = "CDIV"
	CW SupplementaryServiceTypeAnyOf = "CW"
	MWI SupplementaryServiceTypeAnyOf = "MWI"
	CONF SupplementaryServiceTypeAnyOf = "CONF"
	FA SupplementaryServiceTypeAnyOf = "FA"
	CCBS SupplementaryServiceTypeAnyOf = "CCBS"
	CCNR SupplementaryServiceTypeAnyOf = "CCNR"
	MCID SupplementaryServiceTypeAnyOf = "MCID"
	CAT SupplementaryServiceTypeAnyOf = "CAT"
	CUG SupplementaryServiceTypeAnyOf = "CUG"
	PNM SupplementaryServiceTypeAnyOf = "PNM"
	CRS SupplementaryServiceTypeAnyOf = "CRS"
	ECT SupplementaryServiceTypeAnyOf = "ECT"
)

// All allowed values of SupplementaryServiceTypeAnyOf enum
var AllowedSupplementaryServiceTypeAnyOfEnumValues = []SupplementaryServiceTypeAnyOf{
	"OIP",
	"OIR",
	"TIP",
	"TIR",
	"HOLD",
	"CB",
	"CDIV",
	"CW",
	"MWI",
	"CONF",
	"FA",
	"CCBS",
	"CCNR",
	"MCID",
	"CAT",
	"CUG",
	"PNM",
	"CRS",
	"ECT",
}

func (v *SupplementaryServiceTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupplementaryServiceTypeAnyOf(value)
	for _, existing := range AllowedSupplementaryServiceTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupplementaryServiceTypeAnyOf", value)
}

// NewSupplementaryServiceTypeAnyOfFromValue returns a pointer to a valid SupplementaryServiceTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupplementaryServiceTypeAnyOfFromValue(v string) (*SupplementaryServiceTypeAnyOf, error) {
	ev := SupplementaryServiceTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupplementaryServiceTypeAnyOf: valid values are %v", v, AllowedSupplementaryServiceTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupplementaryServiceTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedSupplementaryServiceTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupplementaryServiceType_anyOf value
func (v SupplementaryServiceTypeAnyOf) Ptr() *SupplementaryServiceTypeAnyOf {
	return &v
}

type NullableSupplementaryServiceTypeAnyOf struct {
	value *SupplementaryServiceTypeAnyOf
	isSet bool
}

func (v NullableSupplementaryServiceTypeAnyOf) Get() *SupplementaryServiceTypeAnyOf {
	return v.value
}

func (v *NullableSupplementaryServiceTypeAnyOf) Set(val *SupplementaryServiceTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplementaryServiceTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplementaryServiceTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplementaryServiceTypeAnyOf(val *SupplementaryServiceTypeAnyOf) *NullableSupplementaryServiceTypeAnyOf {
	return &NullableSupplementaryServiceTypeAnyOf{value: val, isSet: true}
}

func (v NullableSupplementaryServiceTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplementaryServiceTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

