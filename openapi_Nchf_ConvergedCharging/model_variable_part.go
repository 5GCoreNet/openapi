/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
)

// checks if the VariablePart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariablePart{}

// VariablePart struct for VariablePart
type VariablePart struct {
	VariablePartType VariablePartType `json:"variablePartType"`
	VariablePartValue []string `json:"variablePartValue"`
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	VariablePartOrder *int32 `json:"variablePartOrder,omitempty"`
}

// NewVariablePart instantiates a new VariablePart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariablePart(variablePartType VariablePartType, variablePartValue []string) *VariablePart {
	this := VariablePart{}
	this.VariablePartType = variablePartType
	this.VariablePartValue = variablePartValue
	return &this
}

// NewVariablePartWithDefaults instantiates a new VariablePart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariablePartWithDefaults() *VariablePart {
	this := VariablePart{}
	return &this
}

// GetVariablePartType returns the VariablePartType field value
func (o *VariablePart) GetVariablePartType() VariablePartType {
	if o == nil {
		var ret VariablePartType
		return ret
	}

	return o.VariablePartType
}

// GetVariablePartTypeOk returns a tuple with the VariablePartType field value
// and a boolean to check if the value has been set.
func (o *VariablePart) GetVariablePartTypeOk() (*VariablePartType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariablePartType, true
}

// SetVariablePartType sets field value
func (o *VariablePart) SetVariablePartType(v VariablePartType) {
	o.VariablePartType = v
}

// GetVariablePartValue returns the VariablePartValue field value
func (o *VariablePart) GetVariablePartValue() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.VariablePartValue
}

// GetVariablePartValueOk returns a tuple with the VariablePartValue field value
// and a boolean to check if the value has been set.
func (o *VariablePart) GetVariablePartValueOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariablePartValue, true
}

// SetVariablePartValue sets field value
func (o *VariablePart) SetVariablePartValue(v []string) {
	o.VariablePartValue = v
}

// GetVariablePartOrder returns the VariablePartOrder field value if set, zero value otherwise.
func (o *VariablePart) GetVariablePartOrder() int32 {
	if o == nil || IsNil(o.VariablePartOrder) {
		var ret int32
		return ret
	}
	return *o.VariablePartOrder
}

// GetVariablePartOrderOk returns a tuple with the VariablePartOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariablePart) GetVariablePartOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.VariablePartOrder) {
		return nil, false
	}
	return o.VariablePartOrder, true
}

// HasVariablePartOrder returns a boolean if a field has been set.
func (o *VariablePart) HasVariablePartOrder() bool {
	if o != nil && !IsNil(o.VariablePartOrder) {
		return true
	}

	return false
}

// SetVariablePartOrder gets a reference to the given int32 and assigns it to the VariablePartOrder field.
func (o *VariablePart) SetVariablePartOrder(v int32) {
	o.VariablePartOrder = &v
}

func (o VariablePart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariablePart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["variablePartType"] = o.VariablePartType
	toSerialize["variablePartValue"] = o.VariablePartValue
	if !IsNil(o.VariablePartOrder) {
		toSerialize["variablePartOrder"] = o.VariablePartOrder
	}
	return toSerialize, nil
}

type NullableVariablePart struct {
	value *VariablePart
	isSet bool
}

func (v NullableVariablePart) Get() *VariablePart {
	return v.value
}

func (v *NullableVariablePart) Set(val *VariablePart) {
	v.value = val
	v.isSet = true
}

func (v NullableVariablePart) IsSet() bool {
	return v.isSet
}

func (v *NullableVariablePart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariablePart(val *VariablePart) *NullableVariablePart {
	return &NullableVariablePart{value: val, isSet: true}
}

func (v NullableVariablePart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariablePart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


