/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// SMServiceTypeAnyOf the model 'SMServiceTypeAnyOf'
type SMServiceTypeAnyOf string

// List of SMServiceType_anyOf
const (
	CONTENT_PROCESSING SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_CONTENT_PROCESSING"
	FORWARDING SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_FORWARDING"
	FORWARDING_MULTIPLE_SUBSCRIPTIONS SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_FORWARDING_MULTIPLE_SUBSCRIPTIONS"
	FILTERING SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_FILTERING"
	RECEIPT SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_RECEIPT"
	NETWORK_STORAGE SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_NETWORK_STORAGE"
	TO_MULTIPLE_DESTINATIONS SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_TO_MULTIPLE_DESTINATIONS"
	VIRTUAL_PRIVATE_NETWORK_VPN SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_VIRTUAL_PRIVATE_NETWORK(VPN)"
	AUTO_REPLY SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_AUTO_REPLY"
	PERSONAL_SIGNATURE SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_PERSONAL_SIGNATURE"
	DEFERRED_DELIVERY SMServiceTypeAnyOf = "VAS4SMS_SHORT_MESSAGE_DEFERRED_DELIVERY"
)

// All allowed values of SMServiceTypeAnyOf enum
var AllowedSMServiceTypeAnyOfEnumValues = []SMServiceTypeAnyOf{
	"VAS4SMS_SHORT_MESSAGE_CONTENT_PROCESSING",
	"VAS4SMS_SHORT_MESSAGE_FORWARDING",
	"VAS4SMS_SHORT_MESSAGE_FORWARDING_MULTIPLE_SUBSCRIPTIONS",
	"VAS4SMS_SHORT_MESSAGE_FILTERING",
	"VAS4SMS_SHORT_MESSAGE_RECEIPT",
	"VAS4SMS_SHORT_MESSAGE_NETWORK_STORAGE",
	"VAS4SMS_SHORT_MESSAGE_TO_MULTIPLE_DESTINATIONS",
	"VAS4SMS_SHORT_MESSAGE_VIRTUAL_PRIVATE_NETWORK(VPN)",
	"VAS4SMS_SHORT_MESSAGE_AUTO_REPLY",
	"VAS4SMS_SHORT_MESSAGE_PERSONAL_SIGNATURE",
	"VAS4SMS_SHORT_MESSAGE_DEFERRED_DELIVERY",
}

func (v *SMServiceTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SMServiceTypeAnyOf(value)
	for _, existing := range AllowedSMServiceTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SMServiceTypeAnyOf", value)
}

// NewSMServiceTypeAnyOfFromValue returns a pointer to a valid SMServiceTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSMServiceTypeAnyOfFromValue(v string) (*SMServiceTypeAnyOf, error) {
	ev := SMServiceTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SMServiceTypeAnyOf: valid values are %v", v, AllowedSMServiceTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SMServiceTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedSMServiceTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SMServiceType_anyOf value
func (v SMServiceTypeAnyOf) Ptr() *SMServiceTypeAnyOf {
	return &v
}

type NullableSMServiceTypeAnyOf struct {
	value *SMServiceTypeAnyOf
	isSet bool
}

func (v NullableSMServiceTypeAnyOf) Get() *SMServiceTypeAnyOf {
	return v.value
}

func (v *NullableSMServiceTypeAnyOf) Set(val *SMServiceTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSMServiceTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSMServiceTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMServiceTypeAnyOf(val *SMServiceTypeAnyOf) *NullableSMServiceTypeAnyOf {
	return &NullableSMServiceTypeAnyOf{value: val, isSet: true}
}

func (v NullableSMServiceTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMServiceTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

