/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
)

// checks if the Tai1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tai1{}

// Tai1 struct for Tai1
type Tai1 struct {
	PlmnId *PlmnId1 `json:"plmnId,omitempty"`
	NrTac  *int32   `json:"nrTac,omitempty"`
}

// NewTai1 instantiates a new Tai1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTai1() *Tai1 {
	this := Tai1{}
	return &this
}

// NewTai1WithDefaults instantiates a new Tai1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTai1WithDefaults() *Tai1 {
	this := Tai1{}
	return &this
}

// GetPlmnId returns the PlmnId field value if set, zero value otherwise.
func (o *Tai1) GetPlmnId() PlmnId1 {
	if o == nil || IsNil(o.PlmnId) {
		var ret PlmnId1
		return ret
	}
	return *o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tai1) GetPlmnIdOk() (*PlmnId1, bool) {
	if o == nil || IsNil(o.PlmnId) {
		return nil, false
	}
	return o.PlmnId, true
}

// HasPlmnId returns a boolean if a field has been set.
func (o *Tai1) HasPlmnId() bool {
	if o != nil && !IsNil(o.PlmnId) {
		return true
	}

	return false
}

// SetPlmnId gets a reference to the given PlmnId1 and assigns it to the PlmnId field.
func (o *Tai1) SetPlmnId(v PlmnId1) {
	o.PlmnId = &v
}

// GetNrTac returns the NrTac field value if set, zero value otherwise.
func (o *Tai1) GetNrTac() int32 {
	if o == nil || IsNil(o.NrTac) {
		var ret int32
		return ret
	}
	return *o.NrTac
}

// GetNrTacOk returns a tuple with the NrTac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tai1) GetNrTacOk() (*int32, bool) {
	if o == nil || IsNil(o.NrTac) {
		return nil, false
	}
	return o.NrTac, true
}

// HasNrTac returns a boolean if a field has been set.
func (o *Tai1) HasNrTac() bool {
	if o != nil && !IsNil(o.NrTac) {
		return true
	}

	return false
}

// SetNrTac gets a reference to the given int32 and assigns it to the NrTac field.
func (o *Tai1) SetNrTac(v int32) {
	o.NrTac = &v
}

func (o Tai1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tai1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlmnId) {
		toSerialize["plmnId"] = o.PlmnId
	}
	if !IsNil(o.NrTac) {
		toSerialize["nrTac"] = o.NrTac
	}
	return toSerialize, nil
}

type NullableTai1 struct {
	value *Tai1
	isSet bool
}

func (v NullableTai1) Get() *Tai1 {
	return v.value
}

func (v *NullableTai1) Set(val *Tai1) {
	v.value = val
	v.isSet = true
}

func (v NullableTai1) IsSet() bool {
	return v.isSet
}

func (v *NullableTai1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTai1(val *Tai1) *NullableTai1 {
	return &NullableTai1{value: val, isSet: true}
}

func (v NullableTai1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTai1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
