/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// RangeClassAnyOf the model 'RangeClassAnyOf'
type RangeClassAnyOf string

// List of RangeClass_anyOf
const (
	RESERVED RangeClassAnyOf = "RESERVED"
	_50_METER RangeClassAnyOf = "50_METER"
	_100_METER RangeClassAnyOf = "100_METER"
	_200_METER RangeClassAnyOf = "200_METER"
	_500_METER RangeClassAnyOf = "500_METER"
	_1000_METER RangeClassAnyOf = "1000_METER"
	UNUSED RangeClassAnyOf = "UNUSED"
)

// All allowed values of RangeClassAnyOf enum
var AllowedRangeClassAnyOfEnumValues = []RangeClassAnyOf{
	"RESERVED",
	"50_METER",
	"100_METER",
	"200_METER",
	"500_METER",
	"1000_METER",
	"UNUSED",
}

func (v *RangeClassAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RangeClassAnyOf(value)
	for _, existing := range AllowedRangeClassAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RangeClassAnyOf", value)
}

// NewRangeClassAnyOfFromValue returns a pointer to a valid RangeClassAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRangeClassAnyOfFromValue(v string) (*RangeClassAnyOf, error) {
	ev := RangeClassAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RangeClassAnyOf: valid values are %v", v, AllowedRangeClassAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RangeClassAnyOf) IsValid() bool {
	for _, existing := range AllowedRangeClassAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RangeClass_anyOf value
func (v RangeClassAnyOf) Ptr() *RangeClassAnyOf {
	return &v
}

type NullableRangeClassAnyOf struct {
	value *RangeClassAnyOf
	isSet bool
}

func (v NullableRangeClassAnyOf) Get() *RangeClassAnyOf {
	return v.value
}

func (v *NullableRangeClassAnyOf) Set(val *RangeClassAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeClassAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeClassAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeClassAnyOf(val *RangeClassAnyOf) *NullableRangeClassAnyOf {
	return &NullableRangeClassAnyOf{value: val, isSet: true}
}

func (v NullableRangeClassAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeClassAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

