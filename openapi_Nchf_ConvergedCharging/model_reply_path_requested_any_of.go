/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// ReplyPathRequestedAnyOf the model 'ReplyPathRequestedAnyOf'
type ReplyPathRequestedAnyOf string

// List of ReplyPathRequested_anyOf
const (
	NO_REPLY_PATH_SET ReplyPathRequestedAnyOf = "NO_REPLY_PATH_SET"
	REPLY_PATH_SET ReplyPathRequestedAnyOf = "REPLY_PATH_SET"
)

// All allowed values of ReplyPathRequestedAnyOf enum
var AllowedReplyPathRequestedAnyOfEnumValues = []ReplyPathRequestedAnyOf{
	"NO_REPLY_PATH_SET",
	"REPLY_PATH_SET",
}

func (v *ReplyPathRequestedAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplyPathRequestedAnyOf(value)
	for _, existing := range AllowedReplyPathRequestedAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplyPathRequestedAnyOf", value)
}

// NewReplyPathRequestedAnyOfFromValue returns a pointer to a valid ReplyPathRequestedAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplyPathRequestedAnyOfFromValue(v string) (*ReplyPathRequestedAnyOf, error) {
	ev := ReplyPathRequestedAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplyPathRequestedAnyOf: valid values are %v", v, AllowedReplyPathRequestedAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplyPathRequestedAnyOf) IsValid() bool {
	for _, existing := range AllowedReplyPathRequestedAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplyPathRequested_anyOf value
func (v ReplyPathRequestedAnyOf) Ptr() *ReplyPathRequestedAnyOf {
	return &v
}

type NullableReplyPathRequestedAnyOf struct {
	value *ReplyPathRequestedAnyOf
	isSet bool
}

func (v NullableReplyPathRequestedAnyOf) Get() *ReplyPathRequestedAnyOf {
	return v.value
}

func (v *NullableReplyPathRequestedAnyOf) Set(val *ReplyPathRequestedAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReplyPathRequestedAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReplyPathRequestedAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplyPathRequestedAnyOf(val *ReplyPathRequestedAnyOf) *NullableReplyPathRequestedAnyOf {
	return &NullableReplyPathRequestedAnyOf{value: val, isSet: true}
}

func (v NullableReplyPathRequestedAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplyPathRequestedAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

