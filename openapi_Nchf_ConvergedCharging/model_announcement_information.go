/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
)

// checks if the AnnouncementInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnouncementInformation{}

// AnnouncementInformation struct for AnnouncementInformation
type AnnouncementInformation struct {
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	AnnouncementIdentifier *int32 `json:"announcementIdentifier,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	AnnouncementReference *string `json:"announcementReference,omitempty"`
	VariableParts []VariablePart `json:"variableParts,omitempty"`
	// indicating a time in seconds.
	TimeToPlay *int32 `json:"timeToPlay,omitempty"`
	QuotaConsumptionIndicator *QuotaConsumptionIndicator `json:"quotaConsumptionIndicator,omitempty"`
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	AnnouncementPriority *int32 `json:"announcementPriority,omitempty"`
	PlayToParty *PlayToParty `json:"playToParty,omitempty"`
	AnnouncementPrivacyIndicator *AnnouncementPrivacyIndicator `json:"announcementPrivacyIndicator,omitempty"`
	Language *string `json:"Language,omitempty"`
}

// NewAnnouncementInformation instantiates a new AnnouncementInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnouncementInformation() *AnnouncementInformation {
	this := AnnouncementInformation{}
	return &this
}

// NewAnnouncementInformationWithDefaults instantiates a new AnnouncementInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnouncementInformationWithDefaults() *AnnouncementInformation {
	this := AnnouncementInformation{}
	return &this
}

// GetAnnouncementIdentifier returns the AnnouncementIdentifier field value if set, zero value otherwise.
func (o *AnnouncementInformation) GetAnnouncementIdentifier() int32 {
	if o == nil || isNil(o.AnnouncementIdentifier) {
		var ret int32
		return ret
	}
	return *o.AnnouncementIdentifier
}

// GetAnnouncementIdentifierOk returns a tuple with the AnnouncementIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementInformation) GetAnnouncementIdentifierOk() (*int32, bool) {
	if o == nil || isNil(o.AnnouncementIdentifier) {
		return nil, false
	}
	return o.AnnouncementIdentifier, true
}

// HasAnnouncementIdentifier returns a boolean if a field has been set.
func (o *AnnouncementInformation) HasAnnouncementIdentifier() bool {
	if o != nil && !isNil(o.AnnouncementIdentifier) {
		return true
	}

	return false
}

// SetAnnouncementIdentifier gets a reference to the given int32 and assigns it to the AnnouncementIdentifier field.
func (o *AnnouncementInformation) SetAnnouncementIdentifier(v int32) {
	o.AnnouncementIdentifier = &v
}

// GetAnnouncementReference returns the AnnouncementReference field value if set, zero value otherwise.
func (o *AnnouncementInformation) GetAnnouncementReference() string {
	if o == nil || isNil(o.AnnouncementReference) {
		var ret string
		return ret
	}
	return *o.AnnouncementReference
}

// GetAnnouncementReferenceOk returns a tuple with the AnnouncementReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementInformation) GetAnnouncementReferenceOk() (*string, bool) {
	if o == nil || isNil(o.AnnouncementReference) {
		return nil, false
	}
	return o.AnnouncementReference, true
}

// HasAnnouncementReference returns a boolean if a field has been set.
func (o *AnnouncementInformation) HasAnnouncementReference() bool {
	if o != nil && !isNil(o.AnnouncementReference) {
		return true
	}

	return false
}

// SetAnnouncementReference gets a reference to the given string and assigns it to the AnnouncementReference field.
func (o *AnnouncementInformation) SetAnnouncementReference(v string) {
	o.AnnouncementReference = &v
}

// GetVariableParts returns the VariableParts field value if set, zero value otherwise.
func (o *AnnouncementInformation) GetVariableParts() []VariablePart {
	if o == nil || isNil(o.VariableParts) {
		var ret []VariablePart
		return ret
	}
	return o.VariableParts
}

// GetVariablePartsOk returns a tuple with the VariableParts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementInformation) GetVariablePartsOk() ([]VariablePart, bool) {
	if o == nil || isNil(o.VariableParts) {
		return nil, false
	}
	return o.VariableParts, true
}

// HasVariableParts returns a boolean if a field has been set.
func (o *AnnouncementInformation) HasVariableParts() bool {
	if o != nil && !isNil(o.VariableParts) {
		return true
	}

	return false
}

// SetVariableParts gets a reference to the given []VariablePart and assigns it to the VariableParts field.
func (o *AnnouncementInformation) SetVariableParts(v []VariablePart) {
	o.VariableParts = v
}

// GetTimeToPlay returns the TimeToPlay field value if set, zero value otherwise.
func (o *AnnouncementInformation) GetTimeToPlay() int32 {
	if o == nil || isNil(o.TimeToPlay) {
		var ret int32
		return ret
	}
	return *o.TimeToPlay
}

// GetTimeToPlayOk returns a tuple with the TimeToPlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementInformation) GetTimeToPlayOk() (*int32, bool) {
	if o == nil || isNil(o.TimeToPlay) {
		return nil, false
	}
	return o.TimeToPlay, true
}

// HasTimeToPlay returns a boolean if a field has been set.
func (o *AnnouncementInformation) HasTimeToPlay() bool {
	if o != nil && !isNil(o.TimeToPlay) {
		return true
	}

	return false
}

// SetTimeToPlay gets a reference to the given int32 and assigns it to the TimeToPlay field.
func (o *AnnouncementInformation) SetTimeToPlay(v int32) {
	o.TimeToPlay = &v
}

// GetQuotaConsumptionIndicator returns the QuotaConsumptionIndicator field value if set, zero value otherwise.
func (o *AnnouncementInformation) GetQuotaConsumptionIndicator() QuotaConsumptionIndicator {
	if o == nil || isNil(o.QuotaConsumptionIndicator) {
		var ret QuotaConsumptionIndicator
		return ret
	}
	return *o.QuotaConsumptionIndicator
}

// GetQuotaConsumptionIndicatorOk returns a tuple with the QuotaConsumptionIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementInformation) GetQuotaConsumptionIndicatorOk() (*QuotaConsumptionIndicator, bool) {
	if o == nil || isNil(o.QuotaConsumptionIndicator) {
		return nil, false
	}
	return o.QuotaConsumptionIndicator, true
}

// HasQuotaConsumptionIndicator returns a boolean if a field has been set.
func (o *AnnouncementInformation) HasQuotaConsumptionIndicator() bool {
	if o != nil && !isNil(o.QuotaConsumptionIndicator) {
		return true
	}

	return false
}

// SetQuotaConsumptionIndicator gets a reference to the given QuotaConsumptionIndicator and assigns it to the QuotaConsumptionIndicator field.
func (o *AnnouncementInformation) SetQuotaConsumptionIndicator(v QuotaConsumptionIndicator) {
	o.QuotaConsumptionIndicator = &v
}

// GetAnnouncementPriority returns the AnnouncementPriority field value if set, zero value otherwise.
func (o *AnnouncementInformation) GetAnnouncementPriority() int32 {
	if o == nil || isNil(o.AnnouncementPriority) {
		var ret int32
		return ret
	}
	return *o.AnnouncementPriority
}

// GetAnnouncementPriorityOk returns a tuple with the AnnouncementPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementInformation) GetAnnouncementPriorityOk() (*int32, bool) {
	if o == nil || isNil(o.AnnouncementPriority) {
		return nil, false
	}
	return o.AnnouncementPriority, true
}

// HasAnnouncementPriority returns a boolean if a field has been set.
func (o *AnnouncementInformation) HasAnnouncementPriority() bool {
	if o != nil && !isNil(o.AnnouncementPriority) {
		return true
	}

	return false
}

// SetAnnouncementPriority gets a reference to the given int32 and assigns it to the AnnouncementPriority field.
func (o *AnnouncementInformation) SetAnnouncementPriority(v int32) {
	o.AnnouncementPriority = &v
}

// GetPlayToParty returns the PlayToParty field value if set, zero value otherwise.
func (o *AnnouncementInformation) GetPlayToParty() PlayToParty {
	if o == nil || isNil(o.PlayToParty) {
		var ret PlayToParty
		return ret
	}
	return *o.PlayToParty
}

// GetPlayToPartyOk returns a tuple with the PlayToParty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementInformation) GetPlayToPartyOk() (*PlayToParty, bool) {
	if o == nil || isNil(o.PlayToParty) {
		return nil, false
	}
	return o.PlayToParty, true
}

// HasPlayToParty returns a boolean if a field has been set.
func (o *AnnouncementInformation) HasPlayToParty() bool {
	if o != nil && !isNil(o.PlayToParty) {
		return true
	}

	return false
}

// SetPlayToParty gets a reference to the given PlayToParty and assigns it to the PlayToParty field.
func (o *AnnouncementInformation) SetPlayToParty(v PlayToParty) {
	o.PlayToParty = &v
}

// GetAnnouncementPrivacyIndicator returns the AnnouncementPrivacyIndicator field value if set, zero value otherwise.
func (o *AnnouncementInformation) GetAnnouncementPrivacyIndicator() AnnouncementPrivacyIndicator {
	if o == nil || isNil(o.AnnouncementPrivacyIndicator) {
		var ret AnnouncementPrivacyIndicator
		return ret
	}
	return *o.AnnouncementPrivacyIndicator
}

// GetAnnouncementPrivacyIndicatorOk returns a tuple with the AnnouncementPrivacyIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementInformation) GetAnnouncementPrivacyIndicatorOk() (*AnnouncementPrivacyIndicator, bool) {
	if o == nil || isNil(o.AnnouncementPrivacyIndicator) {
		return nil, false
	}
	return o.AnnouncementPrivacyIndicator, true
}

// HasAnnouncementPrivacyIndicator returns a boolean if a field has been set.
func (o *AnnouncementInformation) HasAnnouncementPrivacyIndicator() bool {
	if o != nil && !isNil(o.AnnouncementPrivacyIndicator) {
		return true
	}

	return false
}

// SetAnnouncementPrivacyIndicator gets a reference to the given AnnouncementPrivacyIndicator and assigns it to the AnnouncementPrivacyIndicator field.
func (o *AnnouncementInformation) SetAnnouncementPrivacyIndicator(v AnnouncementPrivacyIndicator) {
	o.AnnouncementPrivacyIndicator = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *AnnouncementInformation) GetLanguage() string {
	if o == nil || isNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementInformation) GetLanguageOk() (*string, bool) {
	if o == nil || isNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *AnnouncementInformation) HasLanguage() bool {
	if o != nil && !isNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *AnnouncementInformation) SetLanguage(v string) {
	o.Language = &v
}

func (o AnnouncementInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnouncementInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AnnouncementIdentifier) {
		toSerialize["announcementIdentifier"] = o.AnnouncementIdentifier
	}
	if !isNil(o.AnnouncementReference) {
		toSerialize["announcementReference"] = o.AnnouncementReference
	}
	if !isNil(o.VariableParts) {
		toSerialize["variableParts"] = o.VariableParts
	}
	if !isNil(o.TimeToPlay) {
		toSerialize["timeToPlay"] = o.TimeToPlay
	}
	if !isNil(o.QuotaConsumptionIndicator) {
		toSerialize["quotaConsumptionIndicator"] = o.QuotaConsumptionIndicator
	}
	if !isNil(o.AnnouncementPriority) {
		toSerialize["announcementPriority"] = o.AnnouncementPriority
	}
	if !isNil(o.PlayToParty) {
		toSerialize["playToParty"] = o.PlayToParty
	}
	if !isNil(o.AnnouncementPrivacyIndicator) {
		toSerialize["announcementPrivacyIndicator"] = o.AnnouncementPrivacyIndicator
	}
	if !isNil(o.Language) {
		toSerialize["Language"] = o.Language
	}
	return toSerialize, nil
}

type NullableAnnouncementInformation struct {
	value *AnnouncementInformation
	isSet bool
}

func (v NullableAnnouncementInformation) Get() *AnnouncementInformation {
	return v.value
}

func (v *NullableAnnouncementInformation) Set(val *AnnouncementInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncementInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncementInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncementInformation(val *AnnouncementInformation) *NullableAnnouncementInformation {
	return &NullableAnnouncementInformation{value: val, isSet: true}
}

func (v NullableAnnouncementInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncementInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


