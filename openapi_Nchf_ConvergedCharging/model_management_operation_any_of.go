/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// ManagementOperationAnyOf the model 'ManagementOperationAnyOf'
type ManagementOperationAnyOf string

// List of ManagementOperation_anyOf
const (
	CREATE_MOI ManagementOperationAnyOf = "CreateMOI"
	MODIFY_MOI_ATTRIBUTES ManagementOperationAnyOf = "ModifyMOIAttributes"
	DELETE_MOI ManagementOperationAnyOf = "DeleteMOI"
	CREATE_MOI ManagementOperationAnyOf = "CREATE_MOI"
	MODIFY_MOI_ATTR ManagementOperationAnyOf = "MODIFY_MOI_ATTR"
	DELETE_MOI ManagementOperationAnyOf = "DELETE_MOI"
)

// All allowed values of ManagementOperationAnyOf enum
var AllowedManagementOperationAnyOfEnumValues = []ManagementOperationAnyOf{
	"CreateMOI",
	"ModifyMOIAttributes",
	"DeleteMOI",
	"CREATE_MOI",
	"MODIFY_MOI_ATTR",
	"DELETE_MOI",
}

func (v *ManagementOperationAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagementOperationAnyOf(value)
	for _, existing := range AllowedManagementOperationAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagementOperationAnyOf", value)
}

// NewManagementOperationAnyOfFromValue returns a pointer to a valid ManagementOperationAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagementOperationAnyOfFromValue(v string) (*ManagementOperationAnyOf, error) {
	ev := ManagementOperationAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagementOperationAnyOf: valid values are %v", v, AllowedManagementOperationAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagementOperationAnyOf) IsValid() bool {
	for _, existing := range AllowedManagementOperationAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ManagementOperation_anyOf value
func (v ManagementOperationAnyOf) Ptr() *ManagementOperationAnyOf {
	return &v
}

type NullableManagementOperationAnyOf struct {
	value *ManagementOperationAnyOf
	isSet bool
}

func (v NullableManagementOperationAnyOf) Get() *ManagementOperationAnyOf {
	return v.value
}

func (v *NullableManagementOperationAnyOf) Set(val *ManagementOperationAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementOperationAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementOperationAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementOperationAnyOf(val *ManagementOperationAnyOf) *NullableManagementOperationAnyOf {
	return &NullableManagementOperationAnyOf{value: val, isSet: true}
}

func (v NullableManagementOperationAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementOperationAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

