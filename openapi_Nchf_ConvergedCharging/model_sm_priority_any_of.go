/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// SMPriorityAnyOf the model 'SMPriorityAnyOf'
type SMPriorityAnyOf string

// List of SMPriority_anyOf
const (
	LOW SMPriorityAnyOf = "LOW"
	NORMAL SMPriorityAnyOf = "NORMAL"
	HIGH SMPriorityAnyOf = "HIGH"
)

// All allowed values of SMPriorityAnyOf enum
var AllowedSMPriorityAnyOfEnumValues = []SMPriorityAnyOf{
	"LOW",
	"NORMAL",
	"HIGH",
}

func (v *SMPriorityAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SMPriorityAnyOf(value)
	for _, existing := range AllowedSMPriorityAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SMPriorityAnyOf", value)
}

// NewSMPriorityAnyOfFromValue returns a pointer to a valid SMPriorityAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSMPriorityAnyOfFromValue(v string) (*SMPriorityAnyOf, error) {
	ev := SMPriorityAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SMPriorityAnyOf: valid values are %v", v, AllowedSMPriorityAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SMPriorityAnyOf) IsValid() bool {
	for _, existing := range AllowedSMPriorityAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SMPriority_anyOf value
func (v SMPriorityAnyOf) Ptr() *SMPriorityAnyOf {
	return &v
}

type NullableSMPriorityAnyOf struct {
	value *SMPriorityAnyOf
	isSet bool
}

func (v NullableSMPriorityAnyOf) Get() *SMPriorityAnyOf {
	return v.value
}

func (v *NullableSMPriorityAnyOf) Set(val *SMPriorityAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSMPriorityAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSMPriorityAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMPriorityAnyOf(val *SMPriorityAnyOf) *NullableSMPriorityAnyOf {
	return &NullableSMPriorityAnyOf{value: val, isSet: true}
}

func (v NullableSMPriorityAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMPriorityAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

