/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// RoleOfUEAnyOf the model 'RoleOfUEAnyOf'
type RoleOfUEAnyOf string

// List of RoleOfUE_anyOf
const (
	ANNOUNCING_UE RoleOfUEAnyOf = "ANNOUNCING_UE"
	MONITORING_UE RoleOfUEAnyOf = "MONITORING_UE"
	REQUESTOR_UE RoleOfUEAnyOf = "REQUESTOR_UE"
	REQUESTED_UE RoleOfUEAnyOf = "REQUESTED_UE"
)

// All allowed values of RoleOfUEAnyOf enum
var AllowedRoleOfUEAnyOfEnumValues = []RoleOfUEAnyOf{
	"ANNOUNCING_UE",
	"MONITORING_UE",
	"REQUESTOR_UE",
	"REQUESTED_UE",
}

func (v *RoleOfUEAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleOfUEAnyOf(value)
	for _, existing := range AllowedRoleOfUEAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleOfUEAnyOf", value)
}

// NewRoleOfUEAnyOfFromValue returns a pointer to a valid RoleOfUEAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleOfUEAnyOfFromValue(v string) (*RoleOfUEAnyOf, error) {
	ev := RoleOfUEAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleOfUEAnyOf: valid values are %v", v, AllowedRoleOfUEAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleOfUEAnyOf) IsValid() bool {
	for _, existing := range AllowedRoleOfUEAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleOfUE_anyOf value
func (v RoleOfUEAnyOf) Ptr() *RoleOfUEAnyOf {
	return &v
}

type NullableRoleOfUEAnyOf struct {
	value *RoleOfUEAnyOf
	isSet bool
}

func (v NullableRoleOfUEAnyOf) Get() *RoleOfUEAnyOf {
	return v.value
}

func (v *NullableRoleOfUEAnyOf) Set(val *RoleOfUEAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleOfUEAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleOfUEAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleOfUEAnyOf(val *RoleOfUEAnyOf) *NullableRoleOfUEAnyOf {
	return &NullableRoleOfUEAnyOf{value: val, isSet: true}
}

func (v NullableRoleOfUEAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleOfUEAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

