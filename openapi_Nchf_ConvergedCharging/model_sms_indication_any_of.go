/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// SmsIndicationAnyOf the model 'SmsIndicationAnyOf'
type SmsIndicationAnyOf string

// List of SmsIndication_anyOf
const (
	SUPPORTED SmsIndicationAnyOf = "SMS_SUPPORTED"
	NOT_SUPPORTED SmsIndicationAnyOf = "SMS_NOT_SUPPORTED"
)

// All allowed values of SmsIndicationAnyOf enum
var AllowedSmsIndicationAnyOfEnumValues = []SmsIndicationAnyOf{
	"SMS_SUPPORTED",
	"SMS_NOT_SUPPORTED",
}

func (v *SmsIndicationAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmsIndicationAnyOf(value)
	for _, existing := range AllowedSmsIndicationAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmsIndicationAnyOf", value)
}

// NewSmsIndicationAnyOfFromValue returns a pointer to a valid SmsIndicationAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmsIndicationAnyOfFromValue(v string) (*SmsIndicationAnyOf, error) {
	ev := SmsIndicationAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmsIndicationAnyOf: valid values are %v", v, AllowedSmsIndicationAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmsIndicationAnyOf) IsValid() bool {
	for _, existing := range AllowedSmsIndicationAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmsIndication_anyOf value
func (v SmsIndicationAnyOf) Ptr() *SmsIndicationAnyOf {
	return &v
}

type NullableSmsIndicationAnyOf struct {
	value *SmsIndicationAnyOf
	isSet bool
}

func (v NullableSmsIndicationAnyOf) Get() *SmsIndicationAnyOf {
	return v.value
}

func (v *NullableSmsIndicationAnyOf) Set(val *SmsIndicationAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsIndicationAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsIndicationAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsIndicationAnyOf(val *SmsIndicationAnyOf) *NullableSmsIndicationAnyOf {
	return &NullableSmsIndicationAnyOf{value: val, isSet: true}
}

func (v NullableSmsIndicationAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsIndicationAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

