/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// ChargingdataPost400Response1 - struct for ChargingdataPost400Response1
type ChargingdataPost400Response1 struct {
	ChargingNotifyResponse *ChargingNotifyResponse
	ProblemDetails *ProblemDetails
}

// ChargingNotifyResponseAsChargingdataPost400Response1 is a convenience function that returns ChargingNotifyResponse wrapped in ChargingdataPost400Response1
func ChargingNotifyResponseAsChargingdataPost400Response1(v *ChargingNotifyResponse) ChargingdataPost400Response1 {
	return ChargingdataPost400Response1{
		ChargingNotifyResponse: v,
	}
}

// ProblemDetailsAsChargingdataPost400Response1 is a convenience function that returns ProblemDetails wrapped in ChargingdataPost400Response1
func ProblemDetailsAsChargingdataPost400Response1(v *ProblemDetails) ChargingdataPost400Response1 {
	return ChargingdataPost400Response1{
		ProblemDetails: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChargingdataPost400Response1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChargingNotifyResponse
	err = newStrictDecoder(data).Decode(&dst.ChargingNotifyResponse)
	if err == nil {
		jsonChargingNotifyResponse, _ := json.Marshal(dst.ChargingNotifyResponse)
		if string(jsonChargingNotifyResponse) == "{}" { // empty struct
			dst.ChargingNotifyResponse = nil
		} else {
			match++
		}
	} else {
		dst.ChargingNotifyResponse = nil
	}

	// try to unmarshal data into ProblemDetails
	err = newStrictDecoder(data).Decode(&dst.ProblemDetails)
	if err == nil {
		jsonProblemDetails, _ := json.Marshal(dst.ProblemDetails)
		if string(jsonProblemDetails) == "{}" { // empty struct
			dst.ProblemDetails = nil
		} else {
			match++
		}
	} else {
		dst.ProblemDetails = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChargingNotifyResponse = nil
		dst.ProblemDetails = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ChargingdataPost400Response1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ChargingdataPost400Response1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChargingdataPost400Response1) MarshalJSON() ([]byte, error) {
	if src.ChargingNotifyResponse != nil {
		return json.Marshal(&src.ChargingNotifyResponse)
	}

	if src.ProblemDetails != nil {
		return json.Marshal(&src.ProblemDetails)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChargingdataPost400Response1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ChargingNotifyResponse != nil {
		return obj.ChargingNotifyResponse
	}

	if obj.ProblemDetails != nil {
		return obj.ProblemDetails
	}

	// all schemas are nil
	return nil
}

type NullableChargingdataPost400Response1 struct {
	value *ChargingdataPost400Response1
	isSet bool
}

func (v NullableChargingdataPost400Response1) Get() *ChargingdataPost400Response1 {
	return v.value
}

func (v *NullableChargingdataPost400Response1) Set(val *ChargingdataPost400Response1) {
	v.value = val
	v.isSet = true
}

func (v NullableChargingdataPost400Response1) IsSet() bool {
	return v.isSet
}

func (v *NullableChargingdataPost400Response1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargingdataPost400Response1(val *ChargingdataPost400Response1) *NullableChargingdataPost400Response1 {
	return &NullableChargingdataPost400Response1{value: val, isSet: true}
}

func (v NullableChargingdataPost400Response1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargingdataPost400Response1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


