/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// PlayToPartyAnyOf the model 'PlayToPartyAnyOf'
type PlayToPartyAnyOf string

// List of PlayToParty_anyOf
const (
	SERVED PlayToPartyAnyOf = "SERVED"
	REMOTE PlayToPartyAnyOf = "REMOTE"
)

// All allowed values of PlayToPartyAnyOf enum
var AllowedPlayToPartyAnyOfEnumValues = []PlayToPartyAnyOf{
	"SERVED",
	"REMOTE",
}

func (v *PlayToPartyAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlayToPartyAnyOf(value)
	for _, existing := range AllowedPlayToPartyAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlayToPartyAnyOf", value)
}

// NewPlayToPartyAnyOfFromValue returns a pointer to a valid PlayToPartyAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlayToPartyAnyOfFromValue(v string) (*PlayToPartyAnyOf, error) {
	ev := PlayToPartyAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlayToPartyAnyOf: valid values are %v", v, AllowedPlayToPartyAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlayToPartyAnyOf) IsValid() bool {
	for _, existing := range AllowedPlayToPartyAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlayToParty_anyOf value
func (v PlayToPartyAnyOf) Ptr() *PlayToPartyAnyOf {
	return &v
}

type NullablePlayToPartyAnyOf struct {
	value *PlayToPartyAnyOf
	isSet bool
}

func (v NullablePlayToPartyAnyOf) Get() *PlayToPartyAnyOf {
	return v.value
}

func (v *NullablePlayToPartyAnyOf) Set(val *PlayToPartyAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayToPartyAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayToPartyAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayToPartyAnyOf(val *PlayToPartyAnyOf) *NullablePlayToPartyAnyOf {
	return &NullablePlayToPartyAnyOf{value: val, isSet: true}
}

func (v NullablePlayToPartyAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayToPartyAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

