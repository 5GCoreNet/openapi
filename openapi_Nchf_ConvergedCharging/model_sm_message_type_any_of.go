/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// SMMessageTypeAnyOf the model 'SMMessageTypeAnyOf'
type SMMessageTypeAnyOf string

// List of SMMessageType_anyOf
const (
	SUBMISSION SMMessageTypeAnyOf = "SUBMISSION"
	DELIVERY_REPORT SMMessageTypeAnyOf = "DELIVERY_REPORT"
	SM_SERVICE_REQUEST SMMessageTypeAnyOf = "SM_SERVICE_REQUEST"
	DELIVERY SMMessageTypeAnyOf = "DELIVERY"
)

// All allowed values of SMMessageTypeAnyOf enum
var AllowedSMMessageTypeAnyOfEnumValues = []SMMessageTypeAnyOf{
	"SUBMISSION",
	"DELIVERY_REPORT",
	"SM_SERVICE_REQUEST",
	"DELIVERY",
}

func (v *SMMessageTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SMMessageTypeAnyOf(value)
	for _, existing := range AllowedSMMessageTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SMMessageTypeAnyOf", value)
}

// NewSMMessageTypeAnyOfFromValue returns a pointer to a valid SMMessageTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSMMessageTypeAnyOfFromValue(v string) (*SMMessageTypeAnyOf, error) {
	ev := SMMessageTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SMMessageTypeAnyOf: valid values are %v", v, AllowedSMMessageTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SMMessageTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedSMMessageTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SMMessageType_anyOf value
func (v SMMessageTypeAnyOf) Ptr() *SMMessageTypeAnyOf {
	return &v
}

type NullableSMMessageTypeAnyOf struct {
	value *SMMessageTypeAnyOf
	isSet bool
}

func (v NullableSMMessageTypeAnyOf) Get() *SMMessageTypeAnyOf {
	return v.value
}

func (v *NullableSMMessageTypeAnyOf) Set(val *SMMessageTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSMMessageTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSMMessageTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMMessageTypeAnyOf(val *SMMessageTypeAnyOf) *NullableSMMessageTypeAnyOf {
	return &NullableSMMessageTypeAnyOf{value: val, isSet: true}
}

func (v NullableSMMessageTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMMessageTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

