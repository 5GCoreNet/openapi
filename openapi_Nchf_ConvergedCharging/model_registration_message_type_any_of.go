/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// RegistrationMessageTypeAnyOf the model 'RegistrationMessageTypeAnyOf'
type RegistrationMessageTypeAnyOf string

// List of RegistrationMessageType_anyOf
const (
	INITIAL RegistrationMessageTypeAnyOf = "INITIAL"
	MOBILITY RegistrationMessageTypeAnyOf = "MOBILITY"
	PERIODIC RegistrationMessageTypeAnyOf = "PERIODIC"
	EMERGENCY RegistrationMessageTypeAnyOf = "EMERGENCY"
	DEREGISTRATION RegistrationMessageTypeAnyOf = "DEREGISTRATION"
)

// All allowed values of RegistrationMessageTypeAnyOf enum
var AllowedRegistrationMessageTypeAnyOfEnumValues = []RegistrationMessageTypeAnyOf{
	"INITIAL",
	"MOBILITY",
	"PERIODIC",
	"EMERGENCY",
	"DEREGISTRATION",
}

func (v *RegistrationMessageTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegistrationMessageTypeAnyOf(value)
	for _, existing := range AllowedRegistrationMessageTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegistrationMessageTypeAnyOf", value)
}

// NewRegistrationMessageTypeAnyOfFromValue returns a pointer to a valid RegistrationMessageTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegistrationMessageTypeAnyOfFromValue(v string) (*RegistrationMessageTypeAnyOf, error) {
	ev := RegistrationMessageTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegistrationMessageTypeAnyOf: valid values are %v", v, AllowedRegistrationMessageTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegistrationMessageTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedRegistrationMessageTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegistrationMessageType_anyOf value
func (v RegistrationMessageTypeAnyOf) Ptr() *RegistrationMessageTypeAnyOf {
	return &v
}

type NullableRegistrationMessageTypeAnyOf struct {
	value *RegistrationMessageTypeAnyOf
	isSet bool
}

func (v NullableRegistrationMessageTypeAnyOf) Get() *RegistrationMessageTypeAnyOf {
	return v.value
}

func (v *NullableRegistrationMessageTypeAnyOf) Set(val *RegistrationMessageTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrationMessageTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrationMessageTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrationMessageTypeAnyOf(val *RegistrationMessageTypeAnyOf) *NullableRegistrationMessageTypeAnyOf {
	return &NullableRegistrationMessageTypeAnyOf{value: val, isSet: true}
}

func (v NullableRegistrationMessageTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrationMessageTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

