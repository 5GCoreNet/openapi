/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// RoleOfIMSNodeAnyOf the model 'RoleOfIMSNodeAnyOf'
type RoleOfIMSNodeAnyOf string

// List of RoleOfIMSNode_anyOf
const (
	ORIGINATING RoleOfIMSNodeAnyOf = "ORIGINATING"
	TERMINATING RoleOfIMSNodeAnyOf = "TERMINATING"
	FORWARDING RoleOfIMSNodeAnyOf = "FORWARDING"
)

// All allowed values of RoleOfIMSNodeAnyOf enum
var AllowedRoleOfIMSNodeAnyOfEnumValues = []RoleOfIMSNodeAnyOf{
	"ORIGINATING",
	"TERMINATING",
	"FORWARDING",
}

func (v *RoleOfIMSNodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleOfIMSNodeAnyOf(value)
	for _, existing := range AllowedRoleOfIMSNodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleOfIMSNodeAnyOf", value)
}

// NewRoleOfIMSNodeAnyOfFromValue returns a pointer to a valid RoleOfIMSNodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleOfIMSNodeAnyOfFromValue(v string) (*RoleOfIMSNodeAnyOf, error) {
	ev := RoleOfIMSNodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleOfIMSNodeAnyOf: valid values are %v", v, AllowedRoleOfIMSNodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleOfIMSNodeAnyOf) IsValid() bool {
	for _, existing := range AllowedRoleOfIMSNodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleOfIMSNode_anyOf value
func (v RoleOfIMSNodeAnyOf) Ptr() *RoleOfIMSNodeAnyOf {
	return &v
}

type NullableRoleOfIMSNodeAnyOf struct {
	value *RoleOfIMSNodeAnyOf
	isSet bool
}

func (v NullableRoleOfIMSNodeAnyOf) Get() *RoleOfIMSNodeAnyOf {
	return v.value
}

func (v *NullableRoleOfIMSNodeAnyOf) Set(val *RoleOfIMSNodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleOfIMSNodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleOfIMSNodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleOfIMSNodeAnyOf(val *RoleOfIMSNodeAnyOf) *NullableRoleOfIMSNodeAnyOf {
	return &NullableRoleOfIMSNodeAnyOf{value: val, isSet: true}
}

func (v NullableRoleOfIMSNodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleOfIMSNodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

