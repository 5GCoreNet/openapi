/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
)

// checks if the ChargingNotifyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargingNotifyRequest{}

// ChargingNotifyRequest struct for ChargingNotifyRequest
type ChargingNotifyRequest struct {
	NotificationType NotificationType `json:"notificationType"`
	ReauthorizationDetails []ReauthorizationDetails `json:"reauthorizationDetails,omitempty"`
}

// NewChargingNotifyRequest instantiates a new ChargingNotifyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargingNotifyRequest(notificationType NotificationType) *ChargingNotifyRequest {
	this := ChargingNotifyRequest{}
	this.NotificationType = notificationType
	return &this
}

// NewChargingNotifyRequestWithDefaults instantiates a new ChargingNotifyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargingNotifyRequestWithDefaults() *ChargingNotifyRequest {
	this := ChargingNotifyRequest{}
	return &this
}

// GetNotificationType returns the NotificationType field value
func (o *ChargingNotifyRequest) GetNotificationType() NotificationType {
	if o == nil {
		var ret NotificationType
		return ret
	}

	return o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value
// and a boolean to check if the value has been set.
func (o *ChargingNotifyRequest) GetNotificationTypeOk() (*NotificationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationType, true
}

// SetNotificationType sets field value
func (o *ChargingNotifyRequest) SetNotificationType(v NotificationType) {
	o.NotificationType = v
}

// GetReauthorizationDetails returns the ReauthorizationDetails field value if set, zero value otherwise.
func (o *ChargingNotifyRequest) GetReauthorizationDetails() []ReauthorizationDetails {
	if o == nil || IsNil(o.ReauthorizationDetails) {
		var ret []ReauthorizationDetails
		return ret
	}
	return o.ReauthorizationDetails
}

// GetReauthorizationDetailsOk returns a tuple with the ReauthorizationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargingNotifyRequest) GetReauthorizationDetailsOk() ([]ReauthorizationDetails, bool) {
	if o == nil || IsNil(o.ReauthorizationDetails) {
		return nil, false
	}
	return o.ReauthorizationDetails, true
}

// HasReauthorizationDetails returns a boolean if a field has been set.
func (o *ChargingNotifyRequest) HasReauthorizationDetails() bool {
	if o != nil && !IsNil(o.ReauthorizationDetails) {
		return true
	}

	return false
}

// SetReauthorizationDetails gets a reference to the given []ReauthorizationDetails and assigns it to the ReauthorizationDetails field.
func (o *ChargingNotifyRequest) SetReauthorizationDetails(v []ReauthorizationDetails) {
	o.ReauthorizationDetails = v
}

func (o ChargingNotifyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargingNotifyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notificationType"] = o.NotificationType
	if !IsNil(o.ReauthorizationDetails) {
		toSerialize["reauthorizationDetails"] = o.ReauthorizationDetails
	}
	return toSerialize, nil
}

type NullableChargingNotifyRequest struct {
	value *ChargingNotifyRequest
	isSet bool
}

func (v NullableChargingNotifyRequest) Get() *ChargingNotifyRequest {
	return v.value
}

func (v *NullableChargingNotifyRequest) Set(val *ChargingNotifyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChargingNotifyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChargingNotifyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargingNotifyRequest(val *ChargingNotifyRequest) *NullableChargingNotifyRequest {
	return &NullableChargingNotifyRequest{value: val, isSet: true}
}

func (v NullableChargingNotifyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargingNotifyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


