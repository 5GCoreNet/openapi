/*
Nchf_ConvergedCharging

ConvergedCharging Service    © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"time"
)

// checks if the PFIContainerInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PFIContainerInformation{}

// PFIContainerInformation struct for PFIContainerInformation
type PFIContainerInformation struct {
	PFI *string `json:"pFI,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	ReportTime *time.Time `json:"reportTime,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	TimeofFirstUsage *time.Time `json:"timeofFirstUsage,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	TimeofLastUsage *time.Time `json:"timeofLastUsage,omitempty"`
	QoSInformation NullableQosData `json:"qoSInformation,omitempty"`
	QoSCharacteristics *QosCharacteristics `json:"qoSCharacteristics,omitempty"`
	UserLocationInformation *UserLocation `json:"userLocationInformation,omitempty"`
	// String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time. 
	UetimeZone *string `json:"uetimeZone,omitempty"`
	PresenceReportingAreaInformation *map[string]PresenceInfo `json:"presenceReportingAreaInformation,omitempty"`
}

// NewPFIContainerInformation instantiates a new PFIContainerInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPFIContainerInformation() *PFIContainerInformation {
	this := PFIContainerInformation{}
	return &this
}

// NewPFIContainerInformationWithDefaults instantiates a new PFIContainerInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPFIContainerInformationWithDefaults() *PFIContainerInformation {
	this := PFIContainerInformation{}
	return &this
}

// GetPFI returns the PFI field value if set, zero value otherwise.
func (o *PFIContainerInformation) GetPFI() string {
	if o == nil || IsNil(o.PFI) {
		var ret string
		return ret
	}
	return *o.PFI
}

// GetPFIOk returns a tuple with the PFI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PFIContainerInformation) GetPFIOk() (*string, bool) {
	if o == nil || IsNil(o.PFI) {
		return nil, false
	}
	return o.PFI, true
}

// HasPFI returns a boolean if a field has been set.
func (o *PFIContainerInformation) HasPFI() bool {
	if o != nil && !IsNil(o.PFI) {
		return true
	}

	return false
}

// SetPFI gets a reference to the given string and assigns it to the PFI field.
func (o *PFIContainerInformation) SetPFI(v string) {
	o.PFI = &v
}

// GetReportTime returns the ReportTime field value if set, zero value otherwise.
func (o *PFIContainerInformation) GetReportTime() time.Time {
	if o == nil || IsNil(o.ReportTime) {
		var ret time.Time
		return ret
	}
	return *o.ReportTime
}

// GetReportTimeOk returns a tuple with the ReportTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PFIContainerInformation) GetReportTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReportTime) {
		return nil, false
	}
	return o.ReportTime, true
}

// HasReportTime returns a boolean if a field has been set.
func (o *PFIContainerInformation) HasReportTime() bool {
	if o != nil && !IsNil(o.ReportTime) {
		return true
	}

	return false
}

// SetReportTime gets a reference to the given time.Time and assigns it to the ReportTime field.
func (o *PFIContainerInformation) SetReportTime(v time.Time) {
	o.ReportTime = &v
}

// GetTimeofFirstUsage returns the TimeofFirstUsage field value if set, zero value otherwise.
func (o *PFIContainerInformation) GetTimeofFirstUsage() time.Time {
	if o == nil || IsNil(o.TimeofFirstUsage) {
		var ret time.Time
		return ret
	}
	return *o.TimeofFirstUsage
}

// GetTimeofFirstUsageOk returns a tuple with the TimeofFirstUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PFIContainerInformation) GetTimeofFirstUsageOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeofFirstUsage) {
		return nil, false
	}
	return o.TimeofFirstUsage, true
}

// HasTimeofFirstUsage returns a boolean if a field has been set.
func (o *PFIContainerInformation) HasTimeofFirstUsage() bool {
	if o != nil && !IsNil(o.TimeofFirstUsage) {
		return true
	}

	return false
}

// SetTimeofFirstUsage gets a reference to the given time.Time and assigns it to the TimeofFirstUsage field.
func (o *PFIContainerInformation) SetTimeofFirstUsage(v time.Time) {
	o.TimeofFirstUsage = &v
}

// GetTimeofLastUsage returns the TimeofLastUsage field value if set, zero value otherwise.
func (o *PFIContainerInformation) GetTimeofLastUsage() time.Time {
	if o == nil || IsNil(o.TimeofLastUsage) {
		var ret time.Time
		return ret
	}
	return *o.TimeofLastUsage
}

// GetTimeofLastUsageOk returns a tuple with the TimeofLastUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PFIContainerInformation) GetTimeofLastUsageOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeofLastUsage) {
		return nil, false
	}
	return o.TimeofLastUsage, true
}

// HasTimeofLastUsage returns a boolean if a field has been set.
func (o *PFIContainerInformation) HasTimeofLastUsage() bool {
	if o != nil && !IsNil(o.TimeofLastUsage) {
		return true
	}

	return false
}

// SetTimeofLastUsage gets a reference to the given time.Time and assigns it to the TimeofLastUsage field.
func (o *PFIContainerInformation) SetTimeofLastUsage(v time.Time) {
	o.TimeofLastUsage = &v
}

// GetQoSInformation returns the QoSInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PFIContainerInformation) GetQoSInformation() QosData {
	if o == nil || IsNil(o.QoSInformation.Get()) {
		var ret QosData
		return ret
	}
	return *o.QoSInformation.Get()
}

// GetQoSInformationOk returns a tuple with the QoSInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PFIContainerInformation) GetQoSInformationOk() (*QosData, bool) {
	if o == nil {
		return nil, false
	}
	return o.QoSInformation.Get(), o.QoSInformation.IsSet()
}

// HasQoSInformation returns a boolean if a field has been set.
func (o *PFIContainerInformation) HasQoSInformation() bool {
	if o != nil && o.QoSInformation.IsSet() {
		return true
	}

	return false
}

// SetQoSInformation gets a reference to the given NullableQosData and assigns it to the QoSInformation field.
func (o *PFIContainerInformation) SetQoSInformation(v QosData) {
	o.QoSInformation.Set(&v)
}
// SetQoSInformationNil sets the value for QoSInformation to be an explicit nil
func (o *PFIContainerInformation) SetQoSInformationNil() {
	o.QoSInformation.Set(nil)
}

// UnsetQoSInformation ensures that no value is present for QoSInformation, not even an explicit nil
func (o *PFIContainerInformation) UnsetQoSInformation() {
	o.QoSInformation.Unset()
}

// GetQoSCharacteristics returns the QoSCharacteristics field value if set, zero value otherwise.
func (o *PFIContainerInformation) GetQoSCharacteristics() QosCharacteristics {
	if o == nil || IsNil(o.QoSCharacteristics) {
		var ret QosCharacteristics
		return ret
	}
	return *o.QoSCharacteristics
}

// GetQoSCharacteristicsOk returns a tuple with the QoSCharacteristics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PFIContainerInformation) GetQoSCharacteristicsOk() (*QosCharacteristics, bool) {
	if o == nil || IsNil(o.QoSCharacteristics) {
		return nil, false
	}
	return o.QoSCharacteristics, true
}

// HasQoSCharacteristics returns a boolean if a field has been set.
func (o *PFIContainerInformation) HasQoSCharacteristics() bool {
	if o != nil && !IsNil(o.QoSCharacteristics) {
		return true
	}

	return false
}

// SetQoSCharacteristics gets a reference to the given QosCharacteristics and assigns it to the QoSCharacteristics field.
func (o *PFIContainerInformation) SetQoSCharacteristics(v QosCharacteristics) {
	o.QoSCharacteristics = &v
}

// GetUserLocationInformation returns the UserLocationInformation field value if set, zero value otherwise.
func (o *PFIContainerInformation) GetUserLocationInformation() UserLocation {
	if o == nil || IsNil(o.UserLocationInformation) {
		var ret UserLocation
		return ret
	}
	return *o.UserLocationInformation
}

// GetUserLocationInformationOk returns a tuple with the UserLocationInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PFIContainerInformation) GetUserLocationInformationOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.UserLocationInformation) {
		return nil, false
	}
	return o.UserLocationInformation, true
}

// HasUserLocationInformation returns a boolean if a field has been set.
func (o *PFIContainerInformation) HasUserLocationInformation() bool {
	if o != nil && !IsNil(o.UserLocationInformation) {
		return true
	}

	return false
}

// SetUserLocationInformation gets a reference to the given UserLocation and assigns it to the UserLocationInformation field.
func (o *PFIContainerInformation) SetUserLocationInformation(v UserLocation) {
	o.UserLocationInformation = &v
}

// GetUetimeZone returns the UetimeZone field value if set, zero value otherwise.
func (o *PFIContainerInformation) GetUetimeZone() string {
	if o == nil || IsNil(o.UetimeZone) {
		var ret string
		return ret
	}
	return *o.UetimeZone
}

// GetUetimeZoneOk returns a tuple with the UetimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PFIContainerInformation) GetUetimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.UetimeZone) {
		return nil, false
	}
	return o.UetimeZone, true
}

// HasUetimeZone returns a boolean if a field has been set.
func (o *PFIContainerInformation) HasUetimeZone() bool {
	if o != nil && !IsNil(o.UetimeZone) {
		return true
	}

	return false
}

// SetUetimeZone gets a reference to the given string and assigns it to the UetimeZone field.
func (o *PFIContainerInformation) SetUetimeZone(v string) {
	o.UetimeZone = &v
}

// GetPresenceReportingAreaInformation returns the PresenceReportingAreaInformation field value if set, zero value otherwise.
func (o *PFIContainerInformation) GetPresenceReportingAreaInformation() map[string]PresenceInfo {
	if o == nil || IsNil(o.PresenceReportingAreaInformation) {
		var ret map[string]PresenceInfo
		return ret
	}
	return *o.PresenceReportingAreaInformation
}

// GetPresenceReportingAreaInformationOk returns a tuple with the PresenceReportingAreaInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PFIContainerInformation) GetPresenceReportingAreaInformationOk() (*map[string]PresenceInfo, bool) {
	if o == nil || IsNil(o.PresenceReportingAreaInformation) {
		return nil, false
	}
	return o.PresenceReportingAreaInformation, true
}

// HasPresenceReportingAreaInformation returns a boolean if a field has been set.
func (o *PFIContainerInformation) HasPresenceReportingAreaInformation() bool {
	if o != nil && !IsNil(o.PresenceReportingAreaInformation) {
		return true
	}

	return false
}

// SetPresenceReportingAreaInformation gets a reference to the given map[string]PresenceInfo and assigns it to the PresenceReportingAreaInformation field.
func (o *PFIContainerInformation) SetPresenceReportingAreaInformation(v map[string]PresenceInfo) {
	o.PresenceReportingAreaInformation = &v
}

func (o PFIContainerInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PFIContainerInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PFI) {
		toSerialize["pFI"] = o.PFI
	}
	if !IsNil(o.ReportTime) {
		toSerialize["reportTime"] = o.ReportTime
	}
	if !IsNil(o.TimeofFirstUsage) {
		toSerialize["timeofFirstUsage"] = o.TimeofFirstUsage
	}
	if !IsNil(o.TimeofLastUsage) {
		toSerialize["timeofLastUsage"] = o.TimeofLastUsage
	}
	if o.QoSInformation.IsSet() {
		toSerialize["qoSInformation"] = o.QoSInformation.Get()
	}
	if !IsNil(o.QoSCharacteristics) {
		toSerialize["qoSCharacteristics"] = o.QoSCharacteristics
	}
	if !IsNil(o.UserLocationInformation) {
		toSerialize["userLocationInformation"] = o.UserLocationInformation
	}
	if !IsNil(o.UetimeZone) {
		toSerialize["uetimeZone"] = o.UetimeZone
	}
	if !IsNil(o.PresenceReportingAreaInformation) {
		toSerialize["presenceReportingAreaInformation"] = o.PresenceReportingAreaInformation
	}
	return toSerialize, nil
}

type NullablePFIContainerInformation struct {
	value *PFIContainerInformation
	isSet bool
}

func (v NullablePFIContainerInformation) Get() *PFIContainerInformation {
	return v.value
}

func (v *NullablePFIContainerInformation) Set(val *PFIContainerInformation) {
	v.value = val
	v.isSet = true
}

func (v NullablePFIContainerInformation) IsSet() bool {
	return v.isSet
}

func (v *NullablePFIContainerInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePFIContainerInformation(val *PFIContainerInformation) *NullablePFIContainerInformation {
	return &NullablePFIContainerInformation{value: val, isSet: true}
}

func (v NullablePFIContainerInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePFIContainerInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


