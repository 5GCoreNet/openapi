/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
)

// checks if the EASRequirements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EASRequirements{}

// EASRequirements struct for EASRequirements
type EASRequirements struct {
	RequiredEASservingLocation *ServingLocation `json:"requiredEASservingLocation,omitempty"`
	SoftwareImageInfo *SoftwareImageInfo `json:"softwareImageInfo,omitempty"`
	AffinityAntiAffinity *AffinityAntiAffinity `json:"affinityAntiAffinity,omitempty"`
	ServiceContinuity *bool `json:"serviceContinuity,omitempty"`
	VirtualResource *VirtualResource `json:"virtualResource,omitempty"`
}

// NewEASRequirements instantiates a new EASRequirements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEASRequirements() *EASRequirements {
	this := EASRequirements{}
	return &this
}

// NewEASRequirementsWithDefaults instantiates a new EASRequirements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEASRequirementsWithDefaults() *EASRequirements {
	this := EASRequirements{}
	return &this
}

// GetRequiredEASservingLocation returns the RequiredEASservingLocation field value if set, zero value otherwise.
func (o *EASRequirements) GetRequiredEASservingLocation() ServingLocation {
	if o == nil || IsNil(o.RequiredEASservingLocation) {
		var ret ServingLocation
		return ret
	}
	return *o.RequiredEASservingLocation
}

// GetRequiredEASservingLocationOk returns a tuple with the RequiredEASservingLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EASRequirements) GetRequiredEASservingLocationOk() (*ServingLocation, bool) {
	if o == nil || IsNil(o.RequiredEASservingLocation) {
		return nil, false
	}
	return o.RequiredEASservingLocation, true
}

// HasRequiredEASservingLocation returns a boolean if a field has been set.
func (o *EASRequirements) HasRequiredEASservingLocation() bool {
	if o != nil && !IsNil(o.RequiredEASservingLocation) {
		return true
	}

	return false
}

// SetRequiredEASservingLocation gets a reference to the given ServingLocation and assigns it to the RequiredEASservingLocation field.
func (o *EASRequirements) SetRequiredEASservingLocation(v ServingLocation) {
	o.RequiredEASservingLocation = &v
}

// GetSoftwareImageInfo returns the SoftwareImageInfo field value if set, zero value otherwise.
func (o *EASRequirements) GetSoftwareImageInfo() SoftwareImageInfo {
	if o == nil || IsNil(o.SoftwareImageInfo) {
		var ret SoftwareImageInfo
		return ret
	}
	return *o.SoftwareImageInfo
}

// GetSoftwareImageInfoOk returns a tuple with the SoftwareImageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EASRequirements) GetSoftwareImageInfoOk() (*SoftwareImageInfo, bool) {
	if o == nil || IsNil(o.SoftwareImageInfo) {
		return nil, false
	}
	return o.SoftwareImageInfo, true
}

// HasSoftwareImageInfo returns a boolean if a field has been set.
func (o *EASRequirements) HasSoftwareImageInfo() bool {
	if o != nil && !IsNil(o.SoftwareImageInfo) {
		return true
	}

	return false
}

// SetSoftwareImageInfo gets a reference to the given SoftwareImageInfo and assigns it to the SoftwareImageInfo field.
func (o *EASRequirements) SetSoftwareImageInfo(v SoftwareImageInfo) {
	o.SoftwareImageInfo = &v
}

// GetAffinityAntiAffinity returns the AffinityAntiAffinity field value if set, zero value otherwise.
func (o *EASRequirements) GetAffinityAntiAffinity() AffinityAntiAffinity {
	if o == nil || IsNil(o.AffinityAntiAffinity) {
		var ret AffinityAntiAffinity
		return ret
	}
	return *o.AffinityAntiAffinity
}

// GetAffinityAntiAffinityOk returns a tuple with the AffinityAntiAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EASRequirements) GetAffinityAntiAffinityOk() (*AffinityAntiAffinity, bool) {
	if o == nil || IsNil(o.AffinityAntiAffinity) {
		return nil, false
	}
	return o.AffinityAntiAffinity, true
}

// HasAffinityAntiAffinity returns a boolean if a field has been set.
func (o *EASRequirements) HasAffinityAntiAffinity() bool {
	if o != nil && !IsNil(o.AffinityAntiAffinity) {
		return true
	}

	return false
}

// SetAffinityAntiAffinity gets a reference to the given AffinityAntiAffinity and assigns it to the AffinityAntiAffinity field.
func (o *EASRequirements) SetAffinityAntiAffinity(v AffinityAntiAffinity) {
	o.AffinityAntiAffinity = &v
}

// GetServiceContinuity returns the ServiceContinuity field value if set, zero value otherwise.
func (o *EASRequirements) GetServiceContinuity() bool {
	if o == nil || IsNil(o.ServiceContinuity) {
		var ret bool
		return ret
	}
	return *o.ServiceContinuity
}

// GetServiceContinuityOk returns a tuple with the ServiceContinuity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EASRequirements) GetServiceContinuityOk() (*bool, bool) {
	if o == nil || IsNil(o.ServiceContinuity) {
		return nil, false
	}
	return o.ServiceContinuity, true
}

// HasServiceContinuity returns a boolean if a field has been set.
func (o *EASRequirements) HasServiceContinuity() bool {
	if o != nil && !IsNil(o.ServiceContinuity) {
		return true
	}

	return false
}

// SetServiceContinuity gets a reference to the given bool and assigns it to the ServiceContinuity field.
func (o *EASRequirements) SetServiceContinuity(v bool) {
	o.ServiceContinuity = &v
}

// GetVirtualResource returns the VirtualResource field value if set, zero value otherwise.
func (o *EASRequirements) GetVirtualResource() VirtualResource {
	if o == nil || IsNil(o.VirtualResource) {
		var ret VirtualResource
		return ret
	}
	return *o.VirtualResource
}

// GetVirtualResourceOk returns a tuple with the VirtualResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EASRequirements) GetVirtualResourceOk() (*VirtualResource, bool) {
	if o == nil || IsNil(o.VirtualResource) {
		return nil, false
	}
	return o.VirtualResource, true
}

// HasVirtualResource returns a boolean if a field has been set.
func (o *EASRequirements) HasVirtualResource() bool {
	if o != nil && !IsNil(o.VirtualResource) {
		return true
	}

	return false
}

// SetVirtualResource gets a reference to the given VirtualResource and assigns it to the VirtualResource field.
func (o *EASRequirements) SetVirtualResource(v VirtualResource) {
	o.VirtualResource = &v
}

func (o EASRequirements) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EASRequirements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequiredEASservingLocation) {
		toSerialize["requiredEASservingLocation"] = o.RequiredEASservingLocation
	}
	if !IsNil(o.SoftwareImageInfo) {
		toSerialize["softwareImageInfo"] = o.SoftwareImageInfo
	}
	if !IsNil(o.AffinityAntiAffinity) {
		toSerialize["affinityAntiAffinity"] = o.AffinityAntiAffinity
	}
	if !IsNil(o.ServiceContinuity) {
		toSerialize["serviceContinuity"] = o.ServiceContinuity
	}
	if !IsNil(o.VirtualResource) {
		toSerialize["virtualResource"] = o.VirtualResource
	}
	return toSerialize, nil
}

type NullableEASRequirements struct {
	value *EASRequirements
	isSet bool
}

func (v NullableEASRequirements) Get() *EASRequirements {
	return v.value
}

func (v *NullableEASRequirements) Set(val *EASRequirements) {
	v.value = val
	v.isSet = true
}

func (v NullableEASRequirements) IsSet() bool {
	return v.isSet
}

func (v *NullableEASRequirements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEASRequirements(val *EASRequirements) *NullableEASRequirements {
	return &NullableEASRequirements{value: val, isSet: true}
}

func (v NullableEASRequirements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEASRequirements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


