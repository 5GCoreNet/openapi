/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
)

// checks if the NFIdentification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NFIdentification{}

// NFIdentification struct for NFIdentification
type NFIdentification struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NFName *string `json:"nFName,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166. 
	NFIPv4Address *string `json:"nFIPv4Address,omitempty"`
	NFIPv6Address *Ipv6Addr `json:"nFIPv6Address,omitempty"`
	NFPLMNID *PlmnId `json:"nFPLMNID,omitempty"`
	NodeFunctionality NodeFunctionality `json:"nodeFunctionality"`
	NFFqdn *string `json:"nFFqdn,omitempty"`
}

// NewNFIdentification instantiates a new NFIdentification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFIdentification(nodeFunctionality NodeFunctionality) *NFIdentification {
	this := NFIdentification{}
	this.NodeFunctionality = nodeFunctionality
	return &this
}

// NewNFIdentificationWithDefaults instantiates a new NFIdentification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFIdentificationWithDefaults() *NFIdentification {
	this := NFIdentification{}
	return &this
}

// GetNFName returns the NFName field value if set, zero value otherwise.
func (o *NFIdentification) GetNFName() string {
	if o == nil || IsNil(o.NFName) {
		var ret string
		return ret
	}
	return *o.NFName
}

// GetNFNameOk returns a tuple with the NFName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFIdentification) GetNFNameOk() (*string, bool) {
	if o == nil || IsNil(o.NFName) {
		return nil, false
	}
	return o.NFName, true
}

// HasNFName returns a boolean if a field has been set.
func (o *NFIdentification) HasNFName() bool {
	if o != nil && !IsNil(o.NFName) {
		return true
	}

	return false
}

// SetNFName gets a reference to the given string and assigns it to the NFName field.
func (o *NFIdentification) SetNFName(v string) {
	o.NFName = &v
}

// GetNFIPv4Address returns the NFIPv4Address field value if set, zero value otherwise.
func (o *NFIdentification) GetNFIPv4Address() string {
	if o == nil || IsNil(o.NFIPv4Address) {
		var ret string
		return ret
	}
	return *o.NFIPv4Address
}

// GetNFIPv4AddressOk returns a tuple with the NFIPv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFIdentification) GetNFIPv4AddressOk() (*string, bool) {
	if o == nil || IsNil(o.NFIPv4Address) {
		return nil, false
	}
	return o.NFIPv4Address, true
}

// HasNFIPv4Address returns a boolean if a field has been set.
func (o *NFIdentification) HasNFIPv4Address() bool {
	if o != nil && !IsNil(o.NFIPv4Address) {
		return true
	}

	return false
}

// SetNFIPv4Address gets a reference to the given string and assigns it to the NFIPv4Address field.
func (o *NFIdentification) SetNFIPv4Address(v string) {
	o.NFIPv4Address = &v
}

// GetNFIPv6Address returns the NFIPv6Address field value if set, zero value otherwise.
func (o *NFIdentification) GetNFIPv6Address() Ipv6Addr {
	if o == nil || IsNil(o.NFIPv6Address) {
		var ret Ipv6Addr
		return ret
	}
	return *o.NFIPv6Address
}

// GetNFIPv6AddressOk returns a tuple with the NFIPv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFIdentification) GetNFIPv6AddressOk() (*Ipv6Addr, bool) {
	if o == nil || IsNil(o.NFIPv6Address) {
		return nil, false
	}
	return o.NFIPv6Address, true
}

// HasNFIPv6Address returns a boolean if a field has been set.
func (o *NFIdentification) HasNFIPv6Address() bool {
	if o != nil && !IsNil(o.NFIPv6Address) {
		return true
	}

	return false
}

// SetNFIPv6Address gets a reference to the given Ipv6Addr and assigns it to the NFIPv6Address field.
func (o *NFIdentification) SetNFIPv6Address(v Ipv6Addr) {
	o.NFIPv6Address = &v
}

// GetNFPLMNID returns the NFPLMNID field value if set, zero value otherwise.
func (o *NFIdentification) GetNFPLMNID() PlmnId {
	if o == nil || IsNil(o.NFPLMNID) {
		var ret PlmnId
		return ret
	}
	return *o.NFPLMNID
}

// GetNFPLMNIDOk returns a tuple with the NFPLMNID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFIdentification) GetNFPLMNIDOk() (*PlmnId, bool) {
	if o == nil || IsNil(o.NFPLMNID) {
		return nil, false
	}
	return o.NFPLMNID, true
}

// HasNFPLMNID returns a boolean if a field has been set.
func (o *NFIdentification) HasNFPLMNID() bool {
	if o != nil && !IsNil(o.NFPLMNID) {
		return true
	}

	return false
}

// SetNFPLMNID gets a reference to the given PlmnId and assigns it to the NFPLMNID field.
func (o *NFIdentification) SetNFPLMNID(v PlmnId) {
	o.NFPLMNID = &v
}

// GetNodeFunctionality returns the NodeFunctionality field value
func (o *NFIdentification) GetNodeFunctionality() NodeFunctionality {
	if o == nil {
		var ret NodeFunctionality
		return ret
	}

	return o.NodeFunctionality
}

// GetNodeFunctionalityOk returns a tuple with the NodeFunctionality field value
// and a boolean to check if the value has been set.
func (o *NFIdentification) GetNodeFunctionalityOk() (*NodeFunctionality, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeFunctionality, true
}

// SetNodeFunctionality sets field value
func (o *NFIdentification) SetNodeFunctionality(v NodeFunctionality) {
	o.NodeFunctionality = v
}

// GetNFFqdn returns the NFFqdn field value if set, zero value otherwise.
func (o *NFIdentification) GetNFFqdn() string {
	if o == nil || IsNil(o.NFFqdn) {
		var ret string
		return ret
	}
	return *o.NFFqdn
}

// GetNFFqdnOk returns a tuple with the NFFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFIdentification) GetNFFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.NFFqdn) {
		return nil, false
	}
	return o.NFFqdn, true
}

// HasNFFqdn returns a boolean if a field has been set.
func (o *NFIdentification) HasNFFqdn() bool {
	if o != nil && !IsNil(o.NFFqdn) {
		return true
	}

	return false
}

// SetNFFqdn gets a reference to the given string and assigns it to the NFFqdn field.
func (o *NFIdentification) SetNFFqdn(v string) {
	o.NFFqdn = &v
}

func (o NFIdentification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NFIdentification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NFName) {
		toSerialize["nFName"] = o.NFName
	}
	if !IsNil(o.NFIPv4Address) {
		toSerialize["nFIPv4Address"] = o.NFIPv4Address
	}
	if !IsNil(o.NFIPv6Address) {
		toSerialize["nFIPv6Address"] = o.NFIPv6Address
	}
	if !IsNil(o.NFPLMNID) {
		toSerialize["nFPLMNID"] = o.NFPLMNID
	}
	toSerialize["nodeFunctionality"] = o.NodeFunctionality
	if !IsNil(o.NFFqdn) {
		toSerialize["nFFqdn"] = o.NFFqdn
	}
	return toSerialize, nil
}

type NullableNFIdentification struct {
	value *NFIdentification
	isSet bool
}

func (v NullableNFIdentification) Get() *NFIdentification {
	return v.value
}

func (v *NullableNFIdentification) Set(val *NFIdentification) {
	v.value = val
	v.isSet = true
}

func (v NullableNFIdentification) IsSet() bool {
	return v.isSet
}

func (v *NullableNFIdentification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFIdentification(val *NFIdentification) *NullableNFIdentification {
	return &NullableNFIdentification{value: val, isSet: true}
}

func (v NullableNFIdentification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFIdentification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


