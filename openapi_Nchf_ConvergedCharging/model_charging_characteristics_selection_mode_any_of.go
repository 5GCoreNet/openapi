/*
Nchf_ConvergedCharging

ConvergedCharging Service    Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 3.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nchf_ConvergedCharging

import (
	"encoding/json"
	"fmt"
)

// ChargingCharacteristicsSelectionModeAnyOf the model 'ChargingCharacteristicsSelectionModeAnyOf'
type ChargingCharacteristicsSelectionModeAnyOf string

// List of ChargingCharacteristicsSelectionMode_anyOf
const (
	HOME_DEFAULT ChargingCharacteristicsSelectionModeAnyOf = "HOME_DEFAULT"
	ROAMING_DEFAULT ChargingCharacteristicsSelectionModeAnyOf = "ROAMING_DEFAULT"
	VISITING_DEFAULT ChargingCharacteristicsSelectionModeAnyOf = "VISITING_DEFAULT"
)

// All allowed values of ChargingCharacteristicsSelectionModeAnyOf enum
var AllowedChargingCharacteristicsSelectionModeAnyOfEnumValues = []ChargingCharacteristicsSelectionModeAnyOf{
	"HOME_DEFAULT",
	"ROAMING_DEFAULT",
	"VISITING_DEFAULT",
}

func (v *ChargingCharacteristicsSelectionModeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChargingCharacteristicsSelectionModeAnyOf(value)
	for _, existing := range AllowedChargingCharacteristicsSelectionModeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChargingCharacteristicsSelectionModeAnyOf", value)
}

// NewChargingCharacteristicsSelectionModeAnyOfFromValue returns a pointer to a valid ChargingCharacteristicsSelectionModeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChargingCharacteristicsSelectionModeAnyOfFromValue(v string) (*ChargingCharacteristicsSelectionModeAnyOf, error) {
	ev := ChargingCharacteristicsSelectionModeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChargingCharacteristicsSelectionModeAnyOf: valid values are %v", v, AllowedChargingCharacteristicsSelectionModeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChargingCharacteristicsSelectionModeAnyOf) IsValid() bool {
	for _, existing := range AllowedChargingCharacteristicsSelectionModeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChargingCharacteristicsSelectionMode_anyOf value
func (v ChargingCharacteristicsSelectionModeAnyOf) Ptr() *ChargingCharacteristicsSelectionModeAnyOf {
	return &v
}

type NullableChargingCharacteristicsSelectionModeAnyOf struct {
	value *ChargingCharacteristicsSelectionModeAnyOf
	isSet bool
}

func (v NullableChargingCharacteristicsSelectionModeAnyOf) Get() *ChargingCharacteristicsSelectionModeAnyOf {
	return v.value
}

func (v *NullableChargingCharacteristicsSelectionModeAnyOf) Set(val *ChargingCharacteristicsSelectionModeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableChargingCharacteristicsSelectionModeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableChargingCharacteristicsSelectionModeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargingCharacteristicsSelectionModeAnyOf(val *ChargingCharacteristicsSelectionModeAnyOf) *NullableChargingCharacteristicsSelectionModeAnyOf {
	return &NullableChargingCharacteristicsSelectionModeAnyOf{value: val, isSet: true}
}

func (v NullableChargingCharacteristicsSelectionModeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargingCharacteristicsSelectionModeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

