/*
Nudsf_DataRepository

Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudsf_DataRepository

import (
	"encoding/json"
)

// checks if the ClientId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientId{}

// ClientId Defines the identity of the NF Consumer
type ClientId struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	NfId *string `json:"nfId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.
	NfSetId *string `json:"nfSetId,omitempty"`
}

// NewClientId instantiates a new ClientId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientId() *ClientId {
	this := ClientId{}
	return &this
}

// NewClientIdWithDefaults instantiates a new ClientId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientIdWithDefaults() *ClientId {
	this := ClientId{}
	return &this
}

// GetNfId returns the NfId field value if set, zero value otherwise.
func (o *ClientId) GetNfId() string {
	if o == nil || IsNil(o.NfId) {
		var ret string
		return ret
	}
	return *o.NfId
}

// GetNfIdOk returns a tuple with the NfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientId) GetNfIdOk() (*string, bool) {
	if o == nil || IsNil(o.NfId) {
		return nil, false
	}
	return o.NfId, true
}

// HasNfId returns a boolean if a field has been set.
func (o *ClientId) HasNfId() bool {
	if o != nil && !IsNil(o.NfId) {
		return true
	}

	return false
}

// SetNfId gets a reference to the given string and assigns it to the NfId field.
func (o *ClientId) SetNfId(v string) {
	o.NfId = &v
}

// GetNfSetId returns the NfSetId field value if set, zero value otherwise.
func (o *ClientId) GetNfSetId() string {
	if o == nil || IsNil(o.NfSetId) {
		var ret string
		return ret
	}
	return *o.NfSetId
}

// GetNfSetIdOk returns a tuple with the NfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientId) GetNfSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.NfSetId) {
		return nil, false
	}
	return o.NfSetId, true
}

// HasNfSetId returns a boolean if a field has been set.
func (o *ClientId) HasNfSetId() bool {
	if o != nil && !IsNil(o.NfSetId) {
		return true
	}

	return false
}

// SetNfSetId gets a reference to the given string and assigns it to the NfSetId field.
func (o *ClientId) SetNfSetId(v string) {
	o.NfSetId = &v
}

func (o ClientId) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NfId) {
		toSerialize["nfId"] = o.NfId
	}
	if !IsNil(o.NfSetId) {
		toSerialize["nfSetId"] = o.NfSetId
	}
	return toSerialize, nil
}

type NullableClientId struct {
	value *ClientId
	isSet bool
}

func (v NullableClientId) Get() *ClientId {
	return v.value
}

func (v *NullableClientId) Set(val *ClientId) {
	v.value = val
	v.isSet = true
}

func (v NullableClientId) IsSet() bool {
	return v.isSet
}

func (v *NullableClientId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientId(val *ClientId) *NullableClientId {
	return &NullableClientId{value: val, isSet: true}
}

func (v NullableClientId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
