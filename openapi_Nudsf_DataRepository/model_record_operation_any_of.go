/*
Nudsf_DataRepository

Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudsf_DataRepository

import (
	"encoding/json"
	"fmt"
)

// RecordOperationAnyOf the model 'RecordOperationAnyOf'
type RecordOperationAnyOf string

// List of RecordOperation_anyOf
const (
	CREATED RecordOperationAnyOf = "CREATED"
	UPDATED RecordOperationAnyOf = "UPDATED"
	DELETED RecordOperationAnyOf = "DELETED"
)

// All allowed values of RecordOperationAnyOf enum
var AllowedRecordOperationAnyOfEnumValues = []RecordOperationAnyOf{
	"CREATED",
	"UPDATED",
	"DELETED",
}

func (v *RecordOperationAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecordOperationAnyOf(value)
	for _, existing := range AllowedRecordOperationAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecordOperationAnyOf", value)
}

// NewRecordOperationAnyOfFromValue returns a pointer to a valid RecordOperationAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecordOperationAnyOfFromValue(v string) (*RecordOperationAnyOf, error) {
	ev := RecordOperationAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecordOperationAnyOf: valid values are %v", v, AllowedRecordOperationAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecordOperationAnyOf) IsValid() bool {
	for _, existing := range AllowedRecordOperationAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecordOperation_anyOf value
func (v RecordOperationAnyOf) Ptr() *RecordOperationAnyOf {
	return &v
}

type NullableRecordOperationAnyOf struct {
	value *RecordOperationAnyOf
	isSet bool
}

func (v NullableRecordOperationAnyOf) Get() *RecordOperationAnyOf {
	return v.value
}

func (v *NullableRecordOperationAnyOf) Set(val *RecordOperationAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordOperationAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordOperationAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordOperationAnyOf(val *RecordOperationAnyOf) *NullableRecordOperationAnyOf {
	return &NullableRecordOperationAnyOf{value: val, isSet: true}
}

func (v NullableRecordOperationAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordOperationAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

