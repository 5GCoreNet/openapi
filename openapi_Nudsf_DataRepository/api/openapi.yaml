openapi: 3.0.0
info:
  description: "Nudsf Data Repository Service.  \nÂ© 2022, 3GPP Organizational Partners\
    \ (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).  \nAll rights reserved.\n"
  title: Nudsf_DataRepository
  version: 1.2.0-alpha.1
externalDocs:
  description: "3GPP TS 29.598 UDSF Services, V18.0.0."
  url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.598/
servers:
- url: "{apiRoot}/nudsf-dr/v1"
  variables:
    apiRoot:
      default: https://example.com
      description: apiRoot as defined in clause 4.4 of 3GPP TS 29.501
security:
- {}
- oAuth2ClientCredentials:
  - nudsf-dr
paths:
  /{realmId}/{storageId}/records:
    delete:
      description: Delete multiple Records based on filter
      operationId: BulkDeleteRecords
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchExpression'
        in: query
        name: filter
        required: true
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordIdList'
          description: Successful case. Response contains RecordIdList.
        "204":
          description: Successful case.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "406":
          description: 406 Not Acceptable
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Bulk Deletion of Records
      tags:
      - Record CRUD
    description: root of all Records of a Storage
    get:
      description: Retrieve one or multiple Records based on filter
      operationId: SearchRecord
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: The most number of record references to fetch
        explode: true
        in: query
        name: limit-range
        required: false
        schema:
          $ref: '#/components/schemas/Uinteger'
        style: form
      - content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchExpression'
        description: Query filter using conditions on tags
        in: query
        name: filter
        required: false
      - description: Indicates whether the number of records that matched the criteria
          shall be returned.
        explode: true
        in: query
        name: count-indicator
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      - description: Indicates whether the UDSF is requested to include matching records
          within the response.
        explode: true
        in: query
        name: retrieve-records
        required: false
        schema:
          $ref: '#/components/schemas/RetrieveRecords'
        style: form
      - description: Indicates the number of kilo octets the consumer is prepared
          to receive
        explode: true
        in: query
        name: max-payload-size
        required: false
        schema:
          $ref: '#/components/schemas/Uinteger'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordSearchResult'
          description: Successful case. Response contains result of the search.
        "204":
          description: The search condition does not match any Record.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "406":
          description: 406 Not Acceptable
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Records search with get
      tags:
      - Record CRUD
    summary: Access to all Records of a Storage
  /{realmId}/{storageId}/records/{recordId}:
    delete:
      operationId: DeleteRecord
      parameters:
      - description: Identifier(name) of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Record
        explode: false
        in: path
        name: recordId
        required: true
        schema:
          example: UserRecordValue000000001
          type: string
        style: simple
      - description: "Record validator for conditional requests, as described in RFC\
          \ 7232, 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: Retrieve the Record before delete
        explode: true
        in: query
        name: get-previous
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            multipart/mixed:
              encoding:
                meta:
                  contentType: application/json
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
                blocks:
                  contentType: '*/*'
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                    Content-Transfer-Encoding:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
              schema:
                $ref: '#/components/schemas/Record'
          description: '- 200 Delete. The resource has been successfully delete and
            previous value must be sent in the response message if requested.'
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "204":
          description: Successful case.
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "412":
          content:
            multipart/mixed:
              encoding:
                meta:
                  contentType: application/json
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
                blocks:
                  contentType: '*/*'
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                    Content-Transfer-Encoding:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
              schema:
                $ref: '#/components/schemas/Record'
          description: |-
            - 200 Update. The resource has been successfully updated and previous value must be sent in the response message if requested.
             - 200 Get. The resource exists, its value must be sent in the response message
             - 412 Precondition Failed, the previous value must be sent in response message if requested.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Delete a Record with an user provided RecordId
      tags:
      - Record CRUD
    description: Access to a specific Record
    get:
      description: retrieve one specific Record
      operationId: GetRecord
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Record
        explode: false
        in: path
        name: recordId
        required: true
        schema:
          example: UserRecordValue000000001
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.3"
        explode: false
        in: header
        name: If-Modified-Since
        required: false
        schema:
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            multipart/mixed:
              encoding:
                meta:
                  contentType: application/json
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
                blocks:
                  contentType: '*/*'
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                    Content-Transfer-Encoding:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
              schema:
                $ref: '#/components/schemas/Record'
          description: |-
            - 200 Update. The resource has been successfully updated and previous value must be sent in the response message if requested.
             - 200 Get. The resource exists, its value must be sent in the response message
             - 412 Precondition Failed, the previous value must be sent in response message if requested.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "406":
          description: 406 Not Acceptable
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Record access
      tags:
      - Record CRUD
    put:
      callbacks:
        recordExpired:
          '{$request.body#/callbackReference}':
            post:
              operationId: recordExpired_Post
              parameters:
              - description: The expired record URI
                explode: false
                in: header
                name: Content-Location
                required: false
                schema:
                  $ref: '#/components/schemas/Uri'
                style: simple
              requestBody:
                $ref: '#/components/requestBodies/RecordBody'
              responses:
                "204":
                  description: Callback executed successfully
                "400":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Bad request
                "401":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Unauthorized
                "403":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Forbidden
                "404":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Not Found
                "411":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Length Required
                "413":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Payload Too Large
                "415":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Unsupported Media Type
                "429":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Too Many Requests
                "500":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Internal Server Error
                "502":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Bad Gateway
                "503":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Service Unavailable
                default:
                  description: Generic Error
              x-callback-request: true
      description: Create or Modify a Record with a user provided RecordId
      operationId: CreateOrModifyRecord
      parameters:
      - description: Identifier(name) of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Record
        explode: false
        in: path
        name: recordId
        required: true
        schema:
          example: UserRecordValue000000001
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: "Record validator for conditional requests, as described in RFC\
          \ 7232, 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: Retrieve the Record before update
        explode: true
        in: query
        name: get-previous
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      requestBody:
        $ref: '#/components/requestBodies/RecordBody'
      responses:
        "200":
          content:
            multipart/mixed:
              encoding:
                meta:
                  contentType: application/json
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
                blocks:
                  contentType: '*/*'
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                    Content-Transfer-Encoding:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
              schema:
                $ref: '#/components/schemas/Record'
          description: |-
            - 200 Update. The resource has been successfully updated and previous value must be sent in the response message if requested.
             - 200 Get. The resource exists, its value must be sent in the response message
             - 412 Precondition Failed, the previous value must be sent in response message if requested.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "201":
          description: "Create case. The resource has been successfully created, location\
            \ header indicates the URI of the created Record. $ref: '#/components/responses/RecordBody'"
          headers:
            Location:
              $ref: '#/components/headers/Location'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "204":
          description: Update case. The resource has been successfully updated and
            no additional content is included in the response message.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "411":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Length Required
        "412":
          content:
            multipart/mixed:
              encoding:
                meta:
                  contentType: application/json
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
                blocks:
                  contentType: '*/*'
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                    Content-Transfer-Encoding:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
              schema:
                $ref: '#/components/schemas/Record'
          description: |-
            - 200 Update. The resource has been successfully updated and previous value must be sent in the response message if requested.
             - 200 Get. The resource exists, its value must be sent in the response message
             - 412 Precondition Failed, the previous value must be sent in response message if requested.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "413":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Payload Too Large
        "415":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unsupported Media Type
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Create/Modify Record
      tags:
      - Record CRUD
    summary: "Access to a specific Record, identified by its RecordId"
  /{realmId}/{storageId}/records/{recordId}/meta:
    description: Access to the meta of a specific Record
    get:
      description: retrieve meta of a specific Record
      operationId: GetMeta
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Record
        explode: false
        in: path
        name: recordId
        required: true
        schema:
          example: UserRecordValue000000001
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.3"
        explode: false
        in: header
        name: If-Modified-Since
        required: false
        schema:
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordMeta'
          description: Expected response to a valid request
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "406":
          description: 406 Not Acceptable
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Record's meta access
      tags:
      - Record CRUD
    patch:
      description: update meta of a specific Record
      operationId: UpdateMeta
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Record
        explode: false
        in: path
        name: recordId
        required: true
        schema:
          example: UserRecordValue000000001
          type: string
        style: simple
      - description: "Record validator for conditional requests, as described in RFC\
          \ 7232, 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      requestBody:
        content:
          application/json-patch+json:
            example: "[{ \"op\": \"replace\", \"path\": \"/tags/ueId\", \"value\"\
              : \"450005\" }, { \"op\": \"remove\", \"path\": \"/tags/recordId\" }]"
            schema:
              items:
                $ref: '#/components/schemas/PatchItem'
              minItems: 1
              type: array
        description: Meta data to patch
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchResult'
              example: null
          description: "One or more modification instructions have been discarded,\
            \ the execution report is returned in response PatchResult."
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "204":
          description: Successful case. The meta has been successfully updated and
            no return is expected.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "411":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Length Required
        "413":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Payload Too Large
        "415":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unsupported Media Type
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Record's meta update
      tags:
      - Record CRUD
    summary: "Access to the meta of a specific Record, identified by its RecordId"
  /{realmId}/{storageId}/records/{recordId}/blocks:
    description: Access to the Blocks of a specific Record
    get:
      description: retrieve all Blocks of a specific Record
      operationId: GetBlockList
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Record
        explode: false
        in: path
        name: recordId
        required: true
        schema:
          example: UserRecordValue000000001
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            multipart/parallel:
              encoding:
                blocks:
                  contentType: '*/*'
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                    Content-Transfer-Encoding:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
              schema:
                $ref: '#/components/schemas/GetBlockList_200_response'
          description: Expected response to a successful request
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "204":
          description: "Successful response, the record contains no blocks"
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "406":
          description: 406 Not Acceptable
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Record's Blocks access
      tags:
      - Block CRUD
    summary: "Access to the Blocks of a specific Record, identified by its RecordId"
  /{realmId}/{storageId}/records/{recordId}/blocks/{blockId}:
    delete:
      description: "delete a specific Block, related to a Record"
      operationId: DeleteBlock
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Record
        explode: false
        in: path
        name: recordId
        required: true
        schema:
          example: UserRecordValue000000001
          type: string
        style: simple
      - description: Id of the Block
        explode: false
        in: path
        name: blockId
        required: true
        schema:
          example: userDefjson01
          type: string
        style: simple
      - description: Retrieve the Block before delete
        explode: true
        in: query
        name: get-previous
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Record validator for conditional requests, as described in RFC\
          \ 7232, 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Block'
          description: "- 200 Delete: The resource has been successfully delete and\
            \ previous value must be sent in the response message if requested."
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "204":
          description: Successful case. The Block has been successfully deleted.
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "412":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Block'
          description: |-
            - 200 Update: The resource has been successfully updated and previous value must be sent in the response message if requested.
             - 200 Get: The resource exists, its value must be sent in the response message
             - 412 Precondition Failed: the previous value must be sent in response message if requested.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Delete a specific Block. Then update the Record
      tags:
      - Block CRUD
    description: Access to a specific Block of a specific Record
    get:
      description: retrieve a specific Block
      operationId: GetBlock
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Record
        explode: false
        in: path
        name: recordId
        required: true
        schema:
          example: UserRecordValue000000001
          type: string
        style: simple
      - description: Id of the Block
        explode: false
        in: path
        name: blockId
        required: true
        schema:
          example: userDefjson01
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.3"
        explode: false
        in: header
        name: If-Modified-Since
        required: false
        schema:
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Block'
          description: |-
            - 200 Update: The resource has been successfully updated and previous value must be sent in the response message if requested.
             - 200 Get: The resource exists, its value must be sent in the response message
             - 412 Precondition Failed: the previous value must be sent in response message if requested.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "406":
          description: 406 Not Acceptable
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Retrieve a specific Block
      tags:
      - Block CRUD
    put:
      description: "Create or update a specific Block, related to a Record"
      operationId: CreateOrModifyBlock
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Record
        explode: false
        in: path
        name: recordId
        required: true
        schema:
          example: UserRecordValue000000001
          type: string
        style: simple
      - description: Id of the Block
        explode: false
        in: path
        name: blockId
        required: true
        schema:
          example: userDefjson01
          type: string
        style: simple
      - description: Retrieve the Block before update
        explode: true
        in: query
        name: get-previous
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: "Record validator for conditional requests, as described in RFC\
          \ 7232, 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Block'
        description: information on the Block to create
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Block'
          description: |-
            - 200 Update: The resource has been successfully updated and previous value must be sent in the response message if requested.
             - 200 Get: The resource exists, its value must be sent in the response message
             - 412 Precondition Failed: the previous value must be sent in response message if requested.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "201":
          description: Creation case. The Block has been successfully created. Location
            header indicates the URI of the created Block.
          headers:
            Location:
              $ref: '#/components/headers/Location'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "204":
          description: Successful case. The resource has been successfully updated.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "411":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Length Required
        "412":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Block'
          description: |-
            - 200 Update: The resource has been successfully updated and previous value must be sent in the response message if requested.
             - 200 Get: The resource exists, its value must be sent in the response message
             - 412 Precondition Failed: the previous value must be sent in response message if requested.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "413":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Payload Too Large
        "415":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unsupported Media Type
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Create or Update a specific Block in a Record.
      tags:
      - Block CRUD
    summary: "Access to a Block of a specific Record, identified by its BlockId"
  /{realmId}/{storageId}/subs-to-notify:
    description: Access to the subscription resource
    get:
      description: retrieve all notification subscriptions of the storage
      operationId: GetNotificationSubscriptions
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: The maximum number of NotificationSubscriptions to fetch
        explode: true
        in: query
        name: limit-range
        required: false
        schema:
          $ref: '#/components/schemas/Uinteger'
        style: form
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationSubscription'
                type: array
          description: Expected response to a valid request
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "406":
          description: 406 Not Acceptable
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Notification subscription retrieval
      tags:
      - NotificationSubscriptions CRUD
    summary: The notification subscription collection resource
  /{realmId}/{storageId}/subs-to-notify/{subscriptionId}:
    delete:
      description: delete a single subscriptions of the storage
      operationId: DeleteNotificationSubscription
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the NotificationSubscription
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          example: Subscription01
          type: string
        style: simple
      - description: Identifies the NF or NFSet
        explode: true
        in: query
        name: client-id
        required: true
        schema:
          $ref: '#/components/schemas/ClientId'
        style: form
      - description: Retrieve the NotificationSubscription before delete
        explode: true
        in: query
        name: get-previous
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Record validator for conditional requests, as described in RFC\
          \ 7232, 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationSubscription'
                type: array
          description: Deleted NotificationSubscription if requested with get-previous
        "204":
          description: Successful case. The SubscriptionNotification has been successfully
            deleted.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
          description: Return previous NotificationSubscription value if get-previous=true
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Delete a Notification Subscription of the storage
      tags:
      - NotificationSubscription CRUD
    description: Access to the subscription resource
    get:
      description: retrieve a single notification subscription of the storage
      operationId: GetNotificationSubscription
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the NotificationSubscription
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          example: Subscription01
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.3"
        explode: false
        in: header
        name: If-Modified-Since
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
          description: Expected response to a valid request
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "406":
          description: 406 Not Acceptable
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Notification subscription retrieval
      tags:
      - NotificationSubscription CRUD
    patch:
      description: update a specific NotificationSubscription
      operationId: UpdateNotificationSubscription
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the NotificationSubscription
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          example: Subscription01
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      requestBody:
        content:
          application/json-patch+json:
            example: TBD
            schema:
              items:
                $ref: '#/components/schemas/PatchItem'
              minItems: 1
              type: array
        description: data to patch
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchResult'
              example: null
          description: "One or more modification instructions have been discarded,\
            \ the execution report is returned in response PatchResult."
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "204":
          description: Successful case. The meta has been successfully updated and
            no return is expected.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "411":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Length Required
        "413":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Payload Too Large
        "415":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unsupported Media Type
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: NotificationSubscription update
      tags:
      - NotificationSubscription CRUD
    put:
      callbacks:
        onDataChange:
          '{request.body#/callbackReference}':
            post:
              operationId: onDataChange_request_bodyCallbackReferencePost
              requestBody:
                $ref: '#/components/requestBodies/RecordNotificationBody'
              responses:
                "204":
                  description: Callback executed successfully
                "400":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Bad request
                "401":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Unauthorized
                "403":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Forbidden
                "404":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Not Found
                "411":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Length Required
                "413":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Payload Too Large
                "415":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Unsupported Media Type
                "429":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Too Many Requests
                "500":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Internal Server Error
                "502":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Bad Gateway
                "503":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Service Unavailable
                default:
                  description: Generic Error
              x-callback-request: true
        subscriptionExpiryNotification:
          '{request.body#/expiryCallbackReference}':
            post:
              operationId: subscriptionExpiryNotification_request_bodyExpiryCallbackReferencePost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/NotificationInfo'
                required: true
              responses:
                "204":
                  description: Successful Notification response
                "400":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Bad request
                "401":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Unauthorized
                "403":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Forbidden
                "404":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Not Found
                "411":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Length Required
                "413":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Payload Too Large
                "415":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Unsupported Media Type
                "429":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Too Many Requests
                "500":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Internal Server Error
                "502":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Bad Gateway
                "503":
                  content:
                    application/problem+json:
                      schema:
                        $ref: '#/components/schemas/ProblemDetails'
                  description: Service Unavailable
                default:
                  description: Generic Error
              x-callback-request: true
      operationId: CreateAndUpdateNotificationSubscription
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the NotificationSubscription
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          example: Subscription01
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: "Record validator for conditional requests, as described in RFC\
          \ 7232, 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSubscription'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
          description: Expected response to a valid update request
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
          description: Expected response to a valid create request
          headers:
            Location:
              description: "Contains the URI of the newly created resource according\
                \ to the structure: {apiRoot}/nudsf-dr/<apiVersion>/{realmId}/{storageId}/subs-to-notify/{subscriptionId}"
              explode: false
              required: true
              schema:
                type: string
              style: simple
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "409":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Uri'
                type: array
          description: Conflict
        "411":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Length Required
        "412":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Precondition Failed
        "413":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Payload Too Large
        "415":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unsupported Media Type
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unexpected error
      summary: NotificationSubscription Create/Update
      tags:
      - NotificationSubscription CRUD
    summary: The notification subscription resource
  /{realmId}/{storageId}/meta-schemas/{schemaId}:
    delete:
      operationId: DeleteMetaSchema
      parameters:
      - description: Identifier(name) of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Meta Schema
        explode: false
        in: path
        name: schemaId
        required: true
        schema:
          $ref: '#/components/schemas/SchemaId'
        style: simple
      - description: "Record validator for conditional requests, as described in RFC\
          \ 7232, 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: Retrieve the Meta Schema before delete
        explode: true
        in: query
        name: get-previous
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaSchema'
          description: OK
        "204":
          description: Successful case.
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaSchema'
          description: Return value if get-previous=true
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Delete a Meta Schema with an user provided SchemaId
      tags:
      - MetaSchema CRUD
    description: Access to a specific Meta Schema
    get:
      description: retrieve one specific Meta Schema
      operationId: GetMetaSchema
      parameters:
      - description: Identifier of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Meta Schema
        explode: false
        in: path
        name: schemaId
        required: true
        schema:
          $ref: '#/components/schemas/SchemaId'
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.3"
        explode: false
        in: header
        name: If-Modified-Since
        required: false
        schema:
          type: string
        style: simple
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      responses:
        "200":
          content:
            multipart/mixed:
              encoding:
                meta:
                  contentType: application/json
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
                blocks:
                  contentType: '*/*'
                  headers:
                    Content-Id:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                    Content-Transfer-Encoding:
                      explode: false
                      required: true
                      schema:
                        type: string
                      style: simple
                  style: form
              schema:
                $ref: '#/components/schemas/Record'
          description: |-
            - 200 Update. The resource has been successfully updated and previous value must be sent in the response message if requested.
             - 200 Get. The resource exists, its value must be sent in the response message
             - 412 Precondition Failed, the previous value must be sent in response message if requested.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "406":
          description: 406 Not Acceptable
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Meta Schema access
      tags:
      - MetaSchema CRUD
    put:
      description: Create or Modify a Meta Schema with a user provided SchemaId
      operationId: CreateOrModifyMetaSchema
      parameters:
      - description: Identifier(name) of the Realm
        explode: false
        in: path
        name: realmId
        required: true
        schema:
          example: Realm01
          type: string
        style: simple
      - description: Identifier of the Storage
        explode: false
        in: path
        name: storageId
        required: true
        schema:
          example: Storage01
          type: string
        style: simple
      - description: Identifier of the Meta Schema
        explode: false
        in: path
        name: schemaId
        required: true
        schema:
          $ref: '#/components/schemas/SchemaId'
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: "Validator for conditional requests, as described in RFC 7232,\
          \ 3.2"
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: Retrieve the Meta Schema before update
        explode: true
        in: query
        name: get-previous
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Features required to be supported by the target NF
        explode: true
        in: query
        name: supported-features
        required: false
        schema:
          $ref: '#/components/schemas/SupportedFeatures'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetaSchema'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaSchema'
          description: Update with return
        "201":
          description: "Create case. The resource has been successfully created, location\
            \ header indicates the URI of the created Record. $ref: '#/components/responses/RecordBody'"
          headers:
            Location:
              $ref: '#/components/headers/Location'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "204":
          description: Update case. The resource has been successfully updated and
            no additional content is included in the response message.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
        "304":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Modified
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
            Retry-After:
              $ref: '#/components/headers/Retry-After'
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Forbidden
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
        "408":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Request Timeout
        "411":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Length Required
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaSchema'
          description: Return Meta Schema value if get-previous=true
        "413":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Payload Too Large
        "415":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Unsupported Media Type
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal Server Error
        "501":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Implemented
        "502":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Gateway
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Service Unavailable
        default:
          description: Generic Error
      summary: Create/Modify Meta Schema
      tags:
      - MetaSchema CRUD
    summary: "Access to a specific Meta Schema, identified by its SchemaId"
components:
  headers:
    Cache-Control:
      description: "Cache-Control containing max-age, as described in RFC 7234, 5.2"
      explode: false
      schema:
        type: string
      style: simple
    ETag:
      description: "Entity Tag, containing a strong validator, as described in RFC\
        \ 7232, 2.3"
      explode: false
      schema:
        type: string
      style: simple
    Last-Modified:
      description: "Timestamp for last modification of the resource, as described\
        \ in RFC 7232, 2.2"
      explode: false
      schema:
        type: string
      style: simple
    Location:
      description: Contains the URI of the newly created resource
      explode: false
      required: true
      schema:
        type: string
      style: simple
    Retry-After:
      description: Indicates the time the NF Consumer has to wait before making a
        new request. It can be a non-negative integer (decimal number) indicating
        the number of seconds the NF Consumer has to wait before making a new request
        or an HTTP-date after which the AF can retry a new request.
      explode: false
      schema:
        anyOf:
        - type: integer
        - type: string
      style: simple
  requestBodies:
    RecordBody:
      content:
        multipart/mixed:
          encoding:
            meta:
              contentType: application/json
              headers:
                Content-Id:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
              style: form
            blocks:
              contentType: '*/*'
              headers:
                Content-Id:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
                Content-Transfer-Encoding:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
              style: form
          schema:
            $ref: '#/components/schemas/Record'
      description: The record multipart request body. The meta part shall be the first
        part and is mandatory but can be empty and zero or more block parts may follow
        the meta part.
      required: true
    RecordNotificationBody:
      content:
        multipart/mixed:
          encoding:
            descriptor:
              contentType: application/json
              headers:
                Content-Id:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
              style: form
            meta:
              contentType: application/json
              headers:
                Content-Id:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
              style: form
            blocks:
              contentType: '*/*'
              headers:
                Content-Id:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
                Content-Transfer-Encoding:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
              style: form
          schema:
            $ref: '#/components/schemas/RecordNotification'
      description: "The record notification multipart request body. The descriptor\
        \ part shall be the first one, followed by record meta part and by zero or\
        \ more block parts."
      required: true
  responses:
    "304":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Not Modified
      headers:
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        ETag:
          $ref: '#/components/headers/ETag'
        Retry-After:
          $ref: '#/components/headers/Retry-After'
    RecordBody:
      content:
        multipart/mixed:
          encoding:
            meta:
              contentType: application/json
              headers:
                Content-Id:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
              style: form
            blocks:
              contentType: '*/*'
              headers:
                Content-Id:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
                Content-Transfer-Encoding:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
              style: form
          schema:
            $ref: '#/components/schemas/Record'
      description: |-
        - 200 Update. The resource has been successfully updated and previous value must be sent in the response message if requested.
         - 200 Get. The resource exists, its value must be sent in the response message
         - 412 Precondition Failed, the previous value must be sent in response message if requested.
      headers:
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        ETag:
          $ref: '#/components/headers/ETag'
        Last-Modified:
          $ref: '#/components/headers/Last-Modified'
    RecordBodyDelete:
      content:
        multipart/mixed:
          encoding:
            meta:
              contentType: application/json
              headers:
                Content-Id:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
              style: form
            blocks:
              contentType: '*/*'
              headers:
                Content-Id:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
                Content-Transfer-Encoding:
                  explode: false
                  required: true
                  schema:
                    type: string
                  style: simple
              style: form
          schema:
            $ref: '#/components/schemas/Record'
      description: '- 200 Delete. The resource has been successfully delete and previous
        value must be sent in the response message if requested.'
      headers:
        ETag:
          $ref: '#/components/headers/ETag'
        Last-Modified:
          $ref: '#/components/headers/Last-Modified'
    BlockBody:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Block'
      description: |-
        - 200 Update: The resource has been successfully updated and previous value must be sent in the response message if requested.
         - 200 Get: The resource exists, its value must be sent in the response message
         - 412 Precondition Failed: the previous value must be sent in response message if requested.
      headers:
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        ETag:
          $ref: '#/components/headers/ETag'
        Last-Modified:
          $ref: '#/components/headers/Last-Modified'
    BlockBodyDelete:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Block'
      description: "- 200 Delete: The resource has been successfully delete and previous\
        \ value must be sent in the response message if requested."
      headers:
        ETag:
          $ref: '#/components/headers/ETag'
        Last-Modified:
          $ref: '#/components/headers/Last-Modified'
    "400":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Bad request
    "401":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Unauthorized
    "403":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Forbidden
    "404":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Not Found
    "406":
      description: 406 Not Acceptable
    "429":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Too Many Requests
    "500":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Internal Server Error
    "502":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Bad Gateway
    "503":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Service Unavailable
    default:
      description: Generic Error
    "408":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Request Timeout
    "411":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Length Required
    "413":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Payload Too Large
    "415":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Unsupported Media Type
    "412":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Precondition Failed
    "501":
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Not Implemented
  schemas:
    RecordSearchResult:
      description: Count and collection of Record references matching the providing
        filter.
      example:
        supportedFeatures: supportedFeatures
        references:
        - null
        - null
        matchingRecords:
          key: "{\"meta\": { \"tags\" : {\"tag1\" : [\"value1\"], \"tag2\" :[\"value2\"\
            ] } }, \"blocks\": [{\"Content-Id\": \"userDefBinaryBlob\", \"Content-Type\"\
            : \"text/plain\", \"content\": \"QmxvY2sgY29udGVudA==\"}, {\"Content-Id\"\
            : \"userDefJsonBlob\", \"Content-Type\": \"application/json\", \"content\"\
            : \"{\"key\": \"ftsimpletype-999550000000002\", \"value\": \"A3E71A78377179B5B91A;imsi-999550000000123\"\
            }]}"
        count: 0
      properties:
        count:
          description: "Unsigned Integer, i.e. only value 0 and integers above 0 are\
            \ permissible."
          minimum: 0
          type: integer
        references:
          items:
            $ref: '#/components/schemas/Uri'
          minItems: 1
          type: array
        supportedFeatures:
          description: |
            A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of "0" to "9",  "a" to "f" or "A" to "F" and shall represent the support of 4 features as described in  tableÂ 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
          pattern: "^[A-Fa-f0-9]*$"
          type: string
        matchingRecords:
          additionalProperties:
            $ref: '#/components/schemas/Record'
          description: A map (list of key-value pairs where recordId serves as key)
            of Records
          minProperties: 1
          type: object
      required:
      - count
      type: object
    RecordMeta:
      description: Meta data of a Record
      example: |-
        { "tags" : {"ueId" : [ "455345", "455346" ], "recordId" : [ "1000106" ] }} schemaId:
          $ref: '#/components/schemas/SchemaId'
      properties:
        ttl:
          description: string with format 'date-time' as defined in OpenAPI.
          format: date-time
          type: string
        callbackReference:
          description: String providing an URI formatted according to RFC 3986.
          type: string
        tags:
          additionalProperties:
            items:
              type: string
            minItems: 1
            type: array
            uniqueItems: true
          description: "A dictionary of {\"tagName\": [ \"tagValue\", ...] }. A tag\
            \ name can be used to retrieve a Record. The tagValue are unique."
          example: "{\"ueId\" : [ \"455345\", \"455346\" ], \"recordId\" : [ \"1000106\"\
            \ ] }"
          minProperties: 1
          type: object
      type: object
    Record:
      description: Definition of a Record
      example: "{\"meta\": { \"tags\" : {\"tag1\" : [\"value1\"], \"tag2\" :[\"value2\"\
        ] } }, \"blocks\": [{\"Content-Id\": \"userDefBinaryBlob\", \"Content-Type\"\
        : \"text/plain\", \"content\": \"QmxvY2sgY29udGVudA==\"}, {\"Content-Id\"\
        : \"userDefJsonBlob\", \"Content-Type\": \"application/json\", \"content\"\
        : \"{\"key\": \"ftsimpletype-999550000000002\", \"value\": \"A3E71A78377179B5B91A;imsi-999550000000123\"\
        }]}"
      properties:
        meta:
          $ref: '#/components/schemas/RecordMeta'
        blocks:
          description: list of opaque Block's in this Record
          items:
            $ref: '#/components/schemas/Block'
          minItems: 1
          type: array
      required:
      - meta
      type: object
    RecordIdList:
      description: List of Record IDs
      example:
        recordIdList:
        - recordIdList
        - recordIdList
      properties:
        recordIdList:
          items:
            type: string
          minItems: 1
          type: array
      required:
      - recordIdList
      type: object
    Block:
      description: A Block can be of any type
      example: '"QmxvY2sgY29udGVudA=="'
    NotificationSubscription:
      description: Definition of a notification subscription
      example:
        clientId:
          nfId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          nfSetId: nfSetId
        supportedFeatures: supportedFeatures
        callbackReference: callbackReference
        expiryCallbackReference: expiryCallbackReference
        expiry: 2000-01-23T04:56:07.000+00:00
        expiryNotification: 0
        subFilter:
          operations:
          - null
          - null
          - null
          monitoredResourceUris:
          - null
          - null
      properties:
        clientId:
          $ref: '#/components/schemas/ClientId'
        callbackReference:
          description: String providing an URI formatted according to RFC 3986.
          type: string
        expiryCallbackReference:
          description: String providing an URI formatted according to RFC 3986.
          type: string
        expiry:
          description: string with format 'date-time' as defined in OpenAPI.
          format: date-time
          type: string
        expiryNotification:
          description: "Unsigned Integer, i.e. only value 0 and integers above 0 are\
            \ permissible."
          minimum: 0
          type: integer
        subFilter:
          $ref: '#/components/schemas/SubscriptionFilter'
        supportedFeatures:
          description: |
            A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of "0" to "9",  "a" to "f" or "A" to "F" and shall represent the support of 4 features as described in  tableÂ 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
          pattern: "^[A-Fa-f0-9]*$"
          type: string
      required:
      - callbackReference
      - clientId
      type: object
    RecordNotification:
      description: Definition of a notification on a record
      example: "{\"descriptor\": { \"recordRef\" : \"...\", \"operationType\" : \"\
        DELETED\"}, \"meta\": { \"tags\" : {\"tag1\" : [\"value1\"], \"tag2\" :[\"\
        value2\"] } }, \"blocks\": [{\"Content-Id\": \"userDefBinaryBlob\", \"Content-Type\"\
        : \"text/plain\", \"content\": \"QmxvY2sgY29udGVudA==\"}, {\"Content-Id\"\
        : \"userDefJsonBlob\", \"Content-Type\": \"application/json\", \"content\"\
        : \"{\"key\": \"ftsimpletype-999550000000002\", \"value\": \"A3E71A78377179B5B91A;imsi-999550000000123\"\
        }]}"
      properties:
        descriptor:
          $ref: '#/components/schemas/NotificationDescription'
        meta:
          $ref: '#/components/schemas/RecordMeta'
        blocks:
          description: list of opaque Block's in this Record
          items:
            $ref: '#/components/schemas/Block'
          type: array
      required:
      - descriptor
      - meta
      type: object
    NotificationDescription:
      description: Description of a record notification
      example: "{ \"record\" : \"...\", \"operationType\" : \"DELETED\"}"
      properties:
        recordRef:
          description: String providing an URI formatted according to RFC 3986.
          type: string
        operationType:
          $ref: '#/components/schemas/RecordOperation'
        subscriptionId:
          type: string
      required:
      - operationType
      - recordRef
      type: object
    SubscriptionFilter:
      description: A subscription filter
      example:
        operations:
        - null
        - null
        - null
        monitoredResourceUris:
        - null
        - null
      properties:
        monitoredResourceUris:
          description: list of resources applicable to the subscription
          items:
            $ref: '#/components/schemas/Uri'
          minItems: 1
          type: array
        operations:
          description: list of resources applicable to the subscription
          items:
            $ref: '#/components/schemas/RecordOperation'
          maxItems: 3
          type: array
      type: object
    ClientId:
      description: Defines the identity of the NF Consumer
      example:
        nfId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        nfSetId: nfSetId
      properties:
        nfId:
          description: "String uniquely identifying a NF instance. The format of the\
            \ NF Instance ID shall be a  Universally Unique Identifier (UUID) version\
            \ 4, as described in IETF RFC 4122. \n"
          format: uuid
          type: string
        nfSetId:
          description: "NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted\
            \ as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\"\
            , or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with \
            \ <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)\
            \  <MNC> encoding the Mobile Network Code part of the PLMN, comprising\
            \ 3 digits. \n  If there are only 2 significant digits in the MNC, one\
            \ \"0\" digit shall be inserted \n  at the left side to fill the 3 digits\
            \ coding of MNC.  Pattern: '^[0-9]{3}$'\n<NFType> encoded as a value defined\
            \ in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but \n  with lower case characters\
            \ <Set ID> encoded as a string of characters consisting of \n  alphabetic\
            \ characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that\
            \ \n  shall end with either an alphabetic character or a digit. \n"
          type: string
      type: object
    RecordOperation:
      anyOf:
      - $ref: '#/components/schemas/RecordOperation_anyOf'
      - type: string
      description: Indicate operation made on a record
    ConditionOperator:
      anyOf:
      - $ref: '#/components/schemas/ConditionOperator_anyOf'
      - type: string
      description: TBD
    ComparisonOperator:
      anyOf:
      - $ref: '#/components/schemas/ComparisonOperator_anyOf'
      - type: string
      description: TBD
    SearchExpression:
      description: A logical expression element
      example:
        cond: OR
        units:
        - op: EQ
          tag: ueId
          value: "455345"
        - op: EQ
          tag: supi
          value: imsi-999559807001001
      oneOf:
      - $ref: '#/components/schemas/SearchCondition'
      - $ref: '#/components/schemas/SearchComparison'
      - $ref: '#/components/schemas/RecordIdList'
      type: object
    SearchCondition:
      description: A logical condition
      example:
        cond: OR
        units:
        - op: EQ
          tag: ueId
          value: "455345"
        - op: EQ
          tag: supi
          value: imsi-999559807001001
      properties:
        cond:
          $ref: '#/components/schemas/ConditionOperator'
        units:
          items:
            $ref: '#/components/schemas/SearchExpression'
          minItems: 1
          type: array
        schemaId:
          description: Represents the Identifier of a Meta schema.
          type: string
      required:
      - cond
      - units
      type: object
    SearchComparison:
      description: A comparison to apply on tag/values pairs.
      example:
        op: EQ
        tag: supi
        value: imsi-999559807001001
      properties:
        op:
          $ref: '#/components/schemas/ComparisonOperator'
        tag:
          type: string
        value:
          type: string
      required:
      - op
      - tag
      - value
      type: object
    MetaSchema:
      description: Defines the Meta Schema
      example:
        schemaId: schemaId
        metaTags:
        - sort: false
          tagName: tagName
          keyType: null
          presence: true
        - sort: false
          tagName: tagName
          keyType: null
          presence: true
      properties:
        schemaId:
          description: Represents the Identifier of a Meta schema.
          type: string
        metaTags:
          items:
            $ref: '#/components/schemas/TagType'
          type: array
      required:
      - metaTags
      - schemaId
      type: object
    TagType:
      description: Defines the Tag Type
      example:
        sort: false
        tagName: tagName
        keyType: null
        presence: true
      properties:
        tagName:
          type: string
        keyType:
          $ref: '#/components/schemas/KeyType'
        sort:
          default: false
          type: boolean
        presence:
          type: boolean
      required:
      - keyType
      - tagName
      type: object
    SchemaId:
      description: Represents the Identifier of a Meta schema.
      type: string
    KeyType:
      anyOf:
      - $ref: '#/components/schemas/KeyType_anyOf'
      - type: string
      description: Represents the type of a key.
    RetrieveRecords:
      anyOf:
      - $ref: '#/components/schemas/RetrieveRecords_anyOf'
      - type: string
      description: Indicates the data to be retrieved.
    NotificationInfo:
      example:
        expiredSubscriptions:
        - clientId:
            nfId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            nfSetId: nfSetId
          supportedFeatures: supportedFeatures
          callbackReference: callbackReference
          expiryCallbackReference: expiryCallbackReference
          expiry: 2000-01-23T04:56:07.000+00:00
          expiryNotification: 0
          subFilter:
            operations:
            - null
            - null
            - null
            monitoredResourceUris:
            - null
            - null
        - clientId:
            nfId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            nfSetId: nfSetId
          supportedFeatures: supportedFeatures
          callbackReference: callbackReference
          expiryCallbackReference: expiryCallbackReference
          expiry: 2000-01-23T04:56:07.000+00:00
          expiryNotification: 0
          subFilter:
            operations:
            - null
            - null
            - null
            monitoredResourceUris:
            - null
            - null
      properties:
        expiredSubscriptions:
          items:
            $ref: '#/components/schemas/NotificationSubscription'
          minItems: 1
          type: array
      required:
      - expiredSubscriptions
      type: object
    Uinteger:
      description: "Unsigned Integer, i.e. only value 0 and integers above 0 are permissible."
      minimum: 0
      type: integer
    SupportedFeatures:
      description: |
        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of "0" to "9",  "a" to "f" or "A" to "F" and shall represent the support of 4 features as described in  tableÂ 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
      pattern: "^[A-Fa-f0-9]*$"
      type: string
    ProblemDetails:
      description: Provides additional information in an error response.
      properties:
        type:
          description: String providing an URI formatted according to RFC 3986.
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          type: string
        instance:
          description: String providing an URI formatted according to RFC 3986.
          type: string
        cause:
          description: |
            A machine-readable application error cause specific to this occurrence of the problem.  This IE should be present and provide application-related error information, if available.
          type: string
        invalidParams:
          items:
            $ref: '#/components/schemas/InvalidParam'
          minItems: 1
          type: array
        supportedFeatures:
          description: |
            A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of "0" to "9",  "a" to "f" or "A" to "F" and shall represent the support of 4 features as described in  tableÂ 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
          pattern: "^[A-Fa-f0-9]*$"
          type: string
        accessTokenError:
          $ref: '#/components/schemas/AccessTokenErr'
        accessTokenRequest:
          $ref: '#/components/schemas/AccessTokenReq'
        nrfId:
          description: Fully Qualified Domain Name
          maxLength: 253
          minLength: 4
          pattern: "^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\\.)+[A-Za-z]{2,63}\\\
            .?$"
          type: string
        supportedApiVersions:
          items:
            type: string
          minItems: 1
          type: array
      type: object
    Uri:
      description: String providing an URI formatted according to RFC 3986.
      type: string
    InvalidParam:
      description: It contains an invalid parameter and a related description.
      properties:
        param:
          description: |
            If the invalid parameter is an attribute in a JSON body, this IE shall contain the  attribute's name and shall be encoded as a JSON Pointer. If the invalid parameter is  an HTTP header, this IE shall be formatted as the concatenation of the string "header "  plus the name of such header. If the invalid parameter is a query parameter, this IE  shall be formatted as the concatenation of the string "query " plus the name of such  query parameter. If the invalid parameter is a variable part in the path of a resource  URI, this IE shall contain the name of the variable, including the symbols "{" and "}"  used in OpenAPI specification as the notation to represent variable path segments.
          type: string
        reason:
          description: |
            A human-readable reason, e.g. "must be a positive integer". In cases involving failed  operations in a PATCH request, the reason string should identify the operation that  failed using the operation's array index to assist in correlation of the invalid  parameter with the failed operation, e.g." Replacement value invalid for attribute  (failed operation index= 4)"
          type: string
      required:
      - param
      type: object
    Fqdn:
      description: Fully Qualified Domain Name
      maxLength: 253
      minLength: 4
      pattern: "^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\\.)+[A-Za-z]{2,63}\\\
        .?$"
      type: string
    PatchItem:
      description: it contains information on data to be changed.
      example:
        op: null
        path: path
        from: from
        value: ""
      properties:
        op:
          $ref: '#/components/schemas/PatchOperation'
        path:
          description: |
            contains a JSON pointer value (as defined in IETF RFC 6901) that references a location of a resource on which the patch operation shall be performed.
          type: string
        from:
          description: |
            indicates the path of the source JSON element (according to JSON Pointer syntax) being moved or copied to the location indicated by the "path" attribute.
          type: string
        value: {}
      required:
      - op
      - path
      type: object
    PatchOperation:
      anyOf:
      - $ref: '#/components/schemas/PatchOperation_anyOf'
      - type: string
      description: Operations as defined in IETF RFC 6902.
    PatchResult:
      description: The execution report result on failed modification.
      example:
        report:
        - path: path
          reason: reason
        - path: path
          reason: reason
      properties:
        report:
          description: |
            The execution report contains an array of report items. Each report item indicates one  failed modification.
          items:
            $ref: '#/components/schemas/ReportItem'
          minItems: 1
          type: array
      required:
      - report
      type: object
    ReportItem:
      description: indicates performed modivications.
      example:
        path: path
        reason: reason
      properties:
        path:
          description: |
            Contains a JSON pointer value (as defined in IETF RFC 6901) that references a  location of a resource to which the modification is subject.
          type: string
        reason:
          description: |
            A human-readable reason providing details on the reported modification failure.  The reason string should identify the operation that failed using the operation's  array index to assist in correlation of the invalid parameter with the failed  operation, e.g. "Replacement value invalid for attribute (failed operation index= 4)".
          type: string
      required:
      - path
      type: object
    DateTime:
      description: string with format 'date-time' as defined in OpenAPI.
      format: date-time
      type: string
    NfInstanceId:
      description: "String uniquely identifying a NF instance. The format of the NF\
        \ Instance ID shall be a  Universally Unique Identifier (UUID) version 4,\
        \ as described in IETF RFC 4122. \n"
      format: uuid
      type: string
    NfSetId:
      description: "NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted\
        \ as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\"\
        , or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC>\
        \ encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC>\
        \ encoding the Mobile Network Code part of the PLMN, comprising 3 digits.\
        \ \n  If there are only 2 significant digits in the MNC, one \"0\" digit shall\
        \ be inserted \n  at the left side to fill the 3 digits coding of MNC.  Pattern:\
        \ '^[0-9]{3}$'\n<NFType> encoded as a value defined in Table 6.1.6.3.3-1 of\
        \ 3GPP TS 29.510 but \n  with lower case characters <Set ID> encoded as a\
        \ string of characters consisting of \n  alphabetic characters (A-Z and a-z),\
        \ digits (0-9) and/or the hyphen (-) and that \n  shall end with either an\
        \ alphabetic character or a digit. \n"
      type: string
    AccessTokenErr:
      description: Error returned in the access token response message
      properties:
        error:
          enum:
          - invalid_request
          - invalid_client
          - invalid_grant
          - unauthorized_client
          - unsupported_grant_type
          - invalid_scope
          type: string
        error_description:
          type: string
        error_uri:
          type: string
      required:
      - error
      type: object
    AccessTokenReq:
      description: Contains information related to the access token request
      properties:
        grant_type:
          enum:
          - client_credentials
          type: string
        nfInstanceId:
          description: "String uniquely identifying a NF instance. The format of the\
            \ NF Instance ID shall be a  Universally Unique Identifier (UUID) version\
            \ 4, as described in IETF RFC 4122. \n"
          format: uuid
          type: string
        nfType:
          $ref: '#/components/schemas/NFType'
        targetNfType:
          $ref: '#/components/schemas/NFType'
        scope:
          pattern: "^([a-zA-Z0-9_:-]+)( [a-zA-Z0-9_:-]+)*$"
          type: string
        targetNfInstanceId:
          description: "String uniquely identifying a NF instance. The format of the\
            \ NF Instance ID shall be a  Universally Unique Identifier (UUID) version\
            \ 4, as described in IETF RFC 4122. \n"
          format: uuid
          type: string
        requesterPlmn:
          $ref: '#/components/schemas/PlmnId'
        requesterPlmnList:
          items:
            $ref: '#/components/schemas/PlmnId'
          minItems: 2
          type: array
        requesterSnssaiList:
          items:
            $ref: '#/components/schemas/Snssai'
          minItems: 1
          type: array
        requesterFqdn:
          description: Fully Qualified Domain Name
          maxLength: 253
          minLength: 4
          pattern: "^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\\.)+[A-Za-z]{2,63}\\\
            .?$"
          type: string
        requesterSnpnList:
          items:
            $ref: '#/components/schemas/PlmnIdNid'
          minItems: 1
          type: array
        targetPlmn:
          $ref: '#/components/schemas/PlmnId'
        targetSnpn:
          $ref: '#/components/schemas/PlmnIdNid'
        targetSnssaiList:
          items:
            $ref: '#/components/schemas/Snssai'
          minItems: 1
          type: array
        targetNsiList:
          items:
            type: string
          minItems: 1
          type: array
        targetNfSetId:
          description: "NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted\
            \ as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\"\
            , or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with \
            \ <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)\
            \  <MNC> encoding the Mobile Network Code part of the PLMN, comprising\
            \ 3 digits. \n  If there are only 2 significant digits in the MNC, one\
            \ \"0\" digit shall be inserted \n  at the left side to fill the 3 digits\
            \ coding of MNC.  Pattern: '^[0-9]{3}$'\n<NFType> encoded as a value defined\
            \ in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but \n  with lower case characters\
            \ <Set ID> encoded as a string of characters consisting of \n  alphabetic\
            \ characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that\
            \ \n  shall end with either an alphabetic character or a digit. \n"
          type: string
        targetNfServiceSetId:
          description: "NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003)\
            \ formatted as the following  string \"set<Set ID>.sn<Service Name>.nfi<NF\
            \ Instance ID>.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\"\
            \ with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)\
            \   <MNC> encoding the Mobile Network Code part of the PLMN, comprising\
            \ 3 digits. \n  If there are only 2 significant digits in the MNC, one\
            \ \"0\" digit shall be inserted \n  at the left side to fill the 3 digits\
            \ coding of MNC.  Pattern: '^[0-9]{3}$'\n<NID> encoded as defined in clause\_\
            5.4.2 (\"Nid\" data type definition)  <NFInstanceId> encoded as defined\
            \ in clause 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510\
            \  <Set ID> encoded as a string of characters consisting of alphabetic\
            \ \n  characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and\
            \ that shall end \n  with either an alphabetic character or a digit.\n"
          type: string
        hnrfAccessTokenUri:
          description: String providing an URI formatted according to RFC 3986.
          type: string
        sourceNfInstanceId:
          description: "String uniquely identifying a NF instance. The format of the\
            \ NF Instance ID shall be a  Universally Unique Identifier (UUID) version\
            \ 4, as described in IETF RFC 4122. \n"
          format: uuid
          type: string
      required:
      - grant_type
      - nfInstanceId
      - scope
      type: object
    NFType:
      anyOf:
      - $ref: '#/components/schemas/NFType_anyOf'
      - type: string
      description: NF types known to NRF
    PlmnId:
      description: |
        When PlmnId needs to be converted to string (e.g. when used in maps as key), the string  shall be composed of three digits "mcc" followed by "-" and two or three digits "mnc".
      properties:
        mcc:
          description: "Mobile Country Code part of the PLMN, comprising 3 digits,\
            \ as defined in clause 9.3.3.5 of 3GPP TS 38.413. \n"
          pattern: "^\\d{3}$"
          type: string
        mnc:
          description: "Mobile Network Code part of the PLMN, comprising 2 or 3 digits,\
            \ as defined in clause 9.3.3.5 of 3GPP TS 38.413."
          pattern: "^\\d{2,3}$"
          type: string
      required:
      - mcc
      - mnc
      type: object
    Mcc:
      description: "Mobile Country Code part of the PLMN, comprising 3 digits, as\
        \ defined in clause 9.3.3.5 of 3GPP TS 38.413. \n"
      pattern: "^\\d{3}$"
      type: string
    Mnc:
      description: "Mobile Network Code part of the PLMN, comprising 2 or 3 digits,\
        \ as defined in clause 9.3.3.5 of 3GPP TS 38.413."
      pattern: "^\\d{2,3}$"
      type: string
    Snssai:
      description: |
        When Snssai needs to be converted to string (e.g. when used in maps as key), the string shall be composed of one to three digits "sst" optionally followed by "-" and 6 hexadecimal digits "sd".
      properties:
        sst:
          description: "Unsigned integer, within the range 0 to 255, representing\
            \ the Slice/Service Type.  It indicates the expected Network Slice behaviour\
            \ in terms of features and services. Values 0 to 127 correspond to the\
            \ standardized SST range. Values 128 to 255 correspond  to the Operator-specific\
            \ range. See clause 28.4.2 of 3GPP TS 23.003. Standardized values are\
            \ defined in clause 5.15.2.2 of 3GPP TS 23.501. \n"
          maximum: 255
          minimum: 0
          type: integer
        sd:
          description: |
            3-octet string, representing the Slice Differentiator, in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the SD shall appear first in the string, and the character representing the 4 least significant bit of the SD shall appear last in the string. This is an optional parameter that complements the Slice/Service type(s) to allow to  differentiate amongst multiple Network Slices of the same Slice/Service type. This IE shall be absent if no SD value is associated with the SST.
          pattern: "^[A-Fa-f0-9]{6}$"
          type: string
      required:
      - sst
      type: object
    PlmnIdNid:
      description: |
        Contains the serving core network operator PLMN ID and, for an SNPN, the NID that together with the PLMN ID identifies the SNPN.
      properties:
        mcc:
          description: "Mobile Country Code part of the PLMN, comprising 3 digits,\
            \ as defined in clause 9.3.3.5 of 3GPP TS 38.413. \n"
          pattern: "^\\d{3}$"
          type: string
        mnc:
          description: "Mobile Network Code part of the PLMN, comprising 2 or 3 digits,\
            \ as defined in clause 9.3.3.5 of 3GPP TS 38.413."
          pattern: "^\\d{2,3}$"
          type: string
        nid:
          description: "This represents the Network Identifier, which together with\
            \ a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS\
            \ 23.501 clause 5.30.2.1). \n"
          pattern: "^[A-Fa-f0-9]{11}$"
          type: string
      required:
      - mcc
      - mnc
      type: object
    Nid:
      description: "This represents the Network Identifier, which together with a\
        \ PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501\
        \ clause 5.30.2.1). \n"
      pattern: "^[A-Fa-f0-9]{11}$"
      type: string
    NfServiceSetId:
      description: "NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003)\
        \ formatted as the following  string \"set<Set ID>.sn<Service Name>.nfi<NF\
        \ Instance ID>.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\"\
        \ with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)\
        \   <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3\
        \ digits. \n  If there are only 2 significant digits in the MNC, one \"0\"\
        \ digit shall be inserted \n  at the left side to fill the 3 digits coding\
        \ of MNC.  Pattern: '^[0-9]{3}$'\n<NID> encoded as defined in clause\_5.4.2\
        \ (\"Nid\" data type definition)  <NFInstanceId> encoded as defined in clause\
        \ 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510  <Set ID> encoded\
        \ as a string of characters consisting of alphabetic \n  characters (A-Z and\
        \ a-z), digits (0-9) and/or the hyphen (-) and that shall end \n  with either\
        \ an alphabetic character or a digit.\n"
      type: string
    GetBlockList_200_response:
      properties:
        blocks:
          description: "an array of Block parts, can be empty"
          items:
            $ref: '#/components/schemas/Block'
          type: array
      type: object
    RecordOperation_anyOf:
      enum:
      - CREATED
      - UPDATED
      - DELETED
      type: string
      example: null
    ConditionOperator_anyOf:
      enum:
      - AND
      - OR
      - NOT
      type: string
      example: null
    ComparisonOperator_anyOf:
      enum:
      - EQ
      - NEQ
      - GT
      - GTE
      - LT
      - LTE
      type: string
      example: null
    KeyType_anyOf:
      enum:
      - UNIQUE_KEY
      - SEARCH_KEY
      - COUNT_KEY
      - SEARCH_AND_COUNT_KEY
      - OTHER_TAG
      type: string
      example: null
    RetrieveRecords_anyOf:
      enum:
      - ONLY_META
      - META_AND_BLOCKS
      type: string
      example: null
    PatchOperation_anyOf:
      enum:
      - add
      - copy
      - move
      - remove
      - replace
      - test
      type: string
      example: null
    NFType_anyOf:
      enum:
      - NRF
      - UDM
      - AMF
      - SMF
      - AUSF
      - NEF
      - PCF
      - SMSF
      - NSSF
      - UDR
      - LMF
      - GMLC
      - 5G_EIR
      - SEPP
      - UPF
      - N3IWF
      - AF
      - UDSF
      - BSF
      - CHF
      - NWDAF
      - PCSCF
      - CBCF
      - HSS
      - UCMF
      - SOR_AF
      - SPAF
      - MME
      - SCSAS
      - SCEF
      - SCP
      - NSSAAF
      - ICSCF
      - SCSCF
      - DRA
      - IMS_AS
      - AANF
      - 5G_DDNMF
      - NSACF
      - MFAF
      - EASDF
      - DCCF
      - MB_SMF
      - TSCTSF
      - ADRF
      - GBA_BSF
      - CEF
      - MB_UPF
      - NSWOF
      - PKMF
      - MNPF
      - SMS_GMSC
      - SMS_IWMSC
      - MBSF
      - MBSTF
      - PANF
      type: string
      example: null
  securitySchemes:
    oAuth2ClientCredentials:
      flows:
        clientCredentials:
          scopes:
            nudsf-dr: Access to the nudsf-dr API
          tokenUrl: "{nrfApiRoot}/oauth2/token"
      type: oauth2
