/*
Nudsf_DataRepository

Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudsf_DataRepository

import (
	"encoding/json"
	"fmt"
)

// ConditionOperatorAnyOf the model 'ConditionOperatorAnyOf'
type ConditionOperatorAnyOf string

// List of ConditionOperator_anyOf
const (
	AND ConditionOperatorAnyOf = "AND"
	OR ConditionOperatorAnyOf = "OR"
	NOT ConditionOperatorAnyOf = "NOT"
)

// All allowed values of ConditionOperatorAnyOf enum
var AllowedConditionOperatorAnyOfEnumValues = []ConditionOperatorAnyOf{
	"AND",
	"OR",
	"NOT",
}

func (v *ConditionOperatorAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConditionOperatorAnyOf(value)
	for _, existing := range AllowedConditionOperatorAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConditionOperatorAnyOf", value)
}

// NewConditionOperatorAnyOfFromValue returns a pointer to a valid ConditionOperatorAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConditionOperatorAnyOfFromValue(v string) (*ConditionOperatorAnyOf, error) {
	ev := ConditionOperatorAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConditionOperatorAnyOf: valid values are %v", v, AllowedConditionOperatorAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConditionOperatorAnyOf) IsValid() bool {
	for _, existing := range AllowedConditionOperatorAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConditionOperator_anyOf value
func (v ConditionOperatorAnyOf) Ptr() *ConditionOperatorAnyOf {
	return &v
}

type NullableConditionOperatorAnyOf struct {
	value *ConditionOperatorAnyOf
	isSet bool
}

func (v NullableConditionOperatorAnyOf) Get() *ConditionOperatorAnyOf {
	return v.value
}

func (v *NullableConditionOperatorAnyOf) Set(val *ConditionOperatorAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionOperatorAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionOperatorAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionOperatorAnyOf(val *ConditionOperatorAnyOf) *NullableConditionOperatorAnyOf {
	return &NullableConditionOperatorAnyOf{value: val, isSet: true}
}

func (v NullableConditionOperatorAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionOperatorAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

