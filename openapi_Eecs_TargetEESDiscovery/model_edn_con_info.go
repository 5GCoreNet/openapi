/*
ECS Target EES Discovery API

API for Target EES Discovery.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eecs_TargetEESDiscovery

import (
	"encoding/json"
)

// checks if the EDNConInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EDNConInfo{}

// EDNConInfo Represents an EDN connection information .
type EDNConInfo struct {
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").
	Dnn            *string         `json:"dnn,omitempty"`
	Snssai         *Snssai         `json:"snssai,omitempty"`
	EdnTopoSrvArea *LocationArea5G `json:"ednTopoSrvArea,omitempty"`
}

// NewEDNConInfo instantiates a new EDNConInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEDNConInfo() *EDNConInfo {
	this := EDNConInfo{}
	return &this
}

// NewEDNConInfoWithDefaults instantiates a new EDNConInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEDNConInfoWithDefaults() *EDNConInfo {
	this := EDNConInfo{}
	return &this
}

// GetDnn returns the Dnn field value if set, zero value otherwise.
func (o *EDNConInfo) GetDnn() string {
	if o == nil || IsNil(o.Dnn) {
		var ret string
		return ret
	}
	return *o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EDNConInfo) GetDnnOk() (*string, bool) {
	if o == nil || IsNil(o.Dnn) {
		return nil, false
	}
	return o.Dnn, true
}

// HasDnn returns a boolean if a field has been set.
func (o *EDNConInfo) HasDnn() bool {
	if o != nil && !IsNil(o.Dnn) {
		return true
	}

	return false
}

// SetDnn gets a reference to the given string and assigns it to the Dnn field.
func (o *EDNConInfo) SetDnn(v string) {
	o.Dnn = &v
}

// GetSnssai returns the Snssai field value if set, zero value otherwise.
func (o *EDNConInfo) GetSnssai() Snssai {
	if o == nil || IsNil(o.Snssai) {
		var ret Snssai
		return ret
	}
	return *o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EDNConInfo) GetSnssaiOk() (*Snssai, bool) {
	if o == nil || IsNil(o.Snssai) {
		return nil, false
	}
	return o.Snssai, true
}

// HasSnssai returns a boolean if a field has been set.
func (o *EDNConInfo) HasSnssai() bool {
	if o != nil && !IsNil(o.Snssai) {
		return true
	}

	return false
}

// SetSnssai gets a reference to the given Snssai and assigns it to the Snssai field.
func (o *EDNConInfo) SetSnssai(v Snssai) {
	o.Snssai = &v
}

// GetEdnTopoSrvArea returns the EdnTopoSrvArea field value if set, zero value otherwise.
func (o *EDNConInfo) GetEdnTopoSrvArea() LocationArea5G {
	if o == nil || IsNil(o.EdnTopoSrvArea) {
		var ret LocationArea5G
		return ret
	}
	return *o.EdnTopoSrvArea
}

// GetEdnTopoSrvAreaOk returns a tuple with the EdnTopoSrvArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EDNConInfo) GetEdnTopoSrvAreaOk() (*LocationArea5G, bool) {
	if o == nil || IsNil(o.EdnTopoSrvArea) {
		return nil, false
	}
	return o.EdnTopoSrvArea, true
}

// HasEdnTopoSrvArea returns a boolean if a field has been set.
func (o *EDNConInfo) HasEdnTopoSrvArea() bool {
	if o != nil && !IsNil(o.EdnTopoSrvArea) {
		return true
	}

	return false
}

// SetEdnTopoSrvArea gets a reference to the given LocationArea5G and assigns it to the EdnTopoSrvArea field.
func (o *EDNConInfo) SetEdnTopoSrvArea(v LocationArea5G) {
	o.EdnTopoSrvArea = &v
}

func (o EDNConInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EDNConInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dnn) {
		toSerialize["dnn"] = o.Dnn
	}
	if !IsNil(o.Snssai) {
		toSerialize["snssai"] = o.Snssai
	}
	if !IsNil(o.EdnTopoSrvArea) {
		toSerialize["ednTopoSrvArea"] = o.EdnTopoSrvArea
	}
	return toSerialize, nil
}

type NullableEDNConInfo struct {
	value *EDNConInfo
	isSet bool
}

func (v NullableEDNConInfo) Get() *EDNConInfo {
	return v.value
}

func (v *NullableEDNConInfo) Set(val *EDNConInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEDNConInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEDNConInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEDNConInfo(val *EDNConInfo) *NullableEDNConInfo {
	return &NullableEDNConInfo{value: val, isSet: true}
}

func (v NullableEDNConInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEDNConInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
