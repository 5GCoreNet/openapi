/*
EES EEL Managed ACR Service

EES EEL Managed ACR Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EELManagedACR

import (
	"encoding/json"
)

// checks if the ACTStatusSubsc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACTStatusSubsc{}

// ACTStatusSubsc Represents the parameters to request the creation of a subscription to ACT status reporting. 
type ACTStatusSubsc struct {
	// Contains the application identifier of the EAS, e.g. URI, FQDN.
	EasId string `json:"easId"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationUri string `json:"notificationUri"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewACTStatusSubsc instantiates a new ACTStatusSubsc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACTStatusSubsc(easId string, notificationUri string) *ACTStatusSubsc {
	this := ACTStatusSubsc{}
	this.EasId = easId
	this.NotificationUri = notificationUri
	return &this
}

// NewACTStatusSubscWithDefaults instantiates a new ACTStatusSubsc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACTStatusSubscWithDefaults() *ACTStatusSubsc {
	this := ACTStatusSubsc{}
	return &this
}

// GetEasId returns the EasId field value
func (o *ACTStatusSubsc) GetEasId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EasId
}

// GetEasIdOk returns a tuple with the EasId field value
// and a boolean to check if the value has been set.
func (o *ACTStatusSubsc) GetEasIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EasId, true
}

// SetEasId sets field value
func (o *ACTStatusSubsc) SetEasId(v string) {
	o.EasId = v
}

// GetNotificationUri returns the NotificationUri field value
func (o *ACTStatusSubsc) GetNotificationUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationUri
}

// GetNotificationUriOk returns a tuple with the NotificationUri field value
// and a boolean to check if the value has been set.
func (o *ACTStatusSubsc) GetNotificationUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationUri, true
}

// SetNotificationUri sets field value
func (o *ACTStatusSubsc) SetNotificationUri(v string) {
	o.NotificationUri = v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *ACTStatusSubsc) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACTStatusSubsc) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *ACTStatusSubsc) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *ACTStatusSubsc) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o ACTStatusSubsc) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACTStatusSubsc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["easId"] = o.EasId
	toSerialize["notificationUri"] = o.NotificationUri
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableACTStatusSubsc struct {
	value *ACTStatusSubsc
	isSet bool
}

func (v NullableACTStatusSubsc) Get() *ACTStatusSubsc {
	return v.value
}

func (v *NullableACTStatusSubsc) Set(val *ACTStatusSubsc) {
	v.value = val
	v.isSet = true
}

func (v NullableACTStatusSubsc) IsSet() bool {
	return v.isSet
}

func (v *NullableACTStatusSubsc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACTStatusSubsc(val *ACTStatusSubsc) *NullableACTStatusSubsc {
	return &NullableACTStatusSubsc{value: val, isSet: true}
}

func (v NullableACTStatusSubsc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACTStatusSubsc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


