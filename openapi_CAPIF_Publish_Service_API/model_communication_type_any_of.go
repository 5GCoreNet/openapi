/*
CAPIF_Publish_Service_API

API for publishing service APIs.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CAPIF_Publish_Service_API

import (
	"encoding/json"
	"fmt"
)

// CommunicationTypeAnyOf the model 'CommunicationTypeAnyOf'
type CommunicationTypeAnyOf string

// List of CommunicationType_anyOf
const (
	REQUEST_RESPONSE CommunicationTypeAnyOf = "REQUEST_RESPONSE"
	SUBSCRIBE_NOTIFY CommunicationTypeAnyOf = "SUBSCRIBE_NOTIFY"
)

// All allowed values of CommunicationTypeAnyOf enum
var AllowedCommunicationTypeAnyOfEnumValues = []CommunicationTypeAnyOf{
	"REQUEST_RESPONSE",
	"SUBSCRIBE_NOTIFY",
}

func (v *CommunicationTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommunicationTypeAnyOf(value)
	for _, existing := range AllowedCommunicationTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommunicationTypeAnyOf", value)
}

// NewCommunicationTypeAnyOfFromValue returns a pointer to a valid CommunicationTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommunicationTypeAnyOfFromValue(v string) (*CommunicationTypeAnyOf, error) {
	ev := CommunicationTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommunicationTypeAnyOf: valid values are %v", v, AllowedCommunicationTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommunicationTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedCommunicationTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommunicationType_anyOf value
func (v CommunicationTypeAnyOf) Ptr() *CommunicationTypeAnyOf {
	return &v
}

type NullableCommunicationTypeAnyOf struct {
	value *CommunicationTypeAnyOf
	isSet bool
}

func (v NullableCommunicationTypeAnyOf) Get() *CommunicationTypeAnyOf {
	return v.value
}

func (v *NullableCommunicationTypeAnyOf) Set(val *CommunicationTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunicationTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunicationTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunicationTypeAnyOf(val *CommunicationTypeAnyOf) *NullableCommunicationTypeAnyOf {
	return &NullableCommunicationTypeAnyOf{value: val, isSet: true}
}

func (v NullableCommunicationTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunicationTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

