/*
3GPP 5GC NRM

OAS 3.0.1 specification of the 5GC NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_5GcNrm

import (
	"encoding/json"
)

// checks if the ManagedElementSingleAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedElementSingleAllOf1{}

// ManagedElementSingleAllOf1 struct for ManagedElementSingleAllOf1
type ManagedElementSingleAllOf1 struct {
	AmfFunction []AmfFunctionSingle `json:"AmfFunction,omitempty"`
	SmfFunction []SmfFunctionSingle `json:"SmfFunction,omitempty"`
	UpfFunction []UpfFunctionSingle `json:"UpfFunction,omitempty"`
	N3iwfFunction []N3iwfFunctionSingle `json:"N3iwfFunction,omitempty"`
	PcfFunction []PcfFunctionSingle `json:"PcfFunction,omitempty"`
	AusfFunction []AusfFunctionSingle `json:"AusfFunction,omitempty"`
	UdmFunction []UdmFunctionSingle `json:"UdmFunction,omitempty"`
	UdrFunction []UdrFunctionSingle `json:"UdrFunction,omitempty"`
	UdsfFunction []UdsfFunctionSingle `json:"UdsfFunction,omitempty"`
	NrfFunction []NrfFunctionSingle `json:"NrfFunction,omitempty"`
	NssfFunction []NssfFunctionSingle `json:"NssfFunction,omitempty"`
	SmsfFunction []SmsfFunctionSingle `json:"SmsfFunction,omitempty"`
	LmfFunction []LmfFunctionSingle `json:"LmfFunction,omitempty"`
	NgeirFunction []NgeirFunctionSingle `json:"NgeirFunction,omitempty"`
	SeppFunction []SeppFunctionSingle `json:"SeppFunction,omitempty"`
	NwdafFunction []NwdafFunctionSingle `json:"NwdafFunction,omitempty"`
	ScpFunction []ScpFunctionSingle `json:"ScpFunction,omitempty"`
	NefFunction []NefFunctionSingle `json:"NefFunction,omitempty"`
	Configurable5QISet []Configurable5QISetSingle `json:"Configurable5QISet,omitempty"`
	Dynamic5QISet []Dynamic5QISetSingle `json:"Dynamic5QISet,omitempty"`
	EcmConnectionInfo []EcmConnectionInfoSingle `json:"EcmConnectionInfo,omitempty"`
	EASDFFunction []EASDFFunctionSingle `json:"EASDFFunction,omitempty"`
}

// NewManagedElementSingleAllOf1 instantiates a new ManagedElementSingleAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedElementSingleAllOf1() *ManagedElementSingleAllOf1 {
	this := ManagedElementSingleAllOf1{}
	return &this
}

// NewManagedElementSingleAllOf1WithDefaults instantiates a new ManagedElementSingleAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedElementSingleAllOf1WithDefaults() *ManagedElementSingleAllOf1 {
	this := ManagedElementSingleAllOf1{}
	return &this
}

// GetAmfFunction returns the AmfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetAmfFunction() []AmfFunctionSingle {
	if o == nil || isNil(o.AmfFunction) {
		var ret []AmfFunctionSingle
		return ret
	}
	return o.AmfFunction
}

// GetAmfFunctionOk returns a tuple with the AmfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetAmfFunctionOk() ([]AmfFunctionSingle, bool) {
	if o == nil || isNil(o.AmfFunction) {
		return nil, false
	}
	return o.AmfFunction, true
}

// HasAmfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasAmfFunction() bool {
	if o != nil && !isNil(o.AmfFunction) {
		return true
	}

	return false
}

// SetAmfFunction gets a reference to the given []AmfFunctionSingle and assigns it to the AmfFunction field.
func (o *ManagedElementSingleAllOf1) SetAmfFunction(v []AmfFunctionSingle) {
	o.AmfFunction = v
}

// GetSmfFunction returns the SmfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetSmfFunction() []SmfFunctionSingle {
	if o == nil || isNil(o.SmfFunction) {
		var ret []SmfFunctionSingle
		return ret
	}
	return o.SmfFunction
}

// GetSmfFunctionOk returns a tuple with the SmfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetSmfFunctionOk() ([]SmfFunctionSingle, bool) {
	if o == nil || isNil(o.SmfFunction) {
		return nil, false
	}
	return o.SmfFunction, true
}

// HasSmfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasSmfFunction() bool {
	if o != nil && !isNil(o.SmfFunction) {
		return true
	}

	return false
}

// SetSmfFunction gets a reference to the given []SmfFunctionSingle and assigns it to the SmfFunction field.
func (o *ManagedElementSingleAllOf1) SetSmfFunction(v []SmfFunctionSingle) {
	o.SmfFunction = v
}

// GetUpfFunction returns the UpfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetUpfFunction() []UpfFunctionSingle {
	if o == nil || isNil(o.UpfFunction) {
		var ret []UpfFunctionSingle
		return ret
	}
	return o.UpfFunction
}

// GetUpfFunctionOk returns a tuple with the UpfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetUpfFunctionOk() ([]UpfFunctionSingle, bool) {
	if o == nil || isNil(o.UpfFunction) {
		return nil, false
	}
	return o.UpfFunction, true
}

// HasUpfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasUpfFunction() bool {
	if o != nil && !isNil(o.UpfFunction) {
		return true
	}

	return false
}

// SetUpfFunction gets a reference to the given []UpfFunctionSingle and assigns it to the UpfFunction field.
func (o *ManagedElementSingleAllOf1) SetUpfFunction(v []UpfFunctionSingle) {
	o.UpfFunction = v
}

// GetN3iwfFunction returns the N3iwfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetN3iwfFunction() []N3iwfFunctionSingle {
	if o == nil || isNil(o.N3iwfFunction) {
		var ret []N3iwfFunctionSingle
		return ret
	}
	return o.N3iwfFunction
}

// GetN3iwfFunctionOk returns a tuple with the N3iwfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetN3iwfFunctionOk() ([]N3iwfFunctionSingle, bool) {
	if o == nil || isNil(o.N3iwfFunction) {
		return nil, false
	}
	return o.N3iwfFunction, true
}

// HasN3iwfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasN3iwfFunction() bool {
	if o != nil && !isNil(o.N3iwfFunction) {
		return true
	}

	return false
}

// SetN3iwfFunction gets a reference to the given []N3iwfFunctionSingle and assigns it to the N3iwfFunction field.
func (o *ManagedElementSingleAllOf1) SetN3iwfFunction(v []N3iwfFunctionSingle) {
	o.N3iwfFunction = v
}

// GetPcfFunction returns the PcfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetPcfFunction() []PcfFunctionSingle {
	if o == nil || isNil(o.PcfFunction) {
		var ret []PcfFunctionSingle
		return ret
	}
	return o.PcfFunction
}

// GetPcfFunctionOk returns a tuple with the PcfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetPcfFunctionOk() ([]PcfFunctionSingle, bool) {
	if o == nil || isNil(o.PcfFunction) {
		return nil, false
	}
	return o.PcfFunction, true
}

// HasPcfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasPcfFunction() bool {
	if o != nil && !isNil(o.PcfFunction) {
		return true
	}

	return false
}

// SetPcfFunction gets a reference to the given []PcfFunctionSingle and assigns it to the PcfFunction field.
func (o *ManagedElementSingleAllOf1) SetPcfFunction(v []PcfFunctionSingle) {
	o.PcfFunction = v
}

// GetAusfFunction returns the AusfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetAusfFunction() []AusfFunctionSingle {
	if o == nil || isNil(o.AusfFunction) {
		var ret []AusfFunctionSingle
		return ret
	}
	return o.AusfFunction
}

// GetAusfFunctionOk returns a tuple with the AusfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetAusfFunctionOk() ([]AusfFunctionSingle, bool) {
	if o == nil || isNil(o.AusfFunction) {
		return nil, false
	}
	return o.AusfFunction, true
}

// HasAusfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasAusfFunction() bool {
	if o != nil && !isNil(o.AusfFunction) {
		return true
	}

	return false
}

// SetAusfFunction gets a reference to the given []AusfFunctionSingle and assigns it to the AusfFunction field.
func (o *ManagedElementSingleAllOf1) SetAusfFunction(v []AusfFunctionSingle) {
	o.AusfFunction = v
}

// GetUdmFunction returns the UdmFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetUdmFunction() []UdmFunctionSingle {
	if o == nil || isNil(o.UdmFunction) {
		var ret []UdmFunctionSingle
		return ret
	}
	return o.UdmFunction
}

// GetUdmFunctionOk returns a tuple with the UdmFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetUdmFunctionOk() ([]UdmFunctionSingle, bool) {
	if o == nil || isNil(o.UdmFunction) {
		return nil, false
	}
	return o.UdmFunction, true
}

// HasUdmFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasUdmFunction() bool {
	if o != nil && !isNil(o.UdmFunction) {
		return true
	}

	return false
}

// SetUdmFunction gets a reference to the given []UdmFunctionSingle and assigns it to the UdmFunction field.
func (o *ManagedElementSingleAllOf1) SetUdmFunction(v []UdmFunctionSingle) {
	o.UdmFunction = v
}

// GetUdrFunction returns the UdrFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetUdrFunction() []UdrFunctionSingle {
	if o == nil || isNil(o.UdrFunction) {
		var ret []UdrFunctionSingle
		return ret
	}
	return o.UdrFunction
}

// GetUdrFunctionOk returns a tuple with the UdrFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetUdrFunctionOk() ([]UdrFunctionSingle, bool) {
	if o == nil || isNil(o.UdrFunction) {
		return nil, false
	}
	return o.UdrFunction, true
}

// HasUdrFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasUdrFunction() bool {
	if o != nil && !isNil(o.UdrFunction) {
		return true
	}

	return false
}

// SetUdrFunction gets a reference to the given []UdrFunctionSingle and assigns it to the UdrFunction field.
func (o *ManagedElementSingleAllOf1) SetUdrFunction(v []UdrFunctionSingle) {
	o.UdrFunction = v
}

// GetUdsfFunction returns the UdsfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetUdsfFunction() []UdsfFunctionSingle {
	if o == nil || isNil(o.UdsfFunction) {
		var ret []UdsfFunctionSingle
		return ret
	}
	return o.UdsfFunction
}

// GetUdsfFunctionOk returns a tuple with the UdsfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetUdsfFunctionOk() ([]UdsfFunctionSingle, bool) {
	if o == nil || isNil(o.UdsfFunction) {
		return nil, false
	}
	return o.UdsfFunction, true
}

// HasUdsfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasUdsfFunction() bool {
	if o != nil && !isNil(o.UdsfFunction) {
		return true
	}

	return false
}

// SetUdsfFunction gets a reference to the given []UdsfFunctionSingle and assigns it to the UdsfFunction field.
func (o *ManagedElementSingleAllOf1) SetUdsfFunction(v []UdsfFunctionSingle) {
	o.UdsfFunction = v
}

// GetNrfFunction returns the NrfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetNrfFunction() []NrfFunctionSingle {
	if o == nil || isNil(o.NrfFunction) {
		var ret []NrfFunctionSingle
		return ret
	}
	return o.NrfFunction
}

// GetNrfFunctionOk returns a tuple with the NrfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetNrfFunctionOk() ([]NrfFunctionSingle, bool) {
	if o == nil || isNil(o.NrfFunction) {
		return nil, false
	}
	return o.NrfFunction, true
}

// HasNrfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasNrfFunction() bool {
	if o != nil && !isNil(o.NrfFunction) {
		return true
	}

	return false
}

// SetNrfFunction gets a reference to the given []NrfFunctionSingle and assigns it to the NrfFunction field.
func (o *ManagedElementSingleAllOf1) SetNrfFunction(v []NrfFunctionSingle) {
	o.NrfFunction = v
}

// GetNssfFunction returns the NssfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetNssfFunction() []NssfFunctionSingle {
	if o == nil || isNil(o.NssfFunction) {
		var ret []NssfFunctionSingle
		return ret
	}
	return o.NssfFunction
}

// GetNssfFunctionOk returns a tuple with the NssfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetNssfFunctionOk() ([]NssfFunctionSingle, bool) {
	if o == nil || isNil(o.NssfFunction) {
		return nil, false
	}
	return o.NssfFunction, true
}

// HasNssfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasNssfFunction() bool {
	if o != nil && !isNil(o.NssfFunction) {
		return true
	}

	return false
}

// SetNssfFunction gets a reference to the given []NssfFunctionSingle and assigns it to the NssfFunction field.
func (o *ManagedElementSingleAllOf1) SetNssfFunction(v []NssfFunctionSingle) {
	o.NssfFunction = v
}

// GetSmsfFunction returns the SmsfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetSmsfFunction() []SmsfFunctionSingle {
	if o == nil || isNil(o.SmsfFunction) {
		var ret []SmsfFunctionSingle
		return ret
	}
	return o.SmsfFunction
}

// GetSmsfFunctionOk returns a tuple with the SmsfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetSmsfFunctionOk() ([]SmsfFunctionSingle, bool) {
	if o == nil || isNil(o.SmsfFunction) {
		return nil, false
	}
	return o.SmsfFunction, true
}

// HasSmsfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasSmsfFunction() bool {
	if o != nil && !isNil(o.SmsfFunction) {
		return true
	}

	return false
}

// SetSmsfFunction gets a reference to the given []SmsfFunctionSingle and assigns it to the SmsfFunction field.
func (o *ManagedElementSingleAllOf1) SetSmsfFunction(v []SmsfFunctionSingle) {
	o.SmsfFunction = v
}

// GetLmfFunction returns the LmfFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetLmfFunction() []LmfFunctionSingle {
	if o == nil || isNil(o.LmfFunction) {
		var ret []LmfFunctionSingle
		return ret
	}
	return o.LmfFunction
}

// GetLmfFunctionOk returns a tuple with the LmfFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetLmfFunctionOk() ([]LmfFunctionSingle, bool) {
	if o == nil || isNil(o.LmfFunction) {
		return nil, false
	}
	return o.LmfFunction, true
}

// HasLmfFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasLmfFunction() bool {
	if o != nil && !isNil(o.LmfFunction) {
		return true
	}

	return false
}

// SetLmfFunction gets a reference to the given []LmfFunctionSingle and assigns it to the LmfFunction field.
func (o *ManagedElementSingleAllOf1) SetLmfFunction(v []LmfFunctionSingle) {
	o.LmfFunction = v
}

// GetNgeirFunction returns the NgeirFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetNgeirFunction() []NgeirFunctionSingle {
	if o == nil || isNil(o.NgeirFunction) {
		var ret []NgeirFunctionSingle
		return ret
	}
	return o.NgeirFunction
}

// GetNgeirFunctionOk returns a tuple with the NgeirFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetNgeirFunctionOk() ([]NgeirFunctionSingle, bool) {
	if o == nil || isNil(o.NgeirFunction) {
		return nil, false
	}
	return o.NgeirFunction, true
}

// HasNgeirFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasNgeirFunction() bool {
	if o != nil && !isNil(o.NgeirFunction) {
		return true
	}

	return false
}

// SetNgeirFunction gets a reference to the given []NgeirFunctionSingle and assigns it to the NgeirFunction field.
func (o *ManagedElementSingleAllOf1) SetNgeirFunction(v []NgeirFunctionSingle) {
	o.NgeirFunction = v
}

// GetSeppFunction returns the SeppFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetSeppFunction() []SeppFunctionSingle {
	if o == nil || isNil(o.SeppFunction) {
		var ret []SeppFunctionSingle
		return ret
	}
	return o.SeppFunction
}

// GetSeppFunctionOk returns a tuple with the SeppFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetSeppFunctionOk() ([]SeppFunctionSingle, bool) {
	if o == nil || isNil(o.SeppFunction) {
		return nil, false
	}
	return o.SeppFunction, true
}

// HasSeppFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasSeppFunction() bool {
	if o != nil && !isNil(o.SeppFunction) {
		return true
	}

	return false
}

// SetSeppFunction gets a reference to the given []SeppFunctionSingle and assigns it to the SeppFunction field.
func (o *ManagedElementSingleAllOf1) SetSeppFunction(v []SeppFunctionSingle) {
	o.SeppFunction = v
}

// GetNwdafFunction returns the NwdafFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetNwdafFunction() []NwdafFunctionSingle {
	if o == nil || isNil(o.NwdafFunction) {
		var ret []NwdafFunctionSingle
		return ret
	}
	return o.NwdafFunction
}

// GetNwdafFunctionOk returns a tuple with the NwdafFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetNwdafFunctionOk() ([]NwdafFunctionSingle, bool) {
	if o == nil || isNil(o.NwdafFunction) {
		return nil, false
	}
	return o.NwdafFunction, true
}

// HasNwdafFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasNwdafFunction() bool {
	if o != nil && !isNil(o.NwdafFunction) {
		return true
	}

	return false
}

// SetNwdafFunction gets a reference to the given []NwdafFunctionSingle and assigns it to the NwdafFunction field.
func (o *ManagedElementSingleAllOf1) SetNwdafFunction(v []NwdafFunctionSingle) {
	o.NwdafFunction = v
}

// GetScpFunction returns the ScpFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetScpFunction() []ScpFunctionSingle {
	if o == nil || isNil(o.ScpFunction) {
		var ret []ScpFunctionSingle
		return ret
	}
	return o.ScpFunction
}

// GetScpFunctionOk returns a tuple with the ScpFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetScpFunctionOk() ([]ScpFunctionSingle, bool) {
	if o == nil || isNil(o.ScpFunction) {
		return nil, false
	}
	return o.ScpFunction, true
}

// HasScpFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasScpFunction() bool {
	if o != nil && !isNil(o.ScpFunction) {
		return true
	}

	return false
}

// SetScpFunction gets a reference to the given []ScpFunctionSingle and assigns it to the ScpFunction field.
func (o *ManagedElementSingleAllOf1) SetScpFunction(v []ScpFunctionSingle) {
	o.ScpFunction = v
}

// GetNefFunction returns the NefFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetNefFunction() []NefFunctionSingle {
	if o == nil || isNil(o.NefFunction) {
		var ret []NefFunctionSingle
		return ret
	}
	return o.NefFunction
}

// GetNefFunctionOk returns a tuple with the NefFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetNefFunctionOk() ([]NefFunctionSingle, bool) {
	if o == nil || isNil(o.NefFunction) {
		return nil, false
	}
	return o.NefFunction, true
}

// HasNefFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasNefFunction() bool {
	if o != nil && !isNil(o.NefFunction) {
		return true
	}

	return false
}

// SetNefFunction gets a reference to the given []NefFunctionSingle and assigns it to the NefFunction field.
func (o *ManagedElementSingleAllOf1) SetNefFunction(v []NefFunctionSingle) {
	o.NefFunction = v
}

// GetConfigurable5QISet returns the Configurable5QISet field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetConfigurable5QISet() []Configurable5QISetSingle {
	if o == nil || isNil(o.Configurable5QISet) {
		var ret []Configurable5QISetSingle
		return ret
	}
	return o.Configurable5QISet
}

// GetConfigurable5QISetOk returns a tuple with the Configurable5QISet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetConfigurable5QISetOk() ([]Configurable5QISetSingle, bool) {
	if o == nil || isNil(o.Configurable5QISet) {
		return nil, false
	}
	return o.Configurable5QISet, true
}

// HasConfigurable5QISet returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasConfigurable5QISet() bool {
	if o != nil && !isNil(o.Configurable5QISet) {
		return true
	}

	return false
}

// SetConfigurable5QISet gets a reference to the given []Configurable5QISetSingle and assigns it to the Configurable5QISet field.
func (o *ManagedElementSingleAllOf1) SetConfigurable5QISet(v []Configurable5QISetSingle) {
	o.Configurable5QISet = v
}

// GetDynamic5QISet returns the Dynamic5QISet field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetDynamic5QISet() []Dynamic5QISetSingle {
	if o == nil || isNil(o.Dynamic5QISet) {
		var ret []Dynamic5QISetSingle
		return ret
	}
	return o.Dynamic5QISet
}

// GetDynamic5QISetOk returns a tuple with the Dynamic5QISet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetDynamic5QISetOk() ([]Dynamic5QISetSingle, bool) {
	if o == nil || isNil(o.Dynamic5QISet) {
		return nil, false
	}
	return o.Dynamic5QISet, true
}

// HasDynamic5QISet returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasDynamic5QISet() bool {
	if o != nil && !isNil(o.Dynamic5QISet) {
		return true
	}

	return false
}

// SetDynamic5QISet gets a reference to the given []Dynamic5QISetSingle and assigns it to the Dynamic5QISet field.
func (o *ManagedElementSingleAllOf1) SetDynamic5QISet(v []Dynamic5QISetSingle) {
	o.Dynamic5QISet = v
}

// GetEcmConnectionInfo returns the EcmConnectionInfo field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetEcmConnectionInfo() []EcmConnectionInfoSingle {
	if o == nil || isNil(o.EcmConnectionInfo) {
		var ret []EcmConnectionInfoSingle
		return ret
	}
	return o.EcmConnectionInfo
}

// GetEcmConnectionInfoOk returns a tuple with the EcmConnectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetEcmConnectionInfoOk() ([]EcmConnectionInfoSingle, bool) {
	if o == nil || isNil(o.EcmConnectionInfo) {
		return nil, false
	}
	return o.EcmConnectionInfo, true
}

// HasEcmConnectionInfo returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasEcmConnectionInfo() bool {
	if o != nil && !isNil(o.EcmConnectionInfo) {
		return true
	}

	return false
}

// SetEcmConnectionInfo gets a reference to the given []EcmConnectionInfoSingle and assigns it to the EcmConnectionInfo field.
func (o *ManagedElementSingleAllOf1) SetEcmConnectionInfo(v []EcmConnectionInfoSingle) {
	o.EcmConnectionInfo = v
}

// GetEASDFFunction returns the EASDFFunction field value if set, zero value otherwise.
func (o *ManagedElementSingleAllOf1) GetEASDFFunction() []EASDFFunctionSingle {
	if o == nil || isNil(o.EASDFFunction) {
		var ret []EASDFFunctionSingle
		return ret
	}
	return o.EASDFFunction
}

// GetEASDFFunctionOk returns a tuple with the EASDFFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedElementSingleAllOf1) GetEASDFFunctionOk() ([]EASDFFunctionSingle, bool) {
	if o == nil || isNil(o.EASDFFunction) {
		return nil, false
	}
	return o.EASDFFunction, true
}

// HasEASDFFunction returns a boolean if a field has been set.
func (o *ManagedElementSingleAllOf1) HasEASDFFunction() bool {
	if o != nil && !isNil(o.EASDFFunction) {
		return true
	}

	return false
}

// SetEASDFFunction gets a reference to the given []EASDFFunctionSingle and assigns it to the EASDFFunction field.
func (o *ManagedElementSingleAllOf1) SetEASDFFunction(v []EASDFFunctionSingle) {
	o.EASDFFunction = v
}

func (o ManagedElementSingleAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedElementSingleAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AmfFunction) {
		toSerialize["AmfFunction"] = o.AmfFunction
	}
	if !isNil(o.SmfFunction) {
		toSerialize["SmfFunction"] = o.SmfFunction
	}
	if !isNil(o.UpfFunction) {
		toSerialize["UpfFunction"] = o.UpfFunction
	}
	if !isNil(o.N3iwfFunction) {
		toSerialize["N3iwfFunction"] = o.N3iwfFunction
	}
	if !isNil(o.PcfFunction) {
		toSerialize["PcfFunction"] = o.PcfFunction
	}
	if !isNil(o.AusfFunction) {
		toSerialize["AusfFunction"] = o.AusfFunction
	}
	if !isNil(o.UdmFunction) {
		toSerialize["UdmFunction"] = o.UdmFunction
	}
	if !isNil(o.UdrFunction) {
		toSerialize["UdrFunction"] = o.UdrFunction
	}
	if !isNil(o.UdsfFunction) {
		toSerialize["UdsfFunction"] = o.UdsfFunction
	}
	if !isNil(o.NrfFunction) {
		toSerialize["NrfFunction"] = o.NrfFunction
	}
	if !isNil(o.NssfFunction) {
		toSerialize["NssfFunction"] = o.NssfFunction
	}
	if !isNil(o.SmsfFunction) {
		toSerialize["SmsfFunction"] = o.SmsfFunction
	}
	if !isNil(o.LmfFunction) {
		toSerialize["LmfFunction"] = o.LmfFunction
	}
	if !isNil(o.NgeirFunction) {
		toSerialize["NgeirFunction"] = o.NgeirFunction
	}
	if !isNil(o.SeppFunction) {
		toSerialize["SeppFunction"] = o.SeppFunction
	}
	if !isNil(o.NwdafFunction) {
		toSerialize["NwdafFunction"] = o.NwdafFunction
	}
	if !isNil(o.ScpFunction) {
		toSerialize["ScpFunction"] = o.ScpFunction
	}
	if !isNil(o.NefFunction) {
		toSerialize["NefFunction"] = o.NefFunction
	}
	if !isNil(o.Configurable5QISet) {
		toSerialize["Configurable5QISet"] = o.Configurable5QISet
	}
	if !isNil(o.Dynamic5QISet) {
		toSerialize["Dynamic5QISet"] = o.Dynamic5QISet
	}
	if !isNil(o.EcmConnectionInfo) {
		toSerialize["EcmConnectionInfo"] = o.EcmConnectionInfo
	}
	if !isNil(o.EASDFFunction) {
		toSerialize["EASDFFunction"] = o.EASDFFunction
	}
	return toSerialize, nil
}

type NullableManagedElementSingleAllOf1 struct {
	value *ManagedElementSingleAllOf1
	isSet bool
}

func (v NullableManagedElementSingleAllOf1) Get() *ManagedElementSingleAllOf1 {
	return v.value
}

func (v *NullableManagedElementSingleAllOf1) Set(val *ManagedElementSingleAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedElementSingleAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedElementSingleAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedElementSingleAllOf1(val *ManagedElementSingleAllOf1) *NullableManagedElementSingleAllOf1 {
	return &NullableManagedElementSingleAllOf1{value: val, isSet: true}
}

func (v NullableManagedElementSingleAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedElementSingleAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


