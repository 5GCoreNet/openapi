/*
3GPP 5GC NRM

OAS 3.0.1 specification of the 5GC NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_5GcNrm

import (
	"encoding/json"
	"fmt"
)

// ProvMnS - struct for ProvMnS
type ProvMnS struct {
	ProvMnSOneOf *ProvMnSOneOf
	ProvMnSOneOf1 *ProvMnSOneOf1
}

// ProvMnSOneOfAsProvMnS is a convenience function that returns ProvMnSOneOf wrapped in ProvMnS
func ProvMnSOneOfAsProvMnS(v *ProvMnSOneOf) ProvMnS {
	return ProvMnS{
		ProvMnSOneOf: v,
	}
}

// ProvMnSOneOf1AsProvMnS is a convenience function that returns ProvMnSOneOf1 wrapped in ProvMnS
func ProvMnSOneOf1AsProvMnS(v *ProvMnSOneOf1) ProvMnS {
	return ProvMnS{
		ProvMnSOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProvMnS) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ProvMnSOneOf
	err = newStrictDecoder(data).Decode(&dst.ProvMnSOneOf)
	if err == nil {
		jsonProvMnSOneOf, _ := json.Marshal(dst.ProvMnSOneOf)
		if string(jsonProvMnSOneOf) == "{}" { // empty struct
			dst.ProvMnSOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ProvMnSOneOf = nil
	}

	// try to unmarshal data into ProvMnSOneOf1
	err = newStrictDecoder(data).Decode(&dst.ProvMnSOneOf1)
	if err == nil {
		jsonProvMnSOneOf1, _ := json.Marshal(dst.ProvMnSOneOf1)
		if string(jsonProvMnSOneOf1) == "{}" { // empty struct
			dst.ProvMnSOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ProvMnSOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ProvMnSOneOf = nil
		dst.ProvMnSOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProvMnS)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProvMnS)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProvMnS) MarshalJSON() ([]byte, error) {
	if src.ProvMnSOneOf != nil {
		return json.Marshal(&src.ProvMnSOneOf)
	}

	if src.ProvMnSOneOf1 != nil {
		return json.Marshal(&src.ProvMnSOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProvMnS) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ProvMnSOneOf != nil {
		return obj.ProvMnSOneOf
	}

	if obj.ProvMnSOneOf1 != nil {
		return obj.ProvMnSOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableProvMnS struct {
	value *ProvMnS
	isSet bool
}

func (v NullableProvMnS) Get() *ProvMnS {
	return v.value
}

func (v *NullableProvMnS) Set(val *ProvMnS) {
	v.value = val
	v.isSet = true
}

func (v NullableProvMnS) IsSet() bool {
	return v.isSet
}

func (v *NullableProvMnS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvMnS(val *ProvMnS) *NullableProvMnS {
	return &NullableProvMnS{value: val, isSet: true}
}

func (v NullableProvMnS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvMnS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


