/*
3GPP 5GC NRM

OAS 3.0.1 specification of the 5GC NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_5GcNrm

import (
	"encoding/json"
)

// checks if the AmfSetSingleAllOfAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmfSetSingleAllOfAttributes{}

// AmfSetSingleAllOfAttributes struct for AmfSetSingleAllOfAttributes
type AmfSetSingleAllOfAttributes struct {
	UserLabel *string `json:"userLabel,omitempty"`
	VnfParametersList []VnfParameter `json:"vnfParametersList,omitempty"`
	PeeParametersList []PeeParameter `json:"peeParametersList,omitempty"`
	PriorityLabel *int32 `json:"priorityLabel,omitempty"`
	SupportedPerfMetricGroups []SupportedPerfMetricGroup `json:"supportedPerfMetricGroups,omitempty"`
	SupportedTraceMetrics []string `json:"supportedTraceMetrics,omitempty"`
	PlmnIdList []PlmnId `json:"plmnIdList,omitempty"`
	NRTACList []int32 `json:"nRTACList,omitempty"`
	// AmfSetId is defined in TS 23.003
	AmfSetId *string `json:"amfSetId,omitempty"`
	SnssaiList []Snssai `json:"snssaiList,omitempty"`
	AMFRegionRef *string `json:"aMFRegionRef,omitempty"`
	AMFSetMemberList []string `json:"aMFSetMemberList,omitempty"`
}

// NewAmfSetSingleAllOfAttributes instantiates a new AmfSetSingleAllOfAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmfSetSingleAllOfAttributes() *AmfSetSingleAllOfAttributes {
	this := AmfSetSingleAllOfAttributes{}
	return &this
}

// NewAmfSetSingleAllOfAttributesWithDefaults instantiates a new AmfSetSingleAllOfAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmfSetSingleAllOfAttributesWithDefaults() *AmfSetSingleAllOfAttributes {
	this := AmfSetSingleAllOfAttributes{}
	return &this
}

// GetUserLabel returns the UserLabel field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetUserLabel() string {
	if o == nil || IsNil(o.UserLabel) {
		var ret string
		return ret
	}
	return *o.UserLabel
}

// GetUserLabelOk returns a tuple with the UserLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetUserLabelOk() (*string, bool) {
	if o == nil || IsNil(o.UserLabel) {
		return nil, false
	}
	return o.UserLabel, true
}

// HasUserLabel returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasUserLabel() bool {
	if o != nil && !IsNil(o.UserLabel) {
		return true
	}

	return false
}

// SetUserLabel gets a reference to the given string and assigns it to the UserLabel field.
func (o *AmfSetSingleAllOfAttributes) SetUserLabel(v string) {
	o.UserLabel = &v
}

// GetVnfParametersList returns the VnfParametersList field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetVnfParametersList() []VnfParameter {
	if o == nil || IsNil(o.VnfParametersList) {
		var ret []VnfParameter
		return ret
	}
	return o.VnfParametersList
}

// GetVnfParametersListOk returns a tuple with the VnfParametersList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetVnfParametersListOk() ([]VnfParameter, bool) {
	if o == nil || IsNil(o.VnfParametersList) {
		return nil, false
	}
	return o.VnfParametersList, true
}

// HasVnfParametersList returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasVnfParametersList() bool {
	if o != nil && !IsNil(o.VnfParametersList) {
		return true
	}

	return false
}

// SetVnfParametersList gets a reference to the given []VnfParameter and assigns it to the VnfParametersList field.
func (o *AmfSetSingleAllOfAttributes) SetVnfParametersList(v []VnfParameter) {
	o.VnfParametersList = v
}

// GetPeeParametersList returns the PeeParametersList field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetPeeParametersList() []PeeParameter {
	if o == nil || IsNil(o.PeeParametersList) {
		var ret []PeeParameter
		return ret
	}
	return o.PeeParametersList
}

// GetPeeParametersListOk returns a tuple with the PeeParametersList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetPeeParametersListOk() ([]PeeParameter, bool) {
	if o == nil || IsNil(o.PeeParametersList) {
		return nil, false
	}
	return o.PeeParametersList, true
}

// HasPeeParametersList returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasPeeParametersList() bool {
	if o != nil && !IsNil(o.PeeParametersList) {
		return true
	}

	return false
}

// SetPeeParametersList gets a reference to the given []PeeParameter and assigns it to the PeeParametersList field.
func (o *AmfSetSingleAllOfAttributes) SetPeeParametersList(v []PeeParameter) {
	o.PeeParametersList = v
}

// GetPriorityLabel returns the PriorityLabel field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetPriorityLabel() int32 {
	if o == nil || IsNil(o.PriorityLabel) {
		var ret int32
		return ret
	}
	return *o.PriorityLabel
}

// GetPriorityLabelOk returns a tuple with the PriorityLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetPriorityLabelOk() (*int32, bool) {
	if o == nil || IsNil(o.PriorityLabel) {
		return nil, false
	}
	return o.PriorityLabel, true
}

// HasPriorityLabel returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasPriorityLabel() bool {
	if o != nil && !IsNil(o.PriorityLabel) {
		return true
	}

	return false
}

// SetPriorityLabel gets a reference to the given int32 and assigns it to the PriorityLabel field.
func (o *AmfSetSingleAllOfAttributes) SetPriorityLabel(v int32) {
	o.PriorityLabel = &v
}

// GetSupportedPerfMetricGroups returns the SupportedPerfMetricGroups field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetSupportedPerfMetricGroups() []SupportedPerfMetricGroup {
	if o == nil || IsNil(o.SupportedPerfMetricGroups) {
		var ret []SupportedPerfMetricGroup
		return ret
	}
	return o.SupportedPerfMetricGroups
}

// GetSupportedPerfMetricGroupsOk returns a tuple with the SupportedPerfMetricGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetSupportedPerfMetricGroupsOk() ([]SupportedPerfMetricGroup, bool) {
	if o == nil || IsNil(o.SupportedPerfMetricGroups) {
		return nil, false
	}
	return o.SupportedPerfMetricGroups, true
}

// HasSupportedPerfMetricGroups returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasSupportedPerfMetricGroups() bool {
	if o != nil && !IsNil(o.SupportedPerfMetricGroups) {
		return true
	}

	return false
}

// SetSupportedPerfMetricGroups gets a reference to the given []SupportedPerfMetricGroup and assigns it to the SupportedPerfMetricGroups field.
func (o *AmfSetSingleAllOfAttributes) SetSupportedPerfMetricGroups(v []SupportedPerfMetricGroup) {
	o.SupportedPerfMetricGroups = v
}

// GetSupportedTraceMetrics returns the SupportedTraceMetrics field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetSupportedTraceMetrics() []string {
	if o == nil || IsNil(o.SupportedTraceMetrics) {
		var ret []string
		return ret
	}
	return o.SupportedTraceMetrics
}

// GetSupportedTraceMetricsOk returns a tuple with the SupportedTraceMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetSupportedTraceMetricsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedTraceMetrics) {
		return nil, false
	}
	return o.SupportedTraceMetrics, true
}

// HasSupportedTraceMetrics returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasSupportedTraceMetrics() bool {
	if o != nil && !IsNil(o.SupportedTraceMetrics) {
		return true
	}

	return false
}

// SetSupportedTraceMetrics gets a reference to the given []string and assigns it to the SupportedTraceMetrics field.
func (o *AmfSetSingleAllOfAttributes) SetSupportedTraceMetrics(v []string) {
	o.SupportedTraceMetrics = v
}

// GetPlmnIdList returns the PlmnIdList field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetPlmnIdList() []PlmnId {
	if o == nil || IsNil(o.PlmnIdList) {
		var ret []PlmnId
		return ret
	}
	return o.PlmnIdList
}

// GetPlmnIdListOk returns a tuple with the PlmnIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetPlmnIdListOk() ([]PlmnId, bool) {
	if o == nil || IsNil(o.PlmnIdList) {
		return nil, false
	}
	return o.PlmnIdList, true
}

// HasPlmnIdList returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasPlmnIdList() bool {
	if o != nil && !IsNil(o.PlmnIdList) {
		return true
	}

	return false
}

// SetPlmnIdList gets a reference to the given []PlmnId and assigns it to the PlmnIdList field.
func (o *AmfSetSingleAllOfAttributes) SetPlmnIdList(v []PlmnId) {
	o.PlmnIdList = v
}

// GetNRTACList returns the NRTACList field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetNRTACList() []int32 {
	if o == nil || IsNil(o.NRTACList) {
		var ret []int32
		return ret
	}
	return o.NRTACList
}

// GetNRTACListOk returns a tuple with the NRTACList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetNRTACListOk() ([]int32, bool) {
	if o == nil || IsNil(o.NRTACList) {
		return nil, false
	}
	return o.NRTACList, true
}

// HasNRTACList returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasNRTACList() bool {
	if o != nil && !IsNil(o.NRTACList) {
		return true
	}

	return false
}

// SetNRTACList gets a reference to the given []int32 and assigns it to the NRTACList field.
func (o *AmfSetSingleAllOfAttributes) SetNRTACList(v []int32) {
	o.NRTACList = v
}

// GetAmfSetId returns the AmfSetId field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetAmfSetId() string {
	if o == nil || IsNil(o.AmfSetId) {
		var ret string
		return ret
	}
	return *o.AmfSetId
}

// GetAmfSetIdOk returns a tuple with the AmfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetAmfSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AmfSetId) {
		return nil, false
	}
	return o.AmfSetId, true
}

// HasAmfSetId returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasAmfSetId() bool {
	if o != nil && !IsNil(o.AmfSetId) {
		return true
	}

	return false
}

// SetAmfSetId gets a reference to the given string and assigns it to the AmfSetId field.
func (o *AmfSetSingleAllOfAttributes) SetAmfSetId(v string) {
	o.AmfSetId = &v
}

// GetSnssaiList returns the SnssaiList field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetSnssaiList() []Snssai {
	if o == nil || IsNil(o.SnssaiList) {
		var ret []Snssai
		return ret
	}
	return o.SnssaiList
}

// GetSnssaiListOk returns a tuple with the SnssaiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetSnssaiListOk() ([]Snssai, bool) {
	if o == nil || IsNil(o.SnssaiList) {
		return nil, false
	}
	return o.SnssaiList, true
}

// HasSnssaiList returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasSnssaiList() bool {
	if o != nil && !IsNil(o.SnssaiList) {
		return true
	}

	return false
}

// SetSnssaiList gets a reference to the given []Snssai and assigns it to the SnssaiList field.
func (o *AmfSetSingleAllOfAttributes) SetSnssaiList(v []Snssai) {
	o.SnssaiList = v
}

// GetAMFRegionRef returns the AMFRegionRef field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetAMFRegionRef() string {
	if o == nil || IsNil(o.AMFRegionRef) {
		var ret string
		return ret
	}
	return *o.AMFRegionRef
}

// GetAMFRegionRefOk returns a tuple with the AMFRegionRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetAMFRegionRefOk() (*string, bool) {
	if o == nil || IsNil(o.AMFRegionRef) {
		return nil, false
	}
	return o.AMFRegionRef, true
}

// HasAMFRegionRef returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasAMFRegionRef() bool {
	if o != nil && !IsNil(o.AMFRegionRef) {
		return true
	}

	return false
}

// SetAMFRegionRef gets a reference to the given string and assigns it to the AMFRegionRef field.
func (o *AmfSetSingleAllOfAttributes) SetAMFRegionRef(v string) {
	o.AMFRegionRef = &v
}

// GetAMFSetMemberList returns the AMFSetMemberList field value if set, zero value otherwise.
func (o *AmfSetSingleAllOfAttributes) GetAMFSetMemberList() []string {
	if o == nil || IsNil(o.AMFSetMemberList) {
		var ret []string
		return ret
	}
	return o.AMFSetMemberList
}

// GetAMFSetMemberListOk returns a tuple with the AMFSetMemberList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmfSetSingleAllOfAttributes) GetAMFSetMemberListOk() ([]string, bool) {
	if o == nil || IsNil(o.AMFSetMemberList) {
		return nil, false
	}
	return o.AMFSetMemberList, true
}

// HasAMFSetMemberList returns a boolean if a field has been set.
func (o *AmfSetSingleAllOfAttributes) HasAMFSetMemberList() bool {
	if o != nil && !IsNil(o.AMFSetMemberList) {
		return true
	}

	return false
}

// SetAMFSetMemberList gets a reference to the given []string and assigns it to the AMFSetMemberList field.
func (o *AmfSetSingleAllOfAttributes) SetAMFSetMemberList(v []string) {
	o.AMFSetMemberList = v
}

func (o AmfSetSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmfSetSingleAllOfAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserLabel) {
		toSerialize["userLabel"] = o.UserLabel
	}
	if !IsNil(o.VnfParametersList) {
		toSerialize["vnfParametersList"] = o.VnfParametersList
	}
	if !IsNil(o.PeeParametersList) {
		toSerialize["peeParametersList"] = o.PeeParametersList
	}
	if !IsNil(o.PriorityLabel) {
		toSerialize["priorityLabel"] = o.PriorityLabel
	}
	if !IsNil(o.SupportedPerfMetricGroups) {
		toSerialize["supportedPerfMetricGroups"] = o.SupportedPerfMetricGroups
	}
	if !IsNil(o.SupportedTraceMetrics) {
		toSerialize["supportedTraceMetrics"] = o.SupportedTraceMetrics
	}
	if !IsNil(o.PlmnIdList) {
		toSerialize["plmnIdList"] = o.PlmnIdList
	}
	if !IsNil(o.NRTACList) {
		toSerialize["nRTACList"] = o.NRTACList
	}
	if !IsNil(o.AmfSetId) {
		toSerialize["amfSetId"] = o.AmfSetId
	}
	if !IsNil(o.SnssaiList) {
		toSerialize["snssaiList"] = o.SnssaiList
	}
	if !IsNil(o.AMFRegionRef) {
		toSerialize["aMFRegionRef"] = o.AMFRegionRef
	}
	if !IsNil(o.AMFSetMemberList) {
		toSerialize["aMFSetMemberList"] = o.AMFSetMemberList
	}
	return toSerialize, nil
}

type NullableAmfSetSingleAllOfAttributes struct {
	value *AmfSetSingleAllOfAttributes
	isSet bool
}

func (v NullableAmfSetSingleAllOfAttributes) Get() *AmfSetSingleAllOfAttributes {
	return v.value
}

func (v *NullableAmfSetSingleAllOfAttributes) Set(val *AmfSetSingleAllOfAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableAmfSetSingleAllOfAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableAmfSetSingleAllOfAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmfSetSingleAllOfAttributes(val *AmfSetSingleAllOfAttributes) *NullableAmfSetSingleAllOfAttributes {
	return &NullableAmfSetSingleAllOfAttributes{value: val, isSet: true}
}

func (v NullableAmfSetSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmfSetSingleAllOfAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


