/*
3GPP 5GC NRM

OAS 3.0.1 specification of the 5GC NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_5GcNrm

import (
	"encoding/json"
)

// checks if the NefFunctionSingleAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NefFunctionSingleAllOf1{}

// NefFunctionSingleAllOf1 struct for NefFunctionSingleAllOf1
type NefFunctionSingleAllOf1 struct {
	EPN33 []EPN33Single `json:"EP_N33,omitempty"`
}

// NewNefFunctionSingleAllOf1 instantiates a new NefFunctionSingleAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNefFunctionSingleAllOf1() *NefFunctionSingleAllOf1 {
	this := NefFunctionSingleAllOf1{}
	return &this
}

// NewNefFunctionSingleAllOf1WithDefaults instantiates a new NefFunctionSingleAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNefFunctionSingleAllOf1WithDefaults() *NefFunctionSingleAllOf1 {
	this := NefFunctionSingleAllOf1{}
	return &this
}

// GetEPN33 returns the EPN33 field value if set, zero value otherwise.
func (o *NefFunctionSingleAllOf1) GetEPN33() []EPN33Single {
	if o == nil || IsNil(o.EPN33) {
		var ret []EPN33Single
		return ret
	}
	return o.EPN33
}

// GetEPN33Ok returns a tuple with the EPN33 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefFunctionSingleAllOf1) GetEPN33Ok() ([]EPN33Single, bool) {
	if o == nil || IsNil(o.EPN33) {
		return nil, false
	}
	return o.EPN33, true
}

// HasEPN33 returns a boolean if a field has been set.
func (o *NefFunctionSingleAllOf1) HasEPN33() bool {
	if o != nil && !IsNil(o.EPN33) {
		return true
	}

	return false
}

// SetEPN33 gets a reference to the given []EPN33Single and assigns it to the EPN33 field.
func (o *NefFunctionSingleAllOf1) SetEPN33(v []EPN33Single) {
	o.EPN33 = v
}

func (o NefFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NefFunctionSingleAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EPN33) {
		toSerialize["EP_N33"] = o.EPN33
	}
	return toSerialize, nil
}

type NullableNefFunctionSingleAllOf1 struct {
	value *NefFunctionSingleAllOf1
	isSet bool
}

func (v NullableNefFunctionSingleAllOf1) Get() *NefFunctionSingleAllOf1 {
	return v.value
}

func (v *NullableNefFunctionSingleAllOf1) Set(val *NefFunctionSingleAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableNefFunctionSingleAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableNefFunctionSingleAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNefFunctionSingleAllOf1(val *NefFunctionSingleAllOf1) *NullableNefFunctionSingleAllOf1 {
	return &NullableNefFunctionSingleAllOf1{value: val, isSet: true}
}

func (v NullableNefFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNefFunctionSingleAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
