/*
3GPP 5GC NRM

OAS 3.0.1 specification of the 5GC NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_5GcNrm

import (
	"encoding/json"
)

// checks if the SmfFunctionSingleAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmfFunctionSingleAllOf1{}

// SmfFunctionSingleAllOf1 struct for SmfFunctionSingleAllOf1
type SmfFunctionSingleAllOf1 struct {
	EPN4                         []EPN4Single                        `json:"EP_N4,omitempty"`
	EPN7                         []EPN7Single                        `json:"EP_N7,omitempty"`
	EPN10                        []EPN10Single                       `json:"EP_N10,omitempty"`
	EPN11                        []EPN11Single                       `json:"EP_N11,omitempty"`
	EPN16                        []EPN16Single                       `json:"EP_N16,omitempty"`
	EPS5C                        []EPS5CSingle                       `json:"EP_S5C,omitempty"`
	FiveQiDscpMappingSet         *FiveQiDscpMappingSetSingle         `json:"FiveQiDscpMappingSet,omitempty"`
	GtpUPathQoSMonitoringControl *GtpUPathQoSMonitoringControlSingle `json:"GtpUPathQoSMonitoringControl,omitempty"`
	QFQoSMonitoringControl       *QFQoSMonitoringControlSingle       `json:"QFQoSMonitoringControl,omitempty"`
	PredefinedPccRuleSet         *PredefinedPccRuleSetSingle         `json:"PredefinedPccRuleSet,omitempty"`
}

// NewSmfFunctionSingleAllOf1 instantiates a new SmfFunctionSingleAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmfFunctionSingleAllOf1() *SmfFunctionSingleAllOf1 {
	this := SmfFunctionSingleAllOf1{}
	return &this
}

// NewSmfFunctionSingleAllOf1WithDefaults instantiates a new SmfFunctionSingleAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmfFunctionSingleAllOf1WithDefaults() *SmfFunctionSingleAllOf1 {
	this := SmfFunctionSingleAllOf1{}
	return &this
}

// GetEPN4 returns the EPN4 field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetEPN4() []EPN4Single {
	if o == nil || IsNil(o.EPN4) {
		var ret []EPN4Single
		return ret
	}
	return o.EPN4
}

// GetEPN4Ok returns a tuple with the EPN4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetEPN4Ok() ([]EPN4Single, bool) {
	if o == nil || IsNil(o.EPN4) {
		return nil, false
	}
	return o.EPN4, true
}

// HasEPN4 returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasEPN4() bool {
	if o != nil && !IsNil(o.EPN4) {
		return true
	}

	return false
}

// SetEPN4 gets a reference to the given []EPN4Single and assigns it to the EPN4 field.
func (o *SmfFunctionSingleAllOf1) SetEPN4(v []EPN4Single) {
	o.EPN4 = v
}

// GetEPN7 returns the EPN7 field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetEPN7() []EPN7Single {
	if o == nil || IsNil(o.EPN7) {
		var ret []EPN7Single
		return ret
	}
	return o.EPN7
}

// GetEPN7Ok returns a tuple with the EPN7 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetEPN7Ok() ([]EPN7Single, bool) {
	if o == nil || IsNil(o.EPN7) {
		return nil, false
	}
	return o.EPN7, true
}

// HasEPN7 returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasEPN7() bool {
	if o != nil && !IsNil(o.EPN7) {
		return true
	}

	return false
}

// SetEPN7 gets a reference to the given []EPN7Single and assigns it to the EPN7 field.
func (o *SmfFunctionSingleAllOf1) SetEPN7(v []EPN7Single) {
	o.EPN7 = v
}

// GetEPN10 returns the EPN10 field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetEPN10() []EPN10Single {
	if o == nil || IsNil(o.EPN10) {
		var ret []EPN10Single
		return ret
	}
	return o.EPN10
}

// GetEPN10Ok returns a tuple with the EPN10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetEPN10Ok() ([]EPN10Single, bool) {
	if o == nil || IsNil(o.EPN10) {
		return nil, false
	}
	return o.EPN10, true
}

// HasEPN10 returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasEPN10() bool {
	if o != nil && !IsNil(o.EPN10) {
		return true
	}

	return false
}

// SetEPN10 gets a reference to the given []EPN10Single and assigns it to the EPN10 field.
func (o *SmfFunctionSingleAllOf1) SetEPN10(v []EPN10Single) {
	o.EPN10 = v
}

// GetEPN11 returns the EPN11 field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetEPN11() []EPN11Single {
	if o == nil || IsNil(o.EPN11) {
		var ret []EPN11Single
		return ret
	}
	return o.EPN11
}

// GetEPN11Ok returns a tuple with the EPN11 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetEPN11Ok() ([]EPN11Single, bool) {
	if o == nil || IsNil(o.EPN11) {
		return nil, false
	}
	return o.EPN11, true
}

// HasEPN11 returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasEPN11() bool {
	if o != nil && !IsNil(o.EPN11) {
		return true
	}

	return false
}

// SetEPN11 gets a reference to the given []EPN11Single and assigns it to the EPN11 field.
func (o *SmfFunctionSingleAllOf1) SetEPN11(v []EPN11Single) {
	o.EPN11 = v
}

// GetEPN16 returns the EPN16 field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetEPN16() []EPN16Single {
	if o == nil || IsNil(o.EPN16) {
		var ret []EPN16Single
		return ret
	}
	return o.EPN16
}

// GetEPN16Ok returns a tuple with the EPN16 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetEPN16Ok() ([]EPN16Single, bool) {
	if o == nil || IsNil(o.EPN16) {
		return nil, false
	}
	return o.EPN16, true
}

// HasEPN16 returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasEPN16() bool {
	if o != nil && !IsNil(o.EPN16) {
		return true
	}

	return false
}

// SetEPN16 gets a reference to the given []EPN16Single and assigns it to the EPN16 field.
func (o *SmfFunctionSingleAllOf1) SetEPN16(v []EPN16Single) {
	o.EPN16 = v
}

// GetEPS5C returns the EPS5C field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetEPS5C() []EPS5CSingle {
	if o == nil || IsNil(o.EPS5C) {
		var ret []EPS5CSingle
		return ret
	}
	return o.EPS5C
}

// GetEPS5COk returns a tuple with the EPS5C field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetEPS5COk() ([]EPS5CSingle, bool) {
	if o == nil || IsNil(o.EPS5C) {
		return nil, false
	}
	return o.EPS5C, true
}

// HasEPS5C returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasEPS5C() bool {
	if o != nil && !IsNil(o.EPS5C) {
		return true
	}

	return false
}

// SetEPS5C gets a reference to the given []EPS5CSingle and assigns it to the EPS5C field.
func (o *SmfFunctionSingleAllOf1) SetEPS5C(v []EPS5CSingle) {
	o.EPS5C = v
}

// GetFiveQiDscpMappingSet returns the FiveQiDscpMappingSet field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetFiveQiDscpMappingSet() FiveQiDscpMappingSetSingle {
	if o == nil || IsNil(o.FiveQiDscpMappingSet) {
		var ret FiveQiDscpMappingSetSingle
		return ret
	}
	return *o.FiveQiDscpMappingSet
}

// GetFiveQiDscpMappingSetOk returns a tuple with the FiveQiDscpMappingSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetFiveQiDscpMappingSetOk() (*FiveQiDscpMappingSetSingle, bool) {
	if o == nil || IsNil(o.FiveQiDscpMappingSet) {
		return nil, false
	}
	return o.FiveQiDscpMappingSet, true
}

// HasFiveQiDscpMappingSet returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasFiveQiDscpMappingSet() bool {
	if o != nil && !IsNil(o.FiveQiDscpMappingSet) {
		return true
	}

	return false
}

// SetFiveQiDscpMappingSet gets a reference to the given FiveQiDscpMappingSetSingle and assigns it to the FiveQiDscpMappingSet field.
func (o *SmfFunctionSingleAllOf1) SetFiveQiDscpMappingSet(v FiveQiDscpMappingSetSingle) {
	o.FiveQiDscpMappingSet = &v
}

// GetGtpUPathQoSMonitoringControl returns the GtpUPathQoSMonitoringControl field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetGtpUPathQoSMonitoringControl() GtpUPathQoSMonitoringControlSingle {
	if o == nil || IsNil(o.GtpUPathQoSMonitoringControl) {
		var ret GtpUPathQoSMonitoringControlSingle
		return ret
	}
	return *o.GtpUPathQoSMonitoringControl
}

// GetGtpUPathQoSMonitoringControlOk returns a tuple with the GtpUPathQoSMonitoringControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetGtpUPathQoSMonitoringControlOk() (*GtpUPathQoSMonitoringControlSingle, bool) {
	if o == nil || IsNil(o.GtpUPathQoSMonitoringControl) {
		return nil, false
	}
	return o.GtpUPathQoSMonitoringControl, true
}

// HasGtpUPathQoSMonitoringControl returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasGtpUPathQoSMonitoringControl() bool {
	if o != nil && !IsNil(o.GtpUPathQoSMonitoringControl) {
		return true
	}

	return false
}

// SetGtpUPathQoSMonitoringControl gets a reference to the given GtpUPathQoSMonitoringControlSingle and assigns it to the GtpUPathQoSMonitoringControl field.
func (o *SmfFunctionSingleAllOf1) SetGtpUPathQoSMonitoringControl(v GtpUPathQoSMonitoringControlSingle) {
	o.GtpUPathQoSMonitoringControl = &v
}

// GetQFQoSMonitoringControl returns the QFQoSMonitoringControl field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetQFQoSMonitoringControl() QFQoSMonitoringControlSingle {
	if o == nil || IsNil(o.QFQoSMonitoringControl) {
		var ret QFQoSMonitoringControlSingle
		return ret
	}
	return *o.QFQoSMonitoringControl
}

// GetQFQoSMonitoringControlOk returns a tuple with the QFQoSMonitoringControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetQFQoSMonitoringControlOk() (*QFQoSMonitoringControlSingle, bool) {
	if o == nil || IsNil(o.QFQoSMonitoringControl) {
		return nil, false
	}
	return o.QFQoSMonitoringControl, true
}

// HasQFQoSMonitoringControl returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasQFQoSMonitoringControl() bool {
	if o != nil && !IsNil(o.QFQoSMonitoringControl) {
		return true
	}

	return false
}

// SetQFQoSMonitoringControl gets a reference to the given QFQoSMonitoringControlSingle and assigns it to the QFQoSMonitoringControl field.
func (o *SmfFunctionSingleAllOf1) SetQFQoSMonitoringControl(v QFQoSMonitoringControlSingle) {
	o.QFQoSMonitoringControl = &v
}

// GetPredefinedPccRuleSet returns the PredefinedPccRuleSet field value if set, zero value otherwise.
func (o *SmfFunctionSingleAllOf1) GetPredefinedPccRuleSet() PredefinedPccRuleSetSingle {
	if o == nil || IsNil(o.PredefinedPccRuleSet) {
		var ret PredefinedPccRuleSetSingle
		return ret
	}
	return *o.PredefinedPccRuleSet
}

// GetPredefinedPccRuleSetOk returns a tuple with the PredefinedPccRuleSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfFunctionSingleAllOf1) GetPredefinedPccRuleSetOk() (*PredefinedPccRuleSetSingle, bool) {
	if o == nil || IsNil(o.PredefinedPccRuleSet) {
		return nil, false
	}
	return o.PredefinedPccRuleSet, true
}

// HasPredefinedPccRuleSet returns a boolean if a field has been set.
func (o *SmfFunctionSingleAllOf1) HasPredefinedPccRuleSet() bool {
	if o != nil && !IsNil(o.PredefinedPccRuleSet) {
		return true
	}

	return false
}

// SetPredefinedPccRuleSet gets a reference to the given PredefinedPccRuleSetSingle and assigns it to the PredefinedPccRuleSet field.
func (o *SmfFunctionSingleAllOf1) SetPredefinedPccRuleSet(v PredefinedPccRuleSetSingle) {
	o.PredefinedPccRuleSet = &v
}

func (o SmfFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmfFunctionSingleAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EPN4) {
		toSerialize["EP_N4"] = o.EPN4
	}
	if !IsNil(o.EPN7) {
		toSerialize["EP_N7"] = o.EPN7
	}
	if !IsNil(o.EPN10) {
		toSerialize["EP_N10"] = o.EPN10
	}
	if !IsNil(o.EPN11) {
		toSerialize["EP_N11"] = o.EPN11
	}
	if !IsNil(o.EPN16) {
		toSerialize["EP_N16"] = o.EPN16
	}
	if !IsNil(o.EPS5C) {
		toSerialize["EP_S5C"] = o.EPS5C
	}
	if !IsNil(o.FiveQiDscpMappingSet) {
		toSerialize["FiveQiDscpMappingSet"] = o.FiveQiDscpMappingSet
	}
	if !IsNil(o.GtpUPathQoSMonitoringControl) {
		toSerialize["GtpUPathQoSMonitoringControl"] = o.GtpUPathQoSMonitoringControl
	}
	if !IsNil(o.QFQoSMonitoringControl) {
		toSerialize["QFQoSMonitoringControl"] = o.QFQoSMonitoringControl
	}
	if !IsNil(o.PredefinedPccRuleSet) {
		toSerialize["PredefinedPccRuleSet"] = o.PredefinedPccRuleSet
	}
	return toSerialize, nil
}

type NullableSmfFunctionSingleAllOf1 struct {
	value *SmfFunctionSingleAllOf1
	isSet bool
}

func (v NullableSmfFunctionSingleAllOf1) Get() *SmfFunctionSingleAllOf1 {
	return v.value
}

func (v *NullableSmfFunctionSingleAllOf1) Set(val *SmfFunctionSingleAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableSmfFunctionSingleAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableSmfFunctionSingleAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmfFunctionSingleAllOf1(val *SmfFunctionSingleAllOf1) *NullableSmfFunctionSingleAllOf1 {
	return &NullableSmfFunctionSingleAllOf1{value: val, isSet: true}
}

func (v NullableSmfFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmfFunctionSingleAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
