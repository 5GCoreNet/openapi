/*
3GPP 5GC NRM

OAS 3.0.1 specification of the 5GC NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_5GcNrm

import (
	"encoding/json"
)

// checks if the SeppInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeppInfo{}

// SeppInfo Information of a SEPP Instance
type SeppInfo struct {
	SeppPrefix *string `json:"seppPrefix,omitempty"`
	// Port numbers for HTTP and HTTPS. The key of the map shall be \"http\" or \"https\".
	SeppPorts      *map[string]int32 `json:"seppPorts,omitempty"`
	RemotePlmnList []PlmnId1         `json:"remotePlmnList,omitempty"`
	RemoteSnpnList []PlmnIdNid1      `json:"remoteSnpnList,omitempty"`
}

// NewSeppInfo instantiates a new SeppInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeppInfo() *SeppInfo {
	this := SeppInfo{}
	return &this
}

// NewSeppInfoWithDefaults instantiates a new SeppInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeppInfoWithDefaults() *SeppInfo {
	this := SeppInfo{}
	return &this
}

// GetSeppPrefix returns the SeppPrefix field value if set, zero value otherwise.
func (o *SeppInfo) GetSeppPrefix() string {
	if o == nil || IsNil(o.SeppPrefix) {
		var ret string
		return ret
	}
	return *o.SeppPrefix
}

// GetSeppPrefixOk returns a tuple with the SeppPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeppInfo) GetSeppPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.SeppPrefix) {
		return nil, false
	}
	return o.SeppPrefix, true
}

// HasSeppPrefix returns a boolean if a field has been set.
func (o *SeppInfo) HasSeppPrefix() bool {
	if o != nil && !IsNil(o.SeppPrefix) {
		return true
	}

	return false
}

// SetSeppPrefix gets a reference to the given string and assigns it to the SeppPrefix field.
func (o *SeppInfo) SetSeppPrefix(v string) {
	o.SeppPrefix = &v
}

// GetSeppPorts returns the SeppPorts field value if set, zero value otherwise.
func (o *SeppInfo) GetSeppPorts() map[string]int32 {
	if o == nil || IsNil(o.SeppPorts) {
		var ret map[string]int32
		return ret
	}
	return *o.SeppPorts
}

// GetSeppPortsOk returns a tuple with the SeppPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeppInfo) GetSeppPortsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.SeppPorts) {
		return nil, false
	}
	return o.SeppPorts, true
}

// HasSeppPorts returns a boolean if a field has been set.
func (o *SeppInfo) HasSeppPorts() bool {
	if o != nil && !IsNil(o.SeppPorts) {
		return true
	}

	return false
}

// SetSeppPorts gets a reference to the given map[string]int32 and assigns it to the SeppPorts field.
func (o *SeppInfo) SetSeppPorts(v map[string]int32) {
	o.SeppPorts = &v
}

// GetRemotePlmnList returns the RemotePlmnList field value if set, zero value otherwise.
func (o *SeppInfo) GetRemotePlmnList() []PlmnId1 {
	if o == nil || IsNil(o.RemotePlmnList) {
		var ret []PlmnId1
		return ret
	}
	return o.RemotePlmnList
}

// GetRemotePlmnListOk returns a tuple with the RemotePlmnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeppInfo) GetRemotePlmnListOk() ([]PlmnId1, bool) {
	if o == nil || IsNil(o.RemotePlmnList) {
		return nil, false
	}
	return o.RemotePlmnList, true
}

// HasRemotePlmnList returns a boolean if a field has been set.
func (o *SeppInfo) HasRemotePlmnList() bool {
	if o != nil && !IsNil(o.RemotePlmnList) {
		return true
	}

	return false
}

// SetRemotePlmnList gets a reference to the given []PlmnId1 and assigns it to the RemotePlmnList field.
func (o *SeppInfo) SetRemotePlmnList(v []PlmnId1) {
	o.RemotePlmnList = v
}

// GetRemoteSnpnList returns the RemoteSnpnList field value if set, zero value otherwise.
func (o *SeppInfo) GetRemoteSnpnList() []PlmnIdNid1 {
	if o == nil || IsNil(o.RemoteSnpnList) {
		var ret []PlmnIdNid1
		return ret
	}
	return o.RemoteSnpnList
}

// GetRemoteSnpnListOk returns a tuple with the RemoteSnpnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeppInfo) GetRemoteSnpnListOk() ([]PlmnIdNid1, bool) {
	if o == nil || IsNil(o.RemoteSnpnList) {
		return nil, false
	}
	return o.RemoteSnpnList, true
}

// HasRemoteSnpnList returns a boolean if a field has been set.
func (o *SeppInfo) HasRemoteSnpnList() bool {
	if o != nil && !IsNil(o.RemoteSnpnList) {
		return true
	}

	return false
}

// SetRemoteSnpnList gets a reference to the given []PlmnIdNid1 and assigns it to the RemoteSnpnList field.
func (o *SeppInfo) SetRemoteSnpnList(v []PlmnIdNid1) {
	o.RemoteSnpnList = v
}

func (o SeppInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeppInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SeppPrefix) {
		toSerialize["seppPrefix"] = o.SeppPrefix
	}
	if !IsNil(o.SeppPorts) {
		toSerialize["seppPorts"] = o.SeppPorts
	}
	if !IsNil(o.RemotePlmnList) {
		toSerialize["remotePlmnList"] = o.RemotePlmnList
	}
	if !IsNil(o.RemoteSnpnList) {
		toSerialize["remoteSnpnList"] = o.RemoteSnpnList
	}
	return toSerialize, nil
}

type NullableSeppInfo struct {
	value *SeppInfo
	isSet bool
}

func (v NullableSeppInfo) Get() *SeppInfo {
	return v.value
}

func (v *NullableSeppInfo) Set(val *SeppInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSeppInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSeppInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeppInfo(val *SeppInfo) *NullableSeppInfo {
	return &NullableSeppInfo{value: val, isSet: true}
}

func (v NullableSeppInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeppInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
