/*
3GPP 5GC NRM

OAS 3.0.1 specification of the 5GC NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_5GcNrm

import (
	"encoding/json"
)

// checks if the SteeringMode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SteeringMode{}

// SteeringMode struct for SteeringMode
type SteeringMode struct {
	SteerModeValue *SteerModeValue `json:"steerModeValue,omitempty"`
	Active *AccessType `json:"active,omitempty"`
	Standby *AccessTypeRm `json:"standby,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	ThreeGLoad *int32 `json:"threeGLoad,omitempty"`
	PrioAcc *AccessType `json:"prioAcc,omitempty"`
}

// NewSteeringMode instantiates a new SteeringMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSteeringMode() *SteeringMode {
	this := SteeringMode{}
	return &this
}

// NewSteeringModeWithDefaults instantiates a new SteeringMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSteeringModeWithDefaults() *SteeringMode {
	this := SteeringMode{}
	return &this
}

// GetSteerModeValue returns the SteerModeValue field value if set, zero value otherwise.
func (o *SteeringMode) GetSteerModeValue() SteerModeValue {
	if o == nil || IsNil(o.SteerModeValue) {
		var ret SteerModeValue
		return ret
	}
	return *o.SteerModeValue
}

// GetSteerModeValueOk returns a tuple with the SteerModeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetSteerModeValueOk() (*SteerModeValue, bool) {
	if o == nil || IsNil(o.SteerModeValue) {
		return nil, false
	}
	return o.SteerModeValue, true
}

// HasSteerModeValue returns a boolean if a field has been set.
func (o *SteeringMode) HasSteerModeValue() bool {
	if o != nil && !IsNil(o.SteerModeValue) {
		return true
	}

	return false
}

// SetSteerModeValue gets a reference to the given SteerModeValue and assigns it to the SteerModeValue field.
func (o *SteeringMode) SetSteerModeValue(v SteerModeValue) {
	o.SteerModeValue = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SteeringMode) GetActive() AccessType {
	if o == nil || IsNil(o.Active) {
		var ret AccessType
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetActiveOk() (*AccessType, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SteeringMode) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given AccessType and assigns it to the Active field.
func (o *SteeringMode) SetActive(v AccessType) {
	o.Active = &v
}

// GetStandby returns the Standby field value if set, zero value otherwise.
func (o *SteeringMode) GetStandby() AccessTypeRm {
	if o == nil || IsNil(o.Standby) {
		var ret AccessTypeRm
		return ret
	}
	return *o.Standby
}

// GetStandbyOk returns a tuple with the Standby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetStandbyOk() (*AccessTypeRm, bool) {
	if o == nil || IsNil(o.Standby) {
		return nil, false
	}
	return o.Standby, true
}

// HasStandby returns a boolean if a field has been set.
func (o *SteeringMode) HasStandby() bool {
	if o != nil && !IsNil(o.Standby) {
		return true
	}

	return false
}

// SetStandby gets a reference to the given AccessTypeRm and assigns it to the Standby field.
func (o *SteeringMode) SetStandby(v AccessTypeRm) {
	o.Standby = &v
}

// GetThreeGLoad returns the ThreeGLoad field value if set, zero value otherwise.
func (o *SteeringMode) GetThreeGLoad() int32 {
	if o == nil || IsNil(o.ThreeGLoad) {
		var ret int32
		return ret
	}
	return *o.ThreeGLoad
}

// GetThreeGLoadOk returns a tuple with the ThreeGLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetThreeGLoadOk() (*int32, bool) {
	if o == nil || IsNil(o.ThreeGLoad) {
		return nil, false
	}
	return o.ThreeGLoad, true
}

// HasThreeGLoad returns a boolean if a field has been set.
func (o *SteeringMode) HasThreeGLoad() bool {
	if o != nil && !IsNil(o.ThreeGLoad) {
		return true
	}

	return false
}

// SetThreeGLoad gets a reference to the given int32 and assigns it to the ThreeGLoad field.
func (o *SteeringMode) SetThreeGLoad(v int32) {
	o.ThreeGLoad = &v
}

// GetPrioAcc returns the PrioAcc field value if set, zero value otherwise.
func (o *SteeringMode) GetPrioAcc() AccessType {
	if o == nil || IsNil(o.PrioAcc) {
		var ret AccessType
		return ret
	}
	return *o.PrioAcc
}

// GetPrioAccOk returns a tuple with the PrioAcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteeringMode) GetPrioAccOk() (*AccessType, bool) {
	if o == nil || IsNil(o.PrioAcc) {
		return nil, false
	}
	return o.PrioAcc, true
}

// HasPrioAcc returns a boolean if a field has been set.
func (o *SteeringMode) HasPrioAcc() bool {
	if o != nil && !IsNil(o.PrioAcc) {
		return true
	}

	return false
}

// SetPrioAcc gets a reference to the given AccessType and assigns it to the PrioAcc field.
func (o *SteeringMode) SetPrioAcc(v AccessType) {
	o.PrioAcc = &v
}

func (o SteeringMode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SteeringMode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SteerModeValue) {
		toSerialize["steerModeValue"] = o.SteerModeValue
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Standby) {
		toSerialize["standby"] = o.Standby
	}
	if !IsNil(o.ThreeGLoad) {
		toSerialize["threeGLoad"] = o.ThreeGLoad
	}
	if !IsNil(o.PrioAcc) {
		toSerialize["prioAcc"] = o.PrioAcc
	}
	return toSerialize, nil
}

type NullableSteeringMode struct {
	value *SteeringMode
	isSet bool
}

func (v NullableSteeringMode) Get() *SteeringMode {
	return v.value
}

func (v *NullableSteeringMode) Set(val *SteeringMode) {
	v.value = val
	v.isSet = true
}

func (v NullableSteeringMode) IsSet() bool {
	return v.isSet
}

func (v *NullableSteeringMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSteeringMode(val *SteeringMode) *NullableSteeringMode {
	return &NullableSteeringMode{value: val, isSet: true}
}

func (v NullableSteeringMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSteeringMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


