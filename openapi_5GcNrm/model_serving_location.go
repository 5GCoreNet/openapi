/*
3GPP 5GC NRM

OAS 3.0.1 specification of the 5GC NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_5GcNrm

import (
	"encoding/json"
)

// checks if the ServingLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServingLocation{}

// ServingLocation struct for ServingLocation
type ServingLocation struct {
	GeographicalLocation *GeoLoc `json:"geographicalLocation,omitempty"`
	TopologicalLocation *TopologicalServiceArea `json:"topologicalLocation,omitempty"`
}

// NewServingLocation instantiates a new ServingLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServingLocation() *ServingLocation {
	this := ServingLocation{}
	return &this
}

// NewServingLocationWithDefaults instantiates a new ServingLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServingLocationWithDefaults() *ServingLocation {
	this := ServingLocation{}
	return &this
}

// GetGeographicalLocation returns the GeographicalLocation field value if set, zero value otherwise.
func (o *ServingLocation) GetGeographicalLocation() GeoLoc {
	if o == nil || IsNil(o.GeographicalLocation) {
		var ret GeoLoc
		return ret
	}
	return *o.GeographicalLocation
}

// GetGeographicalLocationOk returns a tuple with the GeographicalLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServingLocation) GetGeographicalLocationOk() (*GeoLoc, bool) {
	if o == nil || IsNil(o.GeographicalLocation) {
		return nil, false
	}
	return o.GeographicalLocation, true
}

// HasGeographicalLocation returns a boolean if a field has been set.
func (o *ServingLocation) HasGeographicalLocation() bool {
	if o != nil && !IsNil(o.GeographicalLocation) {
		return true
	}

	return false
}

// SetGeographicalLocation gets a reference to the given GeoLoc and assigns it to the GeographicalLocation field.
func (o *ServingLocation) SetGeographicalLocation(v GeoLoc) {
	o.GeographicalLocation = &v
}

// GetTopologicalLocation returns the TopologicalLocation field value if set, zero value otherwise.
func (o *ServingLocation) GetTopologicalLocation() TopologicalServiceArea {
	if o == nil || IsNil(o.TopologicalLocation) {
		var ret TopologicalServiceArea
		return ret
	}
	return *o.TopologicalLocation
}

// GetTopologicalLocationOk returns a tuple with the TopologicalLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServingLocation) GetTopologicalLocationOk() (*TopologicalServiceArea, bool) {
	if o == nil || IsNil(o.TopologicalLocation) {
		return nil, false
	}
	return o.TopologicalLocation, true
}

// HasTopologicalLocation returns a boolean if a field has been set.
func (o *ServingLocation) HasTopologicalLocation() bool {
	if o != nil && !IsNil(o.TopologicalLocation) {
		return true
	}

	return false
}

// SetTopologicalLocation gets a reference to the given TopologicalServiceArea and assigns it to the TopologicalLocation field.
func (o *ServingLocation) SetTopologicalLocation(v TopologicalServiceArea) {
	o.TopologicalLocation = &v
}

func (o ServingLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServingLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GeographicalLocation) {
		toSerialize["geographicalLocation"] = o.GeographicalLocation
	}
	if !IsNil(o.TopologicalLocation) {
		toSerialize["topologicalLocation"] = o.TopologicalLocation
	}
	return toSerialize, nil
}

type NullableServingLocation struct {
	value *ServingLocation
	isSet bool
}

func (v NullableServingLocation) Get() *ServingLocation {
	return v.value
}

func (v *NullableServingLocation) Set(val *ServingLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableServingLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableServingLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServingLocation(val *ServingLocation) *NullableServingLocation {
	return &NullableServingLocation{value: val, isSet: true}
}

func (v NullableServingLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServingLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


