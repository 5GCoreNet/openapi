/*
JOSE Protected Message Forwarding API

N32-f Message Forwarding Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_JOSEProtectedMessageForwarding

import (
	"encoding/json"
)

// checks if the MetaData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaData{}

// MetaData Contains the meta data information needed for replay protection
type MetaData struct {
	N32fContextId   string `json:"n32fContextId"`
	MessageId       string `json:"messageId"`
	AuthorizedIpxId string `json:"authorizedIpxId"`
}

// NewMetaData instantiates a new MetaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaData(n32fContextId string, messageId string, authorizedIpxId string) *MetaData {
	this := MetaData{}
	this.N32fContextId = n32fContextId
	this.MessageId = messageId
	this.AuthorizedIpxId = authorizedIpxId
	return &this
}

// NewMetaDataWithDefaults instantiates a new MetaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaDataWithDefaults() *MetaData {
	this := MetaData{}
	return &this
}

// GetN32fContextId returns the N32fContextId field value
func (o *MetaData) GetN32fContextId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.N32fContextId
}

// GetN32fContextIdOk returns a tuple with the N32fContextId field value
// and a boolean to check if the value has been set.
func (o *MetaData) GetN32fContextIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.N32fContextId, true
}

// SetN32fContextId sets field value
func (o *MetaData) SetN32fContextId(v string) {
	o.N32fContextId = v
}

// GetMessageId returns the MessageId field value
func (o *MetaData) GetMessageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *MetaData) GetMessageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *MetaData) SetMessageId(v string) {
	o.MessageId = v
}

// GetAuthorizedIpxId returns the AuthorizedIpxId field value
func (o *MetaData) GetAuthorizedIpxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorizedIpxId
}

// GetAuthorizedIpxIdOk returns a tuple with the AuthorizedIpxId field value
// and a boolean to check if the value has been set.
func (o *MetaData) GetAuthorizedIpxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorizedIpxId, true
}

// SetAuthorizedIpxId sets field value
func (o *MetaData) SetAuthorizedIpxId(v string) {
	o.AuthorizedIpxId = v
}

func (o MetaData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["n32fContextId"] = o.N32fContextId
	toSerialize["messageId"] = o.MessageId
	toSerialize["authorizedIpxId"] = o.AuthorizedIpxId
	return toSerialize, nil
}

type NullableMetaData struct {
	value *MetaData
	isSet bool
}

func (v NullableMetaData) Get() *MetaData {
	return v.value
}

func (v *NullableMetaData) Set(val *MetaData) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaData) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaData(val *MetaData) *NullableMetaData {
	return &NullableMetaData{value: val, isSet: true}
}

func (v NullableMetaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
