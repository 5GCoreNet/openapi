/*
NRF NFDiscovery Service

NRF NFDiscovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnrf_NFDiscovery

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// NFInstancesStoreApiService NFInstancesStoreApi service
type NFInstancesStoreApiService service

type ApiSearchNFInstancesRequest struct {
	ctx                               context.Context
	ApiService                        *NFInstancesStoreApiService
	targetNfType                      *NFType
	requesterNfType                   *NFType
	acceptEncoding                    *string
	preferredCollocatedNfTypes        *[]CollocatedNfType
	requesterNfInstanceId             *string
	serviceNames                      *[]ServiceName
	requesterNfInstanceFqdn           *string
	targetPlmnList                    *[]PlmnId
	requesterPlmnList                 *[]PlmnId
	targetNfInstanceId                *string
	targetNfFqdn                      *string
	hnrfUri                           *string
	snssais                           *[]Snssai
	requesterSnssais                  *[]ExtSnssai
	plmnSpecificSnssaiList            *[]PlmnSnssai
	requesterPlmnSpecificSnssaiList   *[]PlmnSnssai
	dnn                               *string
	ipv4Index                         *IpIndex
	ipv6Index                         *IpIndex
	nsiList                           *[]string
	smfServingArea                    *string
	mbsmfServingArea                  *string
	tai                               *Tai
	amfRegionId                       *string
	amfSetId                          *string
	guami                             *Guami
	supi                              *string
	ueIpv4Address                     *string
	ipDomain                          *string
	ueIpv6Prefix                      *Ipv6Prefix
	pgwInd                            *bool
	preferredPgwInd                   *bool
	pgw                               *string
	pgwIp                             *IpAddr
	gpsi                              *string
	externalGroupIdentity             *string
	internalGroupIdentity             *string
	pfdData                           *PfdData
	dataSet                           *DataSetId
	routingIndicator                  *string
	groupIdList                       *[]string
	dnaiList                          *[]string
	pduSessionTypes                   *[]PduSessionType
	eventIdList                       *[]EventId
	nwdafEventList                    *[]NwdafEvent
	supportedFeatures                 *string
	upfIwkEpsInd                      *bool
	chfSupportedPlmn                  *PlmnId
	preferredLocality                 *string
	extPreferredLocality              *map[string][]LocalityDescription
	accessType                        *AccessType
	limit                             *int32
	requiredFeatures                  *[]string
	complexQuery                      *ComplexQuery
	maxPayloadSize                    *int32
	maxPayloadSizeExt                 *int32
	atsssCapability                   *AtsssCapability
	upfUeIpAddrInd                    *bool
	clientType                        *ExternalClientType
	lmfId                             *string
	anNodeType                        *AnNodeType
	ratType                           *RatType
	preferredTai                      *Tai
	preferredNfInstances              *[]string
	ifNoneMatch                       *string
	targetSnpn                        *PlmnIdNid
	requesterSnpnList                 *[]PlmnIdNid
	afEeData                          *AfEventExposureData
	wAgfInfo                          *WAgfInfo
	tngfInfo                          *TngfInfo
	twifInfo                          *TwifInfo
	targetNfSetId                     *string
	targetNfServiceSetId              *string
	nefId                             *string
	notificationType                  *NotificationType
	n1MsgClass                        *N1MessageClass
	n2InfoClass                       *N2InformationClass
	servingScope                      *[]string
	imsi                              *string
	imsPrivateIdentity                *string
	imsPublicIdentity                 *string
	msisdn                            *string
	preferredApiVersions              *map[string]string
	v2xSupportInd                     *bool
	redundantGtpu                     *bool
	redundantTransport                *bool
	ipups                             *bool
	sxaInd                            *bool
	scpDomainList                     *[]string
	addressDomain                     *string
	ipv4Addr                          *string
	ipv6Prefix                        *Ipv6Prefix
	servedNfSetId                     *string
	remotePlmnId                      *PlmnId
	remoteSnpnId                      *PlmnIdNid
	dataForwarding                    *bool
	preferredFullPlmn                 *bool
	requesterFeatures                 *string
	realmId                           *string
	storageId                         *string
	vsmfSupportInd                    *bool
	ismfSupportInd                    *bool
	nrfDiscUri                        *string
	preferredVendorSpecificFeatures   *map[string]map[string][]VendorSpecificFeature
	preferredVendorSpecificNfFeatures *map[string][]VendorSpecificFeature
	requiredPfcpFeatures              *string
	homePubKeyId                      *int32
	proseSupportInd                   *bool
	analyticsAggregationInd           *bool
	servingNfSetId                    *string
	servingNfType                     *NFType
	mlAnalyticsInfoList               *[]MlAnalyticsInfo
	analyticsMetadataProvInd          *bool
	nsacfCapability                   *NsacfCapability
	mbsSessionIdList                  *[]MbsSessionId
	areaSessionId                     *int32
	gmlcNumber                        *string
	upfN6Ip                           *IpAddr
	taiList                           *[]Tai
	preferencesPrecedence             *[]string
	supportOnboardingCapability       *bool
	uasNfFunctionalityInd             *bool
	v2xCapability                     *V2xCapability
	proseCapability                   *ProSeCapability
	sharedDataId                      *string
	targetHni                         *string
	targetNwResolution                *bool
	excludeNfinstList                 *[]string
	excludeNfservinstList             *[]NfServiceInstance
	excludeNfservicesetList           *[]string
	excludeNfsetList                  *[]string
	preferredAnalyticsDelays          *map[string]int32
	completeProfile                   *bool
	n32Purposes                       *[]N32Purpose
	preferredFeatures                 *map[string]string
	remotePlmnIdRoaming               *PlmnId
}

// Type of the target NF
func (r ApiSearchNFInstancesRequest) TargetNfType(targetNfType NFType) ApiSearchNFInstancesRequest {
	r.targetNfType = &targetNfType
	return r
}

// Type of the requester NF
func (r ApiSearchNFInstancesRequest) RequesterNfType(requesterNfType NFType) ApiSearchNFInstancesRequest {
	r.requesterNfType = &requesterNfType
	return r
}

// Accept-Encoding, described in IETF RFC 7231
func (r ApiSearchNFInstancesRequest) AcceptEncoding(acceptEncoding string) ApiSearchNFInstancesRequest {
	r.acceptEncoding = &acceptEncoding
	return r
}

// collocated NF types that candidate NFs should preferentially support
func (r ApiSearchNFInstancesRequest) PreferredCollocatedNfTypes(preferredCollocatedNfTypes []CollocatedNfType) ApiSearchNFInstancesRequest {
	r.preferredCollocatedNfTypes = &preferredCollocatedNfTypes
	return r
}

// NfInstanceId of the requester NF
func (r ApiSearchNFInstancesRequest) RequesterNfInstanceId(requesterNfInstanceId string) ApiSearchNFInstancesRequest {
	r.requesterNfInstanceId = &requesterNfInstanceId
	return r
}

// Names of the services offered by the NF
func (r ApiSearchNFInstancesRequest) ServiceNames(serviceNames []ServiceName) ApiSearchNFInstancesRequest {
	r.serviceNames = &serviceNames
	return r
}

// FQDN of the requester NF
func (r ApiSearchNFInstancesRequest) RequesterNfInstanceFqdn(requesterNfInstanceFqdn string) ApiSearchNFInstancesRequest {
	r.requesterNfInstanceFqdn = &requesterNfInstanceFqdn
	return r
}

// Id of the PLMN of either the target NF, or in SNPN scenario the Credentials Holder in the PLMN
func (r ApiSearchNFInstancesRequest) TargetPlmnList(targetPlmnList []PlmnId) ApiSearchNFInstancesRequest {
	r.targetPlmnList = &targetPlmnList
	return r
}

// Id of the PLMN where the NF issuing the Discovery request is located
func (r ApiSearchNFInstancesRequest) RequesterPlmnList(requesterPlmnList []PlmnId) ApiSearchNFInstancesRequest {
	r.requesterPlmnList = &requesterPlmnList
	return r
}

// Identity of the NF instance being discovered
func (r ApiSearchNFInstancesRequest) TargetNfInstanceId(targetNfInstanceId string) ApiSearchNFInstancesRequest {
	r.targetNfInstanceId = &targetNfInstanceId
	return r
}

// FQDN of the NF instance being discovered
func (r ApiSearchNFInstancesRequest) TargetNfFqdn(targetNfFqdn string) ApiSearchNFInstancesRequest {
	r.targetNfFqdn = &targetNfFqdn
	return r
}

// Uri of the home NRF
func (r ApiSearchNFInstancesRequest) HnrfUri(hnrfUri string) ApiSearchNFInstancesRequest {
	r.hnrfUri = &hnrfUri
	return r
}

// Slice info of the target NF
func (r ApiSearchNFInstancesRequest) Snssais(snssais []Snssai) ApiSearchNFInstancesRequest {
	r.snssais = &snssais
	return r
}

// Slice info of the requester NF
func (r ApiSearchNFInstancesRequest) RequesterSnssais(requesterSnssais []ExtSnssai) ApiSearchNFInstancesRequest {
	r.requesterSnssais = &requesterSnssais
	return r
}

// PLMN specific Slice info of the target NF
func (r ApiSearchNFInstancesRequest) PlmnSpecificSnssaiList(plmnSpecificSnssaiList []PlmnSnssai) ApiSearchNFInstancesRequest {
	r.plmnSpecificSnssaiList = &plmnSpecificSnssaiList
	return r
}

// PLMN-specific slice info of the NF issuing the Discovery request
func (r ApiSearchNFInstancesRequest) RequesterPlmnSpecificSnssaiList(requesterPlmnSpecificSnssaiList []PlmnSnssai) ApiSearchNFInstancesRequest {
	r.requesterPlmnSpecificSnssaiList = &requesterPlmnSpecificSnssaiList
	return r
}

// Dnn supported by the BSF, SMF or UPF
func (r ApiSearchNFInstancesRequest) Dnn(dnn string) ApiSearchNFInstancesRequest {
	r.dnn = &dnn
	return r
}

// The IPv4 Index supported by the candidate UPF.
func (r ApiSearchNFInstancesRequest) Ipv4Index(ipv4Index IpIndex) ApiSearchNFInstancesRequest {
	r.ipv4Index = &ipv4Index
	return r
}

// The IPv6 Index supported by the candidate UPF.
func (r ApiSearchNFInstancesRequest) Ipv6Index(ipv6Index IpIndex) ApiSearchNFInstancesRequest {
	r.ipv6Index = &ipv6Index
	return r
}

// NSI IDs that are served by the services being discovered
func (r ApiSearchNFInstancesRequest) NsiList(nsiList []string) ApiSearchNFInstancesRequest {
	r.nsiList = &nsiList
	return r
}

func (r ApiSearchNFInstancesRequest) SmfServingArea(smfServingArea string) ApiSearchNFInstancesRequest {
	r.smfServingArea = &smfServingArea
	return r
}

func (r ApiSearchNFInstancesRequest) MbsmfServingArea(mbsmfServingArea string) ApiSearchNFInstancesRequest {
	r.mbsmfServingArea = &mbsmfServingArea
	return r
}

// Tracking Area Identity
func (r ApiSearchNFInstancesRequest) Tai(tai Tai) ApiSearchNFInstancesRequest {
	r.tai = &tai
	return r
}

// AMF Region Identity
func (r ApiSearchNFInstancesRequest) AmfRegionId(amfRegionId string) ApiSearchNFInstancesRequest {
	r.amfRegionId = &amfRegionId
	return r
}

// AMF Set Identity
func (r ApiSearchNFInstancesRequest) AmfSetId(amfSetId string) ApiSearchNFInstancesRequest {
	r.amfSetId = &amfSetId
	return r
}

// Guami used to search for an appropriate AMF
func (r ApiSearchNFInstancesRequest) Guami(guami Guami) ApiSearchNFInstancesRequest {
	r.guami = &guami
	return r
}

// SUPI of the user
func (r ApiSearchNFInstancesRequest) Supi(supi string) ApiSearchNFInstancesRequest {
	r.supi = &supi
	return r
}

// IPv4 address of the UE
func (r ApiSearchNFInstancesRequest) UeIpv4Address(ueIpv4Address string) ApiSearchNFInstancesRequest {
	r.ueIpv4Address = &ueIpv4Address
	return r
}

// IP domain of the UE, which supported by BSF
func (r ApiSearchNFInstancesRequest) IpDomain(ipDomain string) ApiSearchNFInstancesRequest {
	r.ipDomain = &ipDomain
	return r
}

// IPv6 prefix of the UE
func (r ApiSearchNFInstancesRequest) UeIpv6Prefix(ueIpv6Prefix Ipv6Prefix) ApiSearchNFInstancesRequest {
	r.ueIpv6Prefix = &ueIpv6Prefix
	return r
}

// Combined PGW-C and SMF or a standalone SMF
func (r ApiSearchNFInstancesRequest) PgwInd(pgwInd bool) ApiSearchNFInstancesRequest {
	r.pgwInd = &pgwInd
	return r
}

// Indicates combined PGW-C+SMF or standalone SMF are preferred
func (r ApiSearchNFInstancesRequest) PreferredPgwInd(preferredPgwInd bool) ApiSearchNFInstancesRequest {
	r.preferredPgwInd = &preferredPgwInd
	return r
}

// PGW FQDN of a combined PGW-C and SMF
func (r ApiSearchNFInstancesRequest) Pgw(pgw string) ApiSearchNFInstancesRequest {
	r.pgw = &pgw
	return r
}

// PGW IP Address of a combined PGW-C and SMF
func (r ApiSearchNFInstancesRequest) PgwIp(pgwIp IpAddr) ApiSearchNFInstancesRequest {
	r.pgwIp = &pgwIp
	return r
}

// GPSI of the user
func (r ApiSearchNFInstancesRequest) Gpsi(gpsi string) ApiSearchNFInstancesRequest {
	r.gpsi = &gpsi
	return r
}

// external group identifier of the user
func (r ApiSearchNFInstancesRequest) ExternalGroupIdentity(externalGroupIdentity string) ApiSearchNFInstancesRequest {
	r.externalGroupIdentity = &externalGroupIdentity
	return r
}

// internal group identifier of the user
func (r ApiSearchNFInstancesRequest) InternalGroupIdentity(internalGroupIdentity string) ApiSearchNFInstancesRequest {
	r.internalGroupIdentity = &internalGroupIdentity
	return r
}

// PFD data
func (r ApiSearchNFInstancesRequest) PfdData(pfdData PfdData) ApiSearchNFInstancesRequest {
	r.pfdData = &pfdData
	return r
}

// data set supported by the NF
func (r ApiSearchNFInstancesRequest) DataSet(dataSet DataSetId) ApiSearchNFInstancesRequest {
	r.dataSet = &dataSet
	return r
}

// routing indicator in SUCI
func (r ApiSearchNFInstancesRequest) RoutingIndicator(routingIndicator string) ApiSearchNFInstancesRequest {
	r.routingIndicator = &routingIndicator
	return r
}

// Group IDs of the NFs being discovered
func (r ApiSearchNFInstancesRequest) GroupIdList(groupIdList []string) ApiSearchNFInstancesRequest {
	r.groupIdList = &groupIdList
	return r
}

// Data network access identifiers of the NFs being discovered
func (r ApiSearchNFInstancesRequest) DnaiList(dnaiList []string) ApiSearchNFInstancesRequest {
	r.dnaiList = &dnaiList
	return r
}

// list of PDU Session Type required to be supported by the target NF
func (r ApiSearchNFInstancesRequest) PduSessionTypes(pduSessionTypes []PduSessionType) ApiSearchNFInstancesRequest {
	r.pduSessionTypes = &pduSessionTypes
	return r
}

// Analytics event(s) requested to be supported by the Nnwdaf_AnalyticsInfo service
func (r ApiSearchNFInstancesRequest) EventIdList(eventIdList []EventId) ApiSearchNFInstancesRequest {
	r.eventIdList = &eventIdList
	return r
}

// Analytics event(s) requested to be supported by the Nnwdaf_EventsSubscription service.
func (r ApiSearchNFInstancesRequest) NwdafEventList(nwdafEventList []NwdafEvent) ApiSearchNFInstancesRequest {
	r.nwdafEventList = &nwdafEventList
	return r
}

// Features required to be supported by the target NF
func (r ApiSearchNFInstancesRequest) SupportedFeatures(supportedFeatures string) ApiSearchNFInstancesRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

// UPF supporting interworking with EPS or not
func (r ApiSearchNFInstancesRequest) UpfIwkEpsInd(upfIwkEpsInd bool) ApiSearchNFInstancesRequest {
	r.upfIwkEpsInd = &upfIwkEpsInd
	return r
}

// PLMN ID supported by a CHF
func (r ApiSearchNFInstancesRequest) ChfSupportedPlmn(chfSupportedPlmn PlmnId) ApiSearchNFInstancesRequest {
	r.chfSupportedPlmn = &chfSupportedPlmn
	return r
}

// preferred target NF location
func (r ApiSearchNFInstancesRequest) PreferredLocality(preferredLocality string) ApiSearchNFInstancesRequest {
	r.preferredLocality = &preferredLocality
	return r
}

// preferred target NF location A map (list of key-value pairs) where the key of the map represents the relative priority, for the requester, of each locality description among the list of locality descriptions in this query parameter, encoded as \&quot;1\&quot; (highest priority\&quot;), \&quot;2\&quot;, \&quot;3\&quot;, â¦,  \&quot;n\&quot; (lowest priority)
func (r ApiSearchNFInstancesRequest) ExtPreferredLocality(extPreferredLocality map[string][]LocalityDescription) ApiSearchNFInstancesRequest {
	r.extPreferredLocality = &extPreferredLocality
	return r
}

// AccessType supported by the target NF
func (r ApiSearchNFInstancesRequest) AccessType(accessType AccessType) ApiSearchNFInstancesRequest {
	r.accessType = &accessType
	return r
}

// Maximum number of NFProfiles to return in the response
func (r ApiSearchNFInstancesRequest) Limit(limit int32) ApiSearchNFInstancesRequest {
	r.limit = &limit
	return r
}

// Features required to be supported by the target NF
func (r ApiSearchNFInstancesRequest) RequiredFeatures(requiredFeatures []string) ApiSearchNFInstancesRequest {
	r.requiredFeatures = &requiredFeatures
	return r
}

// the complex query condition expression
func (r ApiSearchNFInstancesRequest) ComplexQuery(complexQuery ComplexQuery) ApiSearchNFInstancesRequest {
	r.complexQuery = &complexQuery
	return r
}

// Maximum payload size of the response expressed in kilo octets
func (r ApiSearchNFInstancesRequest) MaxPayloadSize(maxPayloadSize int32) ApiSearchNFInstancesRequest {
	r.maxPayloadSize = &maxPayloadSize
	return r
}

// Extended query for maximum payload size of the response expressed in kilo octets
func (r ApiSearchNFInstancesRequest) MaxPayloadSizeExt(maxPayloadSizeExt int32) ApiSearchNFInstancesRequest {
	r.maxPayloadSizeExt = &maxPayloadSizeExt
	return r
}

// ATSSS Capability
func (r ApiSearchNFInstancesRequest) AtsssCapability(atsssCapability AtsssCapability) ApiSearchNFInstancesRequest {
	r.atsssCapability = &atsssCapability
	return r
}

// UPF supporting allocating UE IP addresses/prefixes
func (r ApiSearchNFInstancesRequest) UpfUeIpAddrInd(upfUeIpAddrInd bool) ApiSearchNFInstancesRequest {
	r.upfUeIpAddrInd = &upfUeIpAddrInd
	return r
}

// Requested client type served by the NF
func (r ApiSearchNFInstancesRequest) ClientType(clientType ExternalClientType) ApiSearchNFInstancesRequest {
	r.clientType = &clientType
	return r
}

// LMF identification to be discovered
func (r ApiSearchNFInstancesRequest) LmfId(lmfId string) ApiSearchNFInstancesRequest {
	r.lmfId = &lmfId
	return r
}

// Requested AN node type served by the NF
func (r ApiSearchNFInstancesRequest) AnNodeType(anNodeType AnNodeType) ApiSearchNFInstancesRequest {
	r.anNodeType = &anNodeType
	return r
}

// Requested RAT type served by the NF
func (r ApiSearchNFInstancesRequest) RatType(ratType RatType) ApiSearchNFInstancesRequest {
	r.ratType = &ratType
	return r
}

// preferred Tracking Area Identity
func (r ApiSearchNFInstancesRequest) PreferredTai(preferredTai Tai) ApiSearchNFInstancesRequest {
	r.preferredTai = &preferredTai
	return r
}

// preferred NF Instances
func (r ApiSearchNFInstancesRequest) PreferredNfInstances(preferredNfInstances []string) ApiSearchNFInstancesRequest {
	r.preferredNfInstances = &preferredNfInstances
	return r
}

// Validator for conditional requests, as described in IETF RFC 7232, 3.2
func (r ApiSearchNFInstancesRequest) IfNoneMatch(ifNoneMatch string) ApiSearchNFInstancesRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// Target SNPN Identity, or the Credentials Holder in the SNPN
func (r ApiSearchNFInstancesRequest) TargetSnpn(targetSnpn PlmnIdNid) ApiSearchNFInstancesRequest {
	r.targetSnpn = &targetSnpn
	return r
}

// SNPN ID(s) of the NF instance issuing the Discovery request
func (r ApiSearchNFInstancesRequest) RequesterSnpnList(requesterSnpnList []PlmnIdNid) ApiSearchNFInstancesRequest {
	r.requesterSnpnList = &requesterSnpnList
	return r
}

// NEF exposured by the AF
func (r ApiSearchNFInstancesRequest) AfEeData(afEeData AfEventExposureData) ApiSearchNFInstancesRequest {
	r.afEeData = &afEeData
	return r
}

// UPF collocated with W-AGF
func (r ApiSearchNFInstancesRequest) WAgfInfo(wAgfInfo WAgfInfo) ApiSearchNFInstancesRequest {
	r.wAgfInfo = &wAgfInfo
	return r
}

// UPF collocated with TNGF
func (r ApiSearchNFInstancesRequest) TngfInfo(tngfInfo TngfInfo) ApiSearchNFInstancesRequest {
	r.tngfInfo = &tngfInfo
	return r
}

// UPF collocated with TWIF
func (r ApiSearchNFInstancesRequest) TwifInfo(twifInfo TwifInfo) ApiSearchNFInstancesRequest {
	r.twifInfo = &twifInfo
	return r
}

// Target NF Set ID
func (r ApiSearchNFInstancesRequest) TargetNfSetId(targetNfSetId string) ApiSearchNFInstancesRequest {
	r.targetNfSetId = &targetNfSetId
	return r
}

// Target NF Service Set ID
func (r ApiSearchNFInstancesRequest) TargetNfServiceSetId(targetNfServiceSetId string) ApiSearchNFInstancesRequest {
	r.targetNfServiceSetId = &targetNfServiceSetId
	return r
}

// NEF ID
func (r ApiSearchNFInstancesRequest) NefId(nefId string) ApiSearchNFInstancesRequest {
	r.nefId = &nefId
	return r
}

// Notification Type
func (r ApiSearchNFInstancesRequest) NotificationType(notificationType NotificationType) ApiSearchNFInstancesRequest {
	r.notificationType = &notificationType
	return r
}

// N1 Message Class
func (r ApiSearchNFInstancesRequest) N1MsgClass(n1MsgClass N1MessageClass) ApiSearchNFInstancesRequest {
	r.n1MsgClass = &n1MsgClass
	return r
}

// N2 Information Class
func (r ApiSearchNFInstancesRequest) N2InfoClass(n2InfoClass N2InformationClass) ApiSearchNFInstancesRequest {
	r.n2InfoClass = &n2InfoClass
	return r
}

// areas that can be served by the target NF
func (r ApiSearchNFInstancesRequest) ServingScope(servingScope []string) ApiSearchNFInstancesRequest {
	r.servingScope = &servingScope
	return r
}

// IMSI of the requester UE to search for an appropriate NF (e.g. HSS)
func (r ApiSearchNFInstancesRequest) Imsi(imsi string) ApiSearchNFInstancesRequest {
	r.imsi = &imsi
	return r
}

// IMPI of the requester UE to search for a target HSS
func (r ApiSearchNFInstancesRequest) ImsPrivateIdentity(imsPrivateIdentity string) ApiSearchNFInstancesRequest {
	r.imsPrivateIdentity = &imsPrivateIdentity
	return r
}

// IMS Public Identity of the requester UE to search for a target HSS
func (r ApiSearchNFInstancesRequest) ImsPublicIdentity(imsPublicIdentity string) ApiSearchNFInstancesRequest {
	r.imsPublicIdentity = &imsPublicIdentity
	return r
}

// MSISDN of the requester UE to search for a target HSS
func (r ApiSearchNFInstancesRequest) Msisdn(msisdn string) ApiSearchNFInstancesRequest {
	r.msisdn = &msisdn
	return r
}

// Preferred API version of the services to be discovered
func (r ApiSearchNFInstancesRequest) PreferredApiVersions(preferredApiVersions map[string]string) ApiSearchNFInstancesRequest {
	r.preferredApiVersions = &preferredApiVersions
	return r
}

// PCF supports V2X
func (r ApiSearchNFInstancesRequest) V2xSupportInd(v2xSupportInd bool) ApiSearchNFInstancesRequest {
	r.v2xSupportInd = &v2xSupportInd
	return r
}

// UPF supports redundant gtp-u to be discovered
func (r ApiSearchNFInstancesRequest) RedundantGtpu(redundantGtpu bool) ApiSearchNFInstancesRequest {
	r.redundantGtpu = &redundantGtpu
	return r
}

// UPF supports redundant transport path to be discovered
func (r ApiSearchNFInstancesRequest) RedundantTransport(redundantTransport bool) ApiSearchNFInstancesRequest {
	r.redundantTransport = &redundantTransport
	return r
}

// UPF which is configured for IPUPS functionality to be discovered
func (r ApiSearchNFInstancesRequest) Ipups(ipups bool) ApiSearchNFInstancesRequest {
	r.ipups = &ipups
	return r
}

// UPF which is configured to support sxa interface
func (r ApiSearchNFInstancesRequest) SxaInd(sxaInd bool) ApiSearchNFInstancesRequest {
	r.sxaInd = &sxaInd
	return r
}

// SCP domains the target SCP or SEPP belongs to
func (r ApiSearchNFInstancesRequest) ScpDomainList(scpDomainList []string) ApiSearchNFInstancesRequest {
	r.scpDomainList = &scpDomainList
	return r
}

// Address domain reachable through the SCP
func (r ApiSearchNFInstancesRequest) AddressDomain(addressDomain string) ApiSearchNFInstancesRequest {
	r.addressDomain = &addressDomain
	return r
}

// IPv4 address reachable through the SCP
func (r ApiSearchNFInstancesRequest) Ipv4Addr(ipv4Addr string) ApiSearchNFInstancesRequest {
	r.ipv4Addr = &ipv4Addr
	return r
}

// IPv6 prefix reachable through the SCP
func (r ApiSearchNFInstancesRequest) Ipv6Prefix(ipv6Prefix Ipv6Prefix) ApiSearchNFInstancesRequest {
	r.ipv6Prefix = &ipv6Prefix
	return r
}

// NF Set ID served by the SCP
func (r ApiSearchNFInstancesRequest) ServedNfSetId(servedNfSetId string) ApiSearchNFInstancesRequest {
	r.servedNfSetId = &servedNfSetId
	return r
}

// Id of the PLMN reachable through the SCP or SEPP
func (r ApiSearchNFInstancesRequest) RemotePlmnId(remotePlmnId PlmnId) ApiSearchNFInstancesRequest {
	r.remotePlmnId = &remotePlmnId
	return r
}

// Id of the SNPN reachable through the SCP or SEPP
func (r ApiSearchNFInstancesRequest) RemoteSnpnId(remoteSnpnId PlmnIdNid) ApiSearchNFInstancesRequest {
	r.remoteSnpnId = &remoteSnpnId
	return r
}

// UPF Instance(s) configured for data forwarding are requested
func (r ApiSearchNFInstancesRequest) DataForwarding(dataForwarding bool) ApiSearchNFInstancesRequest {
	r.dataForwarding = &dataForwarding
	return r
}

// NF Instance(s) serving the full PLMN are preferred
func (r ApiSearchNFInstancesRequest) PreferredFullPlmn(preferredFullPlmn bool) ApiSearchNFInstancesRequest {
	r.preferredFullPlmn = &preferredFullPlmn
	return r
}

// Features supported by the NF Service Consumer that is invoking the Nnrf_NFDiscovery service
func (r ApiSearchNFInstancesRequest) RequesterFeatures(requesterFeatures string) ApiSearchNFInstancesRequest {
	r.requesterFeatures = &requesterFeatures
	return r
}

// realm-id to search for an appropriate UDSF
func (r ApiSearchNFInstancesRequest) RealmId(realmId string) ApiSearchNFInstancesRequest {
	r.realmId = &realmId
	return r
}

// storage-id to search for an appropriate UDSF
func (r ApiSearchNFInstancesRequest) StorageId(storageId string) ApiSearchNFInstancesRequest {
	r.storageId = &storageId
	return r
}

// V-SMF capability supported by the target NF instance(s)
func (r ApiSearchNFInstancesRequest) VsmfSupportInd(vsmfSupportInd bool) ApiSearchNFInstancesRequest {
	r.vsmfSupportInd = &vsmfSupportInd
	return r
}

// I-SMF capability supported by the target NF instance(s)
func (r ApiSearchNFInstancesRequest) IsmfSupportInd(ismfSupportInd bool) ApiSearchNFInstancesRequest {
	r.ismfSupportInd = &ismfSupportInd
	return r
}

// Uri of the NRF holding the NF profile of a target NF Instance
func (r ApiSearchNFInstancesRequest) NrfDiscUri(nrfDiscUri string) ApiSearchNFInstancesRequest {
	r.nrfDiscUri = &nrfDiscUri
	return r
}

// Preferred vendor specific features of the services to be discovered
func (r ApiSearchNFInstancesRequest) PreferredVendorSpecificFeatures(preferredVendorSpecificFeatures map[string]map[string][]VendorSpecificFeature) ApiSearchNFInstancesRequest {
	r.preferredVendorSpecificFeatures = &preferredVendorSpecificFeatures
	return r
}

// Preferred vendor specific features of the network function to be discovered
func (r ApiSearchNFInstancesRequest) PreferredVendorSpecificNfFeatures(preferredVendorSpecificNfFeatures map[string][]VendorSpecificFeature) ApiSearchNFInstancesRequest {
	r.preferredVendorSpecificNfFeatures = &preferredVendorSpecificNfFeatures
	return r
}

// PFCP features required to be supported by the target UPF
func (r ApiSearchNFInstancesRequest) RequiredPfcpFeatures(requiredPfcpFeatures string) ApiSearchNFInstancesRequest {
	r.requiredPfcpFeatures = &requiredPfcpFeatures
	return r
}

// Indicates the Home Network Public Key ID which shall be able to be served by the NF instance
func (r ApiSearchNFInstancesRequest) HomePubKeyId(homePubKeyId int32) ApiSearchNFInstancesRequest {
	r.homePubKeyId = &homePubKeyId
	return r
}

// PCF supports ProSe Capability
func (r ApiSearchNFInstancesRequest) ProseSupportInd(proseSupportInd bool) ApiSearchNFInstancesRequest {
	r.proseSupportInd = &proseSupportInd
	return r
}

// analytics aggregation is supported by NWDAF or not
func (r ApiSearchNFInstancesRequest) AnalyticsAggregationInd(analyticsAggregationInd bool) ApiSearchNFInstancesRequest {
	r.analyticsAggregationInd = &analyticsAggregationInd
	return r
}

// NF Set Id served by target NF
func (r ApiSearchNFInstancesRequest) ServingNfSetId(servingNfSetId string) ApiSearchNFInstancesRequest {
	r.servingNfSetId = &servingNfSetId
	return r
}

// NF type served by the target NF
func (r ApiSearchNFInstancesRequest) ServingNfType(servingNfType NFType) ApiSearchNFInstancesRequest {
	r.servingNfType = &servingNfType
	return r
}

// Lisf of ML Analytics Filter information of Nnwdaf_MLModelProvision service
func (r ApiSearchNFInstancesRequest) MlAnalyticsInfoList(mlAnalyticsInfoList []MlAnalyticsInfo) ApiSearchNFInstancesRequest {
	r.mlAnalyticsInfoList = &mlAnalyticsInfoList
	return r
}

// analytics matadata provisioning is supported by NWDAF or not
func (r ApiSearchNFInstancesRequest) AnalyticsMetadataProvInd(analyticsMetadataProvInd bool) ApiSearchNFInstancesRequest {
	r.analyticsMetadataProvInd = &analyticsMetadataProvInd
	return r
}

// the service capability supported by the target NSACF
func (r ApiSearchNFInstancesRequest) NsacfCapability(nsacfCapability NsacfCapability) ApiSearchNFInstancesRequest {
	r.nsacfCapability = &nsacfCapability
	return r
}

// List of MBS Session ID(s)
func (r ApiSearchNFInstancesRequest) MbsSessionIdList(mbsSessionIdList []MbsSessionId) ApiSearchNFInstancesRequest {
	r.mbsSessionIdList = &mbsSessionIdList
	return r
}

// Area Session ID
func (r ApiSearchNFInstancesRequest) AreaSessionId(areaSessionId int32) ApiSearchNFInstancesRequest {
	r.areaSessionId = &areaSessionId
	return r
}

// The GMLC Number supported by the GMLC
func (r ApiSearchNFInstancesRequest) GmlcNumber(gmlcNumber string) ApiSearchNFInstancesRequest {
	r.gmlcNumber = &gmlcNumber
	return r
}

// N6 IP address of PSA UPF supported by the EASDF
func (r ApiSearchNFInstancesRequest) UpfN6Ip(upfN6Ip IpAddr) ApiSearchNFInstancesRequest {
	r.upfN6Ip = &upfN6Ip
	return r
}

// Tracking Area Identifiers of the NFs being discovered
func (r ApiSearchNFInstancesRequest) TaiList(taiList []Tai) ApiSearchNFInstancesRequest {
	r.taiList = &taiList
	return r
}

// Indicates the precedence of the preference query parameters (from higher to lower)
func (r ApiSearchNFInstancesRequest) PreferencesPrecedence(preferencesPrecedence []string) ApiSearchNFInstancesRequest {
	r.preferencesPrecedence = &preferencesPrecedence
	return r
}

// Indicating the support for onboarding.
func (r ApiSearchNFInstancesRequest) SupportOnboardingCapability(supportOnboardingCapability bool) ApiSearchNFInstancesRequest {
	r.supportOnboardingCapability = &supportOnboardingCapability
	return r
}

// UAS NF functionality is supported by NEF or not
func (r ApiSearchNFInstancesRequest) UasNfFunctionalityInd(uasNfFunctionalityInd bool) ApiSearchNFInstancesRequest {
	r.uasNfFunctionalityInd = &uasNfFunctionalityInd
	return r
}

// indicates the V2X capability that the target PCF needs to support.
func (r ApiSearchNFInstancesRequest) V2xCapability(v2xCapability V2xCapability) ApiSearchNFInstancesRequest {
	r.v2xCapability = &v2xCapability
	return r
}

// indicates the ProSe capability that the target PCF needs to support.
func (r ApiSearchNFInstancesRequest) ProseCapability(proseCapability ProSeCapability) ApiSearchNFInstancesRequest {
	r.proseCapability = &proseCapability
	return r
}

// Identifier of shared data stored in the NF being discovered
func (r ApiSearchNFInstancesRequest) SharedDataId(sharedDataId string) ApiSearchNFInstancesRequest {
	r.sharedDataId = &sharedDataId
	return r
}

// Home Network Identifier query.
func (r ApiSearchNFInstancesRequest) TargetHni(targetHni string) ApiSearchNFInstancesRequest {
	r.targetHni = &targetHni
	return r
}

// Resolution of the identity of the target PLMN based on the GPSI of the UE
func (r ApiSearchNFInstancesRequest) TargetNwResolution(targetNwResolution bool) ApiSearchNFInstancesRequest {
	r.targetNwResolution = &targetNwResolution
	return r
}

// NF Instance IDs to be excluded from the NF Discovery procedure
func (r ApiSearchNFInstancesRequest) ExcludeNfinstList(excludeNfinstList []string) ApiSearchNFInstancesRequest {
	r.excludeNfinstList = &excludeNfinstList
	return r
}

// NF service instance IDs to be excluded from the NF Discovery procedure
func (r ApiSearchNFInstancesRequest) ExcludeNfservinstList(excludeNfservinstList []NfServiceInstance) ApiSearchNFInstancesRequest {
	r.excludeNfservinstList = &excludeNfservinstList
	return r
}

// NF Service Set IDs to be excluded from the NF Discovery procedure
func (r ApiSearchNFInstancesRequest) ExcludeNfservicesetList(excludeNfservicesetList []string) ApiSearchNFInstancesRequest {
	r.excludeNfservicesetList = &excludeNfservicesetList
	return r
}

// NF Set IDs to be excluded from the NF Discovery procedure
func (r ApiSearchNFInstancesRequest) ExcludeNfsetList(excludeNfsetList []string) ApiSearchNFInstancesRequest {
	r.excludeNfsetList = &excludeNfsetList
	return r
}

// Preferred analytics delays supported by the NWDAF to be discovered
func (r ApiSearchNFInstancesRequest) PreferredAnalyticsDelays(preferredAnalyticsDelays map[string]int32) ApiSearchNFInstancesRequest {
	r.preferredAnalyticsDelays = &preferredAnalyticsDelays
	return r
}

// request to discover the complete profile of NF instances
func (r ApiSearchNFInstancesRequest) CompleteProfile(completeProfile bool) ApiSearchNFInstancesRequest {
	r.completeProfile = &completeProfile
	return r
}

// N32 purposes to be supported by the SEPP
func (r ApiSearchNFInstancesRequest) N32Purposes(n32Purposes []N32Purpose) ApiSearchNFInstancesRequest {
	r.n32Purposes = &n32Purposes
	return r
}

// Preferred features to be supported by the target Network Function.
func (r ApiSearchNFInstancesRequest) PreferredFeatures(preferredFeatures map[string]string) ApiSearchNFInstancesRequest {
	r.preferredFeatures = &preferredFeatures
	return r
}

// Id of the remote PLMN served by the target NF service producer
func (r ApiSearchNFInstancesRequest) RemotePlmnIdRoaming(remotePlmnIdRoaming PlmnId) ApiSearchNFInstancesRequest {
	r.remotePlmnIdRoaming = &remotePlmnIdRoaming
	return r
}

func (r ApiSearchNFInstancesRequest) Execute() (*SearchResult, *http.Response, error) {
	return r.ApiService.SearchNFInstancesExecute(r)
}

/*
SearchNFInstances Search a collection of NF Instances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchNFInstancesRequest
*/
func (a *NFInstancesStoreApiService) SearchNFInstances(ctx context.Context) ApiSearchNFInstancesRequest {
	return ApiSearchNFInstancesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchResult
func (a *NFInstancesStoreApiService) SearchNFInstancesExecute(r ApiSearchNFInstancesRequest) (*SearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NFInstancesStoreApiService.SearchNFInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nf-instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.targetNfType == nil {
		return localVarReturnValue, nil, reportError("targetNfType is required and must be specified")
	}
	if r.requesterNfType == nil {
		return localVarReturnValue, nil, reportError("requesterNfType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "target-nf-type", r.targetNfType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "requester-nf-type", r.requesterNfType, "")
	if r.preferredCollocatedNfTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-collocated-nf-types", r.preferredCollocatedNfTypes, "csv")
	}
	if r.requesterNfInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester-nf-instance-id", r.requesterNfInstanceId, "")
	}
	if r.serviceNames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service-names", r.serviceNames, "csv")
	}
	if r.requesterNfInstanceFqdn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester-nf-instance-fqdn", r.requesterNfInstanceFqdn, "")
	}
	if r.targetPlmnList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target-plmn-list", r.targetPlmnList, "csv")
	}
	if r.requesterPlmnList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester-plmn-list", r.requesterPlmnList, "csv")
	}
	if r.targetNfInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target-nf-instance-id", r.targetNfInstanceId, "")
	}
	if r.targetNfFqdn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target-nf-fqdn", r.targetNfFqdn, "")
	}
	if r.hnrfUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hnrf-uri", r.hnrfUri, "")
	}
	if r.snssais != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "snssais", r.snssais, "csv")
	}
	if r.requesterSnssais != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester-snssais", r.requesterSnssais, "csv")
	}
	if r.plmnSpecificSnssaiList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "plmn-specific-snssai-list", r.plmnSpecificSnssaiList, "csv")
	}
	if r.requesterPlmnSpecificSnssaiList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester-plmn-specific-snssai-list", r.requesterPlmnSpecificSnssaiList, "csv")
	}
	if r.dnn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dnn", r.dnn, "")
	}
	if r.ipv4Index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipv4-index", r.ipv4Index, "")
	}
	if r.ipv6Index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipv6-index", r.ipv6Index, "")
	}
	if r.nsiList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nsi-list", r.nsiList, "csv")
	}
	if r.smfServingArea != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "smf-serving-area", r.smfServingArea, "")
	}
	if r.mbsmfServingArea != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mbsmf-serving-area", r.mbsmfServingArea, "")
	}
	if r.tai != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tai", r.tai, "")
	}
	if r.amfRegionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amf-region-id", r.amfRegionId, "")
	}
	if r.amfSetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amf-set-id", r.amfSetId, "")
	}
	if r.guami != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guami", r.guami, "")
	}
	if r.supi != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supi", r.supi, "")
	}
	if r.ueIpv4Address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ue-ipv4-address", r.ueIpv4Address, "")
	}
	if r.ipDomain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip-domain", r.ipDomain, "")
	}
	if r.ueIpv6Prefix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ue-ipv6-prefix", r.ueIpv6Prefix, "")
	}
	if r.pgwInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pgw-ind", r.pgwInd, "")
	}
	if r.preferredPgwInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-pgw-ind", r.preferredPgwInd, "")
	}
	if r.pgw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pgw", r.pgw, "")
	}
	if r.pgwIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pgw-ip", r.pgwIp, "")
	}
	if r.gpsi != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpsi", r.gpsi, "")
	}
	if r.externalGroupIdentity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "external-group-identity", r.externalGroupIdentity, "")
	}
	if r.internalGroupIdentity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "internal-group-identity", r.internalGroupIdentity, "")
	}
	if r.pfdData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pfd-data", r.pfdData, "")
	}
	if r.dataSet != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "data-set", r.dataSet, "")
	}
	if r.routingIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "routing-indicator", r.routingIndicator, "")
	}
	if r.groupIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group-id-list", r.groupIdList, "csv")
	}
	if r.dnaiList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dnai-list", r.dnaiList, "csv")
	}
	if r.pduSessionTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pdu-session-types", r.pduSessionTypes, "csv")
	}
	if r.eventIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "event-id-list", r.eventIdList, "csv")
	}
	if r.nwdafEventList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nwdaf-event-list", r.nwdafEventList, "csv")
	}
	if r.supportedFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	if r.upfIwkEpsInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upf-iwk-eps-ind", r.upfIwkEpsInd, "")
	}
	if r.chfSupportedPlmn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chf-supported-plmn", r.chfSupportedPlmn, "")
	}
	if r.preferredLocality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-locality", r.preferredLocality, "")
	}
	if r.extPreferredLocality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ext-preferred-locality", r.extPreferredLocality, "")
	}
	if r.accessType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "access-type", r.accessType, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.requiredFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "required-features", r.requiredFeatures, "csv")
	}
	if r.complexQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "complex-query", r.complexQuery, "")
	}
	if r.maxPayloadSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max-payload-size", r.maxPayloadSize, "")
	}
	if r.maxPayloadSizeExt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max-payload-size-ext", r.maxPayloadSizeExt, "")
	}
	if r.atsssCapability != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atsss-capability", r.atsssCapability, "")
	}
	if r.upfUeIpAddrInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upf-ue-ip-addr-ind", r.upfUeIpAddrInd, "")
	}
	if r.clientType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client-type", r.clientType, "")
	}
	if r.lmfId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lmf-id", r.lmfId, "")
	}
	if r.anNodeType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "an-node-type", r.anNodeType, "")
	}
	if r.ratType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rat-type", r.ratType, "")
	}
	if r.preferredTai != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-tai", r.preferredTai, "")
	}
	if r.preferredNfInstances != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-nf-instances", r.preferredNfInstances, "csv")
	}
	if r.targetSnpn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target-snpn", r.targetSnpn, "")
	}
	if r.requesterSnpnList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester-snpn-list", r.requesterSnpnList, "csv")
	}
	if r.afEeData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "af-ee-data", r.afEeData, "")
	}
	if r.wAgfInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "w-agf-info", r.wAgfInfo, "")
	}
	if r.tngfInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tngf-info", r.tngfInfo, "")
	}
	if r.twifInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "twif-info", r.twifInfo, "")
	}
	if r.targetNfSetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target-nf-set-id", r.targetNfSetId, "")
	}
	if r.targetNfServiceSetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target-nf-service-set-id", r.targetNfServiceSetId, "")
	}
	if r.nefId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nef-id", r.nefId, "")
	}
	if r.notificationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "notification-type", r.notificationType, "")
	}
	if r.n1MsgClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "n1-msg-class", r.n1MsgClass, "")
	}
	if r.n2InfoClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "n2-info-class", r.n2InfoClass, "")
	}
	if r.servingScope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serving-scope", r.servingScope, "csv")
	}
	if r.imsi != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imsi", r.imsi, "")
	}
	if r.imsPrivateIdentity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ims-private-identity", r.imsPrivateIdentity, "")
	}
	if r.imsPublicIdentity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ims-public-identity", r.imsPublicIdentity, "")
	}
	if r.msisdn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "msisdn", r.msisdn, "")
	}
	if r.preferredApiVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-api-versions", r.preferredApiVersions, "")
	}
	if r.v2xSupportInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "v2x-support-ind", r.v2xSupportInd, "")
	}
	if r.redundantGtpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "redundant-gtpu", r.redundantGtpu, "")
	}
	if r.redundantTransport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "redundant-transport", r.redundantTransport, "")
	}
	if r.ipups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipups", r.ipups, "")
	}
	if r.sxaInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sxa-ind", r.sxaInd, "")
	}
	if r.scpDomainList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scp-domain-list", r.scpDomainList, "csv")
	}
	if r.addressDomain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address-domain", r.addressDomain, "")
	}
	if r.ipv4Addr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipv4-addr", r.ipv4Addr, "")
	}
	if r.ipv6Prefix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipv6-prefix", r.ipv6Prefix, "")
	}
	if r.servedNfSetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "served-nf-set-id", r.servedNfSetId, "")
	}
	if r.remotePlmnId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote-plmn-id", r.remotePlmnId, "")
	}
	if r.remoteSnpnId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote-snpn-id", r.remoteSnpnId, "")
	}
	if r.dataForwarding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "data-forwarding", r.dataForwarding, "")
	}
	if r.preferredFullPlmn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-full-plmn", r.preferredFullPlmn, "")
	}
	if r.requesterFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester-features", r.requesterFeatures, "")
	}
	if r.realmId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "realm-id", r.realmId, "")
	}
	if r.storageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "storage-id", r.storageId, "")
	}
	if r.vsmfSupportInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vsmf-support-ind", r.vsmfSupportInd, "")
	}
	if r.ismfSupportInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ismf-support-ind", r.ismfSupportInd, "")
	}
	if r.nrfDiscUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nrf-disc-uri", r.nrfDiscUri, "")
	}
	if r.preferredVendorSpecificFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-vendor-specific-features", r.preferredVendorSpecificFeatures, "")
	}
	if r.preferredVendorSpecificNfFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-vendor-specific-nf-features", r.preferredVendorSpecificNfFeatures, "")
	}
	if r.requiredPfcpFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "required-pfcp-features", r.requiredPfcpFeatures, "")
	}
	if r.homePubKeyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "home-pub-key-id", r.homePubKeyId, "")
	}
	if r.proseSupportInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prose-support-ind", r.proseSupportInd, "")
	}
	if r.analyticsAggregationInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "analytics-aggregation-ind", r.analyticsAggregationInd, "")
	}
	if r.servingNfSetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serving-nf-set-id", r.servingNfSetId, "")
	}
	if r.servingNfType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serving-nf-type", r.servingNfType, "")
	}
	if r.mlAnalyticsInfoList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ml-analytics-info-list", r.mlAnalyticsInfoList, "csv")
	}
	if r.analyticsMetadataProvInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "analytics-metadata-prov-ind", r.analyticsMetadataProvInd, "")
	}
	if r.nsacfCapability != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nsacf-capability", r.nsacfCapability, "")
	}
	if r.mbsSessionIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mbs-session-id-list", r.mbsSessionIdList, "csv")
	}
	if r.areaSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "area-session-id", r.areaSessionId, "")
	}
	if r.gmlcNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gmlc-number", r.gmlcNumber, "")
	}
	if r.upfN6Ip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upf-n6-ip", r.upfN6Ip, "")
	}
	if r.taiList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tai-list", r.taiList, "csv")
	}
	if r.preferencesPrecedence != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferences-precedence", r.preferencesPrecedence, "csv")
	}
	if r.supportOnboardingCapability != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "support-onboarding-capability", r.supportOnboardingCapability, "")
	}
	if r.uasNfFunctionalityInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uas-nf-functionality-ind", r.uasNfFunctionalityInd, "")
	}
	if r.v2xCapability != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "v2x-capability", r.v2xCapability, "")
	}
	if r.proseCapability != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prose-capability", r.proseCapability, "")
	}
	if r.sharedDataId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shared-data-id", r.sharedDataId, "")
	}
	if r.targetHni != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target-hni", r.targetHni, "")
	}
	if r.targetNwResolution != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target-nw-resolution", r.targetNwResolution, "")
	}
	if r.excludeNfinstList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude-nfinst-list", r.excludeNfinstList, "csv")
	}
	if r.excludeNfservinstList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude-nfservinst-list", r.excludeNfservinstList, "csv")
	}
	if r.excludeNfservicesetList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude-nfserviceset-list", r.excludeNfservicesetList, "csv")
	}
	if r.excludeNfsetList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude-nfset-list", r.excludeNfsetList, "csv")
	}
	if r.preferredAnalyticsDelays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-analytics-delays", r.preferredAnalyticsDelays, "")
	}
	if r.completeProfile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "complete-profile", r.completeProfile, "")
	}
	if r.n32Purposes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "n32-purposes", r.n32Purposes, "csv")
	}
	if r.preferredFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferred-features", r.preferredFeatures, "")
	}
	if r.remotePlmnIdRoaming != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote-plmn-id-roaming", r.remotePlmnIdRoaming, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptEncoding != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Encoding", r.acceptEncoding, "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
