/*
NRF NFDiscovery Service

NRF NFDiscovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnrf_NFDiscovery

import (
	"encoding/json"
)

// checks if the StoredSearchResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoredSearchResult{}

// StoredSearchResult Contains a complete search result (i.e. a number of discovered NF Instances), stored by NRF as a consequence of a prior search result 
type StoredSearchResult struct {
	NfInstances []NFProfile `json:"nfInstances"`
	CompleteNfInstances []NFProfile `json:"completeNfInstances,omitempty"`
}

// NewStoredSearchResult instantiates a new StoredSearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoredSearchResult(nfInstances []NFProfile) *StoredSearchResult {
	this := StoredSearchResult{}
	this.NfInstances = nfInstances
	return &this
}

// NewStoredSearchResultWithDefaults instantiates a new StoredSearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoredSearchResultWithDefaults() *StoredSearchResult {
	this := StoredSearchResult{}
	return &this
}

// GetNfInstances returns the NfInstances field value
func (o *StoredSearchResult) GetNfInstances() []NFProfile {
	if o == nil {
		var ret []NFProfile
		return ret
	}

	return o.NfInstances
}

// GetNfInstancesOk returns a tuple with the NfInstances field value
// and a boolean to check if the value has been set.
func (o *StoredSearchResult) GetNfInstancesOk() ([]NFProfile, bool) {
	if o == nil {
		return nil, false
	}
	return o.NfInstances, true
}

// SetNfInstances sets field value
func (o *StoredSearchResult) SetNfInstances(v []NFProfile) {
	o.NfInstances = v
}

// GetCompleteNfInstances returns the CompleteNfInstances field value if set, zero value otherwise.
func (o *StoredSearchResult) GetCompleteNfInstances() []NFProfile {
	if o == nil || isNil(o.CompleteNfInstances) {
		var ret []NFProfile
		return ret
	}
	return o.CompleteNfInstances
}

// GetCompleteNfInstancesOk returns a tuple with the CompleteNfInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoredSearchResult) GetCompleteNfInstancesOk() ([]NFProfile, bool) {
	if o == nil || isNil(o.CompleteNfInstances) {
		return nil, false
	}
	return o.CompleteNfInstances, true
}

// HasCompleteNfInstances returns a boolean if a field has been set.
func (o *StoredSearchResult) HasCompleteNfInstances() bool {
	if o != nil && !isNil(o.CompleteNfInstances) {
		return true
	}

	return false
}

// SetCompleteNfInstances gets a reference to the given []NFProfile and assigns it to the CompleteNfInstances field.
func (o *StoredSearchResult) SetCompleteNfInstances(v []NFProfile) {
	o.CompleteNfInstances = v
}

func (o StoredSearchResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoredSearchResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nfInstances"] = o.NfInstances
	if !isNil(o.CompleteNfInstances) {
		toSerialize["completeNfInstances"] = o.CompleteNfInstances
	}
	return toSerialize, nil
}

type NullableStoredSearchResult struct {
	value *StoredSearchResult
	isSet bool
}

func (v NullableStoredSearchResult) Get() *StoredSearchResult {
	return v.value
}

func (v *NullableStoredSearchResult) Set(val *StoredSearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableStoredSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableStoredSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoredSearchResult(val *StoredSearchResult) *NullableStoredSearchResult {
	return &NullableStoredSearchResult{value: val, isSet: true}
}

func (v NullableStoredSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoredSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


