/*
NRF NFDiscovery Service

NRF NFDiscovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnrf_NFDiscovery

import (
	"encoding/json"
	"time"
)

// checks if the NFProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NFProfile{}

// NFProfile Information of an NF Instance discovered by the NRF
type NFProfile struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NfInstanceId string `json:"nfInstanceId"`
	NfInstanceName *string `json:"nfInstanceName,omitempty"`
	NfType NFType `json:"nfType"`
	NfStatus NFStatus `json:"nfStatus"`
	CollocatedNfInstances []CollocatedNfInstance `json:"collocatedNfInstances,omitempty"`
	PlmnList []PlmnId `json:"plmnList,omitempty"`
	SNssais []ExtSnssai `json:"sNssais,omitempty"`
	PerPlmnSnssaiList []PlmnSnssai `json:"perPlmnSnssaiList,omitempty"`
	NsiList []string `json:"nsiList,omitempty"`
	// Fully Qualified Domain Name
	Fqdn *string `json:"fqdn,omitempty"`
	// Fully Qualified Domain Name
	InterPlmnFqdn *string `json:"interPlmnFqdn,omitempty"`
	Ipv4Addresses []string `json:"ipv4Addresses,omitempty"`
	Ipv6Addresses []Ipv6Addr `json:"ipv6Addresses,omitempty"`
	AllowedPlmns []PlmnId `json:"allowedPlmns,omitempty"`
	AllowedSnpns []PlmnIdNid `json:"allowedSnpns,omitempty"`
	AllowedNfTypes []NFType `json:"allowedNfTypes,omitempty"`
	AllowedNfDomains []string `json:"allowedNfDomains,omitempty"`
	AllowedNssais []ExtSnssai `json:"allowedNssais,omitempty"`
	Capacity *int32 `json:"capacity,omitempty"`
	Load *int32 `json:"load,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	LoadTimeStamp *time.Time `json:"loadTimeStamp,omitempty"`
	Locality *string `json:"locality,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key representing a type of locality 
	ExtLocality *map[string]string `json:"extLocality,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	UdrInfo *UdrInfo `json:"udrInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of UdrInfo 
	UdrInfoList *map[string]UdrInfo `json:"udrInfoList,omitempty"`
	UdmInfo *UdmInfo `json:"udmInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of UdmInfo 
	UdmInfoList *map[string]UdmInfo `json:"udmInfoList,omitempty"`
	AusfInfo *AusfInfo `json:"ausfInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of AusfInfo 
	AusfInfoList *map[string]AusfInfo `json:"ausfInfoList,omitempty"`
	AmfInfo *AmfInfo `json:"amfInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of AmfInfo 
	AmfInfoList *map[string]AmfInfo `json:"amfInfoList,omitempty"`
	SmfInfo *SmfInfo `json:"smfInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of SmfInfo 
	SmfInfoList *map[string]SmfInfo `json:"smfInfoList,omitempty"`
	UpfInfo *UpfInfo `json:"upfInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of UpfInfo 
	UpfInfoList *map[string]UpfInfo `json:"upfInfoList,omitempty"`
	PcfInfo *PcfInfo `json:"pcfInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of PcfInfo 
	PcfInfoList *map[string]PcfInfo `json:"pcfInfoList,omitempty"`
	BsfInfo *BsfInfo `json:"bsfInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of BsfInfo 
	BsfInfoList *map[string]BsfInfo `json:"bsfInfoList,omitempty"`
	ChfInfo *ChfInfo `json:"chfInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of ChfInfo 
	ChfInfoList *map[string]ChfInfo `json:"chfInfoList,omitempty"`
	UdsfInfo *UdsfInfo `json:"udsfInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of UdsfInfo 
	UdsfInfoList *map[string]UdsfInfo `json:"udsfInfoList,omitempty"`
	NwdafInfo *NwdafInfo `json:"nwdafInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of NwdafInfo 
	NwdafInfoList *map[string]NwdafInfo `json:"nwdafInfoList,omitempty"`
	NefInfo *NefInfo `json:"nefInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of PcscfInfo 
	PcscfInfoList *map[string]PcscfInfo `json:"pcscfInfoList,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of HssInfo 
	HssInfoList *map[string]HssInfo `json:"hssInfoList,omitempty"`
	CustomInfo map[string]interface{} `json:"customInfo,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	RecoveryTime *time.Time `json:"recoveryTime,omitempty"`
	NfServicePersistence *bool `json:"nfServicePersistence,omitempty"`
	// Deprecated
	NfServices []NFService `json:"nfServices,omitempty"`
	// A map (list of key-value pairs) where serviceInstanceId serves as key of NFService 
	NfServiceList *map[string]NFService `json:"nfServiceList,omitempty"`
	DefaultNotificationSubscriptions []DefaultNotificationSubscription `json:"defaultNotificationSubscriptions,omitempty"`
	LmfInfo *LmfInfo `json:"lmfInfo,omitempty"`
	GmlcInfo *GmlcInfo `json:"gmlcInfo,omitempty"`
	SnpnList []PlmnIdNid `json:"snpnList,omitempty"`
	NfSetIdList []string `json:"nfSetIdList,omitempty"`
	ServingScope []string `json:"servingScope,omitempty"`
	LcHSupportInd *bool `json:"lcHSupportInd,omitempty"`
	OlcHSupportInd *bool `json:"olcHSupportInd,omitempty"`
	// A map (list of key-value pairs) where NfSetId serves as key of DateTime
	NfSetRecoveryTimeList *map[string]time.Time `json:"nfSetRecoveryTimeList,omitempty"`
	// A map (list of key-value pairs) where NfServiceSetId serves as key of DateTime 
	ServiceSetRecoveryTimeList *map[string]time.Time `json:"serviceSetRecoveryTimeList,omitempty"`
	ScpDomains []string `json:"scpDomains,omitempty"`
	ScpInfo *ScpInfo `json:"scpInfo,omitempty"`
	SeppInfo *SeppInfo `json:"seppInfo,omitempty"`
	// Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA)
	VendorId *string `json:"vendorId,omitempty"`
	// The key of the map is the IANA-assigned SMI Network Management Private Enterprise Codes 
	SupportedVendorSpecificFeatures *map[string][]VendorSpecificFeature `json:"supportedVendorSpecificFeatures,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of AanfInfo 
	AanfInfoList *map[string]AanfInfo `json:"aanfInfoList,omitempty"`
	MfafInfo *MfafInfo `json:"mfafInfo,omitempty"`
	// A map(list of key-value pairs) where a (unique) valid JSON string serves as key of EasdfInfo 
	EasdfInfoList *map[string]EasdfInfo `json:"easdfInfoList,omitempty"`
	DccfInfo *DccfInfo `json:"dccfInfo,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of NsacfInfo 
	NsacfInfoList *map[string]NsacfInfo `json:"nsacfInfoList,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of MbSmfInfo 
	MbSmfInfoList *map[string]MbSmfInfo `json:"mbSmfInfoList,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of TsctsfInfo 
	TsctsfInfoList *map[string]TsctsfInfo `json:"tsctsfInfoList,omitempty"`
	// A map (list of key-value pairs) where a (unique) valid JSON string serves as key of MbUpfInfo 
	MbUpfInfoList *map[string]MbUpfInfo `json:"mbUpfInfoList,omitempty"`
	TrustAfInfo *TrustAfInfo `json:"trustAfInfo,omitempty"`
	NssaafInfo *NssaafInfo `json:"nssaafInfo,omitempty"`
	HniList []string `json:"hniList,omitempty"`
	IwmscInfo *IwmscInfo `json:"iwmscInfo,omitempty"`
	MnpfInfo *MnpfInfo `json:"mnpfInfo,omitempty"`
	SmsfInfo *SmsfInfo `json:"smsfInfo,omitempty"`
}

// NewNFProfile instantiates a new NFProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFProfile(nfInstanceId string, nfType NFType, nfStatus NFStatus) *NFProfile {
	this := NFProfile{}
	this.NfInstanceId = nfInstanceId
	this.NfType = nfType
	this.NfStatus = nfStatus
	var nfServicePersistence bool = false
	this.NfServicePersistence = &nfServicePersistence
	var lcHSupportInd bool = false
	this.LcHSupportInd = &lcHSupportInd
	var olcHSupportInd bool = false
	this.OlcHSupportInd = &olcHSupportInd
	return &this
}

// NewNFProfileWithDefaults instantiates a new NFProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFProfileWithDefaults() *NFProfile {
	this := NFProfile{}
	var nfServicePersistence bool = false
	this.NfServicePersistence = &nfServicePersistence
	var lcHSupportInd bool = false
	this.LcHSupportInd = &lcHSupportInd
	var olcHSupportInd bool = false
	this.OlcHSupportInd = &olcHSupportInd
	return &this
}

// GetNfInstanceId returns the NfInstanceId field value
func (o *NFProfile) GetNfInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NfInstanceId
}

// GetNfInstanceIdOk returns a tuple with the NfInstanceId field value
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNfInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NfInstanceId, true
}

// SetNfInstanceId sets field value
func (o *NFProfile) SetNfInstanceId(v string) {
	o.NfInstanceId = v
}

// GetNfInstanceName returns the NfInstanceName field value if set, zero value otherwise.
func (o *NFProfile) GetNfInstanceName() string {
	if o == nil || IsNil(o.NfInstanceName) {
		var ret string
		return ret
	}
	return *o.NfInstanceName
}

// GetNfInstanceNameOk returns a tuple with the NfInstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNfInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.NfInstanceName) {
		return nil, false
	}
	return o.NfInstanceName, true
}

// HasNfInstanceName returns a boolean if a field has been set.
func (o *NFProfile) HasNfInstanceName() bool {
	if o != nil && !IsNil(o.NfInstanceName) {
		return true
	}

	return false
}

// SetNfInstanceName gets a reference to the given string and assigns it to the NfInstanceName field.
func (o *NFProfile) SetNfInstanceName(v string) {
	o.NfInstanceName = &v
}

// GetNfType returns the NfType field value
func (o *NFProfile) GetNfType() NFType {
	if o == nil {
		var ret NFType
		return ret
	}

	return o.NfType
}

// GetNfTypeOk returns a tuple with the NfType field value
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNfTypeOk() (*NFType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NfType, true
}

// SetNfType sets field value
func (o *NFProfile) SetNfType(v NFType) {
	o.NfType = v
}

// GetNfStatus returns the NfStatus field value
func (o *NFProfile) GetNfStatus() NFStatus {
	if o == nil {
		var ret NFStatus
		return ret
	}

	return o.NfStatus
}

// GetNfStatusOk returns a tuple with the NfStatus field value
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNfStatusOk() (*NFStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NfStatus, true
}

// SetNfStatus sets field value
func (o *NFProfile) SetNfStatus(v NFStatus) {
	o.NfStatus = v
}

// GetCollocatedNfInstances returns the CollocatedNfInstances field value if set, zero value otherwise.
func (o *NFProfile) GetCollocatedNfInstances() []CollocatedNfInstance {
	if o == nil || IsNil(o.CollocatedNfInstances) {
		var ret []CollocatedNfInstance
		return ret
	}
	return o.CollocatedNfInstances
}

// GetCollocatedNfInstancesOk returns a tuple with the CollocatedNfInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetCollocatedNfInstancesOk() ([]CollocatedNfInstance, bool) {
	if o == nil || IsNil(o.CollocatedNfInstances) {
		return nil, false
	}
	return o.CollocatedNfInstances, true
}

// HasCollocatedNfInstances returns a boolean if a field has been set.
func (o *NFProfile) HasCollocatedNfInstances() bool {
	if o != nil && !IsNil(o.CollocatedNfInstances) {
		return true
	}

	return false
}

// SetCollocatedNfInstances gets a reference to the given []CollocatedNfInstance and assigns it to the CollocatedNfInstances field.
func (o *NFProfile) SetCollocatedNfInstances(v []CollocatedNfInstance) {
	o.CollocatedNfInstances = v
}

// GetPlmnList returns the PlmnList field value if set, zero value otherwise.
func (o *NFProfile) GetPlmnList() []PlmnId {
	if o == nil || IsNil(o.PlmnList) {
		var ret []PlmnId
		return ret
	}
	return o.PlmnList
}

// GetPlmnListOk returns a tuple with the PlmnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetPlmnListOk() ([]PlmnId, bool) {
	if o == nil || IsNil(o.PlmnList) {
		return nil, false
	}
	return o.PlmnList, true
}

// HasPlmnList returns a boolean if a field has been set.
func (o *NFProfile) HasPlmnList() bool {
	if o != nil && !IsNil(o.PlmnList) {
		return true
	}

	return false
}

// SetPlmnList gets a reference to the given []PlmnId and assigns it to the PlmnList field.
func (o *NFProfile) SetPlmnList(v []PlmnId) {
	o.PlmnList = v
}

// GetSNssais returns the SNssais field value if set, zero value otherwise.
func (o *NFProfile) GetSNssais() []ExtSnssai {
	if o == nil || IsNil(o.SNssais) {
		var ret []ExtSnssai
		return ret
	}
	return o.SNssais
}

// GetSNssaisOk returns a tuple with the SNssais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetSNssaisOk() ([]ExtSnssai, bool) {
	if o == nil || IsNil(o.SNssais) {
		return nil, false
	}
	return o.SNssais, true
}

// HasSNssais returns a boolean if a field has been set.
func (o *NFProfile) HasSNssais() bool {
	if o != nil && !IsNil(o.SNssais) {
		return true
	}

	return false
}

// SetSNssais gets a reference to the given []ExtSnssai and assigns it to the SNssais field.
func (o *NFProfile) SetSNssais(v []ExtSnssai) {
	o.SNssais = v
}

// GetPerPlmnSnssaiList returns the PerPlmnSnssaiList field value if set, zero value otherwise.
func (o *NFProfile) GetPerPlmnSnssaiList() []PlmnSnssai {
	if o == nil || IsNil(o.PerPlmnSnssaiList) {
		var ret []PlmnSnssai
		return ret
	}
	return o.PerPlmnSnssaiList
}

// GetPerPlmnSnssaiListOk returns a tuple with the PerPlmnSnssaiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetPerPlmnSnssaiListOk() ([]PlmnSnssai, bool) {
	if o == nil || IsNil(o.PerPlmnSnssaiList) {
		return nil, false
	}
	return o.PerPlmnSnssaiList, true
}

// HasPerPlmnSnssaiList returns a boolean if a field has been set.
func (o *NFProfile) HasPerPlmnSnssaiList() bool {
	if o != nil && !IsNil(o.PerPlmnSnssaiList) {
		return true
	}

	return false
}

// SetPerPlmnSnssaiList gets a reference to the given []PlmnSnssai and assigns it to the PerPlmnSnssaiList field.
func (o *NFProfile) SetPerPlmnSnssaiList(v []PlmnSnssai) {
	o.PerPlmnSnssaiList = v
}

// GetNsiList returns the NsiList field value if set, zero value otherwise.
func (o *NFProfile) GetNsiList() []string {
	if o == nil || IsNil(o.NsiList) {
		var ret []string
		return ret
	}
	return o.NsiList
}

// GetNsiListOk returns a tuple with the NsiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNsiListOk() ([]string, bool) {
	if o == nil || IsNil(o.NsiList) {
		return nil, false
	}
	return o.NsiList, true
}

// HasNsiList returns a boolean if a field has been set.
func (o *NFProfile) HasNsiList() bool {
	if o != nil && !IsNil(o.NsiList) {
		return true
	}

	return false
}

// SetNsiList gets a reference to the given []string and assigns it to the NsiList field.
func (o *NFProfile) SetNsiList(v []string) {
	o.NsiList = v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *NFProfile) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *NFProfile) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *NFProfile) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetInterPlmnFqdn returns the InterPlmnFqdn field value if set, zero value otherwise.
func (o *NFProfile) GetInterPlmnFqdn() string {
	if o == nil || IsNil(o.InterPlmnFqdn) {
		var ret string
		return ret
	}
	return *o.InterPlmnFqdn
}

// GetInterPlmnFqdnOk returns a tuple with the InterPlmnFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetInterPlmnFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.InterPlmnFqdn) {
		return nil, false
	}
	return o.InterPlmnFqdn, true
}

// HasInterPlmnFqdn returns a boolean if a field has been set.
func (o *NFProfile) HasInterPlmnFqdn() bool {
	if o != nil && !IsNil(o.InterPlmnFqdn) {
		return true
	}

	return false
}

// SetInterPlmnFqdn gets a reference to the given string and assigns it to the InterPlmnFqdn field.
func (o *NFProfile) SetInterPlmnFqdn(v string) {
	o.InterPlmnFqdn = &v
}

// GetIpv4Addresses returns the Ipv4Addresses field value if set, zero value otherwise.
func (o *NFProfile) GetIpv4Addresses() []string {
	if o == nil || IsNil(o.Ipv4Addresses) {
		var ret []string
		return ret
	}
	return o.Ipv4Addresses
}

// GetIpv4AddressesOk returns a tuple with the Ipv4Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetIpv4AddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv4Addresses) {
		return nil, false
	}
	return o.Ipv4Addresses, true
}

// HasIpv4Addresses returns a boolean if a field has been set.
func (o *NFProfile) HasIpv4Addresses() bool {
	if o != nil && !IsNil(o.Ipv4Addresses) {
		return true
	}

	return false
}

// SetIpv4Addresses gets a reference to the given []string and assigns it to the Ipv4Addresses field.
func (o *NFProfile) SetIpv4Addresses(v []string) {
	o.Ipv4Addresses = v
}

// GetIpv6Addresses returns the Ipv6Addresses field value if set, zero value otherwise.
func (o *NFProfile) GetIpv6Addresses() []Ipv6Addr {
	if o == nil || IsNil(o.Ipv6Addresses) {
		var ret []Ipv6Addr
		return ret
	}
	return o.Ipv6Addresses
}

// GetIpv6AddressesOk returns a tuple with the Ipv6Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetIpv6AddressesOk() ([]Ipv6Addr, bool) {
	if o == nil || IsNil(o.Ipv6Addresses) {
		return nil, false
	}
	return o.Ipv6Addresses, true
}

// HasIpv6Addresses returns a boolean if a field has been set.
func (o *NFProfile) HasIpv6Addresses() bool {
	if o != nil && !IsNil(o.Ipv6Addresses) {
		return true
	}

	return false
}

// SetIpv6Addresses gets a reference to the given []Ipv6Addr and assigns it to the Ipv6Addresses field.
func (o *NFProfile) SetIpv6Addresses(v []Ipv6Addr) {
	o.Ipv6Addresses = v
}

// GetAllowedPlmns returns the AllowedPlmns field value if set, zero value otherwise.
func (o *NFProfile) GetAllowedPlmns() []PlmnId {
	if o == nil || IsNil(o.AllowedPlmns) {
		var ret []PlmnId
		return ret
	}
	return o.AllowedPlmns
}

// GetAllowedPlmnsOk returns a tuple with the AllowedPlmns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAllowedPlmnsOk() ([]PlmnId, bool) {
	if o == nil || IsNil(o.AllowedPlmns) {
		return nil, false
	}
	return o.AllowedPlmns, true
}

// HasAllowedPlmns returns a boolean if a field has been set.
func (o *NFProfile) HasAllowedPlmns() bool {
	if o != nil && !IsNil(o.AllowedPlmns) {
		return true
	}

	return false
}

// SetAllowedPlmns gets a reference to the given []PlmnId and assigns it to the AllowedPlmns field.
func (o *NFProfile) SetAllowedPlmns(v []PlmnId) {
	o.AllowedPlmns = v
}

// GetAllowedSnpns returns the AllowedSnpns field value if set, zero value otherwise.
func (o *NFProfile) GetAllowedSnpns() []PlmnIdNid {
	if o == nil || IsNil(o.AllowedSnpns) {
		var ret []PlmnIdNid
		return ret
	}
	return o.AllowedSnpns
}

// GetAllowedSnpnsOk returns a tuple with the AllowedSnpns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAllowedSnpnsOk() ([]PlmnIdNid, bool) {
	if o == nil || IsNil(o.AllowedSnpns) {
		return nil, false
	}
	return o.AllowedSnpns, true
}

// HasAllowedSnpns returns a boolean if a field has been set.
func (o *NFProfile) HasAllowedSnpns() bool {
	if o != nil && !IsNil(o.AllowedSnpns) {
		return true
	}

	return false
}

// SetAllowedSnpns gets a reference to the given []PlmnIdNid and assigns it to the AllowedSnpns field.
func (o *NFProfile) SetAllowedSnpns(v []PlmnIdNid) {
	o.AllowedSnpns = v
}

// GetAllowedNfTypes returns the AllowedNfTypes field value if set, zero value otherwise.
func (o *NFProfile) GetAllowedNfTypes() []NFType {
	if o == nil || IsNil(o.AllowedNfTypes) {
		var ret []NFType
		return ret
	}
	return o.AllowedNfTypes
}

// GetAllowedNfTypesOk returns a tuple with the AllowedNfTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAllowedNfTypesOk() ([]NFType, bool) {
	if o == nil || IsNil(o.AllowedNfTypes) {
		return nil, false
	}
	return o.AllowedNfTypes, true
}

// HasAllowedNfTypes returns a boolean if a field has been set.
func (o *NFProfile) HasAllowedNfTypes() bool {
	if o != nil && !IsNil(o.AllowedNfTypes) {
		return true
	}

	return false
}

// SetAllowedNfTypes gets a reference to the given []NFType and assigns it to the AllowedNfTypes field.
func (o *NFProfile) SetAllowedNfTypes(v []NFType) {
	o.AllowedNfTypes = v
}

// GetAllowedNfDomains returns the AllowedNfDomains field value if set, zero value otherwise.
func (o *NFProfile) GetAllowedNfDomains() []string {
	if o == nil || IsNil(o.AllowedNfDomains) {
		var ret []string
		return ret
	}
	return o.AllowedNfDomains
}

// GetAllowedNfDomainsOk returns a tuple with the AllowedNfDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAllowedNfDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedNfDomains) {
		return nil, false
	}
	return o.AllowedNfDomains, true
}

// HasAllowedNfDomains returns a boolean if a field has been set.
func (o *NFProfile) HasAllowedNfDomains() bool {
	if o != nil && !IsNil(o.AllowedNfDomains) {
		return true
	}

	return false
}

// SetAllowedNfDomains gets a reference to the given []string and assigns it to the AllowedNfDomains field.
func (o *NFProfile) SetAllowedNfDomains(v []string) {
	o.AllowedNfDomains = v
}

// GetAllowedNssais returns the AllowedNssais field value if set, zero value otherwise.
func (o *NFProfile) GetAllowedNssais() []ExtSnssai {
	if o == nil || IsNil(o.AllowedNssais) {
		var ret []ExtSnssai
		return ret
	}
	return o.AllowedNssais
}

// GetAllowedNssaisOk returns a tuple with the AllowedNssais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAllowedNssaisOk() ([]ExtSnssai, bool) {
	if o == nil || IsNil(o.AllowedNssais) {
		return nil, false
	}
	return o.AllowedNssais, true
}

// HasAllowedNssais returns a boolean if a field has been set.
func (o *NFProfile) HasAllowedNssais() bool {
	if o != nil && !IsNil(o.AllowedNssais) {
		return true
	}

	return false
}

// SetAllowedNssais gets a reference to the given []ExtSnssai and assigns it to the AllowedNssais field.
func (o *NFProfile) SetAllowedNssais(v []ExtSnssai) {
	o.AllowedNssais = v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *NFProfile) GetCapacity() int32 {
	if o == nil || IsNil(o.Capacity) {
		var ret int32
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *NFProfile) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int32 and assigns it to the Capacity field.
func (o *NFProfile) SetCapacity(v int32) {
	o.Capacity = &v
}

// GetLoad returns the Load field value if set, zero value otherwise.
func (o *NFProfile) GetLoad() int32 {
	if o == nil || IsNil(o.Load) {
		var ret int32
		return ret
	}
	return *o.Load
}

// GetLoadOk returns a tuple with the Load field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetLoadOk() (*int32, bool) {
	if o == nil || IsNil(o.Load) {
		return nil, false
	}
	return o.Load, true
}

// HasLoad returns a boolean if a field has been set.
func (o *NFProfile) HasLoad() bool {
	if o != nil && !IsNil(o.Load) {
		return true
	}

	return false
}

// SetLoad gets a reference to the given int32 and assigns it to the Load field.
func (o *NFProfile) SetLoad(v int32) {
	o.Load = &v
}

// GetLoadTimeStamp returns the LoadTimeStamp field value if set, zero value otherwise.
func (o *NFProfile) GetLoadTimeStamp() time.Time {
	if o == nil || IsNil(o.LoadTimeStamp) {
		var ret time.Time
		return ret
	}
	return *o.LoadTimeStamp
}

// GetLoadTimeStampOk returns a tuple with the LoadTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetLoadTimeStampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LoadTimeStamp) {
		return nil, false
	}
	return o.LoadTimeStamp, true
}

// HasLoadTimeStamp returns a boolean if a field has been set.
func (o *NFProfile) HasLoadTimeStamp() bool {
	if o != nil && !IsNil(o.LoadTimeStamp) {
		return true
	}

	return false
}

// SetLoadTimeStamp gets a reference to the given time.Time and assigns it to the LoadTimeStamp field.
func (o *NFProfile) SetLoadTimeStamp(v time.Time) {
	o.LoadTimeStamp = &v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *NFProfile) GetLocality() string {
	if o == nil || IsNil(o.Locality) {
		var ret string
		return ret
	}
	return *o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetLocalityOk() (*string, bool) {
	if o == nil || IsNil(o.Locality) {
		return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *NFProfile) HasLocality() bool {
	if o != nil && !IsNil(o.Locality) {
		return true
	}

	return false
}

// SetLocality gets a reference to the given string and assigns it to the Locality field.
func (o *NFProfile) SetLocality(v string) {
	o.Locality = &v
}

// GetExtLocality returns the ExtLocality field value if set, zero value otherwise.
func (o *NFProfile) GetExtLocality() map[string]string {
	if o == nil || IsNil(o.ExtLocality) {
		var ret map[string]string
		return ret
	}
	return *o.ExtLocality
}

// GetExtLocalityOk returns a tuple with the ExtLocality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetExtLocalityOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExtLocality) {
		return nil, false
	}
	return o.ExtLocality, true
}

// HasExtLocality returns a boolean if a field has been set.
func (o *NFProfile) HasExtLocality() bool {
	if o != nil && !IsNil(o.ExtLocality) {
		return true
	}

	return false
}

// SetExtLocality gets a reference to the given map[string]string and assigns it to the ExtLocality field.
func (o *NFProfile) SetExtLocality(v map[string]string) {
	o.ExtLocality = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *NFProfile) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *NFProfile) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *NFProfile) SetPriority(v int32) {
	o.Priority = &v
}

// GetUdrInfo returns the UdrInfo field value if set, zero value otherwise.
func (o *NFProfile) GetUdrInfo() UdrInfo {
	if o == nil || IsNil(o.UdrInfo) {
		var ret UdrInfo
		return ret
	}
	return *o.UdrInfo
}

// GetUdrInfoOk returns a tuple with the UdrInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetUdrInfoOk() (*UdrInfo, bool) {
	if o == nil || IsNil(o.UdrInfo) {
		return nil, false
	}
	return o.UdrInfo, true
}

// HasUdrInfo returns a boolean if a field has been set.
func (o *NFProfile) HasUdrInfo() bool {
	if o != nil && !IsNil(o.UdrInfo) {
		return true
	}

	return false
}

// SetUdrInfo gets a reference to the given UdrInfo and assigns it to the UdrInfo field.
func (o *NFProfile) SetUdrInfo(v UdrInfo) {
	o.UdrInfo = &v
}

// GetUdrInfoList returns the UdrInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetUdrInfoList() map[string]UdrInfo {
	if o == nil || IsNil(o.UdrInfoList) {
		var ret map[string]UdrInfo
		return ret
	}
	return *o.UdrInfoList
}

// GetUdrInfoListOk returns a tuple with the UdrInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetUdrInfoListOk() (*map[string]UdrInfo, bool) {
	if o == nil || IsNil(o.UdrInfoList) {
		return nil, false
	}
	return o.UdrInfoList, true
}

// HasUdrInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasUdrInfoList() bool {
	if o != nil && !IsNil(o.UdrInfoList) {
		return true
	}

	return false
}

// SetUdrInfoList gets a reference to the given map[string]UdrInfo and assigns it to the UdrInfoList field.
func (o *NFProfile) SetUdrInfoList(v map[string]UdrInfo) {
	o.UdrInfoList = &v
}

// GetUdmInfo returns the UdmInfo field value if set, zero value otherwise.
func (o *NFProfile) GetUdmInfo() UdmInfo {
	if o == nil || IsNil(o.UdmInfo) {
		var ret UdmInfo
		return ret
	}
	return *o.UdmInfo
}

// GetUdmInfoOk returns a tuple with the UdmInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetUdmInfoOk() (*UdmInfo, bool) {
	if o == nil || IsNil(o.UdmInfo) {
		return nil, false
	}
	return o.UdmInfo, true
}

// HasUdmInfo returns a boolean if a field has been set.
func (o *NFProfile) HasUdmInfo() bool {
	if o != nil && !IsNil(o.UdmInfo) {
		return true
	}

	return false
}

// SetUdmInfo gets a reference to the given UdmInfo and assigns it to the UdmInfo field.
func (o *NFProfile) SetUdmInfo(v UdmInfo) {
	o.UdmInfo = &v
}

// GetUdmInfoList returns the UdmInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetUdmInfoList() map[string]UdmInfo {
	if o == nil || IsNil(o.UdmInfoList) {
		var ret map[string]UdmInfo
		return ret
	}
	return *o.UdmInfoList
}

// GetUdmInfoListOk returns a tuple with the UdmInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetUdmInfoListOk() (*map[string]UdmInfo, bool) {
	if o == nil || IsNil(o.UdmInfoList) {
		return nil, false
	}
	return o.UdmInfoList, true
}

// HasUdmInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasUdmInfoList() bool {
	if o != nil && !IsNil(o.UdmInfoList) {
		return true
	}

	return false
}

// SetUdmInfoList gets a reference to the given map[string]UdmInfo and assigns it to the UdmInfoList field.
func (o *NFProfile) SetUdmInfoList(v map[string]UdmInfo) {
	o.UdmInfoList = &v
}

// GetAusfInfo returns the AusfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetAusfInfo() AusfInfo {
	if o == nil || IsNil(o.AusfInfo) {
		var ret AusfInfo
		return ret
	}
	return *o.AusfInfo
}

// GetAusfInfoOk returns a tuple with the AusfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAusfInfoOk() (*AusfInfo, bool) {
	if o == nil || IsNil(o.AusfInfo) {
		return nil, false
	}
	return o.AusfInfo, true
}

// HasAusfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasAusfInfo() bool {
	if o != nil && !IsNil(o.AusfInfo) {
		return true
	}

	return false
}

// SetAusfInfo gets a reference to the given AusfInfo and assigns it to the AusfInfo field.
func (o *NFProfile) SetAusfInfo(v AusfInfo) {
	o.AusfInfo = &v
}

// GetAusfInfoList returns the AusfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetAusfInfoList() map[string]AusfInfo {
	if o == nil || IsNil(o.AusfInfoList) {
		var ret map[string]AusfInfo
		return ret
	}
	return *o.AusfInfoList
}

// GetAusfInfoListOk returns a tuple with the AusfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAusfInfoListOk() (*map[string]AusfInfo, bool) {
	if o == nil || IsNil(o.AusfInfoList) {
		return nil, false
	}
	return o.AusfInfoList, true
}

// HasAusfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasAusfInfoList() bool {
	if o != nil && !IsNil(o.AusfInfoList) {
		return true
	}

	return false
}

// SetAusfInfoList gets a reference to the given map[string]AusfInfo and assigns it to the AusfInfoList field.
func (o *NFProfile) SetAusfInfoList(v map[string]AusfInfo) {
	o.AusfInfoList = &v
}

// GetAmfInfo returns the AmfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetAmfInfo() AmfInfo {
	if o == nil || IsNil(o.AmfInfo) {
		var ret AmfInfo
		return ret
	}
	return *o.AmfInfo
}

// GetAmfInfoOk returns a tuple with the AmfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAmfInfoOk() (*AmfInfo, bool) {
	if o == nil || IsNil(o.AmfInfo) {
		return nil, false
	}
	return o.AmfInfo, true
}

// HasAmfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasAmfInfo() bool {
	if o != nil && !IsNil(o.AmfInfo) {
		return true
	}

	return false
}

// SetAmfInfo gets a reference to the given AmfInfo and assigns it to the AmfInfo field.
func (o *NFProfile) SetAmfInfo(v AmfInfo) {
	o.AmfInfo = &v
}

// GetAmfInfoList returns the AmfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetAmfInfoList() map[string]AmfInfo {
	if o == nil || IsNil(o.AmfInfoList) {
		var ret map[string]AmfInfo
		return ret
	}
	return *o.AmfInfoList
}

// GetAmfInfoListOk returns a tuple with the AmfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAmfInfoListOk() (*map[string]AmfInfo, bool) {
	if o == nil || IsNil(o.AmfInfoList) {
		return nil, false
	}
	return o.AmfInfoList, true
}

// HasAmfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasAmfInfoList() bool {
	if o != nil && !IsNil(o.AmfInfoList) {
		return true
	}

	return false
}

// SetAmfInfoList gets a reference to the given map[string]AmfInfo and assigns it to the AmfInfoList field.
func (o *NFProfile) SetAmfInfoList(v map[string]AmfInfo) {
	o.AmfInfoList = &v
}

// GetSmfInfo returns the SmfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetSmfInfo() SmfInfo {
	if o == nil || IsNil(o.SmfInfo) {
		var ret SmfInfo
		return ret
	}
	return *o.SmfInfo
}

// GetSmfInfoOk returns a tuple with the SmfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetSmfInfoOk() (*SmfInfo, bool) {
	if o == nil || IsNil(o.SmfInfo) {
		return nil, false
	}
	return o.SmfInfo, true
}

// HasSmfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasSmfInfo() bool {
	if o != nil && !IsNil(o.SmfInfo) {
		return true
	}

	return false
}

// SetSmfInfo gets a reference to the given SmfInfo and assigns it to the SmfInfo field.
func (o *NFProfile) SetSmfInfo(v SmfInfo) {
	o.SmfInfo = &v
}

// GetSmfInfoList returns the SmfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetSmfInfoList() map[string]SmfInfo {
	if o == nil || IsNil(o.SmfInfoList) {
		var ret map[string]SmfInfo
		return ret
	}
	return *o.SmfInfoList
}

// GetSmfInfoListOk returns a tuple with the SmfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetSmfInfoListOk() (*map[string]SmfInfo, bool) {
	if o == nil || IsNil(o.SmfInfoList) {
		return nil, false
	}
	return o.SmfInfoList, true
}

// HasSmfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasSmfInfoList() bool {
	if o != nil && !IsNil(o.SmfInfoList) {
		return true
	}

	return false
}

// SetSmfInfoList gets a reference to the given map[string]SmfInfo and assigns it to the SmfInfoList field.
func (o *NFProfile) SetSmfInfoList(v map[string]SmfInfo) {
	o.SmfInfoList = &v
}

// GetUpfInfo returns the UpfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetUpfInfo() UpfInfo {
	if o == nil || IsNil(o.UpfInfo) {
		var ret UpfInfo
		return ret
	}
	return *o.UpfInfo
}

// GetUpfInfoOk returns a tuple with the UpfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetUpfInfoOk() (*UpfInfo, bool) {
	if o == nil || IsNil(o.UpfInfo) {
		return nil, false
	}
	return o.UpfInfo, true
}

// HasUpfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasUpfInfo() bool {
	if o != nil && !IsNil(o.UpfInfo) {
		return true
	}

	return false
}

// SetUpfInfo gets a reference to the given UpfInfo and assigns it to the UpfInfo field.
func (o *NFProfile) SetUpfInfo(v UpfInfo) {
	o.UpfInfo = &v
}

// GetUpfInfoList returns the UpfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetUpfInfoList() map[string]UpfInfo {
	if o == nil || IsNil(o.UpfInfoList) {
		var ret map[string]UpfInfo
		return ret
	}
	return *o.UpfInfoList
}

// GetUpfInfoListOk returns a tuple with the UpfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetUpfInfoListOk() (*map[string]UpfInfo, bool) {
	if o == nil || IsNil(o.UpfInfoList) {
		return nil, false
	}
	return o.UpfInfoList, true
}

// HasUpfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasUpfInfoList() bool {
	if o != nil && !IsNil(o.UpfInfoList) {
		return true
	}

	return false
}

// SetUpfInfoList gets a reference to the given map[string]UpfInfo and assigns it to the UpfInfoList field.
func (o *NFProfile) SetUpfInfoList(v map[string]UpfInfo) {
	o.UpfInfoList = &v
}

// GetPcfInfo returns the PcfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetPcfInfo() PcfInfo {
	if o == nil || IsNil(o.PcfInfo) {
		var ret PcfInfo
		return ret
	}
	return *o.PcfInfo
}

// GetPcfInfoOk returns a tuple with the PcfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetPcfInfoOk() (*PcfInfo, bool) {
	if o == nil || IsNil(o.PcfInfo) {
		return nil, false
	}
	return o.PcfInfo, true
}

// HasPcfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasPcfInfo() bool {
	if o != nil && !IsNil(o.PcfInfo) {
		return true
	}

	return false
}

// SetPcfInfo gets a reference to the given PcfInfo and assigns it to the PcfInfo field.
func (o *NFProfile) SetPcfInfo(v PcfInfo) {
	o.PcfInfo = &v
}

// GetPcfInfoList returns the PcfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetPcfInfoList() map[string]PcfInfo {
	if o == nil || IsNil(o.PcfInfoList) {
		var ret map[string]PcfInfo
		return ret
	}
	return *o.PcfInfoList
}

// GetPcfInfoListOk returns a tuple with the PcfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetPcfInfoListOk() (*map[string]PcfInfo, bool) {
	if o == nil || IsNil(o.PcfInfoList) {
		return nil, false
	}
	return o.PcfInfoList, true
}

// HasPcfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasPcfInfoList() bool {
	if o != nil && !IsNil(o.PcfInfoList) {
		return true
	}

	return false
}

// SetPcfInfoList gets a reference to the given map[string]PcfInfo and assigns it to the PcfInfoList field.
func (o *NFProfile) SetPcfInfoList(v map[string]PcfInfo) {
	o.PcfInfoList = &v
}

// GetBsfInfo returns the BsfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetBsfInfo() BsfInfo {
	if o == nil || IsNil(o.BsfInfo) {
		var ret BsfInfo
		return ret
	}
	return *o.BsfInfo
}

// GetBsfInfoOk returns a tuple with the BsfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetBsfInfoOk() (*BsfInfo, bool) {
	if o == nil || IsNil(o.BsfInfo) {
		return nil, false
	}
	return o.BsfInfo, true
}

// HasBsfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasBsfInfo() bool {
	if o != nil && !IsNil(o.BsfInfo) {
		return true
	}

	return false
}

// SetBsfInfo gets a reference to the given BsfInfo and assigns it to the BsfInfo field.
func (o *NFProfile) SetBsfInfo(v BsfInfo) {
	o.BsfInfo = &v
}

// GetBsfInfoList returns the BsfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetBsfInfoList() map[string]BsfInfo {
	if o == nil || IsNil(o.BsfInfoList) {
		var ret map[string]BsfInfo
		return ret
	}
	return *o.BsfInfoList
}

// GetBsfInfoListOk returns a tuple with the BsfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetBsfInfoListOk() (*map[string]BsfInfo, bool) {
	if o == nil || IsNil(o.BsfInfoList) {
		return nil, false
	}
	return o.BsfInfoList, true
}

// HasBsfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasBsfInfoList() bool {
	if o != nil && !IsNil(o.BsfInfoList) {
		return true
	}

	return false
}

// SetBsfInfoList gets a reference to the given map[string]BsfInfo and assigns it to the BsfInfoList field.
func (o *NFProfile) SetBsfInfoList(v map[string]BsfInfo) {
	o.BsfInfoList = &v
}

// GetChfInfo returns the ChfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetChfInfo() ChfInfo {
	if o == nil || IsNil(o.ChfInfo) {
		var ret ChfInfo
		return ret
	}
	return *o.ChfInfo
}

// GetChfInfoOk returns a tuple with the ChfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetChfInfoOk() (*ChfInfo, bool) {
	if o == nil || IsNil(o.ChfInfo) {
		return nil, false
	}
	return o.ChfInfo, true
}

// HasChfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasChfInfo() bool {
	if o != nil && !IsNil(o.ChfInfo) {
		return true
	}

	return false
}

// SetChfInfo gets a reference to the given ChfInfo and assigns it to the ChfInfo field.
func (o *NFProfile) SetChfInfo(v ChfInfo) {
	o.ChfInfo = &v
}

// GetChfInfoList returns the ChfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetChfInfoList() map[string]ChfInfo {
	if o == nil || IsNil(o.ChfInfoList) {
		var ret map[string]ChfInfo
		return ret
	}
	return *o.ChfInfoList
}

// GetChfInfoListOk returns a tuple with the ChfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetChfInfoListOk() (*map[string]ChfInfo, bool) {
	if o == nil || IsNil(o.ChfInfoList) {
		return nil, false
	}
	return o.ChfInfoList, true
}

// HasChfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasChfInfoList() bool {
	if o != nil && !IsNil(o.ChfInfoList) {
		return true
	}

	return false
}

// SetChfInfoList gets a reference to the given map[string]ChfInfo and assigns it to the ChfInfoList field.
func (o *NFProfile) SetChfInfoList(v map[string]ChfInfo) {
	o.ChfInfoList = &v
}

// GetUdsfInfo returns the UdsfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetUdsfInfo() UdsfInfo {
	if o == nil || IsNil(o.UdsfInfo) {
		var ret UdsfInfo
		return ret
	}
	return *o.UdsfInfo
}

// GetUdsfInfoOk returns a tuple with the UdsfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetUdsfInfoOk() (*UdsfInfo, bool) {
	if o == nil || IsNil(o.UdsfInfo) {
		return nil, false
	}
	return o.UdsfInfo, true
}

// HasUdsfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasUdsfInfo() bool {
	if o != nil && !IsNil(o.UdsfInfo) {
		return true
	}

	return false
}

// SetUdsfInfo gets a reference to the given UdsfInfo and assigns it to the UdsfInfo field.
func (o *NFProfile) SetUdsfInfo(v UdsfInfo) {
	o.UdsfInfo = &v
}

// GetUdsfInfoList returns the UdsfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetUdsfInfoList() map[string]UdsfInfo {
	if o == nil || IsNil(o.UdsfInfoList) {
		var ret map[string]UdsfInfo
		return ret
	}
	return *o.UdsfInfoList
}

// GetUdsfInfoListOk returns a tuple with the UdsfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetUdsfInfoListOk() (*map[string]UdsfInfo, bool) {
	if o == nil || IsNil(o.UdsfInfoList) {
		return nil, false
	}
	return o.UdsfInfoList, true
}

// HasUdsfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasUdsfInfoList() bool {
	if o != nil && !IsNil(o.UdsfInfoList) {
		return true
	}

	return false
}

// SetUdsfInfoList gets a reference to the given map[string]UdsfInfo and assigns it to the UdsfInfoList field.
func (o *NFProfile) SetUdsfInfoList(v map[string]UdsfInfo) {
	o.UdsfInfoList = &v
}

// GetNwdafInfo returns the NwdafInfo field value if set, zero value otherwise.
func (o *NFProfile) GetNwdafInfo() NwdafInfo {
	if o == nil || IsNil(o.NwdafInfo) {
		var ret NwdafInfo
		return ret
	}
	return *o.NwdafInfo
}

// GetNwdafInfoOk returns a tuple with the NwdafInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNwdafInfoOk() (*NwdafInfo, bool) {
	if o == nil || IsNil(o.NwdafInfo) {
		return nil, false
	}
	return o.NwdafInfo, true
}

// HasNwdafInfo returns a boolean if a field has been set.
func (o *NFProfile) HasNwdafInfo() bool {
	if o != nil && !IsNil(o.NwdafInfo) {
		return true
	}

	return false
}

// SetNwdafInfo gets a reference to the given NwdafInfo and assigns it to the NwdafInfo field.
func (o *NFProfile) SetNwdafInfo(v NwdafInfo) {
	o.NwdafInfo = &v
}

// GetNwdafInfoList returns the NwdafInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetNwdafInfoList() map[string]NwdafInfo {
	if o == nil || IsNil(o.NwdafInfoList) {
		var ret map[string]NwdafInfo
		return ret
	}
	return *o.NwdafInfoList
}

// GetNwdafInfoListOk returns a tuple with the NwdafInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNwdafInfoListOk() (*map[string]NwdafInfo, bool) {
	if o == nil || IsNil(o.NwdafInfoList) {
		return nil, false
	}
	return o.NwdafInfoList, true
}

// HasNwdafInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasNwdafInfoList() bool {
	if o != nil && !IsNil(o.NwdafInfoList) {
		return true
	}

	return false
}

// SetNwdafInfoList gets a reference to the given map[string]NwdafInfo and assigns it to the NwdafInfoList field.
func (o *NFProfile) SetNwdafInfoList(v map[string]NwdafInfo) {
	o.NwdafInfoList = &v
}

// GetNefInfo returns the NefInfo field value if set, zero value otherwise.
func (o *NFProfile) GetNefInfo() NefInfo {
	if o == nil || IsNil(o.NefInfo) {
		var ret NefInfo
		return ret
	}
	return *o.NefInfo
}

// GetNefInfoOk returns a tuple with the NefInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNefInfoOk() (*NefInfo, bool) {
	if o == nil || IsNil(o.NefInfo) {
		return nil, false
	}
	return o.NefInfo, true
}

// HasNefInfo returns a boolean if a field has been set.
func (o *NFProfile) HasNefInfo() bool {
	if o != nil && !IsNil(o.NefInfo) {
		return true
	}

	return false
}

// SetNefInfo gets a reference to the given NefInfo and assigns it to the NefInfo field.
func (o *NFProfile) SetNefInfo(v NefInfo) {
	o.NefInfo = &v
}

// GetPcscfInfoList returns the PcscfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetPcscfInfoList() map[string]PcscfInfo {
	if o == nil || IsNil(o.PcscfInfoList) {
		var ret map[string]PcscfInfo
		return ret
	}
	return *o.PcscfInfoList
}

// GetPcscfInfoListOk returns a tuple with the PcscfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetPcscfInfoListOk() (*map[string]PcscfInfo, bool) {
	if o == nil || IsNil(o.PcscfInfoList) {
		return nil, false
	}
	return o.PcscfInfoList, true
}

// HasPcscfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasPcscfInfoList() bool {
	if o != nil && !IsNil(o.PcscfInfoList) {
		return true
	}

	return false
}

// SetPcscfInfoList gets a reference to the given map[string]PcscfInfo and assigns it to the PcscfInfoList field.
func (o *NFProfile) SetPcscfInfoList(v map[string]PcscfInfo) {
	o.PcscfInfoList = &v
}

// GetHssInfoList returns the HssInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetHssInfoList() map[string]HssInfo {
	if o == nil || IsNil(o.HssInfoList) {
		var ret map[string]HssInfo
		return ret
	}
	return *o.HssInfoList
}

// GetHssInfoListOk returns a tuple with the HssInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetHssInfoListOk() (*map[string]HssInfo, bool) {
	if o == nil || IsNil(o.HssInfoList) {
		return nil, false
	}
	return o.HssInfoList, true
}

// HasHssInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasHssInfoList() bool {
	if o != nil && !IsNil(o.HssInfoList) {
		return true
	}

	return false
}

// SetHssInfoList gets a reference to the given map[string]HssInfo and assigns it to the HssInfoList field.
func (o *NFProfile) SetHssInfoList(v map[string]HssInfo) {
	o.HssInfoList = &v
}

// GetCustomInfo returns the CustomInfo field value if set, zero value otherwise.
func (o *NFProfile) GetCustomInfo() map[string]interface{} {
	if o == nil || IsNil(o.CustomInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomInfo
}

// GetCustomInfoOk returns a tuple with the CustomInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetCustomInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomInfo) {
		return map[string]interface{}{}, false
	}
	return o.CustomInfo, true
}

// HasCustomInfo returns a boolean if a field has been set.
func (o *NFProfile) HasCustomInfo() bool {
	if o != nil && !IsNil(o.CustomInfo) {
		return true
	}

	return false
}

// SetCustomInfo gets a reference to the given map[string]interface{} and assigns it to the CustomInfo field.
func (o *NFProfile) SetCustomInfo(v map[string]interface{}) {
	o.CustomInfo = v
}

// GetRecoveryTime returns the RecoveryTime field value if set, zero value otherwise.
func (o *NFProfile) GetRecoveryTime() time.Time {
	if o == nil || IsNil(o.RecoveryTime) {
		var ret time.Time
		return ret
	}
	return *o.RecoveryTime
}

// GetRecoveryTimeOk returns a tuple with the RecoveryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetRecoveryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecoveryTime) {
		return nil, false
	}
	return o.RecoveryTime, true
}

// HasRecoveryTime returns a boolean if a field has been set.
func (o *NFProfile) HasRecoveryTime() bool {
	if o != nil && !IsNil(o.RecoveryTime) {
		return true
	}

	return false
}

// SetRecoveryTime gets a reference to the given time.Time and assigns it to the RecoveryTime field.
func (o *NFProfile) SetRecoveryTime(v time.Time) {
	o.RecoveryTime = &v
}

// GetNfServicePersistence returns the NfServicePersistence field value if set, zero value otherwise.
func (o *NFProfile) GetNfServicePersistence() bool {
	if o == nil || IsNil(o.NfServicePersistence) {
		var ret bool
		return ret
	}
	return *o.NfServicePersistence
}

// GetNfServicePersistenceOk returns a tuple with the NfServicePersistence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNfServicePersistenceOk() (*bool, bool) {
	if o == nil || IsNil(o.NfServicePersistence) {
		return nil, false
	}
	return o.NfServicePersistence, true
}

// HasNfServicePersistence returns a boolean if a field has been set.
func (o *NFProfile) HasNfServicePersistence() bool {
	if o != nil && !IsNil(o.NfServicePersistence) {
		return true
	}

	return false
}

// SetNfServicePersistence gets a reference to the given bool and assigns it to the NfServicePersistence field.
func (o *NFProfile) SetNfServicePersistence(v bool) {
	o.NfServicePersistence = &v
}

// GetNfServices returns the NfServices field value if set, zero value otherwise.
// Deprecated
func (o *NFProfile) GetNfServices() []NFService {
	if o == nil || IsNil(o.NfServices) {
		var ret []NFService
		return ret
	}
	return o.NfServices
}

// GetNfServicesOk returns a tuple with the NfServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *NFProfile) GetNfServicesOk() ([]NFService, bool) {
	if o == nil || IsNil(o.NfServices) {
		return nil, false
	}
	return o.NfServices, true
}

// HasNfServices returns a boolean if a field has been set.
func (o *NFProfile) HasNfServices() bool {
	if o != nil && !IsNil(o.NfServices) {
		return true
	}

	return false
}

// SetNfServices gets a reference to the given []NFService and assigns it to the NfServices field.
// Deprecated
func (o *NFProfile) SetNfServices(v []NFService) {
	o.NfServices = v
}

// GetNfServiceList returns the NfServiceList field value if set, zero value otherwise.
func (o *NFProfile) GetNfServiceList() map[string]NFService {
	if o == nil || IsNil(o.NfServiceList) {
		var ret map[string]NFService
		return ret
	}
	return *o.NfServiceList
}

// GetNfServiceListOk returns a tuple with the NfServiceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNfServiceListOk() (*map[string]NFService, bool) {
	if o == nil || IsNil(o.NfServiceList) {
		return nil, false
	}
	return o.NfServiceList, true
}

// HasNfServiceList returns a boolean if a field has been set.
func (o *NFProfile) HasNfServiceList() bool {
	if o != nil && !IsNil(o.NfServiceList) {
		return true
	}

	return false
}

// SetNfServiceList gets a reference to the given map[string]NFService and assigns it to the NfServiceList field.
func (o *NFProfile) SetNfServiceList(v map[string]NFService) {
	o.NfServiceList = &v
}

// GetDefaultNotificationSubscriptions returns the DefaultNotificationSubscriptions field value if set, zero value otherwise.
func (o *NFProfile) GetDefaultNotificationSubscriptions() []DefaultNotificationSubscription {
	if o == nil || IsNil(o.DefaultNotificationSubscriptions) {
		var ret []DefaultNotificationSubscription
		return ret
	}
	return o.DefaultNotificationSubscriptions
}

// GetDefaultNotificationSubscriptionsOk returns a tuple with the DefaultNotificationSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetDefaultNotificationSubscriptionsOk() ([]DefaultNotificationSubscription, bool) {
	if o == nil || IsNil(o.DefaultNotificationSubscriptions) {
		return nil, false
	}
	return o.DefaultNotificationSubscriptions, true
}

// HasDefaultNotificationSubscriptions returns a boolean if a field has been set.
func (o *NFProfile) HasDefaultNotificationSubscriptions() bool {
	if o != nil && !IsNil(o.DefaultNotificationSubscriptions) {
		return true
	}

	return false
}

// SetDefaultNotificationSubscriptions gets a reference to the given []DefaultNotificationSubscription and assigns it to the DefaultNotificationSubscriptions field.
func (o *NFProfile) SetDefaultNotificationSubscriptions(v []DefaultNotificationSubscription) {
	o.DefaultNotificationSubscriptions = v
}

// GetLmfInfo returns the LmfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetLmfInfo() LmfInfo {
	if o == nil || IsNil(o.LmfInfo) {
		var ret LmfInfo
		return ret
	}
	return *o.LmfInfo
}

// GetLmfInfoOk returns a tuple with the LmfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetLmfInfoOk() (*LmfInfo, bool) {
	if o == nil || IsNil(o.LmfInfo) {
		return nil, false
	}
	return o.LmfInfo, true
}

// HasLmfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasLmfInfo() bool {
	if o != nil && !IsNil(o.LmfInfo) {
		return true
	}

	return false
}

// SetLmfInfo gets a reference to the given LmfInfo and assigns it to the LmfInfo field.
func (o *NFProfile) SetLmfInfo(v LmfInfo) {
	o.LmfInfo = &v
}

// GetGmlcInfo returns the GmlcInfo field value if set, zero value otherwise.
func (o *NFProfile) GetGmlcInfo() GmlcInfo {
	if o == nil || IsNil(o.GmlcInfo) {
		var ret GmlcInfo
		return ret
	}
	return *o.GmlcInfo
}

// GetGmlcInfoOk returns a tuple with the GmlcInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetGmlcInfoOk() (*GmlcInfo, bool) {
	if o == nil || IsNil(o.GmlcInfo) {
		return nil, false
	}
	return o.GmlcInfo, true
}

// HasGmlcInfo returns a boolean if a field has been set.
func (o *NFProfile) HasGmlcInfo() bool {
	if o != nil && !IsNil(o.GmlcInfo) {
		return true
	}

	return false
}

// SetGmlcInfo gets a reference to the given GmlcInfo and assigns it to the GmlcInfo field.
func (o *NFProfile) SetGmlcInfo(v GmlcInfo) {
	o.GmlcInfo = &v
}

// GetSnpnList returns the SnpnList field value if set, zero value otherwise.
func (o *NFProfile) GetSnpnList() []PlmnIdNid {
	if o == nil || IsNil(o.SnpnList) {
		var ret []PlmnIdNid
		return ret
	}
	return o.SnpnList
}

// GetSnpnListOk returns a tuple with the SnpnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetSnpnListOk() ([]PlmnIdNid, bool) {
	if o == nil || IsNil(o.SnpnList) {
		return nil, false
	}
	return o.SnpnList, true
}

// HasSnpnList returns a boolean if a field has been set.
func (o *NFProfile) HasSnpnList() bool {
	if o != nil && !IsNil(o.SnpnList) {
		return true
	}

	return false
}

// SetSnpnList gets a reference to the given []PlmnIdNid and assigns it to the SnpnList field.
func (o *NFProfile) SetSnpnList(v []PlmnIdNid) {
	o.SnpnList = v
}

// GetNfSetIdList returns the NfSetIdList field value if set, zero value otherwise.
func (o *NFProfile) GetNfSetIdList() []string {
	if o == nil || IsNil(o.NfSetIdList) {
		var ret []string
		return ret
	}
	return o.NfSetIdList
}

// GetNfSetIdListOk returns a tuple with the NfSetIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNfSetIdListOk() ([]string, bool) {
	if o == nil || IsNil(o.NfSetIdList) {
		return nil, false
	}
	return o.NfSetIdList, true
}

// HasNfSetIdList returns a boolean if a field has been set.
func (o *NFProfile) HasNfSetIdList() bool {
	if o != nil && !IsNil(o.NfSetIdList) {
		return true
	}

	return false
}

// SetNfSetIdList gets a reference to the given []string and assigns it to the NfSetIdList field.
func (o *NFProfile) SetNfSetIdList(v []string) {
	o.NfSetIdList = v
}

// GetServingScope returns the ServingScope field value if set, zero value otherwise.
func (o *NFProfile) GetServingScope() []string {
	if o == nil || IsNil(o.ServingScope) {
		var ret []string
		return ret
	}
	return o.ServingScope
}

// GetServingScopeOk returns a tuple with the ServingScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetServingScopeOk() ([]string, bool) {
	if o == nil || IsNil(o.ServingScope) {
		return nil, false
	}
	return o.ServingScope, true
}

// HasServingScope returns a boolean if a field has been set.
func (o *NFProfile) HasServingScope() bool {
	if o != nil && !IsNil(o.ServingScope) {
		return true
	}

	return false
}

// SetServingScope gets a reference to the given []string and assigns it to the ServingScope field.
func (o *NFProfile) SetServingScope(v []string) {
	o.ServingScope = v
}

// GetLcHSupportInd returns the LcHSupportInd field value if set, zero value otherwise.
func (o *NFProfile) GetLcHSupportInd() bool {
	if o == nil || IsNil(o.LcHSupportInd) {
		var ret bool
		return ret
	}
	return *o.LcHSupportInd
}

// GetLcHSupportIndOk returns a tuple with the LcHSupportInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetLcHSupportIndOk() (*bool, bool) {
	if o == nil || IsNil(o.LcHSupportInd) {
		return nil, false
	}
	return o.LcHSupportInd, true
}

// HasLcHSupportInd returns a boolean if a field has been set.
func (o *NFProfile) HasLcHSupportInd() bool {
	if o != nil && !IsNil(o.LcHSupportInd) {
		return true
	}

	return false
}

// SetLcHSupportInd gets a reference to the given bool and assigns it to the LcHSupportInd field.
func (o *NFProfile) SetLcHSupportInd(v bool) {
	o.LcHSupportInd = &v
}

// GetOlcHSupportInd returns the OlcHSupportInd field value if set, zero value otherwise.
func (o *NFProfile) GetOlcHSupportInd() bool {
	if o == nil || IsNil(o.OlcHSupportInd) {
		var ret bool
		return ret
	}
	return *o.OlcHSupportInd
}

// GetOlcHSupportIndOk returns a tuple with the OlcHSupportInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetOlcHSupportIndOk() (*bool, bool) {
	if o == nil || IsNil(o.OlcHSupportInd) {
		return nil, false
	}
	return o.OlcHSupportInd, true
}

// HasOlcHSupportInd returns a boolean if a field has been set.
func (o *NFProfile) HasOlcHSupportInd() bool {
	if o != nil && !IsNil(o.OlcHSupportInd) {
		return true
	}

	return false
}

// SetOlcHSupportInd gets a reference to the given bool and assigns it to the OlcHSupportInd field.
func (o *NFProfile) SetOlcHSupportInd(v bool) {
	o.OlcHSupportInd = &v
}

// GetNfSetRecoveryTimeList returns the NfSetRecoveryTimeList field value if set, zero value otherwise.
func (o *NFProfile) GetNfSetRecoveryTimeList() map[string]time.Time {
	if o == nil || IsNil(o.NfSetRecoveryTimeList) {
		var ret map[string]time.Time
		return ret
	}
	return *o.NfSetRecoveryTimeList
}

// GetNfSetRecoveryTimeListOk returns a tuple with the NfSetRecoveryTimeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNfSetRecoveryTimeListOk() (*map[string]time.Time, bool) {
	if o == nil || IsNil(o.NfSetRecoveryTimeList) {
		return nil, false
	}
	return o.NfSetRecoveryTimeList, true
}

// HasNfSetRecoveryTimeList returns a boolean if a field has been set.
func (o *NFProfile) HasNfSetRecoveryTimeList() bool {
	if o != nil && !IsNil(o.NfSetRecoveryTimeList) {
		return true
	}

	return false
}

// SetNfSetRecoveryTimeList gets a reference to the given map[string]time.Time and assigns it to the NfSetRecoveryTimeList field.
func (o *NFProfile) SetNfSetRecoveryTimeList(v map[string]time.Time) {
	o.NfSetRecoveryTimeList = &v
}

// GetServiceSetRecoveryTimeList returns the ServiceSetRecoveryTimeList field value if set, zero value otherwise.
func (o *NFProfile) GetServiceSetRecoveryTimeList() map[string]time.Time {
	if o == nil || IsNil(o.ServiceSetRecoveryTimeList) {
		var ret map[string]time.Time
		return ret
	}
	return *o.ServiceSetRecoveryTimeList
}

// GetServiceSetRecoveryTimeListOk returns a tuple with the ServiceSetRecoveryTimeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetServiceSetRecoveryTimeListOk() (*map[string]time.Time, bool) {
	if o == nil || IsNil(o.ServiceSetRecoveryTimeList) {
		return nil, false
	}
	return o.ServiceSetRecoveryTimeList, true
}

// HasServiceSetRecoveryTimeList returns a boolean if a field has been set.
func (o *NFProfile) HasServiceSetRecoveryTimeList() bool {
	if o != nil && !IsNil(o.ServiceSetRecoveryTimeList) {
		return true
	}

	return false
}

// SetServiceSetRecoveryTimeList gets a reference to the given map[string]time.Time and assigns it to the ServiceSetRecoveryTimeList field.
func (o *NFProfile) SetServiceSetRecoveryTimeList(v map[string]time.Time) {
	o.ServiceSetRecoveryTimeList = &v
}

// GetScpDomains returns the ScpDomains field value if set, zero value otherwise.
func (o *NFProfile) GetScpDomains() []string {
	if o == nil || IsNil(o.ScpDomains) {
		var ret []string
		return ret
	}
	return o.ScpDomains
}

// GetScpDomainsOk returns a tuple with the ScpDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetScpDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.ScpDomains) {
		return nil, false
	}
	return o.ScpDomains, true
}

// HasScpDomains returns a boolean if a field has been set.
func (o *NFProfile) HasScpDomains() bool {
	if o != nil && !IsNil(o.ScpDomains) {
		return true
	}

	return false
}

// SetScpDomains gets a reference to the given []string and assigns it to the ScpDomains field.
func (o *NFProfile) SetScpDomains(v []string) {
	o.ScpDomains = v
}

// GetScpInfo returns the ScpInfo field value if set, zero value otherwise.
func (o *NFProfile) GetScpInfo() ScpInfo {
	if o == nil || IsNil(o.ScpInfo) {
		var ret ScpInfo
		return ret
	}
	return *o.ScpInfo
}

// GetScpInfoOk returns a tuple with the ScpInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetScpInfoOk() (*ScpInfo, bool) {
	if o == nil || IsNil(o.ScpInfo) {
		return nil, false
	}
	return o.ScpInfo, true
}

// HasScpInfo returns a boolean if a field has been set.
func (o *NFProfile) HasScpInfo() bool {
	if o != nil && !IsNil(o.ScpInfo) {
		return true
	}

	return false
}

// SetScpInfo gets a reference to the given ScpInfo and assigns it to the ScpInfo field.
func (o *NFProfile) SetScpInfo(v ScpInfo) {
	o.ScpInfo = &v
}

// GetSeppInfo returns the SeppInfo field value if set, zero value otherwise.
func (o *NFProfile) GetSeppInfo() SeppInfo {
	if o == nil || IsNil(o.SeppInfo) {
		var ret SeppInfo
		return ret
	}
	return *o.SeppInfo
}

// GetSeppInfoOk returns a tuple with the SeppInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetSeppInfoOk() (*SeppInfo, bool) {
	if o == nil || IsNil(o.SeppInfo) {
		return nil, false
	}
	return o.SeppInfo, true
}

// HasSeppInfo returns a boolean if a field has been set.
func (o *NFProfile) HasSeppInfo() bool {
	if o != nil && !IsNil(o.SeppInfo) {
		return true
	}

	return false
}

// SetSeppInfo gets a reference to the given SeppInfo and assigns it to the SeppInfo field.
func (o *NFProfile) SetSeppInfo(v SeppInfo) {
	o.SeppInfo = &v
}

// GetVendorId returns the VendorId field value if set, zero value otherwise.
func (o *NFProfile) GetVendorId() string {
	if o == nil || IsNil(o.VendorId) {
		var ret string
		return ret
	}
	return *o.VendorId
}

// GetVendorIdOk returns a tuple with the VendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetVendorIdOk() (*string, bool) {
	if o == nil || IsNil(o.VendorId) {
		return nil, false
	}
	return o.VendorId, true
}

// HasVendorId returns a boolean if a field has been set.
func (o *NFProfile) HasVendorId() bool {
	if o != nil && !IsNil(o.VendorId) {
		return true
	}

	return false
}

// SetVendorId gets a reference to the given string and assigns it to the VendorId field.
func (o *NFProfile) SetVendorId(v string) {
	o.VendorId = &v
}

// GetSupportedVendorSpecificFeatures returns the SupportedVendorSpecificFeatures field value if set, zero value otherwise.
func (o *NFProfile) GetSupportedVendorSpecificFeatures() map[string][]VendorSpecificFeature {
	if o == nil || IsNil(o.SupportedVendorSpecificFeatures) {
		var ret map[string][]VendorSpecificFeature
		return ret
	}
	return *o.SupportedVendorSpecificFeatures
}

// GetSupportedVendorSpecificFeaturesOk returns a tuple with the SupportedVendorSpecificFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetSupportedVendorSpecificFeaturesOk() (*map[string][]VendorSpecificFeature, bool) {
	if o == nil || IsNil(o.SupportedVendorSpecificFeatures) {
		return nil, false
	}
	return o.SupportedVendorSpecificFeatures, true
}

// HasSupportedVendorSpecificFeatures returns a boolean if a field has been set.
func (o *NFProfile) HasSupportedVendorSpecificFeatures() bool {
	if o != nil && !IsNil(o.SupportedVendorSpecificFeatures) {
		return true
	}

	return false
}

// SetSupportedVendorSpecificFeatures gets a reference to the given map[string][]VendorSpecificFeature and assigns it to the SupportedVendorSpecificFeatures field.
func (o *NFProfile) SetSupportedVendorSpecificFeatures(v map[string][]VendorSpecificFeature) {
	o.SupportedVendorSpecificFeatures = &v
}

// GetAanfInfoList returns the AanfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetAanfInfoList() map[string]AanfInfo {
	if o == nil || IsNil(o.AanfInfoList) {
		var ret map[string]AanfInfo
		return ret
	}
	return *o.AanfInfoList
}

// GetAanfInfoListOk returns a tuple with the AanfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetAanfInfoListOk() (*map[string]AanfInfo, bool) {
	if o == nil || IsNil(o.AanfInfoList) {
		return nil, false
	}
	return o.AanfInfoList, true
}

// HasAanfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasAanfInfoList() bool {
	if o != nil && !IsNil(o.AanfInfoList) {
		return true
	}

	return false
}

// SetAanfInfoList gets a reference to the given map[string]AanfInfo and assigns it to the AanfInfoList field.
func (o *NFProfile) SetAanfInfoList(v map[string]AanfInfo) {
	o.AanfInfoList = &v
}

// GetMfafInfo returns the MfafInfo field value if set, zero value otherwise.
func (o *NFProfile) GetMfafInfo() MfafInfo {
	if o == nil || IsNil(o.MfafInfo) {
		var ret MfafInfo
		return ret
	}
	return *o.MfafInfo
}

// GetMfafInfoOk returns a tuple with the MfafInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetMfafInfoOk() (*MfafInfo, bool) {
	if o == nil || IsNil(o.MfafInfo) {
		return nil, false
	}
	return o.MfafInfo, true
}

// HasMfafInfo returns a boolean if a field has been set.
func (o *NFProfile) HasMfafInfo() bool {
	if o != nil && !IsNil(o.MfafInfo) {
		return true
	}

	return false
}

// SetMfafInfo gets a reference to the given MfafInfo and assigns it to the MfafInfo field.
func (o *NFProfile) SetMfafInfo(v MfafInfo) {
	o.MfafInfo = &v
}

// GetEasdfInfoList returns the EasdfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetEasdfInfoList() map[string]EasdfInfo {
	if o == nil || IsNil(o.EasdfInfoList) {
		var ret map[string]EasdfInfo
		return ret
	}
	return *o.EasdfInfoList
}

// GetEasdfInfoListOk returns a tuple with the EasdfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetEasdfInfoListOk() (*map[string]EasdfInfo, bool) {
	if o == nil || IsNil(o.EasdfInfoList) {
		return nil, false
	}
	return o.EasdfInfoList, true
}

// HasEasdfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasEasdfInfoList() bool {
	if o != nil && !IsNil(o.EasdfInfoList) {
		return true
	}

	return false
}

// SetEasdfInfoList gets a reference to the given map[string]EasdfInfo and assigns it to the EasdfInfoList field.
func (o *NFProfile) SetEasdfInfoList(v map[string]EasdfInfo) {
	o.EasdfInfoList = &v
}

// GetDccfInfo returns the DccfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetDccfInfo() DccfInfo {
	if o == nil || IsNil(o.DccfInfo) {
		var ret DccfInfo
		return ret
	}
	return *o.DccfInfo
}

// GetDccfInfoOk returns a tuple with the DccfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetDccfInfoOk() (*DccfInfo, bool) {
	if o == nil || IsNil(o.DccfInfo) {
		return nil, false
	}
	return o.DccfInfo, true
}

// HasDccfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasDccfInfo() bool {
	if o != nil && !IsNil(o.DccfInfo) {
		return true
	}

	return false
}

// SetDccfInfo gets a reference to the given DccfInfo and assigns it to the DccfInfo field.
func (o *NFProfile) SetDccfInfo(v DccfInfo) {
	o.DccfInfo = &v
}

// GetNsacfInfoList returns the NsacfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetNsacfInfoList() map[string]NsacfInfo {
	if o == nil || IsNil(o.NsacfInfoList) {
		var ret map[string]NsacfInfo
		return ret
	}
	return *o.NsacfInfoList
}

// GetNsacfInfoListOk returns a tuple with the NsacfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNsacfInfoListOk() (*map[string]NsacfInfo, bool) {
	if o == nil || IsNil(o.NsacfInfoList) {
		return nil, false
	}
	return o.NsacfInfoList, true
}

// HasNsacfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasNsacfInfoList() bool {
	if o != nil && !IsNil(o.NsacfInfoList) {
		return true
	}

	return false
}

// SetNsacfInfoList gets a reference to the given map[string]NsacfInfo and assigns it to the NsacfInfoList field.
func (o *NFProfile) SetNsacfInfoList(v map[string]NsacfInfo) {
	o.NsacfInfoList = &v
}

// GetMbSmfInfoList returns the MbSmfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetMbSmfInfoList() map[string]MbSmfInfo {
	if o == nil || IsNil(o.MbSmfInfoList) {
		var ret map[string]MbSmfInfo
		return ret
	}
	return *o.MbSmfInfoList
}

// GetMbSmfInfoListOk returns a tuple with the MbSmfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetMbSmfInfoListOk() (*map[string]MbSmfInfo, bool) {
	if o == nil || IsNil(o.MbSmfInfoList) {
		return nil, false
	}
	return o.MbSmfInfoList, true
}

// HasMbSmfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasMbSmfInfoList() bool {
	if o != nil && !IsNil(o.MbSmfInfoList) {
		return true
	}

	return false
}

// SetMbSmfInfoList gets a reference to the given map[string]MbSmfInfo and assigns it to the MbSmfInfoList field.
func (o *NFProfile) SetMbSmfInfoList(v map[string]MbSmfInfo) {
	o.MbSmfInfoList = &v
}

// GetTsctsfInfoList returns the TsctsfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetTsctsfInfoList() map[string]TsctsfInfo {
	if o == nil || IsNil(o.TsctsfInfoList) {
		var ret map[string]TsctsfInfo
		return ret
	}
	return *o.TsctsfInfoList
}

// GetTsctsfInfoListOk returns a tuple with the TsctsfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetTsctsfInfoListOk() (*map[string]TsctsfInfo, bool) {
	if o == nil || IsNil(o.TsctsfInfoList) {
		return nil, false
	}
	return o.TsctsfInfoList, true
}

// HasTsctsfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasTsctsfInfoList() bool {
	if o != nil && !IsNil(o.TsctsfInfoList) {
		return true
	}

	return false
}

// SetTsctsfInfoList gets a reference to the given map[string]TsctsfInfo and assigns it to the TsctsfInfoList field.
func (o *NFProfile) SetTsctsfInfoList(v map[string]TsctsfInfo) {
	o.TsctsfInfoList = &v
}

// GetMbUpfInfoList returns the MbUpfInfoList field value if set, zero value otherwise.
func (o *NFProfile) GetMbUpfInfoList() map[string]MbUpfInfo {
	if o == nil || IsNil(o.MbUpfInfoList) {
		var ret map[string]MbUpfInfo
		return ret
	}
	return *o.MbUpfInfoList
}

// GetMbUpfInfoListOk returns a tuple with the MbUpfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetMbUpfInfoListOk() (*map[string]MbUpfInfo, bool) {
	if o == nil || IsNil(o.MbUpfInfoList) {
		return nil, false
	}
	return o.MbUpfInfoList, true
}

// HasMbUpfInfoList returns a boolean if a field has been set.
func (o *NFProfile) HasMbUpfInfoList() bool {
	if o != nil && !IsNil(o.MbUpfInfoList) {
		return true
	}

	return false
}

// SetMbUpfInfoList gets a reference to the given map[string]MbUpfInfo and assigns it to the MbUpfInfoList field.
func (o *NFProfile) SetMbUpfInfoList(v map[string]MbUpfInfo) {
	o.MbUpfInfoList = &v
}

// GetTrustAfInfo returns the TrustAfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetTrustAfInfo() TrustAfInfo {
	if o == nil || IsNil(o.TrustAfInfo) {
		var ret TrustAfInfo
		return ret
	}
	return *o.TrustAfInfo
}

// GetTrustAfInfoOk returns a tuple with the TrustAfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetTrustAfInfoOk() (*TrustAfInfo, bool) {
	if o == nil || IsNil(o.TrustAfInfo) {
		return nil, false
	}
	return o.TrustAfInfo, true
}

// HasTrustAfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasTrustAfInfo() bool {
	if o != nil && !IsNil(o.TrustAfInfo) {
		return true
	}

	return false
}

// SetTrustAfInfo gets a reference to the given TrustAfInfo and assigns it to the TrustAfInfo field.
func (o *NFProfile) SetTrustAfInfo(v TrustAfInfo) {
	o.TrustAfInfo = &v
}

// GetNssaafInfo returns the NssaafInfo field value if set, zero value otherwise.
func (o *NFProfile) GetNssaafInfo() NssaafInfo {
	if o == nil || IsNil(o.NssaafInfo) {
		var ret NssaafInfo
		return ret
	}
	return *o.NssaafInfo
}

// GetNssaafInfoOk returns a tuple with the NssaafInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetNssaafInfoOk() (*NssaafInfo, bool) {
	if o == nil || IsNil(o.NssaafInfo) {
		return nil, false
	}
	return o.NssaafInfo, true
}

// HasNssaafInfo returns a boolean if a field has been set.
func (o *NFProfile) HasNssaafInfo() bool {
	if o != nil && !IsNil(o.NssaafInfo) {
		return true
	}

	return false
}

// SetNssaafInfo gets a reference to the given NssaafInfo and assigns it to the NssaafInfo field.
func (o *NFProfile) SetNssaafInfo(v NssaafInfo) {
	o.NssaafInfo = &v
}

// GetHniList returns the HniList field value if set, zero value otherwise.
func (o *NFProfile) GetHniList() []string {
	if o == nil || IsNil(o.HniList) {
		var ret []string
		return ret
	}
	return o.HniList
}

// GetHniListOk returns a tuple with the HniList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetHniListOk() ([]string, bool) {
	if o == nil || IsNil(o.HniList) {
		return nil, false
	}
	return o.HniList, true
}

// HasHniList returns a boolean if a field has been set.
func (o *NFProfile) HasHniList() bool {
	if o != nil && !IsNil(o.HniList) {
		return true
	}

	return false
}

// SetHniList gets a reference to the given []string and assigns it to the HniList field.
func (o *NFProfile) SetHniList(v []string) {
	o.HniList = v
}

// GetIwmscInfo returns the IwmscInfo field value if set, zero value otherwise.
func (o *NFProfile) GetIwmscInfo() IwmscInfo {
	if o == nil || IsNil(o.IwmscInfo) {
		var ret IwmscInfo
		return ret
	}
	return *o.IwmscInfo
}

// GetIwmscInfoOk returns a tuple with the IwmscInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetIwmscInfoOk() (*IwmscInfo, bool) {
	if o == nil || IsNil(o.IwmscInfo) {
		return nil, false
	}
	return o.IwmscInfo, true
}

// HasIwmscInfo returns a boolean if a field has been set.
func (o *NFProfile) HasIwmscInfo() bool {
	if o != nil && !IsNil(o.IwmscInfo) {
		return true
	}

	return false
}

// SetIwmscInfo gets a reference to the given IwmscInfo and assigns it to the IwmscInfo field.
func (o *NFProfile) SetIwmscInfo(v IwmscInfo) {
	o.IwmscInfo = &v
}

// GetMnpfInfo returns the MnpfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetMnpfInfo() MnpfInfo {
	if o == nil || IsNil(o.MnpfInfo) {
		var ret MnpfInfo
		return ret
	}
	return *o.MnpfInfo
}

// GetMnpfInfoOk returns a tuple with the MnpfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetMnpfInfoOk() (*MnpfInfo, bool) {
	if o == nil || IsNil(o.MnpfInfo) {
		return nil, false
	}
	return o.MnpfInfo, true
}

// HasMnpfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasMnpfInfo() bool {
	if o != nil && !IsNil(o.MnpfInfo) {
		return true
	}

	return false
}

// SetMnpfInfo gets a reference to the given MnpfInfo and assigns it to the MnpfInfo field.
func (o *NFProfile) SetMnpfInfo(v MnpfInfo) {
	o.MnpfInfo = &v
}

// GetSmsfInfo returns the SmsfInfo field value if set, zero value otherwise.
func (o *NFProfile) GetSmsfInfo() SmsfInfo {
	if o == nil || IsNil(o.SmsfInfo) {
		var ret SmsfInfo
		return ret
	}
	return *o.SmsfInfo
}

// GetSmsfInfoOk returns a tuple with the SmsfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFProfile) GetSmsfInfoOk() (*SmsfInfo, bool) {
	if o == nil || IsNil(o.SmsfInfo) {
		return nil, false
	}
	return o.SmsfInfo, true
}

// HasSmsfInfo returns a boolean if a field has been set.
func (o *NFProfile) HasSmsfInfo() bool {
	if o != nil && !IsNil(o.SmsfInfo) {
		return true
	}

	return false
}

// SetSmsfInfo gets a reference to the given SmsfInfo and assigns it to the SmsfInfo field.
func (o *NFProfile) SetSmsfInfo(v SmsfInfo) {
	o.SmsfInfo = &v
}

func (o NFProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NFProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nfInstanceId"] = o.NfInstanceId
	if !IsNil(o.NfInstanceName) {
		toSerialize["nfInstanceName"] = o.NfInstanceName
	}
	toSerialize["nfType"] = o.NfType
	toSerialize["nfStatus"] = o.NfStatus
	if !IsNil(o.CollocatedNfInstances) {
		toSerialize["collocatedNfInstances"] = o.CollocatedNfInstances
	}
	if !IsNil(o.PlmnList) {
		toSerialize["plmnList"] = o.PlmnList
	}
	if !IsNil(o.SNssais) {
		toSerialize["sNssais"] = o.SNssais
	}
	if !IsNil(o.PerPlmnSnssaiList) {
		toSerialize["perPlmnSnssaiList"] = o.PerPlmnSnssaiList
	}
	if !IsNil(o.NsiList) {
		toSerialize["nsiList"] = o.NsiList
	}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.InterPlmnFqdn) {
		toSerialize["interPlmnFqdn"] = o.InterPlmnFqdn
	}
	if !IsNil(o.Ipv4Addresses) {
		toSerialize["ipv4Addresses"] = o.Ipv4Addresses
	}
	if !IsNil(o.Ipv6Addresses) {
		toSerialize["ipv6Addresses"] = o.Ipv6Addresses
	}
	if !IsNil(o.AllowedPlmns) {
		toSerialize["allowedPlmns"] = o.AllowedPlmns
	}
	if !IsNil(o.AllowedSnpns) {
		toSerialize["allowedSnpns"] = o.AllowedSnpns
	}
	if !IsNil(o.AllowedNfTypes) {
		toSerialize["allowedNfTypes"] = o.AllowedNfTypes
	}
	if !IsNil(o.AllowedNfDomains) {
		toSerialize["allowedNfDomains"] = o.AllowedNfDomains
	}
	if !IsNil(o.AllowedNssais) {
		toSerialize["allowedNssais"] = o.AllowedNssais
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Load) {
		toSerialize["load"] = o.Load
	}
	if !IsNil(o.LoadTimeStamp) {
		toSerialize["loadTimeStamp"] = o.LoadTimeStamp
	}
	if !IsNil(o.Locality) {
		toSerialize["locality"] = o.Locality
	}
	if !IsNil(o.ExtLocality) {
		toSerialize["extLocality"] = o.ExtLocality
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.UdrInfo) {
		toSerialize["udrInfo"] = o.UdrInfo
	}
	if !IsNil(o.UdrInfoList) {
		toSerialize["udrInfoList"] = o.UdrInfoList
	}
	if !IsNil(o.UdmInfo) {
		toSerialize["udmInfo"] = o.UdmInfo
	}
	if !IsNil(o.UdmInfoList) {
		toSerialize["udmInfoList"] = o.UdmInfoList
	}
	if !IsNil(o.AusfInfo) {
		toSerialize["ausfInfo"] = o.AusfInfo
	}
	if !IsNil(o.AusfInfoList) {
		toSerialize["ausfInfoList"] = o.AusfInfoList
	}
	if !IsNil(o.AmfInfo) {
		toSerialize["amfInfo"] = o.AmfInfo
	}
	if !IsNil(o.AmfInfoList) {
		toSerialize["amfInfoList"] = o.AmfInfoList
	}
	if !IsNil(o.SmfInfo) {
		toSerialize["smfInfo"] = o.SmfInfo
	}
	if !IsNil(o.SmfInfoList) {
		toSerialize["smfInfoList"] = o.SmfInfoList
	}
	if !IsNil(o.UpfInfo) {
		toSerialize["upfInfo"] = o.UpfInfo
	}
	if !IsNil(o.UpfInfoList) {
		toSerialize["upfInfoList"] = o.UpfInfoList
	}
	if !IsNil(o.PcfInfo) {
		toSerialize["pcfInfo"] = o.PcfInfo
	}
	if !IsNil(o.PcfInfoList) {
		toSerialize["pcfInfoList"] = o.PcfInfoList
	}
	if !IsNil(o.BsfInfo) {
		toSerialize["bsfInfo"] = o.BsfInfo
	}
	if !IsNil(o.BsfInfoList) {
		toSerialize["bsfInfoList"] = o.BsfInfoList
	}
	if !IsNil(o.ChfInfo) {
		toSerialize["chfInfo"] = o.ChfInfo
	}
	if !IsNil(o.ChfInfoList) {
		toSerialize["chfInfoList"] = o.ChfInfoList
	}
	if !IsNil(o.UdsfInfo) {
		toSerialize["udsfInfo"] = o.UdsfInfo
	}
	if !IsNil(o.UdsfInfoList) {
		toSerialize["udsfInfoList"] = o.UdsfInfoList
	}
	if !IsNil(o.NwdafInfo) {
		toSerialize["nwdafInfo"] = o.NwdafInfo
	}
	if !IsNil(o.NwdafInfoList) {
		toSerialize["nwdafInfoList"] = o.NwdafInfoList
	}
	if !IsNil(o.NefInfo) {
		toSerialize["nefInfo"] = o.NefInfo
	}
	if !IsNil(o.PcscfInfoList) {
		toSerialize["pcscfInfoList"] = o.PcscfInfoList
	}
	if !IsNil(o.HssInfoList) {
		toSerialize["hssInfoList"] = o.HssInfoList
	}
	if !IsNil(o.CustomInfo) {
		toSerialize["customInfo"] = o.CustomInfo
	}
	if !IsNil(o.RecoveryTime) {
		toSerialize["recoveryTime"] = o.RecoveryTime
	}
	if !IsNil(o.NfServicePersistence) {
		toSerialize["nfServicePersistence"] = o.NfServicePersistence
	}
	if !IsNil(o.NfServices) {
		toSerialize["nfServices"] = o.NfServices
	}
	if !IsNil(o.NfServiceList) {
		toSerialize["nfServiceList"] = o.NfServiceList
	}
	if !IsNil(o.DefaultNotificationSubscriptions) {
		toSerialize["defaultNotificationSubscriptions"] = o.DefaultNotificationSubscriptions
	}
	if !IsNil(o.LmfInfo) {
		toSerialize["lmfInfo"] = o.LmfInfo
	}
	if !IsNil(o.GmlcInfo) {
		toSerialize["gmlcInfo"] = o.GmlcInfo
	}
	if !IsNil(o.SnpnList) {
		toSerialize["snpnList"] = o.SnpnList
	}
	if !IsNil(o.NfSetIdList) {
		toSerialize["nfSetIdList"] = o.NfSetIdList
	}
	if !IsNil(o.ServingScope) {
		toSerialize["servingScope"] = o.ServingScope
	}
	if !IsNil(o.LcHSupportInd) {
		toSerialize["lcHSupportInd"] = o.LcHSupportInd
	}
	if !IsNil(o.OlcHSupportInd) {
		toSerialize["olcHSupportInd"] = o.OlcHSupportInd
	}
	if !IsNil(o.NfSetRecoveryTimeList) {
		toSerialize["nfSetRecoveryTimeList"] = o.NfSetRecoveryTimeList
	}
	if !IsNil(o.ServiceSetRecoveryTimeList) {
		toSerialize["serviceSetRecoveryTimeList"] = o.ServiceSetRecoveryTimeList
	}
	if !IsNil(o.ScpDomains) {
		toSerialize["scpDomains"] = o.ScpDomains
	}
	if !IsNil(o.ScpInfo) {
		toSerialize["scpInfo"] = o.ScpInfo
	}
	if !IsNil(o.SeppInfo) {
		toSerialize["seppInfo"] = o.SeppInfo
	}
	if !IsNil(o.VendorId) {
		toSerialize["vendorId"] = o.VendorId
	}
	if !IsNil(o.SupportedVendorSpecificFeatures) {
		toSerialize["supportedVendorSpecificFeatures"] = o.SupportedVendorSpecificFeatures
	}
	if !IsNil(o.AanfInfoList) {
		toSerialize["aanfInfoList"] = o.AanfInfoList
	}
	if !IsNil(o.MfafInfo) {
		toSerialize["mfafInfo"] = o.MfafInfo
	}
	if !IsNil(o.EasdfInfoList) {
		toSerialize["easdfInfoList"] = o.EasdfInfoList
	}
	if !IsNil(o.DccfInfo) {
		toSerialize["dccfInfo"] = o.DccfInfo
	}
	if !IsNil(o.NsacfInfoList) {
		toSerialize["nsacfInfoList"] = o.NsacfInfoList
	}
	if !IsNil(o.MbSmfInfoList) {
		toSerialize["mbSmfInfoList"] = o.MbSmfInfoList
	}
	if !IsNil(o.TsctsfInfoList) {
		toSerialize["tsctsfInfoList"] = o.TsctsfInfoList
	}
	if !IsNil(o.MbUpfInfoList) {
		toSerialize["mbUpfInfoList"] = o.MbUpfInfoList
	}
	if !IsNil(o.TrustAfInfo) {
		toSerialize["trustAfInfo"] = o.TrustAfInfo
	}
	if !IsNil(o.NssaafInfo) {
		toSerialize["nssaafInfo"] = o.NssaafInfo
	}
	if !IsNil(o.HniList) {
		toSerialize["hniList"] = o.HniList
	}
	if !IsNil(o.IwmscInfo) {
		toSerialize["iwmscInfo"] = o.IwmscInfo
	}
	if !IsNil(o.MnpfInfo) {
		toSerialize["mnpfInfo"] = o.MnpfInfo
	}
	if !IsNil(o.SmsfInfo) {
		toSerialize["smsfInfo"] = o.SmsfInfo
	}
	return toSerialize, nil
}

type NullableNFProfile struct {
	value *NFProfile
	isSet bool
}

func (v NullableNFProfile) Get() *NFProfile {
	return v.value
}

func (v *NullableNFProfile) Set(val *NFProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableNFProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableNFProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFProfile(val *NFProfile) *NullableNFProfile {
	return &NullableNFProfile{value: val, isSet: true}
}

func (v NullableNFProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


