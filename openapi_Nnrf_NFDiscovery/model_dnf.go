/*
NRF NFDiscovery Service

NRF NFDiscovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnrf_NFDiscovery

import (
	"encoding/json"
)

// checks if the Dnf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dnf{}

// Dnf A disjunctive normal form.
type Dnf struct {
	DnfUnits []DnfUnit `json:"dnfUnits"`
}

// NewDnf instantiates a new Dnf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnf(dnfUnits []DnfUnit) *Dnf {
	this := Dnf{}
	this.DnfUnits = dnfUnits
	return &this
}

// NewDnfWithDefaults instantiates a new Dnf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnfWithDefaults() *Dnf {
	this := Dnf{}
	return &this
}

// GetDnfUnits returns the DnfUnits field value
func (o *Dnf) GetDnfUnits() []DnfUnit {
	if o == nil {
		var ret []DnfUnit
		return ret
	}

	return o.DnfUnits
}

// GetDnfUnitsOk returns a tuple with the DnfUnits field value
// and a boolean to check if the value has been set.
func (o *Dnf) GetDnfUnitsOk() ([]DnfUnit, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnfUnits, true
}

// SetDnfUnits sets field value
func (o *Dnf) SetDnfUnits(v []DnfUnit) {
	o.DnfUnits = v
}

func (o Dnf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dnf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dnfUnits"] = o.DnfUnits
	return toSerialize, nil
}

type NullableDnf struct {
	value *Dnf
	isSet bool
}

func (v NullableDnf) Get() *Dnf {
	return v.value
}

func (v *NullableDnf) Set(val *Dnf) {
	v.value = val
	v.isSet = true
}

func (v NullableDnf) IsSet() bool {
	return v.isSet
}

func (v *NullableDnf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnf(val *Dnf) *NullableDnf {
	return &NullableDnf{value: val, isSet: true}
}

func (v NullableDnf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
