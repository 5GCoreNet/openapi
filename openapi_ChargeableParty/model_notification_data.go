/*
3gpp-chargeable-party

API for Chargeable Party management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ChargeableParty

import (
	"encoding/json"
)

// checks if the NotificationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationData{}

// NotificationData Represents the information to be conveyed in a bearer level event(s) notification.
type NotificationData struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Transaction string `json:"transaction"`
	// Contains the reported event and applicable information
	EventReports []EventReport `json:"eventReports"`
}

// NewNotificationData instantiates a new NotificationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationData(transaction string, eventReports []EventReport) *NotificationData {
	this := NotificationData{}
	this.Transaction = transaction
	this.EventReports = eventReports
	return &this
}

// NewNotificationDataWithDefaults instantiates a new NotificationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationDataWithDefaults() *NotificationData {
	this := NotificationData{}
	return &this
}

// GetTransaction returns the Transaction field value
func (o *NotificationData) GetTransaction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *NotificationData) GetTransactionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *NotificationData) SetTransaction(v string) {
	o.Transaction = v
}

// GetEventReports returns the EventReports field value
func (o *NotificationData) GetEventReports() []EventReport {
	if o == nil {
		var ret []EventReport
		return ret
	}

	return o.EventReports
}

// GetEventReportsOk returns a tuple with the EventReports field value
// and a boolean to check if the value has been set.
func (o *NotificationData) GetEventReportsOk() ([]EventReport, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventReports, true
}

// SetEventReports sets field value
func (o *NotificationData) SetEventReports(v []EventReport) {
	o.EventReports = v
}

func (o NotificationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction"] = o.Transaction
	toSerialize["eventReports"] = o.EventReports
	return toSerialize, nil
}

type NullableNotificationData struct {
	value *NotificationData
	isSet bool
}

func (v NullableNotificationData) Get() *NotificationData {
	return v.value
}

func (v *NullableNotificationData) Set(val *NotificationData) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationData) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationData(val *NotificationData) *NullableNotificationData {
	return &NullableNotificationData{value: val, isSet: true}
}

func (v NullableNotificationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


