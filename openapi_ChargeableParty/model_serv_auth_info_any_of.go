/*
3gpp-chargeable-party

API for Chargeable Party management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ChargeableParty

import (
	"encoding/json"
	"fmt"
)

// ServAuthInfoAnyOf the model 'ServAuthInfoAnyOf'
type ServAuthInfoAnyOf string

// List of ServAuthInfo_anyOf
const (
	TP_NOT_KNOWN ServAuthInfoAnyOf = "TP_NOT_KNOWN"
	TP_EXPIRED ServAuthInfoAnyOf = "TP_EXPIRED"
	TP_NOT_YET_OCURRED ServAuthInfoAnyOf = "TP_NOT_YET_OCURRED"
	ROUT_REQ_NOT_AUTHORIZED ServAuthInfoAnyOf = "ROUT_REQ_NOT_AUTHORIZED"
)

// All allowed values of ServAuthInfoAnyOf enum
var AllowedServAuthInfoAnyOfEnumValues = []ServAuthInfoAnyOf{
	"TP_NOT_KNOWN",
	"TP_EXPIRED",
	"TP_NOT_YET_OCURRED",
	"ROUT_REQ_NOT_AUTHORIZED",
}

func (v *ServAuthInfoAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServAuthInfoAnyOf(value)
	for _, existing := range AllowedServAuthInfoAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServAuthInfoAnyOf", value)
}

// NewServAuthInfoAnyOfFromValue returns a pointer to a valid ServAuthInfoAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServAuthInfoAnyOfFromValue(v string) (*ServAuthInfoAnyOf, error) {
	ev := ServAuthInfoAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServAuthInfoAnyOf: valid values are %v", v, AllowedServAuthInfoAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServAuthInfoAnyOf) IsValid() bool {
	for _, existing := range AllowedServAuthInfoAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServAuthInfo_anyOf value
func (v ServAuthInfoAnyOf) Ptr() *ServAuthInfoAnyOf {
	return &v
}

type NullableServAuthInfoAnyOf struct {
	value *ServAuthInfoAnyOf
	isSet bool
}

func (v NullableServAuthInfoAnyOf) Get() *ServAuthInfoAnyOf {
	return v.value
}

func (v *NullableServAuthInfoAnyOf) Set(val *ServAuthInfoAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableServAuthInfoAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableServAuthInfoAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServAuthInfoAnyOf(val *ServAuthInfoAnyOf) *NullableServAuthInfoAnyOf {
	return &NullableServAuthInfoAnyOf{value: val, isSet: true}
}

func (v NullableServAuthInfoAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServAuthInfoAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

