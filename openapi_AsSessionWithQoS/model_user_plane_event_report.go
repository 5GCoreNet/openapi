/*
3gpp-as-session-with-qos

API for setting us an AS session with required QoS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AsSessionWithQoS

import (
	"encoding/json"
)

// checks if the UserPlaneEventReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPlaneEventReport{}

// UserPlaneEventReport Represents an event report for user plane.
type UserPlaneEventReport struct {
	Event            UserPlaneEvent    `json:"event"`
	AccumulatedUsage *AccumulatedUsage `json:"accumulatedUsage,omitempty"`
	// Identifies the affected flows that were sent during event subscription. It might be omitted when the reported event applies to all the flows sent during the subscription.
	FlowIds []int32 `json:"flowIds,omitempty"`
	// The currently applied QoS reference. Applicable for event QOS_NOT_GUARANTEED or SUCCESSFUL_RESOURCES_ALLOCATION.
	AppliedQosRef *string    `json:"appliedQosRef,omitempty"`
	PlmnId        *PlmnIdNid `json:"plmnId,omitempty"`
	// Contains the QoS Monitoring Reporting information
	QosMonReports []QosMonitoringReport `json:"qosMonReports,omitempty"`
	RatType       *RatType              `json:"ratType,omitempty"`
}

// NewUserPlaneEventReport instantiates a new UserPlaneEventReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPlaneEventReport(event UserPlaneEvent) *UserPlaneEventReport {
	this := UserPlaneEventReport{}
	this.Event = event
	return &this
}

// NewUserPlaneEventReportWithDefaults instantiates a new UserPlaneEventReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPlaneEventReportWithDefaults() *UserPlaneEventReport {
	this := UserPlaneEventReport{}
	return &this
}

// GetEvent returns the Event field value
func (o *UserPlaneEventReport) GetEvent() UserPlaneEvent {
	if o == nil {
		var ret UserPlaneEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *UserPlaneEventReport) GetEventOk() (*UserPlaneEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *UserPlaneEventReport) SetEvent(v UserPlaneEvent) {
	o.Event = v
}

// GetAccumulatedUsage returns the AccumulatedUsage field value if set, zero value otherwise.
func (o *UserPlaneEventReport) GetAccumulatedUsage() AccumulatedUsage {
	if o == nil || IsNil(o.AccumulatedUsage) {
		var ret AccumulatedUsage
		return ret
	}
	return *o.AccumulatedUsage
}

// GetAccumulatedUsageOk returns a tuple with the AccumulatedUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPlaneEventReport) GetAccumulatedUsageOk() (*AccumulatedUsage, bool) {
	if o == nil || IsNil(o.AccumulatedUsage) {
		return nil, false
	}
	return o.AccumulatedUsage, true
}

// HasAccumulatedUsage returns a boolean if a field has been set.
func (o *UserPlaneEventReport) HasAccumulatedUsage() bool {
	if o != nil && !IsNil(o.AccumulatedUsage) {
		return true
	}

	return false
}

// SetAccumulatedUsage gets a reference to the given AccumulatedUsage and assigns it to the AccumulatedUsage field.
func (o *UserPlaneEventReport) SetAccumulatedUsage(v AccumulatedUsage) {
	o.AccumulatedUsage = &v
}

// GetFlowIds returns the FlowIds field value if set, zero value otherwise.
func (o *UserPlaneEventReport) GetFlowIds() []int32 {
	if o == nil || IsNil(o.FlowIds) {
		var ret []int32
		return ret
	}
	return o.FlowIds
}

// GetFlowIdsOk returns a tuple with the FlowIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPlaneEventReport) GetFlowIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.FlowIds) {
		return nil, false
	}
	return o.FlowIds, true
}

// HasFlowIds returns a boolean if a field has been set.
func (o *UserPlaneEventReport) HasFlowIds() bool {
	if o != nil && !IsNil(o.FlowIds) {
		return true
	}

	return false
}

// SetFlowIds gets a reference to the given []int32 and assigns it to the FlowIds field.
func (o *UserPlaneEventReport) SetFlowIds(v []int32) {
	o.FlowIds = v
}

// GetAppliedQosRef returns the AppliedQosRef field value if set, zero value otherwise.
func (o *UserPlaneEventReport) GetAppliedQosRef() string {
	if o == nil || IsNil(o.AppliedQosRef) {
		var ret string
		return ret
	}
	return *o.AppliedQosRef
}

// GetAppliedQosRefOk returns a tuple with the AppliedQosRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPlaneEventReport) GetAppliedQosRefOk() (*string, bool) {
	if o == nil || IsNil(o.AppliedQosRef) {
		return nil, false
	}
	return o.AppliedQosRef, true
}

// HasAppliedQosRef returns a boolean if a field has been set.
func (o *UserPlaneEventReport) HasAppliedQosRef() bool {
	if o != nil && !IsNil(o.AppliedQosRef) {
		return true
	}

	return false
}

// SetAppliedQosRef gets a reference to the given string and assigns it to the AppliedQosRef field.
func (o *UserPlaneEventReport) SetAppliedQosRef(v string) {
	o.AppliedQosRef = &v
}

// GetPlmnId returns the PlmnId field value if set, zero value otherwise.
func (o *UserPlaneEventReport) GetPlmnId() PlmnIdNid {
	if o == nil || IsNil(o.PlmnId) {
		var ret PlmnIdNid
		return ret
	}
	return *o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPlaneEventReport) GetPlmnIdOk() (*PlmnIdNid, bool) {
	if o == nil || IsNil(o.PlmnId) {
		return nil, false
	}
	return o.PlmnId, true
}

// HasPlmnId returns a boolean if a field has been set.
func (o *UserPlaneEventReport) HasPlmnId() bool {
	if o != nil && !IsNil(o.PlmnId) {
		return true
	}

	return false
}

// SetPlmnId gets a reference to the given PlmnIdNid and assigns it to the PlmnId field.
func (o *UserPlaneEventReport) SetPlmnId(v PlmnIdNid) {
	o.PlmnId = &v
}

// GetQosMonReports returns the QosMonReports field value if set, zero value otherwise.
func (o *UserPlaneEventReport) GetQosMonReports() []QosMonitoringReport {
	if o == nil || IsNil(o.QosMonReports) {
		var ret []QosMonitoringReport
		return ret
	}
	return o.QosMonReports
}

// GetQosMonReportsOk returns a tuple with the QosMonReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPlaneEventReport) GetQosMonReportsOk() ([]QosMonitoringReport, bool) {
	if o == nil || IsNil(o.QosMonReports) {
		return nil, false
	}
	return o.QosMonReports, true
}

// HasQosMonReports returns a boolean if a field has been set.
func (o *UserPlaneEventReport) HasQosMonReports() bool {
	if o != nil && !IsNil(o.QosMonReports) {
		return true
	}

	return false
}

// SetQosMonReports gets a reference to the given []QosMonitoringReport and assigns it to the QosMonReports field.
func (o *UserPlaneEventReport) SetQosMonReports(v []QosMonitoringReport) {
	o.QosMonReports = v
}

// GetRatType returns the RatType field value if set, zero value otherwise.
func (o *UserPlaneEventReport) GetRatType() RatType {
	if o == nil || IsNil(o.RatType) {
		var ret RatType
		return ret
	}
	return *o.RatType
}

// GetRatTypeOk returns a tuple with the RatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPlaneEventReport) GetRatTypeOk() (*RatType, bool) {
	if o == nil || IsNil(o.RatType) {
		return nil, false
	}
	return o.RatType, true
}

// HasRatType returns a boolean if a field has been set.
func (o *UserPlaneEventReport) HasRatType() bool {
	if o != nil && !IsNil(o.RatType) {
		return true
	}

	return false
}

// SetRatType gets a reference to the given RatType and assigns it to the RatType field.
func (o *UserPlaneEventReport) SetRatType(v RatType) {
	o.RatType = &v
}

func (o UserPlaneEventReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPlaneEventReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	if !IsNil(o.AccumulatedUsage) {
		toSerialize["accumulatedUsage"] = o.AccumulatedUsage
	}
	if !IsNil(o.FlowIds) {
		toSerialize["flowIds"] = o.FlowIds
	}
	if !IsNil(o.AppliedQosRef) {
		toSerialize["appliedQosRef"] = o.AppliedQosRef
	}
	if !IsNil(o.PlmnId) {
		toSerialize["plmnId"] = o.PlmnId
	}
	if !IsNil(o.QosMonReports) {
		toSerialize["qosMonReports"] = o.QosMonReports
	}
	if !IsNil(o.RatType) {
		toSerialize["ratType"] = o.RatType
	}
	return toSerialize, nil
}

type NullableUserPlaneEventReport struct {
	value *UserPlaneEventReport
	isSet bool
}

func (v NullableUserPlaneEventReport) Get() *UserPlaneEventReport {
	return v.value
}

func (v *NullableUserPlaneEventReport) Set(val *UserPlaneEventReport) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPlaneEventReport) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPlaneEventReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPlaneEventReport(val *UserPlaneEventReport) *NullableUserPlaneEventReport {
	return &NullableUserPlaneEventReport{value: val, isSet: true}
}

func (v NullableUserPlaneEventReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPlaneEventReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
