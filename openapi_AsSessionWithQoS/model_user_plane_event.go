/*
3gpp-as-session-with-qos

API for setting us an AS session with required QoS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AsSessionWithQoS

import (
	"encoding/json"
	"fmt"
)

// UserPlaneEvent Possible values are - SESSION_TERMINATION: Indicates that Rx session is terminated. - LOSS_OF_BEARER : Indicates a loss of a bearer. - RECOVERY_OF_BEARER: Indicates a recovery of a bearer. - RELEASE_OF_BEARER: Indicates a release of a bearer. - USAGE_REPORT: Indicates the usage report event. - FAILED_RESOURCES_ALLOCATION: Indicates the resource allocation is failed. - QOS_GUARANTEED: The QoS targets of one or more SDFs are guaranteed again. - QOS_NOT_GUARANTEED: The QoS targets of one or more SDFs are not being guaranteed. - QOS_MONITORING: Indicates a QoS monitoring event. - SUCCESSFUL_RESOURCES_ALLOCATION: Indicates the resource allocation is successful. - ACCESS_TYPE_CHANGE: Indicates an Access type change. - PLMN_CHG: Indicates a PLMN change. 
type UserPlaneEvent struct {
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *UserPlaneEvent) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(UserPlaneEvent)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *UserPlaneEvent) MarshalJSON() ([]byte, error) {
	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUserPlaneEvent struct {
	value *UserPlaneEvent
	isSet bool
}

func (v NullableUserPlaneEvent) Get() *UserPlaneEvent {
	return v.value
}

func (v *NullableUserPlaneEvent) Set(val *UserPlaneEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPlaneEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPlaneEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPlaneEvent(val *UserPlaneEvent) *NullableUserPlaneEvent {
	return &NullableUserPlaneEvent{value: val, isSet: true}
}

func (v NullableUserPlaneEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPlaneEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


