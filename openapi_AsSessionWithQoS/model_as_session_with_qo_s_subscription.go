/*
3gpp-as-session-with-qos

API for setting us an AS session with required QoS.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AsSessionWithQoS

import (
	"encoding/json"
)

// checks if the AsSessionWithQoSSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsSessionWithQoSSubscription{}

// AsSessionWithQoSSubscription Represents an individual AS session with required QoS subscription resource.
type AsSessionWithQoSSubscription struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self *string `json:"self,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn *string `json:"dnn,omitempty"`
	Snssai *Snssai `json:"snssai,omitempty"`
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	NotificationDestination string `json:"notificationDestination"`
	// Identifies the external Application Identifier.
	ExterAppId *string `json:"exterAppId,omitempty"`
	// Describe the data flow which requires QoS.
	FlowInfo []FlowInfo `json:"flowInfo,omitempty"`
	// Identifies Ethernet packet flows.
	EthFlowInfo []EthFlowDescription `json:"ethFlowInfo,omitempty"`
	// Identifies the Ethernet flows which require QoS. Each Ethernet flow consists of a flow idenifer and the corresponding UL and/or DL flows. 
	EnEthFlowInfo []EthFlowInfo `json:"enEthFlowInfo,omitempty"`
	// Identifies a pre-defined QoS information
	QosReference *string `json:"qosReference,omitempty"`
	// Identifies an ordered list of pre-defined QoS information. The lower the index of the array for a given entry, the higher the priority.
	AltQoSReferences []string `json:"altQoSReferences,omitempty"`
	// Identifies an ordered list of alternative service requirements that include individual QoS parameter sets. The lower the index of the array for a given entry, the higher the priority.
	AltQosReqs []AlternativeServiceRequirementsData `json:"altQosReqs,omitempty"`
	// Indicates whether the QoS flow parameters signalling to the UE when the SMF is notified by the NG-RAN of changes in the fulfilled QoS situation is disabled (true) or not (false). Default value is false. The fulfilled situation is either the QoS profile or an Alternative QoS Profile. 
	DisUeNotif *bool `json:"disUeNotif,omitempty"`
	// string identifying a Ipv4 address formatted in the \"dotted decimal\" notation as defined in IETF RFC 1166.
	UeIpv4Addr *string `json:"ueIpv4Addr,omitempty"`
	IpDomain *string `json:"ipDomain,omitempty"`
	// string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used.
	UeIpv6Addr *string `json:"ueIpv6Addr,omitempty"`
	// String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042. 
	MacAddr *string `json:"macAddr,omitempty"`
	UsageThreshold *UsageThreshold `json:"usageThreshold,omitempty"`
	SponsorInfo *SponsorInformation `json:"sponsorInfo,omitempty"`
	QosMonInfo *QosMonitoringInformation `json:"qosMonInfo,omitempty"`
	// Indicates whether the direct event notification is requested (true) or not (false). Default value is false. 
	DirectNotifInd *bool `json:"directNotifInd,omitempty"`
	TscQosReq *TscQosRequirement `json:"tscQosReq,omitempty"`
	// Set to true by the SCS/AS to request the SCEF to send a test notification as defined in clause 5.2.5.3. Set to false or omitted otherwise.
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	// Represents the list of user plane event(s) to which the SCS/AS requests to subscribe to.
	Events []UserPlaneEvent `json:"events,omitempty"`
}

// NewAsSessionWithQoSSubscription instantiates a new AsSessionWithQoSSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsSessionWithQoSSubscription(notificationDestination string) *AsSessionWithQoSSubscription {
	this := AsSessionWithQoSSubscription{}
	this.NotificationDestination = notificationDestination
	return &this
}

// NewAsSessionWithQoSSubscriptionWithDefaults instantiates a new AsSessionWithQoSSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsSessionWithQoSSubscriptionWithDefaults() *AsSessionWithQoSSubscription {
	this := AsSessionWithQoSSubscription{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetSelf() string {
	if o == nil || IsNil(o.Self) {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetSelfOk() (*string, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *AsSessionWithQoSSubscription) SetSelf(v string) {
	o.Self = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *AsSessionWithQoSSubscription) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetDnn returns the Dnn field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetDnn() string {
	if o == nil || IsNil(o.Dnn) {
		var ret string
		return ret
	}
	return *o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetDnnOk() (*string, bool) {
	if o == nil || IsNil(o.Dnn) {
		return nil, false
	}
	return o.Dnn, true
}

// HasDnn returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasDnn() bool {
	if o != nil && !IsNil(o.Dnn) {
		return true
	}

	return false
}

// SetDnn gets a reference to the given string and assigns it to the Dnn field.
func (o *AsSessionWithQoSSubscription) SetDnn(v string) {
	o.Dnn = &v
}

// GetSnssai returns the Snssai field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetSnssai() Snssai {
	if o == nil || IsNil(o.Snssai) {
		var ret Snssai
		return ret
	}
	return *o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetSnssaiOk() (*Snssai, bool) {
	if o == nil || IsNil(o.Snssai) {
		return nil, false
	}
	return o.Snssai, true
}

// HasSnssai returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasSnssai() bool {
	if o != nil && !IsNil(o.Snssai) {
		return true
	}

	return false
}

// SetSnssai gets a reference to the given Snssai and assigns it to the Snssai field.
func (o *AsSessionWithQoSSubscription) SetSnssai(v Snssai) {
	o.Snssai = &v
}

// GetNotificationDestination returns the NotificationDestination field value
func (o *AsSessionWithQoSSubscription) GetNotificationDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetNotificationDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationDestination, true
}

// SetNotificationDestination sets field value
func (o *AsSessionWithQoSSubscription) SetNotificationDestination(v string) {
	o.NotificationDestination = v
}

// GetExterAppId returns the ExterAppId field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetExterAppId() string {
	if o == nil || IsNil(o.ExterAppId) {
		var ret string
		return ret
	}
	return *o.ExterAppId
}

// GetExterAppIdOk returns a tuple with the ExterAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetExterAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExterAppId) {
		return nil, false
	}
	return o.ExterAppId, true
}

// HasExterAppId returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasExterAppId() bool {
	if o != nil && !IsNil(o.ExterAppId) {
		return true
	}

	return false
}

// SetExterAppId gets a reference to the given string and assigns it to the ExterAppId field.
func (o *AsSessionWithQoSSubscription) SetExterAppId(v string) {
	o.ExterAppId = &v
}

// GetFlowInfo returns the FlowInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetFlowInfo() []FlowInfo {
	if o == nil || IsNil(o.FlowInfo) {
		var ret []FlowInfo
		return ret
	}
	return o.FlowInfo
}

// GetFlowInfoOk returns a tuple with the FlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetFlowInfoOk() ([]FlowInfo, bool) {
	if o == nil || IsNil(o.FlowInfo) {
		return nil, false
	}
	return o.FlowInfo, true
}

// HasFlowInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasFlowInfo() bool {
	if o != nil && !IsNil(o.FlowInfo) {
		return true
	}

	return false
}

// SetFlowInfo gets a reference to the given []FlowInfo and assigns it to the FlowInfo field.
func (o *AsSessionWithQoSSubscription) SetFlowInfo(v []FlowInfo) {
	o.FlowInfo = v
}

// GetEthFlowInfo returns the EthFlowInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetEthFlowInfo() []EthFlowDescription {
	if o == nil || IsNil(o.EthFlowInfo) {
		var ret []EthFlowDescription
		return ret
	}
	return o.EthFlowInfo
}

// GetEthFlowInfoOk returns a tuple with the EthFlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetEthFlowInfoOk() ([]EthFlowDescription, bool) {
	if o == nil || IsNil(o.EthFlowInfo) {
		return nil, false
	}
	return o.EthFlowInfo, true
}

// HasEthFlowInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasEthFlowInfo() bool {
	if o != nil && !IsNil(o.EthFlowInfo) {
		return true
	}

	return false
}

// SetEthFlowInfo gets a reference to the given []EthFlowDescription and assigns it to the EthFlowInfo field.
func (o *AsSessionWithQoSSubscription) SetEthFlowInfo(v []EthFlowDescription) {
	o.EthFlowInfo = v
}

// GetEnEthFlowInfo returns the EnEthFlowInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetEnEthFlowInfo() []EthFlowInfo {
	if o == nil || IsNil(o.EnEthFlowInfo) {
		var ret []EthFlowInfo
		return ret
	}
	return o.EnEthFlowInfo
}

// GetEnEthFlowInfoOk returns a tuple with the EnEthFlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetEnEthFlowInfoOk() ([]EthFlowInfo, bool) {
	if o == nil || IsNil(o.EnEthFlowInfo) {
		return nil, false
	}
	return o.EnEthFlowInfo, true
}

// HasEnEthFlowInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasEnEthFlowInfo() bool {
	if o != nil && !IsNil(o.EnEthFlowInfo) {
		return true
	}

	return false
}

// SetEnEthFlowInfo gets a reference to the given []EthFlowInfo and assigns it to the EnEthFlowInfo field.
func (o *AsSessionWithQoSSubscription) SetEnEthFlowInfo(v []EthFlowInfo) {
	o.EnEthFlowInfo = v
}

// GetQosReference returns the QosReference field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetQosReference() string {
	if o == nil || IsNil(o.QosReference) {
		var ret string
		return ret
	}
	return *o.QosReference
}

// GetQosReferenceOk returns a tuple with the QosReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetQosReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.QosReference) {
		return nil, false
	}
	return o.QosReference, true
}

// HasQosReference returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasQosReference() bool {
	if o != nil && !IsNil(o.QosReference) {
		return true
	}

	return false
}

// SetQosReference gets a reference to the given string and assigns it to the QosReference field.
func (o *AsSessionWithQoSSubscription) SetQosReference(v string) {
	o.QosReference = &v
}

// GetAltQoSReferences returns the AltQoSReferences field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetAltQoSReferences() []string {
	if o == nil || IsNil(o.AltQoSReferences) {
		var ret []string
		return ret
	}
	return o.AltQoSReferences
}

// GetAltQoSReferencesOk returns a tuple with the AltQoSReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetAltQoSReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.AltQoSReferences) {
		return nil, false
	}
	return o.AltQoSReferences, true
}

// HasAltQoSReferences returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasAltQoSReferences() bool {
	if o != nil && !IsNil(o.AltQoSReferences) {
		return true
	}

	return false
}

// SetAltQoSReferences gets a reference to the given []string and assigns it to the AltQoSReferences field.
func (o *AsSessionWithQoSSubscription) SetAltQoSReferences(v []string) {
	o.AltQoSReferences = v
}

// GetAltQosReqs returns the AltQosReqs field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetAltQosReqs() []AlternativeServiceRequirementsData {
	if o == nil || IsNil(o.AltQosReqs) {
		var ret []AlternativeServiceRequirementsData
		return ret
	}
	return o.AltQosReqs
}

// GetAltQosReqsOk returns a tuple with the AltQosReqs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetAltQosReqsOk() ([]AlternativeServiceRequirementsData, bool) {
	if o == nil || IsNil(o.AltQosReqs) {
		return nil, false
	}
	return o.AltQosReqs, true
}

// HasAltQosReqs returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasAltQosReqs() bool {
	if o != nil && !IsNil(o.AltQosReqs) {
		return true
	}

	return false
}

// SetAltQosReqs gets a reference to the given []AlternativeServiceRequirementsData and assigns it to the AltQosReqs field.
func (o *AsSessionWithQoSSubscription) SetAltQosReqs(v []AlternativeServiceRequirementsData) {
	o.AltQosReqs = v
}

// GetDisUeNotif returns the DisUeNotif field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetDisUeNotif() bool {
	if o == nil || IsNil(o.DisUeNotif) {
		var ret bool
		return ret
	}
	return *o.DisUeNotif
}

// GetDisUeNotifOk returns a tuple with the DisUeNotif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetDisUeNotifOk() (*bool, bool) {
	if o == nil || IsNil(o.DisUeNotif) {
		return nil, false
	}
	return o.DisUeNotif, true
}

// HasDisUeNotif returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasDisUeNotif() bool {
	if o != nil && !IsNil(o.DisUeNotif) {
		return true
	}

	return false
}

// SetDisUeNotif gets a reference to the given bool and assigns it to the DisUeNotif field.
func (o *AsSessionWithQoSSubscription) SetDisUeNotif(v bool) {
	o.DisUeNotif = &v
}

// GetUeIpv4Addr returns the UeIpv4Addr field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetUeIpv4Addr() string {
	if o == nil || IsNil(o.UeIpv4Addr) {
		var ret string
		return ret
	}
	return *o.UeIpv4Addr
}

// GetUeIpv4AddrOk returns a tuple with the UeIpv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetUeIpv4AddrOk() (*string, bool) {
	if o == nil || IsNil(o.UeIpv4Addr) {
		return nil, false
	}
	return o.UeIpv4Addr, true
}

// HasUeIpv4Addr returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasUeIpv4Addr() bool {
	if o != nil && !IsNil(o.UeIpv4Addr) {
		return true
	}

	return false
}

// SetUeIpv4Addr gets a reference to the given string and assigns it to the UeIpv4Addr field.
func (o *AsSessionWithQoSSubscription) SetUeIpv4Addr(v string) {
	o.UeIpv4Addr = &v
}

// GetIpDomain returns the IpDomain field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetIpDomain() string {
	if o == nil || IsNil(o.IpDomain) {
		var ret string
		return ret
	}
	return *o.IpDomain
}

// GetIpDomainOk returns a tuple with the IpDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetIpDomainOk() (*string, bool) {
	if o == nil || IsNil(o.IpDomain) {
		return nil, false
	}
	return o.IpDomain, true
}

// HasIpDomain returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasIpDomain() bool {
	if o != nil && !IsNil(o.IpDomain) {
		return true
	}

	return false
}

// SetIpDomain gets a reference to the given string and assigns it to the IpDomain field.
func (o *AsSessionWithQoSSubscription) SetIpDomain(v string) {
	o.IpDomain = &v
}

// GetUeIpv6Addr returns the UeIpv6Addr field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetUeIpv6Addr() string {
	if o == nil || IsNil(o.UeIpv6Addr) {
		var ret string
		return ret
	}
	return *o.UeIpv6Addr
}

// GetUeIpv6AddrOk returns a tuple with the UeIpv6Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetUeIpv6AddrOk() (*string, bool) {
	if o == nil || IsNil(o.UeIpv6Addr) {
		return nil, false
	}
	return o.UeIpv6Addr, true
}

// HasUeIpv6Addr returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasUeIpv6Addr() bool {
	if o != nil && !IsNil(o.UeIpv6Addr) {
		return true
	}

	return false
}

// SetUeIpv6Addr gets a reference to the given string and assigns it to the UeIpv6Addr field.
func (o *AsSessionWithQoSSubscription) SetUeIpv6Addr(v string) {
	o.UeIpv6Addr = &v
}

// GetMacAddr returns the MacAddr field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetMacAddr() string {
	if o == nil || IsNil(o.MacAddr) {
		var ret string
		return ret
	}
	return *o.MacAddr
}

// GetMacAddrOk returns a tuple with the MacAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetMacAddrOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddr) {
		return nil, false
	}
	return o.MacAddr, true
}

// HasMacAddr returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasMacAddr() bool {
	if o != nil && !IsNil(o.MacAddr) {
		return true
	}

	return false
}

// SetMacAddr gets a reference to the given string and assigns it to the MacAddr field.
func (o *AsSessionWithQoSSubscription) SetMacAddr(v string) {
	o.MacAddr = &v
}

// GetUsageThreshold returns the UsageThreshold field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetUsageThreshold() UsageThreshold {
	if o == nil || IsNil(o.UsageThreshold) {
		var ret UsageThreshold
		return ret
	}
	return *o.UsageThreshold
}

// GetUsageThresholdOk returns a tuple with the UsageThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetUsageThresholdOk() (*UsageThreshold, bool) {
	if o == nil || IsNil(o.UsageThreshold) {
		return nil, false
	}
	return o.UsageThreshold, true
}

// HasUsageThreshold returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasUsageThreshold() bool {
	if o != nil && !IsNil(o.UsageThreshold) {
		return true
	}

	return false
}

// SetUsageThreshold gets a reference to the given UsageThreshold and assigns it to the UsageThreshold field.
func (o *AsSessionWithQoSSubscription) SetUsageThreshold(v UsageThreshold) {
	o.UsageThreshold = &v
}

// GetSponsorInfo returns the SponsorInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetSponsorInfo() SponsorInformation {
	if o == nil || IsNil(o.SponsorInfo) {
		var ret SponsorInformation
		return ret
	}
	return *o.SponsorInfo
}

// GetSponsorInfoOk returns a tuple with the SponsorInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetSponsorInfoOk() (*SponsorInformation, bool) {
	if o == nil || IsNil(o.SponsorInfo) {
		return nil, false
	}
	return o.SponsorInfo, true
}

// HasSponsorInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasSponsorInfo() bool {
	if o != nil && !IsNil(o.SponsorInfo) {
		return true
	}

	return false
}

// SetSponsorInfo gets a reference to the given SponsorInformation and assigns it to the SponsorInfo field.
func (o *AsSessionWithQoSSubscription) SetSponsorInfo(v SponsorInformation) {
	o.SponsorInfo = &v
}

// GetQosMonInfo returns the QosMonInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetQosMonInfo() QosMonitoringInformation {
	if o == nil || IsNil(o.QosMonInfo) {
		var ret QosMonitoringInformation
		return ret
	}
	return *o.QosMonInfo
}

// GetQosMonInfoOk returns a tuple with the QosMonInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetQosMonInfoOk() (*QosMonitoringInformation, bool) {
	if o == nil || IsNil(o.QosMonInfo) {
		return nil, false
	}
	return o.QosMonInfo, true
}

// HasQosMonInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasQosMonInfo() bool {
	if o != nil && !IsNil(o.QosMonInfo) {
		return true
	}

	return false
}

// SetQosMonInfo gets a reference to the given QosMonitoringInformation and assigns it to the QosMonInfo field.
func (o *AsSessionWithQoSSubscription) SetQosMonInfo(v QosMonitoringInformation) {
	o.QosMonInfo = &v
}

// GetDirectNotifInd returns the DirectNotifInd field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetDirectNotifInd() bool {
	if o == nil || IsNil(o.DirectNotifInd) {
		var ret bool
		return ret
	}
	return *o.DirectNotifInd
}

// GetDirectNotifIndOk returns a tuple with the DirectNotifInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetDirectNotifIndOk() (*bool, bool) {
	if o == nil || IsNil(o.DirectNotifInd) {
		return nil, false
	}
	return o.DirectNotifInd, true
}

// HasDirectNotifInd returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasDirectNotifInd() bool {
	if o != nil && !IsNil(o.DirectNotifInd) {
		return true
	}

	return false
}

// SetDirectNotifInd gets a reference to the given bool and assigns it to the DirectNotifInd field.
func (o *AsSessionWithQoSSubscription) SetDirectNotifInd(v bool) {
	o.DirectNotifInd = &v
}

// GetTscQosReq returns the TscQosReq field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetTscQosReq() TscQosRequirement {
	if o == nil || IsNil(o.TscQosReq) {
		var ret TscQosRequirement
		return ret
	}
	return *o.TscQosReq
}

// GetTscQosReqOk returns a tuple with the TscQosReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetTscQosReqOk() (*TscQosRequirement, bool) {
	if o == nil || IsNil(o.TscQosReq) {
		return nil, false
	}
	return o.TscQosReq, true
}

// HasTscQosReq returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasTscQosReq() bool {
	if o != nil && !IsNil(o.TscQosReq) {
		return true
	}

	return false
}

// SetTscQosReq gets a reference to the given TscQosRequirement and assigns it to the TscQosReq field.
func (o *AsSessionWithQoSSubscription) SetTscQosReq(v TscQosRequirement) {
	o.TscQosReq = &v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetRequestTestNotification() bool {
	if o == nil || IsNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasRequestTestNotification() bool {
	if o != nil && !IsNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *AsSessionWithQoSSubscription) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasWebsockNotifConfig() bool {
	if o != nil && !IsNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *AsSessionWithQoSSubscription) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetEvents() []UserPlaneEvent {
	if o == nil || IsNil(o.Events) {
		var ret []UserPlaneEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetEventsOk() ([]UserPlaneEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []UserPlaneEvent and assigns it to the Events field.
func (o *AsSessionWithQoSSubscription) SetEvents(v []UserPlaneEvent) {
	o.Events = v
}

func (o AsSessionWithQoSSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsSessionWithQoSSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !IsNil(o.Dnn) {
		toSerialize["dnn"] = o.Dnn
	}
	if !IsNil(o.Snssai) {
		toSerialize["snssai"] = o.Snssai
	}
	toSerialize["notificationDestination"] = o.NotificationDestination
	if !IsNil(o.ExterAppId) {
		toSerialize["exterAppId"] = o.ExterAppId
	}
	if !IsNil(o.FlowInfo) {
		toSerialize["flowInfo"] = o.FlowInfo
	}
	if !IsNil(o.EthFlowInfo) {
		toSerialize["ethFlowInfo"] = o.EthFlowInfo
	}
	if !IsNil(o.EnEthFlowInfo) {
		toSerialize["enEthFlowInfo"] = o.EnEthFlowInfo
	}
	if !IsNil(o.QosReference) {
		toSerialize["qosReference"] = o.QosReference
	}
	if !IsNil(o.AltQoSReferences) {
		toSerialize["altQoSReferences"] = o.AltQoSReferences
	}
	if !IsNil(o.AltQosReqs) {
		toSerialize["altQosReqs"] = o.AltQosReqs
	}
	if !IsNil(o.DisUeNotif) {
		toSerialize["disUeNotif"] = o.DisUeNotif
	}
	if !IsNil(o.UeIpv4Addr) {
		toSerialize["ueIpv4Addr"] = o.UeIpv4Addr
	}
	if !IsNil(o.IpDomain) {
		toSerialize["ipDomain"] = o.IpDomain
	}
	if !IsNil(o.UeIpv6Addr) {
		toSerialize["ueIpv6Addr"] = o.UeIpv6Addr
	}
	if !IsNil(o.MacAddr) {
		toSerialize["macAddr"] = o.MacAddr
	}
	if !IsNil(o.UsageThreshold) {
		toSerialize["usageThreshold"] = o.UsageThreshold
	}
	if !IsNil(o.SponsorInfo) {
		toSerialize["sponsorInfo"] = o.SponsorInfo
	}
	if !IsNil(o.QosMonInfo) {
		toSerialize["qosMonInfo"] = o.QosMonInfo
	}
	if !IsNil(o.DirectNotifInd) {
		toSerialize["directNotifInd"] = o.DirectNotifInd
	}
	if !IsNil(o.TscQosReq) {
		toSerialize["tscQosReq"] = o.TscQosReq
	}
	if !IsNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !IsNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	return toSerialize, nil
}

type NullableAsSessionWithQoSSubscription struct {
	value *AsSessionWithQoSSubscription
	isSet bool
}

func (v NullableAsSessionWithQoSSubscription) Get() *AsSessionWithQoSSubscription {
	return v.value
}

func (v *NullableAsSessionWithQoSSubscription) Set(val *AsSessionWithQoSSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableAsSessionWithQoSSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableAsSessionWithQoSSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsSessionWithQoSSubscription(val *AsSessionWithQoSSubscription) *NullableAsSessionWithQoSSubscription {
	return &NullableAsSessionWithQoSSubscription{value: val, isSet: true}
}

func (v NullableAsSessionWithQoSSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsSessionWithQoSSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


