/*
3gpp-traffic-influence

API for AF traffic influence   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_TrafficInfluence

import (
	"encoding/json"
)

// checks if the TrafficInfluSubPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrafficInfluSubPatch{}

// TrafficInfluSubPatch Represents parameters to request the modification of a traffic influence subscription resource. 
type TrafficInfluSubPatch struct {
	// Identifies whether an application can be relocated once a location of the application has been selected. 
	AppReloInd NullableBool `json:"appReloInd,omitempty"`
	// Identifies IP packet filters.
	TrafficFilters []FlowInfo `json:"trafficFilters,omitempty"`
	// Identifies Ethernet packet filters.
	EthTrafficFilters []EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	// Identifies the N6 traffic routing requirement.
	TrafficRoutes []RouteToLocation `json:"trafficRoutes,omitempty"`
	TfcCorrInd NullableBool `json:"tfcCorrInd,omitempty"`
	TempValidities []TemporalValidity `json:"tempValidities,omitempty"`
	// Identifies a geographic zone that the AF request applies only to the traffic of UE(s) located in this specific zone. 
	// Deprecated
	ValidGeoZoneIds []string `json:"validGeoZoneIds,omitempty"`
	// Identifies geographical areas within which the AF request applies.
	GeoAreas []GeographicalArea `json:"geoAreas,omitempty"`
	AfAckInd NullableBool `json:"afAckInd,omitempty"`
	AddrPreserInd NullableBool `json:"addrPreserInd,omitempty"`
	// Indicates whether simultaneous connectivity should be temporarily maintained for the source and target PSA. 
	SimConnInd *bool `json:"simConnInd,omitempty"`
	// indicating a time in seconds.
	SimConnTerm *int32 `json:"simConnTerm,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible with the OpenAPI 'nullable: true' property. 
	MaxAllowedUpLat NullableInt32 `json:"maxAllowedUpLat,omitempty"`
	// Contains EAS IP replacement information.
	EasIpReplaceInfos []EasIpReplacementInfo `json:"easIpReplaceInfos,omitempty"`
	// Indicates the EAS rediscovery is required for the application if it is included and set to \"true\".
	EasRedisInd *bool `json:"easRedisInd,omitempty"`
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	NotificationDestination *string `json:"notificationDestination,omitempty"`
	EventReq *ReportingInformation `json:"eventReq,omitempty"`
}

// NewTrafficInfluSubPatch instantiates a new TrafficInfluSubPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrafficInfluSubPatch() *TrafficInfluSubPatch {
	this := TrafficInfluSubPatch{}
	return &this
}

// NewTrafficInfluSubPatchWithDefaults instantiates a new TrafficInfluSubPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficInfluSubPatchWithDefaults() *TrafficInfluSubPatch {
	this := TrafficInfluSubPatch{}
	return &this
}

// GetAppReloInd returns the AppReloInd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrafficInfluSubPatch) GetAppReloInd() bool {
	if o == nil || IsNil(o.AppReloInd.Get()) {
		var ret bool
		return ret
	}
	return *o.AppReloInd.Get()
}

// GetAppReloIndOk returns a tuple with the AppReloInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrafficInfluSubPatch) GetAppReloIndOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppReloInd.Get(), o.AppReloInd.IsSet()
}

// HasAppReloInd returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasAppReloInd() bool {
	if o != nil && o.AppReloInd.IsSet() {
		return true
	}

	return false
}

// SetAppReloInd gets a reference to the given NullableBool and assigns it to the AppReloInd field.
func (o *TrafficInfluSubPatch) SetAppReloInd(v bool) {
	o.AppReloInd.Set(&v)
}
// SetAppReloIndNil sets the value for AppReloInd to be an explicit nil
func (o *TrafficInfluSubPatch) SetAppReloIndNil() {
	o.AppReloInd.Set(nil)
}

// UnsetAppReloInd ensures that no value is present for AppReloInd, not even an explicit nil
func (o *TrafficInfluSubPatch) UnsetAppReloInd() {
	o.AppReloInd.Unset()
}

// GetTrafficFilters returns the TrafficFilters field value if set, zero value otherwise.
func (o *TrafficInfluSubPatch) GetTrafficFilters() []FlowInfo {
	if o == nil || IsNil(o.TrafficFilters) {
		var ret []FlowInfo
		return ret
	}
	return o.TrafficFilters
}

// GetTrafficFiltersOk returns a tuple with the TrafficFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficInfluSubPatch) GetTrafficFiltersOk() ([]FlowInfo, bool) {
	if o == nil || IsNil(o.TrafficFilters) {
		return nil, false
	}
	return o.TrafficFilters, true
}

// HasTrafficFilters returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasTrafficFilters() bool {
	if o != nil && !IsNil(o.TrafficFilters) {
		return true
	}

	return false
}

// SetTrafficFilters gets a reference to the given []FlowInfo and assigns it to the TrafficFilters field.
func (o *TrafficInfluSubPatch) SetTrafficFilters(v []FlowInfo) {
	o.TrafficFilters = v
}

// GetEthTrafficFilters returns the EthTrafficFilters field value if set, zero value otherwise.
func (o *TrafficInfluSubPatch) GetEthTrafficFilters() []EthFlowDescription {
	if o == nil || IsNil(o.EthTrafficFilters) {
		var ret []EthFlowDescription
		return ret
	}
	return o.EthTrafficFilters
}

// GetEthTrafficFiltersOk returns a tuple with the EthTrafficFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficInfluSubPatch) GetEthTrafficFiltersOk() ([]EthFlowDescription, bool) {
	if o == nil || IsNil(o.EthTrafficFilters) {
		return nil, false
	}
	return o.EthTrafficFilters, true
}

// HasEthTrafficFilters returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasEthTrafficFilters() bool {
	if o != nil && !IsNil(o.EthTrafficFilters) {
		return true
	}

	return false
}

// SetEthTrafficFilters gets a reference to the given []EthFlowDescription and assigns it to the EthTrafficFilters field.
func (o *TrafficInfluSubPatch) SetEthTrafficFilters(v []EthFlowDescription) {
	o.EthTrafficFilters = v
}

// GetTrafficRoutes returns the TrafficRoutes field value if set, zero value otherwise.
func (o *TrafficInfluSubPatch) GetTrafficRoutes() []RouteToLocation {
	if o == nil || IsNil(o.TrafficRoutes) {
		var ret []RouteToLocation
		return ret
	}
	return o.TrafficRoutes
}

// GetTrafficRoutesOk returns a tuple with the TrafficRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficInfluSubPatch) GetTrafficRoutesOk() ([]RouteToLocation, bool) {
	if o == nil || IsNil(o.TrafficRoutes) {
		return nil, false
	}
	return o.TrafficRoutes, true
}

// HasTrafficRoutes returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasTrafficRoutes() bool {
	if o != nil && !IsNil(o.TrafficRoutes) {
		return true
	}

	return false
}

// SetTrafficRoutes gets a reference to the given []RouteToLocation and assigns it to the TrafficRoutes field.
func (o *TrafficInfluSubPatch) SetTrafficRoutes(v []RouteToLocation) {
	o.TrafficRoutes = v
}

// GetTfcCorrInd returns the TfcCorrInd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrafficInfluSubPatch) GetTfcCorrInd() bool {
	if o == nil || IsNil(o.TfcCorrInd.Get()) {
		var ret bool
		return ret
	}
	return *o.TfcCorrInd.Get()
}

// GetTfcCorrIndOk returns a tuple with the TfcCorrInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrafficInfluSubPatch) GetTfcCorrIndOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TfcCorrInd.Get(), o.TfcCorrInd.IsSet()
}

// HasTfcCorrInd returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasTfcCorrInd() bool {
	if o != nil && o.TfcCorrInd.IsSet() {
		return true
	}

	return false
}

// SetTfcCorrInd gets a reference to the given NullableBool and assigns it to the TfcCorrInd field.
func (o *TrafficInfluSubPatch) SetTfcCorrInd(v bool) {
	o.TfcCorrInd.Set(&v)
}
// SetTfcCorrIndNil sets the value for TfcCorrInd to be an explicit nil
func (o *TrafficInfluSubPatch) SetTfcCorrIndNil() {
	o.TfcCorrInd.Set(nil)
}

// UnsetTfcCorrInd ensures that no value is present for TfcCorrInd, not even an explicit nil
func (o *TrafficInfluSubPatch) UnsetTfcCorrInd() {
	o.TfcCorrInd.Unset()
}

// GetTempValidities returns the TempValidities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrafficInfluSubPatch) GetTempValidities() []TemporalValidity {
	if o == nil {
		var ret []TemporalValidity
		return ret
	}
	return o.TempValidities
}

// GetTempValiditiesOk returns a tuple with the TempValidities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrafficInfluSubPatch) GetTempValiditiesOk() ([]TemporalValidity, bool) {
	if o == nil || IsNil(o.TempValidities) {
		return nil, false
	}
	return o.TempValidities, true
}

// HasTempValidities returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasTempValidities() bool {
	if o != nil && IsNil(o.TempValidities) {
		return true
	}

	return false
}

// SetTempValidities gets a reference to the given []TemporalValidity and assigns it to the TempValidities field.
func (o *TrafficInfluSubPatch) SetTempValidities(v []TemporalValidity) {
	o.TempValidities = v
}

// GetValidGeoZoneIds returns the ValidGeoZoneIds field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *TrafficInfluSubPatch) GetValidGeoZoneIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ValidGeoZoneIds
}

// GetValidGeoZoneIdsOk returns a tuple with the ValidGeoZoneIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *TrafficInfluSubPatch) GetValidGeoZoneIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ValidGeoZoneIds) {
		return nil, false
	}
	return o.ValidGeoZoneIds, true
}

// HasValidGeoZoneIds returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasValidGeoZoneIds() bool {
	if o != nil && IsNil(o.ValidGeoZoneIds) {
		return true
	}

	return false
}

// SetValidGeoZoneIds gets a reference to the given []string and assigns it to the ValidGeoZoneIds field.
// Deprecated
func (o *TrafficInfluSubPatch) SetValidGeoZoneIds(v []string) {
	o.ValidGeoZoneIds = v
}

// GetGeoAreas returns the GeoAreas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrafficInfluSubPatch) GetGeoAreas() []GeographicalArea {
	if o == nil {
		var ret []GeographicalArea
		return ret
	}
	return o.GeoAreas
}

// GetGeoAreasOk returns a tuple with the GeoAreas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrafficInfluSubPatch) GetGeoAreasOk() ([]GeographicalArea, bool) {
	if o == nil || IsNil(o.GeoAreas) {
		return nil, false
	}
	return o.GeoAreas, true
}

// HasGeoAreas returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasGeoAreas() bool {
	if o != nil && IsNil(o.GeoAreas) {
		return true
	}

	return false
}

// SetGeoAreas gets a reference to the given []GeographicalArea and assigns it to the GeoAreas field.
func (o *TrafficInfluSubPatch) SetGeoAreas(v []GeographicalArea) {
	o.GeoAreas = v
}

// GetAfAckInd returns the AfAckInd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrafficInfluSubPatch) GetAfAckInd() bool {
	if o == nil || IsNil(o.AfAckInd.Get()) {
		var ret bool
		return ret
	}
	return *o.AfAckInd.Get()
}

// GetAfAckIndOk returns a tuple with the AfAckInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrafficInfluSubPatch) GetAfAckIndOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AfAckInd.Get(), o.AfAckInd.IsSet()
}

// HasAfAckInd returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasAfAckInd() bool {
	if o != nil && o.AfAckInd.IsSet() {
		return true
	}

	return false
}

// SetAfAckInd gets a reference to the given NullableBool and assigns it to the AfAckInd field.
func (o *TrafficInfluSubPatch) SetAfAckInd(v bool) {
	o.AfAckInd.Set(&v)
}
// SetAfAckIndNil sets the value for AfAckInd to be an explicit nil
func (o *TrafficInfluSubPatch) SetAfAckIndNil() {
	o.AfAckInd.Set(nil)
}

// UnsetAfAckInd ensures that no value is present for AfAckInd, not even an explicit nil
func (o *TrafficInfluSubPatch) UnsetAfAckInd() {
	o.AfAckInd.Unset()
}

// GetAddrPreserInd returns the AddrPreserInd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrafficInfluSubPatch) GetAddrPreserInd() bool {
	if o == nil || IsNil(o.AddrPreserInd.Get()) {
		var ret bool
		return ret
	}
	return *o.AddrPreserInd.Get()
}

// GetAddrPreserIndOk returns a tuple with the AddrPreserInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrafficInfluSubPatch) GetAddrPreserIndOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddrPreserInd.Get(), o.AddrPreserInd.IsSet()
}

// HasAddrPreserInd returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasAddrPreserInd() bool {
	if o != nil && o.AddrPreserInd.IsSet() {
		return true
	}

	return false
}

// SetAddrPreserInd gets a reference to the given NullableBool and assigns it to the AddrPreserInd field.
func (o *TrafficInfluSubPatch) SetAddrPreserInd(v bool) {
	o.AddrPreserInd.Set(&v)
}
// SetAddrPreserIndNil sets the value for AddrPreserInd to be an explicit nil
func (o *TrafficInfluSubPatch) SetAddrPreserIndNil() {
	o.AddrPreserInd.Set(nil)
}

// UnsetAddrPreserInd ensures that no value is present for AddrPreserInd, not even an explicit nil
func (o *TrafficInfluSubPatch) UnsetAddrPreserInd() {
	o.AddrPreserInd.Unset()
}

// GetSimConnInd returns the SimConnInd field value if set, zero value otherwise.
func (o *TrafficInfluSubPatch) GetSimConnInd() bool {
	if o == nil || IsNil(o.SimConnInd) {
		var ret bool
		return ret
	}
	return *o.SimConnInd
}

// GetSimConnIndOk returns a tuple with the SimConnInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficInfluSubPatch) GetSimConnIndOk() (*bool, bool) {
	if o == nil || IsNil(o.SimConnInd) {
		return nil, false
	}
	return o.SimConnInd, true
}

// HasSimConnInd returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasSimConnInd() bool {
	if o != nil && !IsNil(o.SimConnInd) {
		return true
	}

	return false
}

// SetSimConnInd gets a reference to the given bool and assigns it to the SimConnInd field.
func (o *TrafficInfluSubPatch) SetSimConnInd(v bool) {
	o.SimConnInd = &v
}

// GetSimConnTerm returns the SimConnTerm field value if set, zero value otherwise.
func (o *TrafficInfluSubPatch) GetSimConnTerm() int32 {
	if o == nil || IsNil(o.SimConnTerm) {
		var ret int32
		return ret
	}
	return *o.SimConnTerm
}

// GetSimConnTermOk returns a tuple with the SimConnTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficInfluSubPatch) GetSimConnTermOk() (*int32, bool) {
	if o == nil || IsNil(o.SimConnTerm) {
		return nil, false
	}
	return o.SimConnTerm, true
}

// HasSimConnTerm returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasSimConnTerm() bool {
	if o != nil && !IsNil(o.SimConnTerm) {
		return true
	}

	return false
}

// SetSimConnTerm gets a reference to the given int32 and assigns it to the SimConnTerm field.
func (o *TrafficInfluSubPatch) SetSimConnTerm(v int32) {
	o.SimConnTerm = &v
}

// GetMaxAllowedUpLat returns the MaxAllowedUpLat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrafficInfluSubPatch) GetMaxAllowedUpLat() int32 {
	if o == nil || IsNil(o.MaxAllowedUpLat.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxAllowedUpLat.Get()
}

// GetMaxAllowedUpLatOk returns a tuple with the MaxAllowedUpLat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrafficInfluSubPatch) GetMaxAllowedUpLatOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxAllowedUpLat.Get(), o.MaxAllowedUpLat.IsSet()
}

// HasMaxAllowedUpLat returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasMaxAllowedUpLat() bool {
	if o != nil && o.MaxAllowedUpLat.IsSet() {
		return true
	}

	return false
}

// SetMaxAllowedUpLat gets a reference to the given NullableInt32 and assigns it to the MaxAllowedUpLat field.
func (o *TrafficInfluSubPatch) SetMaxAllowedUpLat(v int32) {
	o.MaxAllowedUpLat.Set(&v)
}
// SetMaxAllowedUpLatNil sets the value for MaxAllowedUpLat to be an explicit nil
func (o *TrafficInfluSubPatch) SetMaxAllowedUpLatNil() {
	o.MaxAllowedUpLat.Set(nil)
}

// UnsetMaxAllowedUpLat ensures that no value is present for MaxAllowedUpLat, not even an explicit nil
func (o *TrafficInfluSubPatch) UnsetMaxAllowedUpLat() {
	o.MaxAllowedUpLat.Unset()
}

// GetEasIpReplaceInfos returns the EasIpReplaceInfos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrafficInfluSubPatch) GetEasIpReplaceInfos() []EasIpReplacementInfo {
	if o == nil {
		var ret []EasIpReplacementInfo
		return ret
	}
	return o.EasIpReplaceInfos
}

// GetEasIpReplaceInfosOk returns a tuple with the EasIpReplaceInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrafficInfluSubPatch) GetEasIpReplaceInfosOk() ([]EasIpReplacementInfo, bool) {
	if o == nil || IsNil(o.EasIpReplaceInfos) {
		return nil, false
	}
	return o.EasIpReplaceInfos, true
}

// HasEasIpReplaceInfos returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasEasIpReplaceInfos() bool {
	if o != nil && IsNil(o.EasIpReplaceInfos) {
		return true
	}

	return false
}

// SetEasIpReplaceInfos gets a reference to the given []EasIpReplacementInfo and assigns it to the EasIpReplaceInfos field.
func (o *TrafficInfluSubPatch) SetEasIpReplaceInfos(v []EasIpReplacementInfo) {
	o.EasIpReplaceInfos = v
}

// GetEasRedisInd returns the EasRedisInd field value if set, zero value otherwise.
func (o *TrafficInfluSubPatch) GetEasRedisInd() bool {
	if o == nil || IsNil(o.EasRedisInd) {
		var ret bool
		return ret
	}
	return *o.EasRedisInd
}

// GetEasRedisIndOk returns a tuple with the EasRedisInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficInfluSubPatch) GetEasRedisIndOk() (*bool, bool) {
	if o == nil || IsNil(o.EasRedisInd) {
		return nil, false
	}
	return o.EasRedisInd, true
}

// HasEasRedisInd returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasEasRedisInd() bool {
	if o != nil && !IsNil(o.EasRedisInd) {
		return true
	}

	return false
}

// SetEasRedisInd gets a reference to the given bool and assigns it to the EasRedisInd field.
func (o *TrafficInfluSubPatch) SetEasRedisInd(v bool) {
	o.EasRedisInd = &v
}

// GetNotificationDestination returns the NotificationDestination field value if set, zero value otherwise.
func (o *TrafficInfluSubPatch) GetNotificationDestination() string {
	if o == nil || IsNil(o.NotificationDestination) {
		var ret string
		return ret
	}
	return *o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficInfluSubPatch) GetNotificationDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationDestination) {
		return nil, false
	}
	return o.NotificationDestination, true
}

// HasNotificationDestination returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasNotificationDestination() bool {
	if o != nil && !IsNil(o.NotificationDestination) {
		return true
	}

	return false
}

// SetNotificationDestination gets a reference to the given string and assigns it to the NotificationDestination field.
func (o *TrafficInfluSubPatch) SetNotificationDestination(v string) {
	o.NotificationDestination = &v
}

// GetEventReq returns the EventReq field value if set, zero value otherwise.
func (o *TrafficInfluSubPatch) GetEventReq() ReportingInformation {
	if o == nil || IsNil(o.EventReq) {
		var ret ReportingInformation
		return ret
	}
	return *o.EventReq
}

// GetEventReqOk returns a tuple with the EventReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficInfluSubPatch) GetEventReqOk() (*ReportingInformation, bool) {
	if o == nil || IsNil(o.EventReq) {
		return nil, false
	}
	return o.EventReq, true
}

// HasEventReq returns a boolean if a field has been set.
func (o *TrafficInfluSubPatch) HasEventReq() bool {
	if o != nil && !IsNil(o.EventReq) {
		return true
	}

	return false
}

// SetEventReq gets a reference to the given ReportingInformation and assigns it to the EventReq field.
func (o *TrafficInfluSubPatch) SetEventReq(v ReportingInformation) {
	o.EventReq = &v
}

func (o TrafficInfluSubPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrafficInfluSubPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppReloInd.IsSet() {
		toSerialize["appReloInd"] = o.AppReloInd.Get()
	}
	if !IsNil(o.TrafficFilters) {
		toSerialize["trafficFilters"] = o.TrafficFilters
	}
	if !IsNil(o.EthTrafficFilters) {
		toSerialize["ethTrafficFilters"] = o.EthTrafficFilters
	}
	if !IsNil(o.TrafficRoutes) {
		toSerialize["trafficRoutes"] = o.TrafficRoutes
	}
	if o.TfcCorrInd.IsSet() {
		toSerialize["tfcCorrInd"] = o.TfcCorrInd.Get()
	}
	if o.TempValidities != nil {
		toSerialize["tempValidities"] = o.TempValidities
	}
	if o.ValidGeoZoneIds != nil {
		toSerialize["validGeoZoneIds"] = o.ValidGeoZoneIds
	}
	if o.GeoAreas != nil {
		toSerialize["geoAreas"] = o.GeoAreas
	}
	if o.AfAckInd.IsSet() {
		toSerialize["afAckInd"] = o.AfAckInd.Get()
	}
	if o.AddrPreserInd.IsSet() {
		toSerialize["addrPreserInd"] = o.AddrPreserInd.Get()
	}
	if !IsNil(o.SimConnInd) {
		toSerialize["simConnInd"] = o.SimConnInd
	}
	if !IsNil(o.SimConnTerm) {
		toSerialize["simConnTerm"] = o.SimConnTerm
	}
	if o.MaxAllowedUpLat.IsSet() {
		toSerialize["maxAllowedUpLat"] = o.MaxAllowedUpLat.Get()
	}
	if o.EasIpReplaceInfos != nil {
		toSerialize["easIpReplaceInfos"] = o.EasIpReplaceInfos
	}
	if !IsNil(o.EasRedisInd) {
		toSerialize["easRedisInd"] = o.EasRedisInd
	}
	if !IsNil(o.NotificationDestination) {
		toSerialize["notificationDestination"] = o.NotificationDestination
	}
	if !IsNil(o.EventReq) {
		toSerialize["eventReq"] = o.EventReq
	}
	return toSerialize, nil
}

type NullableTrafficInfluSubPatch struct {
	value *TrafficInfluSubPatch
	isSet bool
}

func (v NullableTrafficInfluSubPatch) Get() *TrafficInfluSubPatch {
	return v.value
}

func (v *NullableTrafficInfluSubPatch) Set(val *TrafficInfluSubPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableTrafficInfluSubPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableTrafficInfluSubPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrafficInfluSubPatch(val *TrafficInfluSubPatch) *NullableTrafficInfluSubPatch {
	return &NullableTrafficInfluSubPatch{value: val, isSet: true}
}

func (v NullableTrafficInfluSubPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrafficInfluSubPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


