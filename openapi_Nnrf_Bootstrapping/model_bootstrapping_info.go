/*
NRF Bootstrapping

NRF Bootstrapping.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnrf_Bootstrapping

import (
	"encoding/json"
)

// checks if the BootstrappingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BootstrappingInfo{}

// BootstrappingInfo Information returned by NRF in the bootstrapping response message
type BootstrappingInfo struct {
	Status *Status `json:"status,omitempty"`
	// Map of link objects where the keys are the link relations defined in 3GPP TS 29.510 clause 6.4.6.3.3 
	Links map[string]LinksValueSchema `json:"_links"`
	// Map of features supported by the NRF, where the keys are the NRF services as defined in 3GPP TS 29.510 clause 6.1.6.3.11 
	NrfFeatures *map[string]string `json:"nrfFeatures,omitempty"`
	// Map indicating whether the NRF requires Oauth2-based authorization for accessing its services. The key of the map shall be the name of an NRF service, e.g. \"nnrf-nfm\" or \"nnrf-disc\" 
	Oauth2Required *map[string]bool `json:"oauth2Required,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	NrfSetId *string `json:"nrfSetId,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NrfInstanceId *string `json:"nrfInstanceId,omitempty"`
}

// NewBootstrappingInfo instantiates a new BootstrappingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBootstrappingInfo(links map[string]LinksValueSchema) *BootstrappingInfo {
	this := BootstrappingInfo{}
	this.Links = links
	return &this
}

// NewBootstrappingInfoWithDefaults instantiates a new BootstrappingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBootstrappingInfoWithDefaults() *BootstrappingInfo {
	this := BootstrappingInfo{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BootstrappingInfo) GetStatus() Status {
	if o == nil || isNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootstrappingInfo) GetStatusOk() (*Status, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BootstrappingInfo) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *BootstrappingInfo) SetStatus(v Status) {
	o.Status = &v
}

// GetLinks returns the Links field value
func (o *BootstrappingInfo) GetLinks() map[string]LinksValueSchema {
	if o == nil {
		var ret map[string]LinksValueSchema
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *BootstrappingInfo) GetLinksOk() (*map[string]LinksValueSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *BootstrappingInfo) SetLinks(v map[string]LinksValueSchema) {
	o.Links = v
}

// GetNrfFeatures returns the NrfFeatures field value if set, zero value otherwise.
func (o *BootstrappingInfo) GetNrfFeatures() map[string]string {
	if o == nil || isNil(o.NrfFeatures) {
		var ret map[string]string
		return ret
	}
	return *o.NrfFeatures
}

// GetNrfFeaturesOk returns a tuple with the NrfFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootstrappingInfo) GetNrfFeaturesOk() (*map[string]string, bool) {
	if o == nil || isNil(o.NrfFeatures) {
		return nil, false
	}
	return o.NrfFeatures, true
}

// HasNrfFeatures returns a boolean if a field has been set.
func (o *BootstrappingInfo) HasNrfFeatures() bool {
	if o != nil && !isNil(o.NrfFeatures) {
		return true
	}

	return false
}

// SetNrfFeatures gets a reference to the given map[string]string and assigns it to the NrfFeatures field.
func (o *BootstrappingInfo) SetNrfFeatures(v map[string]string) {
	o.NrfFeatures = &v
}

// GetOauth2Required returns the Oauth2Required field value if set, zero value otherwise.
func (o *BootstrappingInfo) GetOauth2Required() map[string]bool {
	if o == nil || isNil(o.Oauth2Required) {
		var ret map[string]bool
		return ret
	}
	return *o.Oauth2Required
}

// GetOauth2RequiredOk returns a tuple with the Oauth2Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootstrappingInfo) GetOauth2RequiredOk() (*map[string]bool, bool) {
	if o == nil || isNil(o.Oauth2Required) {
		return nil, false
	}
	return o.Oauth2Required, true
}

// HasOauth2Required returns a boolean if a field has been set.
func (o *BootstrappingInfo) HasOauth2Required() bool {
	if o != nil && !isNil(o.Oauth2Required) {
		return true
	}

	return false
}

// SetOauth2Required gets a reference to the given map[string]bool and assigns it to the Oauth2Required field.
func (o *BootstrappingInfo) SetOauth2Required(v map[string]bool) {
	o.Oauth2Required = &v
}

// GetNrfSetId returns the NrfSetId field value if set, zero value otherwise.
func (o *BootstrappingInfo) GetNrfSetId() string {
	if o == nil || isNil(o.NrfSetId) {
		var ret string
		return ret
	}
	return *o.NrfSetId
}

// GetNrfSetIdOk returns a tuple with the NrfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootstrappingInfo) GetNrfSetIdOk() (*string, bool) {
	if o == nil || isNil(o.NrfSetId) {
		return nil, false
	}
	return o.NrfSetId, true
}

// HasNrfSetId returns a boolean if a field has been set.
func (o *BootstrappingInfo) HasNrfSetId() bool {
	if o != nil && !isNil(o.NrfSetId) {
		return true
	}

	return false
}

// SetNrfSetId gets a reference to the given string and assigns it to the NrfSetId field.
func (o *BootstrappingInfo) SetNrfSetId(v string) {
	o.NrfSetId = &v
}

// GetNrfInstanceId returns the NrfInstanceId field value if set, zero value otherwise.
func (o *BootstrappingInfo) GetNrfInstanceId() string {
	if o == nil || isNil(o.NrfInstanceId) {
		var ret string
		return ret
	}
	return *o.NrfInstanceId
}

// GetNrfInstanceIdOk returns a tuple with the NrfInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootstrappingInfo) GetNrfInstanceIdOk() (*string, bool) {
	if o == nil || isNil(o.NrfInstanceId) {
		return nil, false
	}
	return o.NrfInstanceId, true
}

// HasNrfInstanceId returns a boolean if a field has been set.
func (o *BootstrappingInfo) HasNrfInstanceId() bool {
	if o != nil && !isNil(o.NrfInstanceId) {
		return true
	}

	return false
}

// SetNrfInstanceId gets a reference to the given string and assigns it to the NrfInstanceId field.
func (o *BootstrappingInfo) SetNrfInstanceId(v string) {
	o.NrfInstanceId = &v
}

func (o BootstrappingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BootstrappingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["_links"] = o.Links
	if !isNil(o.NrfFeatures) {
		toSerialize["nrfFeatures"] = o.NrfFeatures
	}
	if !isNil(o.Oauth2Required) {
		toSerialize["oauth2Required"] = o.Oauth2Required
	}
	if !isNil(o.NrfSetId) {
		toSerialize["nrfSetId"] = o.NrfSetId
	}
	if !isNil(o.NrfInstanceId) {
		toSerialize["nrfInstanceId"] = o.NrfInstanceId
	}
	return toSerialize, nil
}

type NullableBootstrappingInfo struct {
	value *BootstrappingInfo
	isSet bool
}

func (v NullableBootstrappingInfo) Get() *BootstrappingInfo {
	return v.value
}

func (v *NullableBootstrappingInfo) Set(val *BootstrappingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBootstrappingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBootstrappingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBootstrappingInfo(val *BootstrappingInfo) *NullableBootstrappingInfo {
	return &NullableBootstrappingInfo{value: val, isSet: true}
}

func (v NullableBootstrappingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBootstrappingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


