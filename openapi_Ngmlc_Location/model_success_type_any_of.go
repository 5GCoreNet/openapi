/*
Ngmlc_Location

GMLC Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ngmlc_Location

import (
	"encoding/json"
	"fmt"
)

// SuccessTypeAnyOf the model 'SuccessTypeAnyOf'
type SuccessTypeAnyOf string

// List of SuccessType_anyOf
const (
	COMPLETELY SuccessTypeAnyOf = "SUCCESS_COMPLETELY"
	PARTIALLY SuccessTypeAnyOf = "SUCCESS_PARTIALLY"
)

// All allowed values of SuccessTypeAnyOf enum
var AllowedSuccessTypeAnyOfEnumValues = []SuccessTypeAnyOf{
	"SUCCESS_COMPLETELY",
	"SUCCESS_PARTIALLY",
}

func (v *SuccessTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuccessTypeAnyOf(value)
	for _, existing := range AllowedSuccessTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuccessTypeAnyOf", value)
}

// NewSuccessTypeAnyOfFromValue returns a pointer to a valid SuccessTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuccessTypeAnyOfFromValue(v string) (*SuccessTypeAnyOf, error) {
	ev := SuccessTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuccessTypeAnyOf: valid values are %v", v, AllowedSuccessTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuccessTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedSuccessTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuccessType_anyOf value
func (v SuccessTypeAnyOf) Ptr() *SuccessTypeAnyOf {
	return &v
}

type NullableSuccessTypeAnyOf struct {
	value *SuccessTypeAnyOf
	isSet bool
}

func (v NullableSuccessTypeAnyOf) Get() *SuccessTypeAnyOf {
	return v.value
}

func (v *NullableSuccessTypeAnyOf) Set(val *SuccessTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessTypeAnyOf(val *SuccessTypeAnyOf) *NullableSuccessTypeAnyOf {
	return &NullableSuccessTypeAnyOf{value: val, isSet: true}
}

func (v NullableSuccessTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

