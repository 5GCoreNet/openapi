/*
Ngmlc_Location

GMLC Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ngmlc_Location

import (
	"encoding/json"
)

// checks if the AreaEventInfoExt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AreaEventInfoExt{}

// AreaEventInfoExt Extended Area Event Information
type AreaEventInfoExt struct {
	AreaEventInfo
	GeoAreaList      []GeographicArea `json:"geoAreaList,omitempty"`
	IgnoreAreaDefInd *bool            `json:"ignoreAreaDefInd,omitempty"`
}

// NewAreaEventInfoExt instantiates a new AreaEventInfoExt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAreaEventInfoExt(areaDefinition []ReportingArea) *AreaEventInfoExt {
	this := AreaEventInfoExt{}
	this.AreaDefinition = areaDefinition
	var reportingLocationReq bool = true
	this.ReportingLocationReq = &reportingLocationReq
	var ignoreAreaDefInd bool = false
	this.IgnoreAreaDefInd = &ignoreAreaDefInd
	return &this
}

// NewAreaEventInfoExtWithDefaults instantiates a new AreaEventInfoExt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAreaEventInfoExtWithDefaults() *AreaEventInfoExt {
	this := AreaEventInfoExt{}
	var ignoreAreaDefInd bool = false
	this.IgnoreAreaDefInd = &ignoreAreaDefInd
	return &this
}

// GetGeoAreaList returns the GeoAreaList field value if set, zero value otherwise.
func (o *AreaEventInfoExt) GetGeoAreaList() []GeographicArea {
	if o == nil || IsNil(o.GeoAreaList) {
		var ret []GeographicArea
		return ret
	}
	return o.GeoAreaList
}

// GetGeoAreaListOk returns a tuple with the GeoAreaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AreaEventInfoExt) GetGeoAreaListOk() ([]GeographicArea, bool) {
	if o == nil || IsNil(o.GeoAreaList) {
		return nil, false
	}
	return o.GeoAreaList, true
}

// HasGeoAreaList returns a boolean if a field has been set.
func (o *AreaEventInfoExt) HasGeoAreaList() bool {
	if o != nil && !IsNil(o.GeoAreaList) {
		return true
	}

	return false
}

// SetGeoAreaList gets a reference to the given []GeographicArea and assigns it to the GeoAreaList field.
func (o *AreaEventInfoExt) SetGeoAreaList(v []GeographicArea) {
	o.GeoAreaList = v
}

// GetIgnoreAreaDefInd returns the IgnoreAreaDefInd field value if set, zero value otherwise.
func (o *AreaEventInfoExt) GetIgnoreAreaDefInd() bool {
	if o == nil || IsNil(o.IgnoreAreaDefInd) {
		var ret bool
		return ret
	}
	return *o.IgnoreAreaDefInd
}

// GetIgnoreAreaDefIndOk returns a tuple with the IgnoreAreaDefInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AreaEventInfoExt) GetIgnoreAreaDefIndOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreAreaDefInd) {
		return nil, false
	}
	return o.IgnoreAreaDefInd, true
}

// HasIgnoreAreaDefInd returns a boolean if a field has been set.
func (o *AreaEventInfoExt) HasIgnoreAreaDefInd() bool {
	if o != nil && !IsNil(o.IgnoreAreaDefInd) {
		return true
	}

	return false
}

// SetIgnoreAreaDefInd gets a reference to the given bool and assigns it to the IgnoreAreaDefInd field.
func (o *AreaEventInfoExt) SetIgnoreAreaDefInd(v bool) {
	o.IgnoreAreaDefInd = &v
}

func (o AreaEventInfoExt) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AreaEventInfoExt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedAreaEventInfo, errAreaEventInfo := json.Marshal(o.AreaEventInfo)
	if errAreaEventInfo != nil {
		return map[string]interface{}{}, errAreaEventInfo
	}
	errAreaEventInfo = json.Unmarshal([]byte(serializedAreaEventInfo), &toSerialize)
	if errAreaEventInfo != nil {
		return map[string]interface{}{}, errAreaEventInfo
	}
	if !IsNil(o.GeoAreaList) {
		toSerialize["geoAreaList"] = o.GeoAreaList
	}
	if !IsNil(o.IgnoreAreaDefInd) {
		toSerialize["ignoreAreaDefInd"] = o.IgnoreAreaDefInd
	}
	return toSerialize, nil
}

type NullableAreaEventInfoExt struct {
	value *AreaEventInfoExt
	isSet bool
}

func (v NullableAreaEventInfoExt) Get() *AreaEventInfoExt {
	return v.value
}

func (v *NullableAreaEventInfoExt) Set(val *AreaEventInfoExt) {
	v.value = val
	v.isSet = true
}

func (v NullableAreaEventInfoExt) IsSet() bool {
	return v.isSet
}

func (v *NullableAreaEventInfoExt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAreaEventInfoExt(val *AreaEventInfoExt) *NullableAreaEventInfoExt {
	return &NullableAreaEventInfoExt{value: val, isSet: true}
}

func (v NullableAreaEventInfoExt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAreaEventInfoExt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
