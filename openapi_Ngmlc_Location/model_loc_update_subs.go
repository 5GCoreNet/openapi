/*
Ngmlc_Location

GMLC Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ngmlc_Location

import (
	"encoding/json"
)

// checks if the LocUpdateSubs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocUpdateSubs{}

// LocUpdateSubs UE location information subscription
type LocUpdateSubs struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NfInstanceId string `json:"nfInstanceId"`
	// String providing an URI formatted according to RFC 3986.
	NotifURI string `json:"notifURI"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	Gpsi *string `json:"gpsi,omitempty"`
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi *string `json:"supi,omitempty"`
}

// NewLocUpdateSubs instantiates a new LocUpdateSubs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocUpdateSubs(nfInstanceId string, notifURI string) *LocUpdateSubs {
	this := LocUpdateSubs{}
	this.NfInstanceId = nfInstanceId
	this.NotifURI = notifURI
	return &this
}

// NewLocUpdateSubsWithDefaults instantiates a new LocUpdateSubs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocUpdateSubsWithDefaults() *LocUpdateSubs {
	this := LocUpdateSubs{}
	return &this
}

// GetNfInstanceId returns the NfInstanceId field value
func (o *LocUpdateSubs) GetNfInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NfInstanceId
}

// GetNfInstanceIdOk returns a tuple with the NfInstanceId field value
// and a boolean to check if the value has been set.
func (o *LocUpdateSubs) GetNfInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NfInstanceId, true
}

// SetNfInstanceId sets field value
func (o *LocUpdateSubs) SetNfInstanceId(v string) {
	o.NfInstanceId = v
}

// GetNotifURI returns the NotifURI field value
func (o *LocUpdateSubs) GetNotifURI() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifURI
}

// GetNotifURIOk returns a tuple with the NotifURI field value
// and a boolean to check if the value has been set.
func (o *LocUpdateSubs) GetNotifURIOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifURI, true
}

// SetNotifURI sets field value
func (o *LocUpdateSubs) SetNotifURI(v string) {
	o.NotifURI = v
}

// GetGpsi returns the Gpsi field value if set, zero value otherwise.
func (o *LocUpdateSubs) GetGpsi() string {
	if o == nil || IsNil(o.Gpsi) {
		var ret string
		return ret
	}
	return *o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocUpdateSubs) GetGpsiOk() (*string, bool) {
	if o == nil || IsNil(o.Gpsi) {
		return nil, false
	}
	return o.Gpsi, true
}

// HasGpsi returns a boolean if a field has been set.
func (o *LocUpdateSubs) HasGpsi() bool {
	if o != nil && !IsNil(o.Gpsi) {
		return true
	}

	return false
}

// SetGpsi gets a reference to the given string and assigns it to the Gpsi field.
func (o *LocUpdateSubs) SetGpsi(v string) {
	o.Gpsi = &v
}

// GetSupi returns the Supi field value if set, zero value otherwise.
func (o *LocUpdateSubs) GetSupi() string {
	if o == nil || IsNil(o.Supi) {
		var ret string
		return ret
	}
	return *o.Supi
}

// GetSupiOk returns a tuple with the Supi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocUpdateSubs) GetSupiOk() (*string, bool) {
	if o == nil || IsNil(o.Supi) {
		return nil, false
	}
	return o.Supi, true
}

// HasSupi returns a boolean if a field has been set.
func (o *LocUpdateSubs) HasSupi() bool {
	if o != nil && !IsNil(o.Supi) {
		return true
	}

	return false
}

// SetSupi gets a reference to the given string and assigns it to the Supi field.
func (o *LocUpdateSubs) SetSupi(v string) {
	o.Supi = &v
}

func (o LocUpdateSubs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocUpdateSubs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nfInstanceId"] = o.NfInstanceId
	toSerialize["notifURI"] = o.NotifURI
	if !IsNil(o.Gpsi) {
		toSerialize["gpsi"] = o.Gpsi
	}
	if !IsNil(o.Supi) {
		toSerialize["supi"] = o.Supi
	}
	return toSerialize, nil
}

type NullableLocUpdateSubs struct {
	value *LocUpdateSubs
	isSet bool
}

func (v NullableLocUpdateSubs) Get() *LocUpdateSubs {
	return v.value
}

func (v *NullableLocUpdateSubs) Set(val *LocUpdateSubs) {
	v.value = val
	v.isSet = true
}

func (v NullableLocUpdateSubs) IsSet() bool {
	return v.isSet
}

func (v *NullableLocUpdateSubs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocUpdateSubs(val *LocUpdateSubs) *NullableLocUpdateSubs {
	return &NullableLocUpdateSubs{value: val, isSet: true}
}

func (v NullableLocUpdateSubs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocUpdateSubs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


