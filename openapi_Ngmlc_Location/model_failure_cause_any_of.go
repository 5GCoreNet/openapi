/*
Ngmlc_Location

GMLC Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ngmlc_Location

import (
	"encoding/json"
	"fmt"
)

// FailureCauseAnyOf the model 'FailureCauseAnyOf'
type FailureCauseAnyOf string

// List of FailureCause_anyOf
const (
	POSITIONING_DENIED FailureCauseAnyOf = "POSITIONING_DENIED"
	UNSUPPORTED_BY_UE FailureCauseAnyOf = "UNSUPPORTED_BY_UE"
	NOT_REGISTED_UE FailureCauseAnyOf = "NOT_REGISTED_UE"
	UNSPECIFIED FailureCauseAnyOf = "UNSPECIFIED"
)

// All allowed values of FailureCauseAnyOf enum
var AllowedFailureCauseAnyOfEnumValues = []FailureCauseAnyOf{
	"POSITIONING_DENIED",
	"UNSUPPORTED_BY_UE",
	"NOT_REGISTED_UE",
	"UNSPECIFIED",
}

func (v *FailureCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FailureCauseAnyOf(value)
	for _, existing := range AllowedFailureCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FailureCauseAnyOf", value)
}

// NewFailureCauseAnyOfFromValue returns a pointer to a valid FailureCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFailureCauseAnyOfFromValue(v string) (*FailureCauseAnyOf, error) {
	ev := FailureCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FailureCauseAnyOf: valid values are %v", v, AllowedFailureCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FailureCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedFailureCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FailureCause_anyOf value
func (v FailureCauseAnyOf) Ptr() *FailureCauseAnyOf {
	return &v
}

type NullableFailureCauseAnyOf struct {
	value *FailureCauseAnyOf
	isSet bool
}

func (v NullableFailureCauseAnyOf) Get() *FailureCauseAnyOf {
	return v.value
}

func (v *NullableFailureCauseAnyOf) Set(val *FailureCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureCauseAnyOf(val *FailureCauseAnyOf) *NullableFailureCauseAnyOf {
	return &NullableFailureCauseAnyOf{value: val, isSet: true}
}

func (v NullableFailureCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

