/*
Ngmlc_Location

GMLC Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ngmlc_Location

import (
	"encoding/json"
	"fmt"
)

// LocationTypeRequestedAnyOf the model 'LocationTypeRequestedAnyOf'
type LocationTypeRequestedAnyOf string

// List of LocationTypeRequested_anyOf
const (
	CURRENT_LOCATION LocationTypeRequestedAnyOf = "CURRENT_LOCATION"
	CURRENT_OR_LAST_KNOWN_LOCATION LocationTypeRequestedAnyOf = "CURRENT_OR_LAST_KNOWN_LOCATION"
	INITIAL_LOCATION LocationTypeRequestedAnyOf = "INITIAL_LOCATION"
	NOTIFICATION_VERIFICATION_ONLY LocationTypeRequestedAnyOf = "NOTIFICATION_VERIFICATION_ONLY"
)

// All allowed values of LocationTypeRequestedAnyOf enum
var AllowedLocationTypeRequestedAnyOfEnumValues = []LocationTypeRequestedAnyOf{
	"CURRENT_LOCATION",
	"CURRENT_OR_LAST_KNOWN_LOCATION",
	"INITIAL_LOCATION",
	"NOTIFICATION_VERIFICATION_ONLY",
}

func (v *LocationTypeRequestedAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationTypeRequestedAnyOf(value)
	for _, existing := range AllowedLocationTypeRequestedAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationTypeRequestedAnyOf", value)
}

// NewLocationTypeRequestedAnyOfFromValue returns a pointer to a valid LocationTypeRequestedAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationTypeRequestedAnyOfFromValue(v string) (*LocationTypeRequestedAnyOf, error) {
	ev := LocationTypeRequestedAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationTypeRequestedAnyOf: valid values are %v", v, AllowedLocationTypeRequestedAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationTypeRequestedAnyOf) IsValid() bool {
	for _, existing := range AllowedLocationTypeRequestedAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocationTypeRequested_anyOf value
func (v LocationTypeRequestedAnyOf) Ptr() *LocationTypeRequestedAnyOf {
	return &v
}

type NullableLocationTypeRequestedAnyOf struct {
	value *LocationTypeRequestedAnyOf
	isSet bool
}

func (v NullableLocationTypeRequestedAnyOf) Get() *LocationTypeRequestedAnyOf {
	return v.value
}

func (v *NullableLocationTypeRequestedAnyOf) Set(val *LocationTypeRequestedAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationTypeRequestedAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationTypeRequestedAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationTypeRequestedAnyOf(val *LocationTypeRequestedAnyOf) *NullableLocationTypeRequestedAnyOf {
	return &NullableLocationTypeRequestedAnyOf{value: val, isSet: true}
}

func (v NullableLocationTypeRequestedAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationTypeRequestedAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

