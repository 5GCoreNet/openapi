/*
Ngmlc_Location

GMLC Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Ngmlc_Location

import (
	"encoding/json"
	"time"
)

// checks if the LocationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationData{}

// LocationData Contains the response parameters in ProvideLocation service operation
type LocationData struct {
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	Gpsi *string `json:"gpsi,omitempty"`
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi *string `json:"supi,omitempty"`
	LocationEstimate *GeographicArea `json:"locationEstimate,omitempty"`
	CivicAddress *CivicAddress `json:"civicAddress,omitempty"`
	LocalLocationEstimate *LocalArea `json:"localLocationEstimate,omitempty"`
	// Indicates value of the age of the location estimate.
	AgeOfLocationEstimate *int32 `json:"ageOfLocationEstimate,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	TimestampOfLocationEstimate *time.Time `json:"timestampOfLocationEstimate,omitempty"`
	PositioningDataList []PositioningMethodAndUsage `json:"positioningDataList,omitempty"`
	GnssPositioningDataList []GnssPositioningMethodAndUsage `json:"gnssPositioningDataList,omitempty"`
	AccuracyFulfilmentIndicator *AccuracyFulfilmentIndicator `json:"accuracyFulfilmentIndicator,omitempty"`
	UeVelocity *VelocityEstimate `json:"ueVelocity,omitempty"`
	// LDR Reference.
	LdrReference *string `json:"ldrReference,omitempty"`
	// Indicates value of altitude.
	Altitude *float64 `json:"altitude,omitempty"`
	// LMF identification.
	ServingLMFIdentification *string `json:"servingLMFIdentification,omitempty"`
	LocationPrivacyVerResult *LocationPrivacyVerResult `json:"locationPrivacyVerResult,omitempty"`
	SuccessType *SuccessType `json:"successType,omitempty"`
	AchievedQos *MinorLocationQoS `json:"achievedQos,omitempty"`
}

// NewLocationData instantiates a new LocationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationData() *LocationData {
	this := LocationData{}
	return &this
}

// NewLocationDataWithDefaults instantiates a new LocationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationDataWithDefaults() *LocationData {
	this := LocationData{}
	return &this
}

// GetGpsi returns the Gpsi field value if set, zero value otherwise.
func (o *LocationData) GetGpsi() string {
	if o == nil || isNil(o.Gpsi) {
		var ret string
		return ret
	}
	return *o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetGpsiOk() (*string, bool) {
	if o == nil || isNil(o.Gpsi) {
		return nil, false
	}
	return o.Gpsi, true
}

// HasGpsi returns a boolean if a field has been set.
func (o *LocationData) HasGpsi() bool {
	if o != nil && !isNil(o.Gpsi) {
		return true
	}

	return false
}

// SetGpsi gets a reference to the given string and assigns it to the Gpsi field.
func (o *LocationData) SetGpsi(v string) {
	o.Gpsi = &v
}

// GetSupi returns the Supi field value if set, zero value otherwise.
func (o *LocationData) GetSupi() string {
	if o == nil || isNil(o.Supi) {
		var ret string
		return ret
	}
	return *o.Supi
}

// GetSupiOk returns a tuple with the Supi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetSupiOk() (*string, bool) {
	if o == nil || isNil(o.Supi) {
		return nil, false
	}
	return o.Supi, true
}

// HasSupi returns a boolean if a field has been set.
func (o *LocationData) HasSupi() bool {
	if o != nil && !isNil(o.Supi) {
		return true
	}

	return false
}

// SetSupi gets a reference to the given string and assigns it to the Supi field.
func (o *LocationData) SetSupi(v string) {
	o.Supi = &v
}

// GetLocationEstimate returns the LocationEstimate field value if set, zero value otherwise.
func (o *LocationData) GetLocationEstimate() GeographicArea {
	if o == nil || isNil(o.LocationEstimate) {
		var ret GeographicArea
		return ret
	}
	return *o.LocationEstimate
}

// GetLocationEstimateOk returns a tuple with the LocationEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetLocationEstimateOk() (*GeographicArea, bool) {
	if o == nil || isNil(o.LocationEstimate) {
		return nil, false
	}
	return o.LocationEstimate, true
}

// HasLocationEstimate returns a boolean if a field has been set.
func (o *LocationData) HasLocationEstimate() bool {
	if o != nil && !isNil(o.LocationEstimate) {
		return true
	}

	return false
}

// SetLocationEstimate gets a reference to the given GeographicArea and assigns it to the LocationEstimate field.
func (o *LocationData) SetLocationEstimate(v GeographicArea) {
	o.LocationEstimate = &v
}

// GetCivicAddress returns the CivicAddress field value if set, zero value otherwise.
func (o *LocationData) GetCivicAddress() CivicAddress {
	if o == nil || isNil(o.CivicAddress) {
		var ret CivicAddress
		return ret
	}
	return *o.CivicAddress
}

// GetCivicAddressOk returns a tuple with the CivicAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetCivicAddressOk() (*CivicAddress, bool) {
	if o == nil || isNil(o.CivicAddress) {
		return nil, false
	}
	return o.CivicAddress, true
}

// HasCivicAddress returns a boolean if a field has been set.
func (o *LocationData) HasCivicAddress() bool {
	if o != nil && !isNil(o.CivicAddress) {
		return true
	}

	return false
}

// SetCivicAddress gets a reference to the given CivicAddress and assigns it to the CivicAddress field.
func (o *LocationData) SetCivicAddress(v CivicAddress) {
	o.CivicAddress = &v
}

// GetLocalLocationEstimate returns the LocalLocationEstimate field value if set, zero value otherwise.
func (o *LocationData) GetLocalLocationEstimate() LocalArea {
	if o == nil || isNil(o.LocalLocationEstimate) {
		var ret LocalArea
		return ret
	}
	return *o.LocalLocationEstimate
}

// GetLocalLocationEstimateOk returns a tuple with the LocalLocationEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetLocalLocationEstimateOk() (*LocalArea, bool) {
	if o == nil || isNil(o.LocalLocationEstimate) {
		return nil, false
	}
	return o.LocalLocationEstimate, true
}

// HasLocalLocationEstimate returns a boolean if a field has been set.
func (o *LocationData) HasLocalLocationEstimate() bool {
	if o != nil && !isNil(o.LocalLocationEstimate) {
		return true
	}

	return false
}

// SetLocalLocationEstimate gets a reference to the given LocalArea and assigns it to the LocalLocationEstimate field.
func (o *LocationData) SetLocalLocationEstimate(v LocalArea) {
	o.LocalLocationEstimate = &v
}

// GetAgeOfLocationEstimate returns the AgeOfLocationEstimate field value if set, zero value otherwise.
func (o *LocationData) GetAgeOfLocationEstimate() int32 {
	if o == nil || isNil(o.AgeOfLocationEstimate) {
		var ret int32
		return ret
	}
	return *o.AgeOfLocationEstimate
}

// GetAgeOfLocationEstimateOk returns a tuple with the AgeOfLocationEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetAgeOfLocationEstimateOk() (*int32, bool) {
	if o == nil || isNil(o.AgeOfLocationEstimate) {
		return nil, false
	}
	return o.AgeOfLocationEstimate, true
}

// HasAgeOfLocationEstimate returns a boolean if a field has been set.
func (o *LocationData) HasAgeOfLocationEstimate() bool {
	if o != nil && !isNil(o.AgeOfLocationEstimate) {
		return true
	}

	return false
}

// SetAgeOfLocationEstimate gets a reference to the given int32 and assigns it to the AgeOfLocationEstimate field.
func (o *LocationData) SetAgeOfLocationEstimate(v int32) {
	o.AgeOfLocationEstimate = &v
}

// GetTimestampOfLocationEstimate returns the TimestampOfLocationEstimate field value if set, zero value otherwise.
func (o *LocationData) GetTimestampOfLocationEstimate() time.Time {
	if o == nil || isNil(o.TimestampOfLocationEstimate) {
		var ret time.Time
		return ret
	}
	return *o.TimestampOfLocationEstimate
}

// GetTimestampOfLocationEstimateOk returns a tuple with the TimestampOfLocationEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetTimestampOfLocationEstimateOk() (*time.Time, bool) {
	if o == nil || isNil(o.TimestampOfLocationEstimate) {
		return nil, false
	}
	return o.TimestampOfLocationEstimate, true
}

// HasTimestampOfLocationEstimate returns a boolean if a field has been set.
func (o *LocationData) HasTimestampOfLocationEstimate() bool {
	if o != nil && !isNil(o.TimestampOfLocationEstimate) {
		return true
	}

	return false
}

// SetTimestampOfLocationEstimate gets a reference to the given time.Time and assigns it to the TimestampOfLocationEstimate field.
func (o *LocationData) SetTimestampOfLocationEstimate(v time.Time) {
	o.TimestampOfLocationEstimate = &v
}

// GetPositioningDataList returns the PositioningDataList field value if set, zero value otherwise.
func (o *LocationData) GetPositioningDataList() []PositioningMethodAndUsage {
	if o == nil || isNil(o.PositioningDataList) {
		var ret []PositioningMethodAndUsage
		return ret
	}
	return o.PositioningDataList
}

// GetPositioningDataListOk returns a tuple with the PositioningDataList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetPositioningDataListOk() ([]PositioningMethodAndUsage, bool) {
	if o == nil || isNil(o.PositioningDataList) {
		return nil, false
	}
	return o.PositioningDataList, true
}

// HasPositioningDataList returns a boolean if a field has been set.
func (o *LocationData) HasPositioningDataList() bool {
	if o != nil && !isNil(o.PositioningDataList) {
		return true
	}

	return false
}

// SetPositioningDataList gets a reference to the given []PositioningMethodAndUsage and assigns it to the PositioningDataList field.
func (o *LocationData) SetPositioningDataList(v []PositioningMethodAndUsage) {
	o.PositioningDataList = v
}

// GetGnssPositioningDataList returns the GnssPositioningDataList field value if set, zero value otherwise.
func (o *LocationData) GetGnssPositioningDataList() []GnssPositioningMethodAndUsage {
	if o == nil || isNil(o.GnssPositioningDataList) {
		var ret []GnssPositioningMethodAndUsage
		return ret
	}
	return o.GnssPositioningDataList
}

// GetGnssPositioningDataListOk returns a tuple with the GnssPositioningDataList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetGnssPositioningDataListOk() ([]GnssPositioningMethodAndUsage, bool) {
	if o == nil || isNil(o.GnssPositioningDataList) {
		return nil, false
	}
	return o.GnssPositioningDataList, true
}

// HasGnssPositioningDataList returns a boolean if a field has been set.
func (o *LocationData) HasGnssPositioningDataList() bool {
	if o != nil && !isNil(o.GnssPositioningDataList) {
		return true
	}

	return false
}

// SetGnssPositioningDataList gets a reference to the given []GnssPositioningMethodAndUsage and assigns it to the GnssPositioningDataList field.
func (o *LocationData) SetGnssPositioningDataList(v []GnssPositioningMethodAndUsage) {
	o.GnssPositioningDataList = v
}

// GetAccuracyFulfilmentIndicator returns the AccuracyFulfilmentIndicator field value if set, zero value otherwise.
func (o *LocationData) GetAccuracyFulfilmentIndicator() AccuracyFulfilmentIndicator {
	if o == nil || isNil(o.AccuracyFulfilmentIndicator) {
		var ret AccuracyFulfilmentIndicator
		return ret
	}
	return *o.AccuracyFulfilmentIndicator
}

// GetAccuracyFulfilmentIndicatorOk returns a tuple with the AccuracyFulfilmentIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetAccuracyFulfilmentIndicatorOk() (*AccuracyFulfilmentIndicator, bool) {
	if o == nil || isNil(o.AccuracyFulfilmentIndicator) {
		return nil, false
	}
	return o.AccuracyFulfilmentIndicator, true
}

// HasAccuracyFulfilmentIndicator returns a boolean if a field has been set.
func (o *LocationData) HasAccuracyFulfilmentIndicator() bool {
	if o != nil && !isNil(o.AccuracyFulfilmentIndicator) {
		return true
	}

	return false
}

// SetAccuracyFulfilmentIndicator gets a reference to the given AccuracyFulfilmentIndicator and assigns it to the AccuracyFulfilmentIndicator field.
func (o *LocationData) SetAccuracyFulfilmentIndicator(v AccuracyFulfilmentIndicator) {
	o.AccuracyFulfilmentIndicator = &v
}

// GetUeVelocity returns the UeVelocity field value if set, zero value otherwise.
func (o *LocationData) GetUeVelocity() VelocityEstimate {
	if o == nil || isNil(o.UeVelocity) {
		var ret VelocityEstimate
		return ret
	}
	return *o.UeVelocity
}

// GetUeVelocityOk returns a tuple with the UeVelocity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetUeVelocityOk() (*VelocityEstimate, bool) {
	if o == nil || isNil(o.UeVelocity) {
		return nil, false
	}
	return o.UeVelocity, true
}

// HasUeVelocity returns a boolean if a field has been set.
func (o *LocationData) HasUeVelocity() bool {
	if o != nil && !isNil(o.UeVelocity) {
		return true
	}

	return false
}

// SetUeVelocity gets a reference to the given VelocityEstimate and assigns it to the UeVelocity field.
func (o *LocationData) SetUeVelocity(v VelocityEstimate) {
	o.UeVelocity = &v
}

// GetLdrReference returns the LdrReference field value if set, zero value otherwise.
func (o *LocationData) GetLdrReference() string {
	if o == nil || isNil(o.LdrReference) {
		var ret string
		return ret
	}
	return *o.LdrReference
}

// GetLdrReferenceOk returns a tuple with the LdrReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetLdrReferenceOk() (*string, bool) {
	if o == nil || isNil(o.LdrReference) {
		return nil, false
	}
	return o.LdrReference, true
}

// HasLdrReference returns a boolean if a field has been set.
func (o *LocationData) HasLdrReference() bool {
	if o != nil && !isNil(o.LdrReference) {
		return true
	}

	return false
}

// SetLdrReference gets a reference to the given string and assigns it to the LdrReference field.
func (o *LocationData) SetLdrReference(v string) {
	o.LdrReference = &v
}

// GetAltitude returns the Altitude field value if set, zero value otherwise.
func (o *LocationData) GetAltitude() float64 {
	if o == nil || isNil(o.Altitude) {
		var ret float64
		return ret
	}
	return *o.Altitude
}

// GetAltitudeOk returns a tuple with the Altitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetAltitudeOk() (*float64, bool) {
	if o == nil || isNil(o.Altitude) {
		return nil, false
	}
	return o.Altitude, true
}

// HasAltitude returns a boolean if a field has been set.
func (o *LocationData) HasAltitude() bool {
	if o != nil && !isNil(o.Altitude) {
		return true
	}

	return false
}

// SetAltitude gets a reference to the given float64 and assigns it to the Altitude field.
func (o *LocationData) SetAltitude(v float64) {
	o.Altitude = &v
}

// GetServingLMFIdentification returns the ServingLMFIdentification field value if set, zero value otherwise.
func (o *LocationData) GetServingLMFIdentification() string {
	if o == nil || isNil(o.ServingLMFIdentification) {
		var ret string
		return ret
	}
	return *o.ServingLMFIdentification
}

// GetServingLMFIdentificationOk returns a tuple with the ServingLMFIdentification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetServingLMFIdentificationOk() (*string, bool) {
	if o == nil || isNil(o.ServingLMFIdentification) {
		return nil, false
	}
	return o.ServingLMFIdentification, true
}

// HasServingLMFIdentification returns a boolean if a field has been set.
func (o *LocationData) HasServingLMFIdentification() bool {
	if o != nil && !isNil(o.ServingLMFIdentification) {
		return true
	}

	return false
}

// SetServingLMFIdentification gets a reference to the given string and assigns it to the ServingLMFIdentification field.
func (o *LocationData) SetServingLMFIdentification(v string) {
	o.ServingLMFIdentification = &v
}

// GetLocationPrivacyVerResult returns the LocationPrivacyVerResult field value if set, zero value otherwise.
func (o *LocationData) GetLocationPrivacyVerResult() LocationPrivacyVerResult {
	if o == nil || isNil(o.LocationPrivacyVerResult) {
		var ret LocationPrivacyVerResult
		return ret
	}
	return *o.LocationPrivacyVerResult
}

// GetLocationPrivacyVerResultOk returns a tuple with the LocationPrivacyVerResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetLocationPrivacyVerResultOk() (*LocationPrivacyVerResult, bool) {
	if o == nil || isNil(o.LocationPrivacyVerResult) {
		return nil, false
	}
	return o.LocationPrivacyVerResult, true
}

// HasLocationPrivacyVerResult returns a boolean if a field has been set.
func (o *LocationData) HasLocationPrivacyVerResult() bool {
	if o != nil && !isNil(o.LocationPrivacyVerResult) {
		return true
	}

	return false
}

// SetLocationPrivacyVerResult gets a reference to the given LocationPrivacyVerResult and assigns it to the LocationPrivacyVerResult field.
func (o *LocationData) SetLocationPrivacyVerResult(v LocationPrivacyVerResult) {
	o.LocationPrivacyVerResult = &v
}

// GetSuccessType returns the SuccessType field value if set, zero value otherwise.
func (o *LocationData) GetSuccessType() SuccessType {
	if o == nil || isNil(o.SuccessType) {
		var ret SuccessType
		return ret
	}
	return *o.SuccessType
}

// GetSuccessTypeOk returns a tuple with the SuccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetSuccessTypeOk() (*SuccessType, bool) {
	if o == nil || isNil(o.SuccessType) {
		return nil, false
	}
	return o.SuccessType, true
}

// HasSuccessType returns a boolean if a field has been set.
func (o *LocationData) HasSuccessType() bool {
	if o != nil && !isNil(o.SuccessType) {
		return true
	}

	return false
}

// SetSuccessType gets a reference to the given SuccessType and assigns it to the SuccessType field.
func (o *LocationData) SetSuccessType(v SuccessType) {
	o.SuccessType = &v
}

// GetAchievedQos returns the AchievedQos field value if set, zero value otherwise.
func (o *LocationData) GetAchievedQos() MinorLocationQoS {
	if o == nil || isNil(o.AchievedQos) {
		var ret MinorLocationQoS
		return ret
	}
	return *o.AchievedQos
}

// GetAchievedQosOk returns a tuple with the AchievedQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationData) GetAchievedQosOk() (*MinorLocationQoS, bool) {
	if o == nil || isNil(o.AchievedQos) {
		return nil, false
	}
	return o.AchievedQos, true
}

// HasAchievedQos returns a boolean if a field has been set.
func (o *LocationData) HasAchievedQos() bool {
	if o != nil && !isNil(o.AchievedQos) {
		return true
	}

	return false
}

// SetAchievedQos gets a reference to the given MinorLocationQoS and assigns it to the AchievedQos field.
func (o *LocationData) SetAchievedQos(v MinorLocationQoS) {
	o.AchievedQos = &v
}

func (o LocationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Gpsi) {
		toSerialize["gpsi"] = o.Gpsi
	}
	if !isNil(o.Supi) {
		toSerialize["supi"] = o.Supi
	}
	if !isNil(o.LocationEstimate) {
		toSerialize["locationEstimate"] = o.LocationEstimate
	}
	if !isNil(o.CivicAddress) {
		toSerialize["civicAddress"] = o.CivicAddress
	}
	if !isNil(o.LocalLocationEstimate) {
		toSerialize["localLocationEstimate"] = o.LocalLocationEstimate
	}
	if !isNil(o.AgeOfLocationEstimate) {
		toSerialize["ageOfLocationEstimate"] = o.AgeOfLocationEstimate
	}
	if !isNil(o.TimestampOfLocationEstimate) {
		toSerialize["timestampOfLocationEstimate"] = o.TimestampOfLocationEstimate
	}
	if !isNil(o.PositioningDataList) {
		toSerialize["positioningDataList"] = o.PositioningDataList
	}
	if !isNil(o.GnssPositioningDataList) {
		toSerialize["gnssPositioningDataList"] = o.GnssPositioningDataList
	}
	if !isNil(o.AccuracyFulfilmentIndicator) {
		toSerialize["accuracyFulfilmentIndicator"] = o.AccuracyFulfilmentIndicator
	}
	if !isNil(o.UeVelocity) {
		toSerialize["ueVelocity"] = o.UeVelocity
	}
	if !isNil(o.LdrReference) {
		toSerialize["ldrReference"] = o.LdrReference
	}
	if !isNil(o.Altitude) {
		toSerialize["altitude"] = o.Altitude
	}
	if !isNil(o.ServingLMFIdentification) {
		toSerialize["servingLMFIdentification"] = o.ServingLMFIdentification
	}
	if !isNil(o.LocationPrivacyVerResult) {
		toSerialize["locationPrivacyVerResult"] = o.LocationPrivacyVerResult
	}
	if !isNil(o.SuccessType) {
		toSerialize["successType"] = o.SuccessType
	}
	if !isNil(o.AchievedQos) {
		toSerialize["achievedQos"] = o.AchievedQos
	}
	return toSerialize, nil
}

type NullableLocationData struct {
	value *LocationData
	isSet bool
}

func (v NullableLocationData) Get() *LocationData {
	return v.value
}

func (v *NullableLocationData) Set(val *LocationData) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationData) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationData(val *LocationData) *NullableLocationData {
	return &NullableLocationData{value: val, isSet: true}
}

func (v NullableLocationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


