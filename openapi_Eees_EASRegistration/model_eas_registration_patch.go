/*
EES EAS Registration_API

API for EAS Registration.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EASRegistration

import (
	"encoding/json"
	"time"
)

// checks if the EASRegistrationPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EASRegistrationPatch{}

// EASRegistrationPatch Represents partial update request of individual EAS registration information.
type EASRegistrationPatch struct {
	EasProf *EASProfile `json:"easProf,omitempty"`
	// string with format 'date-time' as defined in OpenAPI with 'nullable:true' property.  
	ExpTime NullableTime `json:"expTime,omitempty"`
}

// NewEASRegistrationPatch instantiates a new EASRegistrationPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEASRegistrationPatch() *EASRegistrationPatch {
	this := EASRegistrationPatch{}
	return &this
}

// NewEASRegistrationPatchWithDefaults instantiates a new EASRegistrationPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEASRegistrationPatchWithDefaults() *EASRegistrationPatch {
	this := EASRegistrationPatch{}
	return &this
}

// GetEasProf returns the EasProf field value if set, zero value otherwise.
func (o *EASRegistrationPatch) GetEasProf() EASProfile {
	if o == nil || IsNil(o.EasProf) {
		var ret EASProfile
		return ret
	}
	return *o.EasProf
}

// GetEasProfOk returns a tuple with the EasProf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EASRegistrationPatch) GetEasProfOk() (*EASProfile, bool) {
	if o == nil || IsNil(o.EasProf) {
		return nil, false
	}
	return o.EasProf, true
}

// HasEasProf returns a boolean if a field has been set.
func (o *EASRegistrationPatch) HasEasProf() bool {
	if o != nil && !IsNil(o.EasProf) {
		return true
	}

	return false
}

// SetEasProf gets a reference to the given EASProfile and assigns it to the EasProf field.
func (o *EASRegistrationPatch) SetEasProf(v EASProfile) {
	o.EasProf = &v
}

// GetExpTime returns the ExpTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EASRegistrationPatch) GetExpTime() time.Time {
	if o == nil || IsNil(o.ExpTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpTime.Get()
}

// GetExpTimeOk returns a tuple with the ExpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EASRegistrationPatch) GetExpTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpTime.Get(), o.ExpTime.IsSet()
}

// HasExpTime returns a boolean if a field has been set.
func (o *EASRegistrationPatch) HasExpTime() bool {
	if o != nil && o.ExpTime.IsSet() {
		return true
	}

	return false
}

// SetExpTime gets a reference to the given NullableTime and assigns it to the ExpTime field.
func (o *EASRegistrationPatch) SetExpTime(v time.Time) {
	o.ExpTime.Set(&v)
}
// SetExpTimeNil sets the value for ExpTime to be an explicit nil
func (o *EASRegistrationPatch) SetExpTimeNil() {
	o.ExpTime.Set(nil)
}

// UnsetExpTime ensures that no value is present for ExpTime, not even an explicit nil
func (o *EASRegistrationPatch) UnsetExpTime() {
	o.ExpTime.Unset()
}

func (o EASRegistrationPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EASRegistrationPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EasProf) {
		toSerialize["easProf"] = o.EasProf
	}
	if o.ExpTime.IsSet() {
		toSerialize["expTime"] = o.ExpTime.Get()
	}
	return toSerialize, nil
}

type NullableEASRegistrationPatch struct {
	value *EASRegistrationPatch
	isSet bool
}

func (v NullableEASRegistrationPatch) Get() *EASRegistrationPatch {
	return v.value
}

func (v *NullableEASRegistrationPatch) Set(val *EASRegistrationPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableEASRegistrationPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableEASRegistrationPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEASRegistrationPatch(val *EASRegistrationPatch) *NullableEASRegistrationPatch {
	return &NullableEASRegistrationPatch{value: val, isSet: true}
}

func (v NullableEASRegistrationPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEASRegistrationPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


