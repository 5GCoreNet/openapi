/*
EES EAS Registration_API

API for EAS Registration.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EASRegistration

import (
	"encoding/json"
	"fmt"
)

// EASCategoryAnyOf the model 'EASCategoryAnyOf'
type EASCategoryAnyOf string

// List of EASCategory_anyOf
const (
	UAS EASCategoryAnyOf = "UAS"
	V2_X EASCategoryAnyOf = "V2X"
	OTHER EASCategoryAnyOf = "OTHER"
)

// All allowed values of EASCategoryAnyOf enum
var AllowedEASCategoryAnyOfEnumValues = []EASCategoryAnyOf{
	"UAS",
	"V2X",
	"OTHER",
}

func (v *EASCategoryAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EASCategoryAnyOf(value)
	for _, existing := range AllowedEASCategoryAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EASCategoryAnyOf", value)
}

// NewEASCategoryAnyOfFromValue returns a pointer to a valid EASCategoryAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEASCategoryAnyOfFromValue(v string) (*EASCategoryAnyOf, error) {
	ev := EASCategoryAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EASCategoryAnyOf: valid values are %v", v, AllowedEASCategoryAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EASCategoryAnyOf) IsValid() bool {
	for _, existing := range AllowedEASCategoryAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EASCategory_anyOf value
func (v EASCategoryAnyOf) Ptr() *EASCategoryAnyOf {
	return &v
}

type NullableEASCategoryAnyOf struct {
	value *EASCategoryAnyOf
	isSet bool
}

func (v NullableEASCategoryAnyOf) Get() *EASCategoryAnyOf {
	return v.value
}

func (v *NullableEASCategoryAnyOf) Set(val *EASCategoryAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEASCategoryAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEASCategoryAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEASCategoryAnyOf(val *EASCategoryAnyOf) *NullableEASCategoryAnyOf {
	return &NullableEASCategoryAnyOf{value: val, isSet: true}
}

func (v NullableEASCategoryAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEASCategoryAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

