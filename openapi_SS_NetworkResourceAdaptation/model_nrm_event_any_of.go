/*
SS_NetworkResourceAdaptation

SS Network Resource Adaptation Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_NetworkResourceAdaptation

import (
	"encoding/json"
	"fmt"
)

// NrmEventAnyOf the model 'NrmEventAnyOf'
type NrmEventAnyOf string

// List of NrmEvent_anyOf
const (
	UP_DELIVERY_MODE NrmEventAnyOf = "UP_DELIVERY_MODE"
)

// All allowed values of NrmEventAnyOf enum
var AllowedNrmEventAnyOfEnumValues = []NrmEventAnyOf{
	"UP_DELIVERY_MODE",
}

func (v *NrmEventAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NrmEventAnyOf(value)
	for _, existing := range AllowedNrmEventAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NrmEventAnyOf", value)
}

// NewNrmEventAnyOfFromValue returns a pointer to a valid NrmEventAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNrmEventAnyOfFromValue(v string) (*NrmEventAnyOf, error) {
	ev := NrmEventAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NrmEventAnyOf: valid values are %v", v, AllowedNrmEventAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NrmEventAnyOf) IsValid() bool {
	for _, existing := range AllowedNrmEventAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NrmEvent_anyOf value
func (v NrmEventAnyOf) Ptr() *NrmEventAnyOf {
	return &v
}

type NullableNrmEventAnyOf struct {
	value *NrmEventAnyOf
	isSet bool
}

func (v NullableNrmEventAnyOf) Get() *NrmEventAnyOf {
	return v.value
}

func (v *NullableNrmEventAnyOf) Set(val *NrmEventAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNrmEventAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNrmEventAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNrmEventAnyOf(val *NrmEventAnyOf) *NullableNrmEventAnyOf {
	return &NullableNrmEventAnyOf{value: val, isSet: true}
}

func (v NullableNrmEventAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNrmEventAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

