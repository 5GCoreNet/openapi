/*
SS_NetworkResourceAdaptation

SS Network Resource Adaptation Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_NetworkResourceAdaptation

import (
	"encoding/json"
)

// checks if the TrafficSpecification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrafficSpecification{}

// TrafficSpecification The traffic classe supported by the DS-TTs and available end-to-end maximum latency value. 
type TrafficSpecification struct {
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	TrafficClass int32 `json:"trafficClass"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	E2eMaxLatency int32 `json:"e2eMaxLatency"`
}

// NewTrafficSpecification instantiates a new TrafficSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrafficSpecification(trafficClass int32, e2eMaxLatency int32) *TrafficSpecification {
	this := TrafficSpecification{}
	this.TrafficClass = trafficClass
	this.E2eMaxLatency = e2eMaxLatency
	return &this
}

// NewTrafficSpecificationWithDefaults instantiates a new TrafficSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficSpecificationWithDefaults() *TrafficSpecification {
	this := TrafficSpecification{}
	return &this
}

// GetTrafficClass returns the TrafficClass field value
func (o *TrafficSpecification) GetTrafficClass() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrafficClass
}

// GetTrafficClassOk returns a tuple with the TrafficClass field value
// and a boolean to check if the value has been set.
func (o *TrafficSpecification) GetTrafficClassOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrafficClass, true
}

// SetTrafficClass sets field value
func (o *TrafficSpecification) SetTrafficClass(v int32) {
	o.TrafficClass = v
}

// GetE2eMaxLatency returns the E2eMaxLatency field value
func (o *TrafficSpecification) GetE2eMaxLatency() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.E2eMaxLatency
}

// GetE2eMaxLatencyOk returns a tuple with the E2eMaxLatency field value
// and a boolean to check if the value has been set.
func (o *TrafficSpecification) GetE2eMaxLatencyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.E2eMaxLatency, true
}

// SetE2eMaxLatency sets field value
func (o *TrafficSpecification) SetE2eMaxLatency(v int32) {
	o.E2eMaxLatency = v
}

func (o TrafficSpecification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrafficSpecification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trafficClass"] = o.TrafficClass
	toSerialize["e2eMaxLatency"] = o.E2eMaxLatency
	return toSerialize, nil
}

type NullableTrafficSpecification struct {
	value *TrafficSpecification
	isSet bool
}

func (v NullableTrafficSpecification) Get() *TrafficSpecification {
	return v.value
}

func (v *NullableTrafficSpecification) Set(val *TrafficSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableTrafficSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableTrafficSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrafficSpecification(val *TrafficSpecification) *NullableTrafficSpecification {
	return &NullableTrafficSpecification{value: val, isSet: true}
}

func (v NullableTrafficSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrafficSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


