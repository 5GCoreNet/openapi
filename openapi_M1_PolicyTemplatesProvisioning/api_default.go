/*
M1_PolicyTemplatesProvisioning

5GMS AF M1 Policy Templates Provisioning API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_M1_PolicyTemplatesProvisioning

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiCreatePolicyTemplateRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	policyTemplate *PolicyTemplate
}

// A JSON representation of a Policy Template
func (r ApiCreatePolicyTemplateRequest) PolicyTemplate(policyTemplate PolicyTemplate) ApiCreatePolicyTemplateRequest {
	r.policyTemplate = &policyTemplate
	return r
}

func (r ApiCreatePolicyTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreatePolicyTemplateExecute(r)
}

/*
CreatePolicyTemplate Create (and optionally upload) a new Policy Template

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @return ApiCreatePolicyTemplateRequest
*/
func (a *DefaultApiService) CreatePolicyTemplate(ctx context.Context, provisioningSessionId string) ApiCreatePolicyTemplateRequest {
	return ApiCreatePolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
func (a *DefaultApiService) CreatePolicyTemplateExecute(r ApiCreatePolicyTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreatePolicyTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/policy-templates"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.policyTemplate == nil {
		return nil, reportError("policyTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDestroyPolicyTemplateRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	policyTemplateId string
}

func (r ApiDestroyPolicyTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.DestroyPolicyTemplateExecute(r)
}

/*
DestroyPolicyTemplate Method for DestroyPolicyTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId A unique identifier of the Provisioning Session.
 @param policyTemplateId A resource identifier of a Policy Template.
 @return ApiDestroyPolicyTemplateRequest
*/
func (a *DefaultApiService) DestroyPolicyTemplate(ctx context.Context, provisioningSessionId string, policyTemplateId string) ApiDestroyPolicyTemplateRequest {
	return ApiDestroyPolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		policyTemplateId: policyTemplateId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DestroyPolicyTemplateExecute(r ApiDestroyPolicyTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DestroyPolicyTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/policy-templates/{policyTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyTemplateId"+"}", url.PathEscape(parameterValueToString(r.policyTemplateId, "policyTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPatchPolicyTemplateRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	policyTemplateId string
	policyTemplate *PolicyTemplate
}

// A JSON representation of a Policy Template
func (r ApiPatchPolicyTemplateRequest) PolicyTemplate(policyTemplate PolicyTemplate) ApiPatchPolicyTemplateRequest {
	r.policyTemplate = &policyTemplate
	return r
}

func (r ApiPatchPolicyTemplateRequest) Execute() (*PolicyTemplate, *http.Response, error) {
	return r.ApiService.PatchPolicyTemplateExecute(r)
}

/*
PatchPolicyTemplate Patch the Policy Template for the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId A unique identifier of the Provisioning Session.
 @param policyTemplateId A resource identifier of a Policy Template.
 @return ApiPatchPolicyTemplateRequest
*/
func (a *DefaultApiService) PatchPolicyTemplate(ctx context.Context, provisioningSessionId string, policyTemplateId string) ApiPatchPolicyTemplateRequest {
	return ApiPatchPolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		policyTemplateId: policyTemplateId,
	}
}

// Execute executes the request
//  @return PolicyTemplate
func (a *DefaultApiService) PatchPolicyTemplateExecute(r ApiPatchPolicyTemplateRequest) (*PolicyTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchPolicyTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/policy-templates/{policyTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyTemplateId"+"}", url.PathEscape(parameterValueToString(r.policyTemplateId, "policyTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.policyTemplate == nil {
		return localVarReturnValue, nil, reportError("policyTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json", "application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrievePolicyTemplateRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	policyTemplateId string
}

func (r ApiRetrievePolicyTemplateRequest) Execute() (*PolicyTemplate, *http.Response, error) {
	return r.ApiService.RetrievePolicyTemplateExecute(r)
}

/*
RetrievePolicyTemplate Retrieve a representation of an existing Policy Template in the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId A unique identifier of the Provisioning Session.
 @param policyTemplateId A resource identifier of a Policy Template.
 @return ApiRetrievePolicyTemplateRequest
*/
func (a *DefaultApiService) RetrievePolicyTemplate(ctx context.Context, provisioningSessionId string, policyTemplateId string) ApiRetrievePolicyTemplateRequest {
	return ApiRetrievePolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		policyTemplateId: policyTemplateId,
	}
}

// Execute executes the request
//  @return PolicyTemplate
func (a *DefaultApiService) RetrievePolicyTemplateExecute(r ApiRetrievePolicyTemplateRequest) (*PolicyTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RetrievePolicyTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/policy-templates/{policyTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyTemplateId"+"}", url.PathEscape(parameterValueToString(r.policyTemplateId, "policyTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePolicyTemplateRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	policyTemplateId string
	policyTemplate *PolicyTemplate
}

// A JSON representation of a Policy Template
func (r ApiUpdatePolicyTemplateRequest) PolicyTemplate(policyTemplate PolicyTemplate) ApiUpdatePolicyTemplateRequest {
	r.policyTemplate = &policyTemplate
	return r
}

func (r ApiUpdatePolicyTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePolicyTemplateExecute(r)
}

/*
UpdatePolicyTemplate Update a Policy Template for the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId A unique identifier of the Provisioning Session.
 @param policyTemplateId A resource identifier of a Policy Template.
 @return ApiUpdatePolicyTemplateRequest
*/
func (a *DefaultApiService) UpdatePolicyTemplate(ctx context.Context, provisioningSessionId string, policyTemplateId string) ApiUpdatePolicyTemplateRequest {
	return ApiUpdatePolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		policyTemplateId: policyTemplateId,
	}
}

// Execute executes the request
func (a *DefaultApiService) UpdatePolicyTemplateExecute(r ApiUpdatePolicyTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdatePolicyTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/policy-templates/{policyTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyTemplateId"+"}", url.PathEscape(parameterValueToString(r.policyTemplateId, "policyTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.policyTemplate == nil {
		return nil, reportError("policyTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
