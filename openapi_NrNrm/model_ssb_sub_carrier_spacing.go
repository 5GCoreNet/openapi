/*
NR NRM

OAS 3.0.1 specification of the NR NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NrNrm

import (
	"encoding/json"
	"fmt"
)

// SsbSubCarrierSpacing the model 'SsbSubCarrierSpacing'
type SsbSubCarrierSpacing int32

// List of SsbSubCarrierSpacing
const (
	_15  SsbSubCarrierSpacing = 15
	_30  SsbSubCarrierSpacing = 30
	_120 SsbSubCarrierSpacing = 120
	_240 SsbSubCarrierSpacing = 240
)

// All allowed values of SsbSubCarrierSpacing enum
var AllowedSsbSubCarrierSpacingEnumValues = []SsbSubCarrierSpacing{
	15,
	30,
	120,
	240,
}

func (v *SsbSubCarrierSpacing) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SsbSubCarrierSpacing(value)
	for _, existing := range AllowedSsbSubCarrierSpacingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SsbSubCarrierSpacing", value)
}

// NewSsbSubCarrierSpacingFromValue returns a pointer to a valid SsbSubCarrierSpacing
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSsbSubCarrierSpacingFromValue(v int32) (*SsbSubCarrierSpacing, error) {
	ev := SsbSubCarrierSpacing(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SsbSubCarrierSpacing: valid values are %v", v, AllowedSsbSubCarrierSpacingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SsbSubCarrierSpacing) IsValid() bool {
	for _, existing := range AllowedSsbSubCarrierSpacingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SsbSubCarrierSpacing value
func (v SsbSubCarrierSpacing) Ptr() *SsbSubCarrierSpacing {
	return &v
}

type NullableSsbSubCarrierSpacing struct {
	value *SsbSubCarrierSpacing
	isSet bool
}

func (v NullableSsbSubCarrierSpacing) Get() *SsbSubCarrierSpacing {
	return v.value
}

func (v *NullableSsbSubCarrierSpacing) Set(val *SsbSubCarrierSpacing) {
	v.value = val
	v.isSet = true
}

func (v NullableSsbSubCarrierSpacing) IsSet() bool {
	return v.isSet
}

func (v *NullableSsbSubCarrierSpacing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsbSubCarrierSpacing(val *SsbSubCarrierSpacing) *NullableSsbSubCarrierSpacing {
	return &NullableSsbSubCarrierSpacing{value: val, isSet: true}
}

func (v NullableSsbSubCarrierSpacing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsbSubCarrierSpacing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
