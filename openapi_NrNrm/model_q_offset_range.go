/*
NR NRM

OAS 3.0.1 specification of the NR NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NrNrm

import (
	"encoding/json"
	"fmt"
)

// QOffsetRange the model 'QOffsetRange'
type QOffsetRange int32

// List of QOffsetRange
const (
	_MINUS_24 QOffsetRange = -24
	_MINUS_22 QOffsetRange = -22
	_MINUS_20 QOffsetRange = -20
	_MINUS_18 QOffsetRange = -18
	_MINUS_16 QOffsetRange = -16
	_MINUS_14 QOffsetRange = -14
	_MINUS_12 QOffsetRange = -12
	_MINUS_10 QOffsetRange = -10
	_MINUS_8  QOffsetRange = -8
	_MINUS_6  QOffsetRange = -6
	_MINUS_5  QOffsetRange = -5
	_MINUS_4  QOffsetRange = -4
	_MINUS_3  QOffsetRange = -3
	_MINUS_2  QOffsetRange = -2
	_MINUS_1  QOffsetRange = -1
	_0        QOffsetRange = 0
	_24       QOffsetRange = 24
	_22       QOffsetRange = 22
	_20       QOffsetRange = 20
	_18       QOffsetRange = 18
	_16       QOffsetRange = 16
	_14       QOffsetRange = 14
	_12       QOffsetRange = 12
	_10       QOffsetRange = 10
	_8        QOffsetRange = 8
	_6        QOffsetRange = 6
	_5        QOffsetRange = 5
	_4        QOffsetRange = 4
	_3        QOffsetRange = 3
	_2        QOffsetRange = 2
	_1        QOffsetRange = 1
)

// All allowed values of QOffsetRange enum
var AllowedQOffsetRangeEnumValues = []QOffsetRange{
	-24,
	-22,
	-20,
	-18,
	-16,
	-14,
	-12,
	-10,
	-8,
	-6,
	-5,
	-4,
	-3,
	-2,
	-1,
	0,
	24,
	22,
	20,
	18,
	16,
	14,
	12,
	10,
	8,
	6,
	5,
	4,
	3,
	2,
	1,
}

func (v *QOffsetRange) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QOffsetRange(value)
	for _, existing := range AllowedQOffsetRangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QOffsetRange", value)
}

// NewQOffsetRangeFromValue returns a pointer to a valid QOffsetRange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQOffsetRangeFromValue(v int32) (*QOffsetRange, error) {
	ev := QOffsetRange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QOffsetRange: valid values are %v", v, AllowedQOffsetRangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QOffsetRange) IsValid() bool {
	for _, existing := range AllowedQOffsetRangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QOffsetRange value
func (v QOffsetRange) Ptr() *QOffsetRange {
	return &v
}

type NullableQOffsetRange struct {
	value *QOffsetRange
	isSet bool
}

func (v NullableQOffsetRange) Get() *QOffsetRange {
	return v.value
}

func (v *NullableQOffsetRange) Set(val *QOffsetRange) {
	v.value = val
	v.isSet = true
}

func (v NullableQOffsetRange) IsSet() bool {
	return v.isSet
}

func (v *NullableQOffsetRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQOffsetRange(val *QOffsetRange) *NullableQOffsetRange {
	return &NullableQOffsetRange{value: val, isSet: true}
}

func (v NullableQOffsetRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQOffsetRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
