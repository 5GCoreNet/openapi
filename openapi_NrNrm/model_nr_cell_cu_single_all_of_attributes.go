/*
NR NRM

OAS 3.0.1 specification of the NR NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NrNrm

import (
	"encoding/json"
)

// checks if the NrCellCuSingleAllOfAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NrCellCuSingleAllOfAttributes{}

// NrCellCuSingleAllOfAttributes struct for NrCellCuSingleAllOfAttributes
type NrCellCuSingleAllOfAttributes struct {
	ManagedFunctionAttr
	CellLocalId    *int32     `json:"cellLocalId,omitempty"`
	PlmnInfoList   []PlmnInfo `json:"plmnInfoList,omitempty"`
	NRFrequencyRef *string    `json:"nRFrequencyRef,omitempty"`
}

// NewNrCellCuSingleAllOfAttributes instantiates a new NrCellCuSingleAllOfAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNrCellCuSingleAllOfAttributes() *NrCellCuSingleAllOfAttributes {
	this := NrCellCuSingleAllOfAttributes{}
	return &this
}

// NewNrCellCuSingleAllOfAttributesWithDefaults instantiates a new NrCellCuSingleAllOfAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNrCellCuSingleAllOfAttributesWithDefaults() *NrCellCuSingleAllOfAttributes {
	this := NrCellCuSingleAllOfAttributes{}
	return &this
}

// GetCellLocalId returns the CellLocalId field value if set, zero value otherwise.
func (o *NrCellCuSingleAllOfAttributes) GetCellLocalId() int32 {
	if o == nil || IsNil(o.CellLocalId) {
		var ret int32
		return ret
	}
	return *o.CellLocalId
}

// GetCellLocalIdOk returns a tuple with the CellLocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellCuSingleAllOfAttributes) GetCellLocalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CellLocalId) {
		return nil, false
	}
	return o.CellLocalId, true
}

// HasCellLocalId returns a boolean if a field has been set.
func (o *NrCellCuSingleAllOfAttributes) HasCellLocalId() bool {
	if o != nil && !IsNil(o.CellLocalId) {
		return true
	}

	return false
}

// SetCellLocalId gets a reference to the given int32 and assigns it to the CellLocalId field.
func (o *NrCellCuSingleAllOfAttributes) SetCellLocalId(v int32) {
	o.CellLocalId = &v
}

// GetPlmnInfoList returns the PlmnInfoList field value if set, zero value otherwise.
func (o *NrCellCuSingleAllOfAttributes) GetPlmnInfoList() []PlmnInfo {
	if o == nil || IsNil(o.PlmnInfoList) {
		var ret []PlmnInfo
		return ret
	}
	return o.PlmnInfoList
}

// GetPlmnInfoListOk returns a tuple with the PlmnInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellCuSingleAllOfAttributes) GetPlmnInfoListOk() ([]PlmnInfo, bool) {
	if o == nil || IsNil(o.PlmnInfoList) {
		return nil, false
	}
	return o.PlmnInfoList, true
}

// HasPlmnInfoList returns a boolean if a field has been set.
func (o *NrCellCuSingleAllOfAttributes) HasPlmnInfoList() bool {
	if o != nil && !IsNil(o.PlmnInfoList) {
		return true
	}

	return false
}

// SetPlmnInfoList gets a reference to the given []PlmnInfo and assigns it to the PlmnInfoList field.
func (o *NrCellCuSingleAllOfAttributes) SetPlmnInfoList(v []PlmnInfo) {
	o.PlmnInfoList = v
}

// GetNRFrequencyRef returns the NRFrequencyRef field value if set, zero value otherwise.
func (o *NrCellCuSingleAllOfAttributes) GetNRFrequencyRef() string {
	if o == nil || IsNil(o.NRFrequencyRef) {
		var ret string
		return ret
	}
	return *o.NRFrequencyRef
}

// GetNRFrequencyRefOk returns a tuple with the NRFrequencyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellCuSingleAllOfAttributes) GetNRFrequencyRefOk() (*string, bool) {
	if o == nil || IsNil(o.NRFrequencyRef) {
		return nil, false
	}
	return o.NRFrequencyRef, true
}

// HasNRFrequencyRef returns a boolean if a field has been set.
func (o *NrCellCuSingleAllOfAttributes) HasNRFrequencyRef() bool {
	if o != nil && !IsNil(o.NRFrequencyRef) {
		return true
	}

	return false
}

// SetNRFrequencyRef gets a reference to the given string and assigns it to the NRFrequencyRef field.
func (o *NrCellCuSingleAllOfAttributes) SetNRFrequencyRef(v string) {
	o.NRFrequencyRef = &v
}

func (o NrCellCuSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NrCellCuSingleAllOfAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedManagedFunctionAttr, errManagedFunctionAttr := json.Marshal(o.ManagedFunctionAttr)
	if errManagedFunctionAttr != nil {
		return map[string]interface{}{}, errManagedFunctionAttr
	}
	errManagedFunctionAttr = json.Unmarshal([]byte(serializedManagedFunctionAttr), &toSerialize)
	if errManagedFunctionAttr != nil {
		return map[string]interface{}{}, errManagedFunctionAttr
	}
	if !IsNil(o.CellLocalId) {
		toSerialize["cellLocalId"] = o.CellLocalId
	}
	if !IsNil(o.PlmnInfoList) {
		toSerialize["plmnInfoList"] = o.PlmnInfoList
	}
	if !IsNil(o.NRFrequencyRef) {
		toSerialize["nRFrequencyRef"] = o.NRFrequencyRef
	}
	return toSerialize, nil
}

type NullableNrCellCuSingleAllOfAttributes struct {
	value *NrCellCuSingleAllOfAttributes
	isSet bool
}

func (v NullableNrCellCuSingleAllOfAttributes) Get() *NrCellCuSingleAllOfAttributes {
	return v.value
}

func (v *NullableNrCellCuSingleAllOfAttributes) Set(val *NrCellCuSingleAllOfAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableNrCellCuSingleAllOfAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableNrCellCuSingleAllOfAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNrCellCuSingleAllOfAttributes(val *NrCellCuSingleAllOfAttributes) *NullableNrCellCuSingleAllOfAttributes {
	return &NullableNrCellCuSingleAllOfAttributes{value: val, isSet: true}
}

func (v NullableNrCellCuSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNrCellCuSingleAllOfAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
