/*
NR NRM

OAS 3.0.1 specification of the NR NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NrNrm

import (
	"encoding/json"
	"fmt"
)

// RSSetType the model 'RSSetType'
type RSSetType string

// List of RSSetType
const (
	RS1 RSSetType = "RS1"
	RS2 RSSetType = "RS2"
)

// All allowed values of RSSetType enum
var AllowedRSSetTypeEnumValues = []RSSetType{
	"RS1",
	"RS2",
}

func (v *RSSetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RSSetType(value)
	for _, existing := range AllowedRSSetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RSSetType", value)
}

// NewRSSetTypeFromValue returns a pointer to a valid RSSetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRSSetTypeFromValue(v string) (*RSSetType, error) {
	ev := RSSetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RSSetType: valid values are %v", v, AllowedRSSetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RSSetType) IsValid() bool {
	for _, existing := range AllowedRSSetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RSSetType value
func (v RSSetType) Ptr() *RSSetType {
	return &v
}

type NullableRSSetType struct {
	value *RSSetType
	isSet bool
}

func (v NullableRSSetType) Get() *RSSetType {
	return v.value
}

func (v *NullableRSSetType) Set(val *RSSetType) {
	v.value = val
	v.isSet = true
}

func (v NullableRSSetType) IsSet() bool {
	return v.isSet
}

func (v *NullableRSSetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRSSetType(val *RSSetType) *NullableRSSetType {
	return &NullableRSSetType{value: val, isSet: true}
}

func (v NullableRSSetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRSSetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
