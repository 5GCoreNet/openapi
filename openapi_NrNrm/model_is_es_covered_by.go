/*
NR NRM

OAS 3.0.1 specification of the NR NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NrNrm

import (
	"encoding/json"
	"fmt"
)

// IsESCoveredBy the model 'IsESCoveredBy'
type IsESCoveredBy string

// List of IsESCoveredBy
const (
	FALSE IsESCoveredBy = "false"
	PARTIAL IsESCoveredBy = "PARTIAL"
	FULL IsESCoveredBy = "FULL"
)

// All allowed values of IsESCoveredBy enum
var AllowedIsESCoveredByEnumValues = []IsESCoveredBy{
	"false",
	"PARTIAL",
	"FULL",
}

func (v *IsESCoveredBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IsESCoveredBy(value)
	for _, existing := range AllowedIsESCoveredByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IsESCoveredBy", value)
}

// NewIsESCoveredByFromValue returns a pointer to a valid IsESCoveredBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIsESCoveredByFromValue(v string) (*IsESCoveredBy, error) {
	ev := IsESCoveredBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IsESCoveredBy: valid values are %v", v, AllowedIsESCoveredByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IsESCoveredBy) IsValid() bool {
	for _, existing := range AllowedIsESCoveredByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IsESCoveredBy value
func (v IsESCoveredBy) Ptr() *IsESCoveredBy {
	return &v
}

type NullableIsESCoveredBy struct {
	value *IsESCoveredBy
	isSet bool
}

func (v NullableIsESCoveredBy) Get() *IsESCoveredBy {
	return v.value
}

func (v *NullableIsESCoveredBy) Set(val *IsESCoveredBy) {
	v.value = val
	v.isSet = true
}

func (v NullableIsESCoveredBy) IsSet() bool {
	return v.isSet
}

func (v *NullableIsESCoveredBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsESCoveredBy(val *IsESCoveredBy) *NullableIsESCoveredBy {
	return &NullableIsESCoveredBy{value: val, isSet: true}
}

func (v NullableIsESCoveredBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsESCoveredBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

