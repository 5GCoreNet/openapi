/*
NR NRM

OAS 3.0.1 specification of the NR NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NrNrm

import (
	"encoding/json"
)

// checks if the FrequencyDomainPara type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrequencyDomainPara{}

// FrequencyDomainPara struct for FrequencyDomainPara
type FrequencyDomainPara struct {
	RimRSSubcarrierSpacing *int32 `json:"rimRSSubcarrierSpacing,omitempty"`
	RIMRSBandwidth *int32 `json:"rIMRSBandwidth,omitempty"`
	NrofGlobalRIMRSFrequencyCandidates *int32 `json:"nrofGlobalRIMRSFrequencyCandidates,omitempty"`
	RimRSCommonCarrierReferencePoint *int32 `json:"rimRSCommonCarrierReferencePoint,omitempty"`
	RimRSStartingFrequencyOffsetIdList []int32 `json:"rimRSStartingFrequencyOffsetIdList,omitempty"`
}

// NewFrequencyDomainPara instantiates a new FrequencyDomainPara object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrequencyDomainPara() *FrequencyDomainPara {
	this := FrequencyDomainPara{}
	return &this
}

// NewFrequencyDomainParaWithDefaults instantiates a new FrequencyDomainPara object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrequencyDomainParaWithDefaults() *FrequencyDomainPara {
	this := FrequencyDomainPara{}
	return &this
}

// GetRimRSSubcarrierSpacing returns the RimRSSubcarrierSpacing field value if set, zero value otherwise.
func (o *FrequencyDomainPara) GetRimRSSubcarrierSpacing() int32 {
	if o == nil || isNil(o.RimRSSubcarrierSpacing) {
		var ret int32
		return ret
	}
	return *o.RimRSSubcarrierSpacing
}

// GetRimRSSubcarrierSpacingOk returns a tuple with the RimRSSubcarrierSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrequencyDomainPara) GetRimRSSubcarrierSpacingOk() (*int32, bool) {
	if o == nil || isNil(o.RimRSSubcarrierSpacing) {
		return nil, false
	}
	return o.RimRSSubcarrierSpacing, true
}

// HasRimRSSubcarrierSpacing returns a boolean if a field has been set.
func (o *FrequencyDomainPara) HasRimRSSubcarrierSpacing() bool {
	if o != nil && !isNil(o.RimRSSubcarrierSpacing) {
		return true
	}

	return false
}

// SetRimRSSubcarrierSpacing gets a reference to the given int32 and assigns it to the RimRSSubcarrierSpacing field.
func (o *FrequencyDomainPara) SetRimRSSubcarrierSpacing(v int32) {
	o.RimRSSubcarrierSpacing = &v
}

// GetRIMRSBandwidth returns the RIMRSBandwidth field value if set, zero value otherwise.
func (o *FrequencyDomainPara) GetRIMRSBandwidth() int32 {
	if o == nil || isNil(o.RIMRSBandwidth) {
		var ret int32
		return ret
	}
	return *o.RIMRSBandwidth
}

// GetRIMRSBandwidthOk returns a tuple with the RIMRSBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrequencyDomainPara) GetRIMRSBandwidthOk() (*int32, bool) {
	if o == nil || isNil(o.RIMRSBandwidth) {
		return nil, false
	}
	return o.RIMRSBandwidth, true
}

// HasRIMRSBandwidth returns a boolean if a field has been set.
func (o *FrequencyDomainPara) HasRIMRSBandwidth() bool {
	if o != nil && !isNil(o.RIMRSBandwidth) {
		return true
	}

	return false
}

// SetRIMRSBandwidth gets a reference to the given int32 and assigns it to the RIMRSBandwidth field.
func (o *FrequencyDomainPara) SetRIMRSBandwidth(v int32) {
	o.RIMRSBandwidth = &v
}

// GetNrofGlobalRIMRSFrequencyCandidates returns the NrofGlobalRIMRSFrequencyCandidates field value if set, zero value otherwise.
func (o *FrequencyDomainPara) GetNrofGlobalRIMRSFrequencyCandidates() int32 {
	if o == nil || isNil(o.NrofGlobalRIMRSFrequencyCandidates) {
		var ret int32
		return ret
	}
	return *o.NrofGlobalRIMRSFrequencyCandidates
}

// GetNrofGlobalRIMRSFrequencyCandidatesOk returns a tuple with the NrofGlobalRIMRSFrequencyCandidates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrequencyDomainPara) GetNrofGlobalRIMRSFrequencyCandidatesOk() (*int32, bool) {
	if o == nil || isNil(o.NrofGlobalRIMRSFrequencyCandidates) {
		return nil, false
	}
	return o.NrofGlobalRIMRSFrequencyCandidates, true
}

// HasNrofGlobalRIMRSFrequencyCandidates returns a boolean if a field has been set.
func (o *FrequencyDomainPara) HasNrofGlobalRIMRSFrequencyCandidates() bool {
	if o != nil && !isNil(o.NrofGlobalRIMRSFrequencyCandidates) {
		return true
	}

	return false
}

// SetNrofGlobalRIMRSFrequencyCandidates gets a reference to the given int32 and assigns it to the NrofGlobalRIMRSFrequencyCandidates field.
func (o *FrequencyDomainPara) SetNrofGlobalRIMRSFrequencyCandidates(v int32) {
	o.NrofGlobalRIMRSFrequencyCandidates = &v
}

// GetRimRSCommonCarrierReferencePoint returns the RimRSCommonCarrierReferencePoint field value if set, zero value otherwise.
func (o *FrequencyDomainPara) GetRimRSCommonCarrierReferencePoint() int32 {
	if o == nil || isNil(o.RimRSCommonCarrierReferencePoint) {
		var ret int32
		return ret
	}
	return *o.RimRSCommonCarrierReferencePoint
}

// GetRimRSCommonCarrierReferencePointOk returns a tuple with the RimRSCommonCarrierReferencePoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrequencyDomainPara) GetRimRSCommonCarrierReferencePointOk() (*int32, bool) {
	if o == nil || isNil(o.RimRSCommonCarrierReferencePoint) {
		return nil, false
	}
	return o.RimRSCommonCarrierReferencePoint, true
}

// HasRimRSCommonCarrierReferencePoint returns a boolean if a field has been set.
func (o *FrequencyDomainPara) HasRimRSCommonCarrierReferencePoint() bool {
	if o != nil && !isNil(o.RimRSCommonCarrierReferencePoint) {
		return true
	}

	return false
}

// SetRimRSCommonCarrierReferencePoint gets a reference to the given int32 and assigns it to the RimRSCommonCarrierReferencePoint field.
func (o *FrequencyDomainPara) SetRimRSCommonCarrierReferencePoint(v int32) {
	o.RimRSCommonCarrierReferencePoint = &v
}

// GetRimRSStartingFrequencyOffsetIdList returns the RimRSStartingFrequencyOffsetIdList field value if set, zero value otherwise.
func (o *FrequencyDomainPara) GetRimRSStartingFrequencyOffsetIdList() []int32 {
	if o == nil || isNil(o.RimRSStartingFrequencyOffsetIdList) {
		var ret []int32
		return ret
	}
	return o.RimRSStartingFrequencyOffsetIdList
}

// GetRimRSStartingFrequencyOffsetIdListOk returns a tuple with the RimRSStartingFrequencyOffsetIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrequencyDomainPara) GetRimRSStartingFrequencyOffsetIdListOk() ([]int32, bool) {
	if o == nil || isNil(o.RimRSStartingFrequencyOffsetIdList) {
		return nil, false
	}
	return o.RimRSStartingFrequencyOffsetIdList, true
}

// HasRimRSStartingFrequencyOffsetIdList returns a boolean if a field has been set.
func (o *FrequencyDomainPara) HasRimRSStartingFrequencyOffsetIdList() bool {
	if o != nil && !isNil(o.RimRSStartingFrequencyOffsetIdList) {
		return true
	}

	return false
}

// SetRimRSStartingFrequencyOffsetIdList gets a reference to the given []int32 and assigns it to the RimRSStartingFrequencyOffsetIdList field.
func (o *FrequencyDomainPara) SetRimRSStartingFrequencyOffsetIdList(v []int32) {
	o.RimRSStartingFrequencyOffsetIdList = v
}

func (o FrequencyDomainPara) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrequencyDomainPara) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RimRSSubcarrierSpacing) {
		toSerialize["rimRSSubcarrierSpacing"] = o.RimRSSubcarrierSpacing
	}
	if !isNil(o.RIMRSBandwidth) {
		toSerialize["rIMRSBandwidth"] = o.RIMRSBandwidth
	}
	if !isNil(o.NrofGlobalRIMRSFrequencyCandidates) {
		toSerialize["nrofGlobalRIMRSFrequencyCandidates"] = o.NrofGlobalRIMRSFrequencyCandidates
	}
	if !isNil(o.RimRSCommonCarrierReferencePoint) {
		toSerialize["rimRSCommonCarrierReferencePoint"] = o.RimRSCommonCarrierReferencePoint
	}
	if !isNil(o.RimRSStartingFrequencyOffsetIdList) {
		toSerialize["rimRSStartingFrequencyOffsetIdList"] = o.RimRSStartingFrequencyOffsetIdList
	}
	return toSerialize, nil
}

type NullableFrequencyDomainPara struct {
	value *FrequencyDomainPara
	isSet bool
}

func (v NullableFrequencyDomainPara) Get() *FrequencyDomainPara {
	return v.value
}

func (v *NullableFrequencyDomainPara) Set(val *FrequencyDomainPara) {
	v.value = val
	v.isSet = true
}

func (v NullableFrequencyDomainPara) IsSet() bool {
	return v.isSet
}

func (v *NullableFrequencyDomainPara) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrequencyDomainPara(val *FrequencyDomainPara) *NullableFrequencyDomainPara {
	return &NullableFrequencyDomainPara{value: val, isSet: true}
}

func (v NullableFrequencyDomainPara) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrequencyDomainPara) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


