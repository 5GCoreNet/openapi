/*
NR NRM

OAS 3.0.1 specification of the NR NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NrNrm

import (
	"encoding/json"
)

// checks if the NrCellDuSingleAllOfAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NrCellDuSingleAllOfAttributes{}

// NrCellDuSingleAllOfAttributes struct for NrCellDuSingleAllOfAttributes
type NrCellDuSingleAllOfAttributes struct {
	UserLabel *string `json:"userLabel,omitempty"`
	VnfParametersList []VnfParameter `json:"vnfParametersList,omitempty"`
	PeeParametersList []PeeParameter `json:"peeParametersList,omitempty"`
	PriorityLabel *int32 `json:"priorityLabel,omitempty"`
	SupportedPerfMetricGroups []SupportedPerfMetricGroup `json:"supportedPerfMetricGroups,omitempty"`
	SupportedTraceMetrics []string `json:"supportedTraceMetrics,omitempty"`
	AdministrativeState *AdministrativeState `json:"administrativeState,omitempty"`
	OperationalState *OperationalState `json:"operationalState,omitempty"`
	CellLocalId *int32 `json:"cellLocalId,omitempty"`
	CellState *CellState `json:"cellState,omitempty"`
	PlmnInfoList []PlmnInfo `json:"plmnInfoList,omitempty"`
	NpnIdentityList []NpnIdentity `json:"npnIdentityList,omitempty"`
	NrPci *int32 `json:"nrPci,omitempty"`
	NrTac *int32 `json:"nrTac,omitempty"`
	ArfcnDL *int32 `json:"arfcnDL,omitempty"`
	ArfcnUL *int32 `json:"arfcnUL,omitempty"`
	ArfcnSUL *int32 `json:"arfcnSUL,omitempty"`
	BSChannelBwDL *int32 `json:"bSChannelBwDL,omitempty"`
	BSChannelBwUL *int32 `json:"bSChannelBwUL,omitempty"`
	BSChannelBwSUL *int32 `json:"bSChannelBwSUL,omitempty"`
	SsbFrequency *int32 `json:"ssbFrequency,omitempty"`
	SsbPeriodicity *SsbPeriodicity `json:"ssbPeriodicity,omitempty"`
	SsbSubCarrierSpacing *SsbSubCarrierSpacing `json:"ssbSubCarrierSpacing,omitempty"`
	SsbOffset *int32 `json:"ssbOffset,omitempty"`
	SsbDuration *SsbDuration `json:"ssbDuration,omitempty"`
	NrSectorCarrierRef []string `json:"nrSectorCarrierRef,omitempty"`
	// Condition is BWP sets are not supported
	BwpRef []string `json:"bwpRef,omitempty"`
	BwpSetRef []string `json:"bwpSetRef,omitempty"`
	RimRSMonitoringStartTime *string `json:"rimRSMonitoringStartTime,omitempty"`
	RimRSMonitoringStopTime *string `json:"rimRSMonitoringStopTime,omitempty"`
	RimRSMonitoringWindowDuration *int32 `json:"rimRSMonitoringWindowDuration,omitempty"`
	RimRSMonitoringWindowStartingOffset *int32 `json:"rimRSMonitoringWindowStartingOffset,omitempty"`
	RimRSMonitoringWindowPeriodicity *int32 `json:"rimRSMonitoringWindowPeriodicity,omitempty"`
	RimRSMonitoringOccasionInterval *int32 `json:"rimRSMonitoringOccasionInterval,omitempty"`
	RimRSMonitoringOccasionStartingOffset *int32 `json:"rimRSMonitoringOccasionStartingOffset,omitempty"`
	NRFrequencyRef *string `json:"nRFrequencyRef,omitempty"`
	VictimSetRef *string `json:"victimSetRef,omitempty"`
	AggressorSetRef *string `json:"aggressorSetRef,omitempty"`
}

// NewNrCellDuSingleAllOfAttributes instantiates a new NrCellDuSingleAllOfAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNrCellDuSingleAllOfAttributes() *NrCellDuSingleAllOfAttributes {
	this := NrCellDuSingleAllOfAttributes{}
	return &this
}

// NewNrCellDuSingleAllOfAttributesWithDefaults instantiates a new NrCellDuSingleAllOfAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNrCellDuSingleAllOfAttributesWithDefaults() *NrCellDuSingleAllOfAttributes {
	this := NrCellDuSingleAllOfAttributes{}
	return &this
}

// GetUserLabel returns the UserLabel field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetUserLabel() string {
	if o == nil || IsNil(o.UserLabel) {
		var ret string
		return ret
	}
	return *o.UserLabel
}

// GetUserLabelOk returns a tuple with the UserLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetUserLabelOk() (*string, bool) {
	if o == nil || IsNil(o.UserLabel) {
		return nil, false
	}
	return o.UserLabel, true
}

// HasUserLabel returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasUserLabel() bool {
	if o != nil && !IsNil(o.UserLabel) {
		return true
	}

	return false
}

// SetUserLabel gets a reference to the given string and assigns it to the UserLabel field.
func (o *NrCellDuSingleAllOfAttributes) SetUserLabel(v string) {
	o.UserLabel = &v
}

// GetVnfParametersList returns the VnfParametersList field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetVnfParametersList() []VnfParameter {
	if o == nil || IsNil(o.VnfParametersList) {
		var ret []VnfParameter
		return ret
	}
	return o.VnfParametersList
}

// GetVnfParametersListOk returns a tuple with the VnfParametersList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetVnfParametersListOk() ([]VnfParameter, bool) {
	if o == nil || IsNil(o.VnfParametersList) {
		return nil, false
	}
	return o.VnfParametersList, true
}

// HasVnfParametersList returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasVnfParametersList() bool {
	if o != nil && !IsNil(o.VnfParametersList) {
		return true
	}

	return false
}

// SetVnfParametersList gets a reference to the given []VnfParameter and assigns it to the VnfParametersList field.
func (o *NrCellDuSingleAllOfAttributes) SetVnfParametersList(v []VnfParameter) {
	o.VnfParametersList = v
}

// GetPeeParametersList returns the PeeParametersList field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetPeeParametersList() []PeeParameter {
	if o == nil || IsNil(o.PeeParametersList) {
		var ret []PeeParameter
		return ret
	}
	return o.PeeParametersList
}

// GetPeeParametersListOk returns a tuple with the PeeParametersList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetPeeParametersListOk() ([]PeeParameter, bool) {
	if o == nil || IsNil(o.PeeParametersList) {
		return nil, false
	}
	return o.PeeParametersList, true
}

// HasPeeParametersList returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasPeeParametersList() bool {
	if o != nil && !IsNil(o.PeeParametersList) {
		return true
	}

	return false
}

// SetPeeParametersList gets a reference to the given []PeeParameter and assigns it to the PeeParametersList field.
func (o *NrCellDuSingleAllOfAttributes) SetPeeParametersList(v []PeeParameter) {
	o.PeeParametersList = v
}

// GetPriorityLabel returns the PriorityLabel field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetPriorityLabel() int32 {
	if o == nil || IsNil(o.PriorityLabel) {
		var ret int32
		return ret
	}
	return *o.PriorityLabel
}

// GetPriorityLabelOk returns a tuple with the PriorityLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetPriorityLabelOk() (*int32, bool) {
	if o == nil || IsNil(o.PriorityLabel) {
		return nil, false
	}
	return o.PriorityLabel, true
}

// HasPriorityLabel returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasPriorityLabel() bool {
	if o != nil && !IsNil(o.PriorityLabel) {
		return true
	}

	return false
}

// SetPriorityLabel gets a reference to the given int32 and assigns it to the PriorityLabel field.
func (o *NrCellDuSingleAllOfAttributes) SetPriorityLabel(v int32) {
	o.PriorityLabel = &v
}

// GetSupportedPerfMetricGroups returns the SupportedPerfMetricGroups field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetSupportedPerfMetricGroups() []SupportedPerfMetricGroup {
	if o == nil || IsNil(o.SupportedPerfMetricGroups) {
		var ret []SupportedPerfMetricGroup
		return ret
	}
	return o.SupportedPerfMetricGroups
}

// GetSupportedPerfMetricGroupsOk returns a tuple with the SupportedPerfMetricGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetSupportedPerfMetricGroupsOk() ([]SupportedPerfMetricGroup, bool) {
	if o == nil || IsNil(o.SupportedPerfMetricGroups) {
		return nil, false
	}
	return o.SupportedPerfMetricGroups, true
}

// HasSupportedPerfMetricGroups returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasSupportedPerfMetricGroups() bool {
	if o != nil && !IsNil(o.SupportedPerfMetricGroups) {
		return true
	}

	return false
}

// SetSupportedPerfMetricGroups gets a reference to the given []SupportedPerfMetricGroup and assigns it to the SupportedPerfMetricGroups field.
func (o *NrCellDuSingleAllOfAttributes) SetSupportedPerfMetricGroups(v []SupportedPerfMetricGroup) {
	o.SupportedPerfMetricGroups = v
}

// GetSupportedTraceMetrics returns the SupportedTraceMetrics field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetSupportedTraceMetrics() []string {
	if o == nil || IsNil(o.SupportedTraceMetrics) {
		var ret []string
		return ret
	}
	return o.SupportedTraceMetrics
}

// GetSupportedTraceMetricsOk returns a tuple with the SupportedTraceMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetSupportedTraceMetricsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedTraceMetrics) {
		return nil, false
	}
	return o.SupportedTraceMetrics, true
}

// HasSupportedTraceMetrics returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasSupportedTraceMetrics() bool {
	if o != nil && !IsNil(o.SupportedTraceMetrics) {
		return true
	}

	return false
}

// SetSupportedTraceMetrics gets a reference to the given []string and assigns it to the SupportedTraceMetrics field.
func (o *NrCellDuSingleAllOfAttributes) SetSupportedTraceMetrics(v []string) {
	o.SupportedTraceMetrics = v
}

// GetAdministrativeState returns the AdministrativeState field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetAdministrativeState() AdministrativeState {
	if o == nil || IsNil(o.AdministrativeState) {
		var ret AdministrativeState
		return ret
	}
	return *o.AdministrativeState
}

// GetAdministrativeStateOk returns a tuple with the AdministrativeState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetAdministrativeStateOk() (*AdministrativeState, bool) {
	if o == nil || IsNil(o.AdministrativeState) {
		return nil, false
	}
	return o.AdministrativeState, true
}

// HasAdministrativeState returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasAdministrativeState() bool {
	if o != nil && !IsNil(o.AdministrativeState) {
		return true
	}

	return false
}

// SetAdministrativeState gets a reference to the given AdministrativeState and assigns it to the AdministrativeState field.
func (o *NrCellDuSingleAllOfAttributes) SetAdministrativeState(v AdministrativeState) {
	o.AdministrativeState = &v
}

// GetOperationalState returns the OperationalState field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetOperationalState() OperationalState {
	if o == nil || IsNil(o.OperationalState) {
		var ret OperationalState
		return ret
	}
	return *o.OperationalState
}

// GetOperationalStateOk returns a tuple with the OperationalState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetOperationalStateOk() (*OperationalState, bool) {
	if o == nil || IsNil(o.OperationalState) {
		return nil, false
	}
	return o.OperationalState, true
}

// HasOperationalState returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasOperationalState() bool {
	if o != nil && !IsNil(o.OperationalState) {
		return true
	}

	return false
}

// SetOperationalState gets a reference to the given OperationalState and assigns it to the OperationalState field.
func (o *NrCellDuSingleAllOfAttributes) SetOperationalState(v OperationalState) {
	o.OperationalState = &v
}

// GetCellLocalId returns the CellLocalId field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetCellLocalId() int32 {
	if o == nil || IsNil(o.CellLocalId) {
		var ret int32
		return ret
	}
	return *o.CellLocalId
}

// GetCellLocalIdOk returns a tuple with the CellLocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetCellLocalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CellLocalId) {
		return nil, false
	}
	return o.CellLocalId, true
}

// HasCellLocalId returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasCellLocalId() bool {
	if o != nil && !IsNil(o.CellLocalId) {
		return true
	}

	return false
}

// SetCellLocalId gets a reference to the given int32 and assigns it to the CellLocalId field.
func (o *NrCellDuSingleAllOfAttributes) SetCellLocalId(v int32) {
	o.CellLocalId = &v
}

// GetCellState returns the CellState field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetCellState() CellState {
	if o == nil || IsNil(o.CellState) {
		var ret CellState
		return ret
	}
	return *o.CellState
}

// GetCellStateOk returns a tuple with the CellState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetCellStateOk() (*CellState, bool) {
	if o == nil || IsNil(o.CellState) {
		return nil, false
	}
	return o.CellState, true
}

// HasCellState returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasCellState() bool {
	if o != nil && !IsNil(o.CellState) {
		return true
	}

	return false
}

// SetCellState gets a reference to the given CellState and assigns it to the CellState field.
func (o *NrCellDuSingleAllOfAttributes) SetCellState(v CellState) {
	o.CellState = &v
}

// GetPlmnInfoList returns the PlmnInfoList field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetPlmnInfoList() []PlmnInfo {
	if o == nil || IsNil(o.PlmnInfoList) {
		var ret []PlmnInfo
		return ret
	}
	return o.PlmnInfoList
}

// GetPlmnInfoListOk returns a tuple with the PlmnInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetPlmnInfoListOk() ([]PlmnInfo, bool) {
	if o == nil || IsNil(o.PlmnInfoList) {
		return nil, false
	}
	return o.PlmnInfoList, true
}

// HasPlmnInfoList returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasPlmnInfoList() bool {
	if o != nil && !IsNil(o.PlmnInfoList) {
		return true
	}

	return false
}

// SetPlmnInfoList gets a reference to the given []PlmnInfo and assigns it to the PlmnInfoList field.
func (o *NrCellDuSingleAllOfAttributes) SetPlmnInfoList(v []PlmnInfo) {
	o.PlmnInfoList = v
}

// GetNpnIdentityList returns the NpnIdentityList field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetNpnIdentityList() []NpnIdentity {
	if o == nil || IsNil(o.NpnIdentityList) {
		var ret []NpnIdentity
		return ret
	}
	return o.NpnIdentityList
}

// GetNpnIdentityListOk returns a tuple with the NpnIdentityList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetNpnIdentityListOk() ([]NpnIdentity, bool) {
	if o == nil || IsNil(o.NpnIdentityList) {
		return nil, false
	}
	return o.NpnIdentityList, true
}

// HasNpnIdentityList returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasNpnIdentityList() bool {
	if o != nil && !IsNil(o.NpnIdentityList) {
		return true
	}

	return false
}

// SetNpnIdentityList gets a reference to the given []NpnIdentity and assigns it to the NpnIdentityList field.
func (o *NrCellDuSingleAllOfAttributes) SetNpnIdentityList(v []NpnIdentity) {
	o.NpnIdentityList = v
}

// GetNrPci returns the NrPci field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetNrPci() int32 {
	if o == nil || IsNil(o.NrPci) {
		var ret int32
		return ret
	}
	return *o.NrPci
}

// GetNrPciOk returns a tuple with the NrPci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetNrPciOk() (*int32, bool) {
	if o == nil || IsNil(o.NrPci) {
		return nil, false
	}
	return o.NrPci, true
}

// HasNrPci returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasNrPci() bool {
	if o != nil && !IsNil(o.NrPci) {
		return true
	}

	return false
}

// SetNrPci gets a reference to the given int32 and assigns it to the NrPci field.
func (o *NrCellDuSingleAllOfAttributes) SetNrPci(v int32) {
	o.NrPci = &v
}

// GetNrTac returns the NrTac field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetNrTac() int32 {
	if o == nil || IsNil(o.NrTac) {
		var ret int32
		return ret
	}
	return *o.NrTac
}

// GetNrTacOk returns a tuple with the NrTac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetNrTacOk() (*int32, bool) {
	if o == nil || IsNil(o.NrTac) {
		return nil, false
	}
	return o.NrTac, true
}

// HasNrTac returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasNrTac() bool {
	if o != nil && !IsNil(o.NrTac) {
		return true
	}

	return false
}

// SetNrTac gets a reference to the given int32 and assigns it to the NrTac field.
func (o *NrCellDuSingleAllOfAttributes) SetNrTac(v int32) {
	o.NrTac = &v
}

// GetArfcnDL returns the ArfcnDL field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetArfcnDL() int32 {
	if o == nil || IsNil(o.ArfcnDL) {
		var ret int32
		return ret
	}
	return *o.ArfcnDL
}

// GetArfcnDLOk returns a tuple with the ArfcnDL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetArfcnDLOk() (*int32, bool) {
	if o == nil || IsNil(o.ArfcnDL) {
		return nil, false
	}
	return o.ArfcnDL, true
}

// HasArfcnDL returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasArfcnDL() bool {
	if o != nil && !IsNil(o.ArfcnDL) {
		return true
	}

	return false
}

// SetArfcnDL gets a reference to the given int32 and assigns it to the ArfcnDL field.
func (o *NrCellDuSingleAllOfAttributes) SetArfcnDL(v int32) {
	o.ArfcnDL = &v
}

// GetArfcnUL returns the ArfcnUL field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetArfcnUL() int32 {
	if o == nil || IsNil(o.ArfcnUL) {
		var ret int32
		return ret
	}
	return *o.ArfcnUL
}

// GetArfcnULOk returns a tuple with the ArfcnUL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetArfcnULOk() (*int32, bool) {
	if o == nil || IsNil(o.ArfcnUL) {
		return nil, false
	}
	return o.ArfcnUL, true
}

// HasArfcnUL returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasArfcnUL() bool {
	if o != nil && !IsNil(o.ArfcnUL) {
		return true
	}

	return false
}

// SetArfcnUL gets a reference to the given int32 and assigns it to the ArfcnUL field.
func (o *NrCellDuSingleAllOfAttributes) SetArfcnUL(v int32) {
	o.ArfcnUL = &v
}

// GetArfcnSUL returns the ArfcnSUL field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetArfcnSUL() int32 {
	if o == nil || IsNil(o.ArfcnSUL) {
		var ret int32
		return ret
	}
	return *o.ArfcnSUL
}

// GetArfcnSULOk returns a tuple with the ArfcnSUL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetArfcnSULOk() (*int32, bool) {
	if o == nil || IsNil(o.ArfcnSUL) {
		return nil, false
	}
	return o.ArfcnSUL, true
}

// HasArfcnSUL returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasArfcnSUL() bool {
	if o != nil && !IsNil(o.ArfcnSUL) {
		return true
	}

	return false
}

// SetArfcnSUL gets a reference to the given int32 and assigns it to the ArfcnSUL field.
func (o *NrCellDuSingleAllOfAttributes) SetArfcnSUL(v int32) {
	o.ArfcnSUL = &v
}

// GetBSChannelBwDL returns the BSChannelBwDL field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetBSChannelBwDL() int32 {
	if o == nil || IsNil(o.BSChannelBwDL) {
		var ret int32
		return ret
	}
	return *o.BSChannelBwDL
}

// GetBSChannelBwDLOk returns a tuple with the BSChannelBwDL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetBSChannelBwDLOk() (*int32, bool) {
	if o == nil || IsNil(o.BSChannelBwDL) {
		return nil, false
	}
	return o.BSChannelBwDL, true
}

// HasBSChannelBwDL returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasBSChannelBwDL() bool {
	if o != nil && !IsNil(o.BSChannelBwDL) {
		return true
	}

	return false
}

// SetBSChannelBwDL gets a reference to the given int32 and assigns it to the BSChannelBwDL field.
func (o *NrCellDuSingleAllOfAttributes) SetBSChannelBwDL(v int32) {
	o.BSChannelBwDL = &v
}

// GetBSChannelBwUL returns the BSChannelBwUL field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetBSChannelBwUL() int32 {
	if o == nil || IsNil(o.BSChannelBwUL) {
		var ret int32
		return ret
	}
	return *o.BSChannelBwUL
}

// GetBSChannelBwULOk returns a tuple with the BSChannelBwUL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetBSChannelBwULOk() (*int32, bool) {
	if o == nil || IsNil(o.BSChannelBwUL) {
		return nil, false
	}
	return o.BSChannelBwUL, true
}

// HasBSChannelBwUL returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasBSChannelBwUL() bool {
	if o != nil && !IsNil(o.BSChannelBwUL) {
		return true
	}

	return false
}

// SetBSChannelBwUL gets a reference to the given int32 and assigns it to the BSChannelBwUL field.
func (o *NrCellDuSingleAllOfAttributes) SetBSChannelBwUL(v int32) {
	o.BSChannelBwUL = &v
}

// GetBSChannelBwSUL returns the BSChannelBwSUL field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetBSChannelBwSUL() int32 {
	if o == nil || IsNil(o.BSChannelBwSUL) {
		var ret int32
		return ret
	}
	return *o.BSChannelBwSUL
}

// GetBSChannelBwSULOk returns a tuple with the BSChannelBwSUL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetBSChannelBwSULOk() (*int32, bool) {
	if o == nil || IsNil(o.BSChannelBwSUL) {
		return nil, false
	}
	return o.BSChannelBwSUL, true
}

// HasBSChannelBwSUL returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasBSChannelBwSUL() bool {
	if o != nil && !IsNil(o.BSChannelBwSUL) {
		return true
	}

	return false
}

// SetBSChannelBwSUL gets a reference to the given int32 and assigns it to the BSChannelBwSUL field.
func (o *NrCellDuSingleAllOfAttributes) SetBSChannelBwSUL(v int32) {
	o.BSChannelBwSUL = &v
}

// GetSsbFrequency returns the SsbFrequency field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetSsbFrequency() int32 {
	if o == nil || IsNil(o.SsbFrequency) {
		var ret int32
		return ret
	}
	return *o.SsbFrequency
}

// GetSsbFrequencyOk returns a tuple with the SsbFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetSsbFrequencyOk() (*int32, bool) {
	if o == nil || IsNil(o.SsbFrequency) {
		return nil, false
	}
	return o.SsbFrequency, true
}

// HasSsbFrequency returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasSsbFrequency() bool {
	if o != nil && !IsNil(o.SsbFrequency) {
		return true
	}

	return false
}

// SetSsbFrequency gets a reference to the given int32 and assigns it to the SsbFrequency field.
func (o *NrCellDuSingleAllOfAttributes) SetSsbFrequency(v int32) {
	o.SsbFrequency = &v
}

// GetSsbPeriodicity returns the SsbPeriodicity field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetSsbPeriodicity() SsbPeriodicity {
	if o == nil || IsNil(o.SsbPeriodicity) {
		var ret SsbPeriodicity
		return ret
	}
	return *o.SsbPeriodicity
}

// GetSsbPeriodicityOk returns a tuple with the SsbPeriodicity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetSsbPeriodicityOk() (*SsbPeriodicity, bool) {
	if o == nil || IsNil(o.SsbPeriodicity) {
		return nil, false
	}
	return o.SsbPeriodicity, true
}

// HasSsbPeriodicity returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasSsbPeriodicity() bool {
	if o != nil && !IsNil(o.SsbPeriodicity) {
		return true
	}

	return false
}

// SetSsbPeriodicity gets a reference to the given SsbPeriodicity and assigns it to the SsbPeriodicity field.
func (o *NrCellDuSingleAllOfAttributes) SetSsbPeriodicity(v SsbPeriodicity) {
	o.SsbPeriodicity = &v
}

// GetSsbSubCarrierSpacing returns the SsbSubCarrierSpacing field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetSsbSubCarrierSpacing() SsbSubCarrierSpacing {
	if o == nil || IsNil(o.SsbSubCarrierSpacing) {
		var ret SsbSubCarrierSpacing
		return ret
	}
	return *o.SsbSubCarrierSpacing
}

// GetSsbSubCarrierSpacingOk returns a tuple with the SsbSubCarrierSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetSsbSubCarrierSpacingOk() (*SsbSubCarrierSpacing, bool) {
	if o == nil || IsNil(o.SsbSubCarrierSpacing) {
		return nil, false
	}
	return o.SsbSubCarrierSpacing, true
}

// HasSsbSubCarrierSpacing returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasSsbSubCarrierSpacing() bool {
	if o != nil && !IsNil(o.SsbSubCarrierSpacing) {
		return true
	}

	return false
}

// SetSsbSubCarrierSpacing gets a reference to the given SsbSubCarrierSpacing and assigns it to the SsbSubCarrierSpacing field.
func (o *NrCellDuSingleAllOfAttributes) SetSsbSubCarrierSpacing(v SsbSubCarrierSpacing) {
	o.SsbSubCarrierSpacing = &v
}

// GetSsbOffset returns the SsbOffset field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetSsbOffset() int32 {
	if o == nil || IsNil(o.SsbOffset) {
		var ret int32
		return ret
	}
	return *o.SsbOffset
}

// GetSsbOffsetOk returns a tuple with the SsbOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetSsbOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.SsbOffset) {
		return nil, false
	}
	return o.SsbOffset, true
}

// HasSsbOffset returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasSsbOffset() bool {
	if o != nil && !IsNil(o.SsbOffset) {
		return true
	}

	return false
}

// SetSsbOffset gets a reference to the given int32 and assigns it to the SsbOffset field.
func (o *NrCellDuSingleAllOfAttributes) SetSsbOffset(v int32) {
	o.SsbOffset = &v
}

// GetSsbDuration returns the SsbDuration field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetSsbDuration() SsbDuration {
	if o == nil || IsNil(o.SsbDuration) {
		var ret SsbDuration
		return ret
	}
	return *o.SsbDuration
}

// GetSsbDurationOk returns a tuple with the SsbDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetSsbDurationOk() (*SsbDuration, bool) {
	if o == nil || IsNil(o.SsbDuration) {
		return nil, false
	}
	return o.SsbDuration, true
}

// HasSsbDuration returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasSsbDuration() bool {
	if o != nil && !IsNil(o.SsbDuration) {
		return true
	}

	return false
}

// SetSsbDuration gets a reference to the given SsbDuration and assigns it to the SsbDuration field.
func (o *NrCellDuSingleAllOfAttributes) SetSsbDuration(v SsbDuration) {
	o.SsbDuration = &v
}

// GetNrSectorCarrierRef returns the NrSectorCarrierRef field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetNrSectorCarrierRef() []string {
	if o == nil || IsNil(o.NrSectorCarrierRef) {
		var ret []string
		return ret
	}
	return o.NrSectorCarrierRef
}

// GetNrSectorCarrierRefOk returns a tuple with the NrSectorCarrierRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetNrSectorCarrierRefOk() ([]string, bool) {
	if o == nil || IsNil(o.NrSectorCarrierRef) {
		return nil, false
	}
	return o.NrSectorCarrierRef, true
}

// HasNrSectorCarrierRef returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasNrSectorCarrierRef() bool {
	if o != nil && !IsNil(o.NrSectorCarrierRef) {
		return true
	}

	return false
}

// SetNrSectorCarrierRef gets a reference to the given []string and assigns it to the NrSectorCarrierRef field.
func (o *NrCellDuSingleAllOfAttributes) SetNrSectorCarrierRef(v []string) {
	o.NrSectorCarrierRef = v
}

// GetBwpRef returns the BwpRef field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetBwpRef() []string {
	if o == nil || IsNil(o.BwpRef) {
		var ret []string
		return ret
	}
	return o.BwpRef
}

// GetBwpRefOk returns a tuple with the BwpRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetBwpRefOk() ([]string, bool) {
	if o == nil || IsNil(o.BwpRef) {
		return nil, false
	}
	return o.BwpRef, true
}

// HasBwpRef returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasBwpRef() bool {
	if o != nil && !IsNil(o.BwpRef) {
		return true
	}

	return false
}

// SetBwpRef gets a reference to the given []string and assigns it to the BwpRef field.
func (o *NrCellDuSingleAllOfAttributes) SetBwpRef(v []string) {
	o.BwpRef = v
}

// GetBwpSetRef returns the BwpSetRef field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetBwpSetRef() []string {
	if o == nil || IsNil(o.BwpSetRef) {
		var ret []string
		return ret
	}
	return o.BwpSetRef
}

// GetBwpSetRefOk returns a tuple with the BwpSetRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetBwpSetRefOk() ([]string, bool) {
	if o == nil || IsNil(o.BwpSetRef) {
		return nil, false
	}
	return o.BwpSetRef, true
}

// HasBwpSetRef returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasBwpSetRef() bool {
	if o != nil && !IsNil(o.BwpSetRef) {
		return true
	}

	return false
}

// SetBwpSetRef gets a reference to the given []string and assigns it to the BwpSetRef field.
func (o *NrCellDuSingleAllOfAttributes) SetBwpSetRef(v []string) {
	o.BwpSetRef = v
}

// GetRimRSMonitoringStartTime returns the RimRSMonitoringStartTime field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringStartTime() string {
	if o == nil || IsNil(o.RimRSMonitoringStartTime) {
		var ret string
		return ret
	}
	return *o.RimRSMonitoringStartTime
}

// GetRimRSMonitoringStartTimeOk returns a tuple with the RimRSMonitoringStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.RimRSMonitoringStartTime) {
		return nil, false
	}
	return o.RimRSMonitoringStartTime, true
}

// HasRimRSMonitoringStartTime returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasRimRSMonitoringStartTime() bool {
	if o != nil && !IsNil(o.RimRSMonitoringStartTime) {
		return true
	}

	return false
}

// SetRimRSMonitoringStartTime gets a reference to the given string and assigns it to the RimRSMonitoringStartTime field.
func (o *NrCellDuSingleAllOfAttributes) SetRimRSMonitoringStartTime(v string) {
	o.RimRSMonitoringStartTime = &v
}

// GetRimRSMonitoringStopTime returns the RimRSMonitoringStopTime field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringStopTime() string {
	if o == nil || IsNil(o.RimRSMonitoringStopTime) {
		var ret string
		return ret
	}
	return *o.RimRSMonitoringStopTime
}

// GetRimRSMonitoringStopTimeOk returns a tuple with the RimRSMonitoringStopTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringStopTimeOk() (*string, bool) {
	if o == nil || IsNil(o.RimRSMonitoringStopTime) {
		return nil, false
	}
	return o.RimRSMonitoringStopTime, true
}

// HasRimRSMonitoringStopTime returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasRimRSMonitoringStopTime() bool {
	if o != nil && !IsNil(o.RimRSMonitoringStopTime) {
		return true
	}

	return false
}

// SetRimRSMonitoringStopTime gets a reference to the given string and assigns it to the RimRSMonitoringStopTime field.
func (o *NrCellDuSingleAllOfAttributes) SetRimRSMonitoringStopTime(v string) {
	o.RimRSMonitoringStopTime = &v
}

// GetRimRSMonitoringWindowDuration returns the RimRSMonitoringWindowDuration field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringWindowDuration() int32 {
	if o == nil || IsNil(o.RimRSMonitoringWindowDuration) {
		var ret int32
		return ret
	}
	return *o.RimRSMonitoringWindowDuration
}

// GetRimRSMonitoringWindowDurationOk returns a tuple with the RimRSMonitoringWindowDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringWindowDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.RimRSMonitoringWindowDuration) {
		return nil, false
	}
	return o.RimRSMonitoringWindowDuration, true
}

// HasRimRSMonitoringWindowDuration returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasRimRSMonitoringWindowDuration() bool {
	if o != nil && !IsNil(o.RimRSMonitoringWindowDuration) {
		return true
	}

	return false
}

// SetRimRSMonitoringWindowDuration gets a reference to the given int32 and assigns it to the RimRSMonitoringWindowDuration field.
func (o *NrCellDuSingleAllOfAttributes) SetRimRSMonitoringWindowDuration(v int32) {
	o.RimRSMonitoringWindowDuration = &v
}

// GetRimRSMonitoringWindowStartingOffset returns the RimRSMonitoringWindowStartingOffset field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringWindowStartingOffset() int32 {
	if o == nil || IsNil(o.RimRSMonitoringWindowStartingOffset) {
		var ret int32
		return ret
	}
	return *o.RimRSMonitoringWindowStartingOffset
}

// GetRimRSMonitoringWindowStartingOffsetOk returns a tuple with the RimRSMonitoringWindowStartingOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringWindowStartingOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.RimRSMonitoringWindowStartingOffset) {
		return nil, false
	}
	return o.RimRSMonitoringWindowStartingOffset, true
}

// HasRimRSMonitoringWindowStartingOffset returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasRimRSMonitoringWindowStartingOffset() bool {
	if o != nil && !IsNil(o.RimRSMonitoringWindowStartingOffset) {
		return true
	}

	return false
}

// SetRimRSMonitoringWindowStartingOffset gets a reference to the given int32 and assigns it to the RimRSMonitoringWindowStartingOffset field.
func (o *NrCellDuSingleAllOfAttributes) SetRimRSMonitoringWindowStartingOffset(v int32) {
	o.RimRSMonitoringWindowStartingOffset = &v
}

// GetRimRSMonitoringWindowPeriodicity returns the RimRSMonitoringWindowPeriodicity field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringWindowPeriodicity() int32 {
	if o == nil || IsNil(o.RimRSMonitoringWindowPeriodicity) {
		var ret int32
		return ret
	}
	return *o.RimRSMonitoringWindowPeriodicity
}

// GetRimRSMonitoringWindowPeriodicityOk returns a tuple with the RimRSMonitoringWindowPeriodicity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringWindowPeriodicityOk() (*int32, bool) {
	if o == nil || IsNil(o.RimRSMonitoringWindowPeriodicity) {
		return nil, false
	}
	return o.RimRSMonitoringWindowPeriodicity, true
}

// HasRimRSMonitoringWindowPeriodicity returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasRimRSMonitoringWindowPeriodicity() bool {
	if o != nil && !IsNil(o.RimRSMonitoringWindowPeriodicity) {
		return true
	}

	return false
}

// SetRimRSMonitoringWindowPeriodicity gets a reference to the given int32 and assigns it to the RimRSMonitoringWindowPeriodicity field.
func (o *NrCellDuSingleAllOfAttributes) SetRimRSMonitoringWindowPeriodicity(v int32) {
	o.RimRSMonitoringWindowPeriodicity = &v
}

// GetRimRSMonitoringOccasionInterval returns the RimRSMonitoringOccasionInterval field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringOccasionInterval() int32 {
	if o == nil || IsNil(o.RimRSMonitoringOccasionInterval) {
		var ret int32
		return ret
	}
	return *o.RimRSMonitoringOccasionInterval
}

// GetRimRSMonitoringOccasionIntervalOk returns a tuple with the RimRSMonitoringOccasionInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringOccasionIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.RimRSMonitoringOccasionInterval) {
		return nil, false
	}
	return o.RimRSMonitoringOccasionInterval, true
}

// HasRimRSMonitoringOccasionInterval returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasRimRSMonitoringOccasionInterval() bool {
	if o != nil && !IsNil(o.RimRSMonitoringOccasionInterval) {
		return true
	}

	return false
}

// SetRimRSMonitoringOccasionInterval gets a reference to the given int32 and assigns it to the RimRSMonitoringOccasionInterval field.
func (o *NrCellDuSingleAllOfAttributes) SetRimRSMonitoringOccasionInterval(v int32) {
	o.RimRSMonitoringOccasionInterval = &v
}

// GetRimRSMonitoringOccasionStartingOffset returns the RimRSMonitoringOccasionStartingOffset field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringOccasionStartingOffset() int32 {
	if o == nil || IsNil(o.RimRSMonitoringOccasionStartingOffset) {
		var ret int32
		return ret
	}
	return *o.RimRSMonitoringOccasionStartingOffset
}

// GetRimRSMonitoringOccasionStartingOffsetOk returns a tuple with the RimRSMonitoringOccasionStartingOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetRimRSMonitoringOccasionStartingOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.RimRSMonitoringOccasionStartingOffset) {
		return nil, false
	}
	return o.RimRSMonitoringOccasionStartingOffset, true
}

// HasRimRSMonitoringOccasionStartingOffset returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasRimRSMonitoringOccasionStartingOffset() bool {
	if o != nil && !IsNil(o.RimRSMonitoringOccasionStartingOffset) {
		return true
	}

	return false
}

// SetRimRSMonitoringOccasionStartingOffset gets a reference to the given int32 and assigns it to the RimRSMonitoringOccasionStartingOffset field.
func (o *NrCellDuSingleAllOfAttributes) SetRimRSMonitoringOccasionStartingOffset(v int32) {
	o.RimRSMonitoringOccasionStartingOffset = &v
}

// GetNRFrequencyRef returns the NRFrequencyRef field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetNRFrequencyRef() string {
	if o == nil || IsNil(o.NRFrequencyRef) {
		var ret string
		return ret
	}
	return *o.NRFrequencyRef
}

// GetNRFrequencyRefOk returns a tuple with the NRFrequencyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetNRFrequencyRefOk() (*string, bool) {
	if o == nil || IsNil(o.NRFrequencyRef) {
		return nil, false
	}
	return o.NRFrequencyRef, true
}

// HasNRFrequencyRef returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasNRFrequencyRef() bool {
	if o != nil && !IsNil(o.NRFrequencyRef) {
		return true
	}

	return false
}

// SetNRFrequencyRef gets a reference to the given string and assigns it to the NRFrequencyRef field.
func (o *NrCellDuSingleAllOfAttributes) SetNRFrequencyRef(v string) {
	o.NRFrequencyRef = &v
}

// GetVictimSetRef returns the VictimSetRef field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetVictimSetRef() string {
	if o == nil || IsNil(o.VictimSetRef) {
		var ret string
		return ret
	}
	return *o.VictimSetRef
}

// GetVictimSetRefOk returns a tuple with the VictimSetRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetVictimSetRefOk() (*string, bool) {
	if o == nil || IsNil(o.VictimSetRef) {
		return nil, false
	}
	return o.VictimSetRef, true
}

// HasVictimSetRef returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasVictimSetRef() bool {
	if o != nil && !IsNil(o.VictimSetRef) {
		return true
	}

	return false
}

// SetVictimSetRef gets a reference to the given string and assigns it to the VictimSetRef field.
func (o *NrCellDuSingleAllOfAttributes) SetVictimSetRef(v string) {
	o.VictimSetRef = &v
}

// GetAggressorSetRef returns the AggressorSetRef field value if set, zero value otherwise.
func (o *NrCellDuSingleAllOfAttributes) GetAggressorSetRef() string {
	if o == nil || IsNil(o.AggressorSetRef) {
		var ret string
		return ret
	}
	return *o.AggressorSetRef
}

// GetAggressorSetRefOk returns a tuple with the AggressorSetRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrCellDuSingleAllOfAttributes) GetAggressorSetRefOk() (*string, bool) {
	if o == nil || IsNil(o.AggressorSetRef) {
		return nil, false
	}
	return o.AggressorSetRef, true
}

// HasAggressorSetRef returns a boolean if a field has been set.
func (o *NrCellDuSingleAllOfAttributes) HasAggressorSetRef() bool {
	if o != nil && !IsNil(o.AggressorSetRef) {
		return true
	}

	return false
}

// SetAggressorSetRef gets a reference to the given string and assigns it to the AggressorSetRef field.
func (o *NrCellDuSingleAllOfAttributes) SetAggressorSetRef(v string) {
	o.AggressorSetRef = &v
}

func (o NrCellDuSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NrCellDuSingleAllOfAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserLabel) {
		toSerialize["userLabel"] = o.UserLabel
	}
	if !IsNil(o.VnfParametersList) {
		toSerialize["vnfParametersList"] = o.VnfParametersList
	}
	if !IsNil(o.PeeParametersList) {
		toSerialize["peeParametersList"] = o.PeeParametersList
	}
	if !IsNil(o.PriorityLabel) {
		toSerialize["priorityLabel"] = o.PriorityLabel
	}
	if !IsNil(o.SupportedPerfMetricGroups) {
		toSerialize["supportedPerfMetricGroups"] = o.SupportedPerfMetricGroups
	}
	if !IsNil(o.SupportedTraceMetrics) {
		toSerialize["supportedTraceMetrics"] = o.SupportedTraceMetrics
	}
	if !IsNil(o.AdministrativeState) {
		toSerialize["administrativeState"] = o.AdministrativeState
	}
	if !IsNil(o.OperationalState) {
		toSerialize["operationalState"] = o.OperationalState
	}
	if !IsNil(o.CellLocalId) {
		toSerialize["cellLocalId"] = o.CellLocalId
	}
	if !IsNil(o.CellState) {
		toSerialize["cellState"] = o.CellState
	}
	if !IsNil(o.PlmnInfoList) {
		toSerialize["plmnInfoList"] = o.PlmnInfoList
	}
	if !IsNil(o.NpnIdentityList) {
		toSerialize["npnIdentityList"] = o.NpnIdentityList
	}
	if !IsNil(o.NrPci) {
		toSerialize["nrPci"] = o.NrPci
	}
	if !IsNil(o.NrTac) {
		toSerialize["nrTac"] = o.NrTac
	}
	if !IsNil(o.ArfcnDL) {
		toSerialize["arfcnDL"] = o.ArfcnDL
	}
	if !IsNil(o.ArfcnUL) {
		toSerialize["arfcnUL"] = o.ArfcnUL
	}
	if !IsNil(o.ArfcnSUL) {
		toSerialize["arfcnSUL"] = o.ArfcnSUL
	}
	if !IsNil(o.BSChannelBwDL) {
		toSerialize["bSChannelBwDL"] = o.BSChannelBwDL
	}
	if !IsNil(o.BSChannelBwUL) {
		toSerialize["bSChannelBwUL"] = o.BSChannelBwUL
	}
	if !IsNil(o.BSChannelBwSUL) {
		toSerialize["bSChannelBwSUL"] = o.BSChannelBwSUL
	}
	if !IsNil(o.SsbFrequency) {
		toSerialize["ssbFrequency"] = o.SsbFrequency
	}
	if !IsNil(o.SsbPeriodicity) {
		toSerialize["ssbPeriodicity"] = o.SsbPeriodicity
	}
	if !IsNil(o.SsbSubCarrierSpacing) {
		toSerialize["ssbSubCarrierSpacing"] = o.SsbSubCarrierSpacing
	}
	if !IsNil(o.SsbOffset) {
		toSerialize["ssbOffset"] = o.SsbOffset
	}
	if !IsNil(o.SsbDuration) {
		toSerialize["ssbDuration"] = o.SsbDuration
	}
	if !IsNil(o.NrSectorCarrierRef) {
		toSerialize["nrSectorCarrierRef"] = o.NrSectorCarrierRef
	}
	if !IsNil(o.BwpRef) {
		toSerialize["bwpRef"] = o.BwpRef
	}
	if !IsNil(o.BwpSetRef) {
		toSerialize["bwpSetRef"] = o.BwpSetRef
	}
	if !IsNil(o.RimRSMonitoringStartTime) {
		toSerialize["rimRSMonitoringStartTime"] = o.RimRSMonitoringStartTime
	}
	if !IsNil(o.RimRSMonitoringStopTime) {
		toSerialize["rimRSMonitoringStopTime"] = o.RimRSMonitoringStopTime
	}
	if !IsNil(o.RimRSMonitoringWindowDuration) {
		toSerialize["rimRSMonitoringWindowDuration"] = o.RimRSMonitoringWindowDuration
	}
	if !IsNil(o.RimRSMonitoringWindowStartingOffset) {
		toSerialize["rimRSMonitoringWindowStartingOffset"] = o.RimRSMonitoringWindowStartingOffset
	}
	if !IsNil(o.RimRSMonitoringWindowPeriodicity) {
		toSerialize["rimRSMonitoringWindowPeriodicity"] = o.RimRSMonitoringWindowPeriodicity
	}
	if !IsNil(o.RimRSMonitoringOccasionInterval) {
		toSerialize["rimRSMonitoringOccasionInterval"] = o.RimRSMonitoringOccasionInterval
	}
	if !IsNil(o.RimRSMonitoringOccasionStartingOffset) {
		toSerialize["rimRSMonitoringOccasionStartingOffset"] = o.RimRSMonitoringOccasionStartingOffset
	}
	if !IsNil(o.NRFrequencyRef) {
		toSerialize["nRFrequencyRef"] = o.NRFrequencyRef
	}
	if !IsNil(o.VictimSetRef) {
		toSerialize["victimSetRef"] = o.VictimSetRef
	}
	if !IsNil(o.AggressorSetRef) {
		toSerialize["aggressorSetRef"] = o.AggressorSetRef
	}
	return toSerialize, nil
}

type NullableNrCellDuSingleAllOfAttributes struct {
	value *NrCellDuSingleAllOfAttributes
	isSet bool
}

func (v NullableNrCellDuSingleAllOfAttributes) Get() *NrCellDuSingleAllOfAttributes {
	return v.value
}

func (v *NullableNrCellDuSingleAllOfAttributes) Set(val *NrCellDuSingleAllOfAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableNrCellDuSingleAllOfAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableNrCellDuSingleAllOfAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNrCellDuSingleAllOfAttributes(val *NrCellDuSingleAllOfAttributes) *NullableNrCellDuSingleAllOfAttributes {
	return &NullableNrCellDuSingleAllOfAttributes{value: val, isSet: true}
}

func (v NullableNrCellDuSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNrCellDuSingleAllOfAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


