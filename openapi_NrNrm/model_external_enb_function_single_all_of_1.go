/*
NR NRM

OAS 3.0.1 specification of the NR NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NrNrm

import (
	"encoding/json"
)

// checks if the ExternalENBFunctionSingleAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalENBFunctionSingleAllOf1{}

// ExternalENBFunctionSingleAllOf1 struct for ExternalENBFunctionSingleAllOf1
type ExternalENBFunctionSingleAllOf1 struct {
	ExternalEUTranCell []ExternalEUTranCellSingle `json:"ExternalEUTranCell,omitempty"`
}

// NewExternalENBFunctionSingleAllOf1 instantiates a new ExternalENBFunctionSingleAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalENBFunctionSingleAllOf1() *ExternalENBFunctionSingleAllOf1 {
	this := ExternalENBFunctionSingleAllOf1{}
	return &this
}

// NewExternalENBFunctionSingleAllOf1WithDefaults instantiates a new ExternalENBFunctionSingleAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalENBFunctionSingleAllOf1WithDefaults() *ExternalENBFunctionSingleAllOf1 {
	this := ExternalENBFunctionSingleAllOf1{}
	return &this
}

// GetExternalEUTranCell returns the ExternalEUTranCell field value if set, zero value otherwise.
func (o *ExternalENBFunctionSingleAllOf1) GetExternalEUTranCell() []ExternalEUTranCellSingle {
	if o == nil || isNil(o.ExternalEUTranCell) {
		var ret []ExternalEUTranCellSingle
		return ret
	}
	return o.ExternalEUTranCell
}

// GetExternalEUTranCellOk returns a tuple with the ExternalEUTranCell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalENBFunctionSingleAllOf1) GetExternalEUTranCellOk() ([]ExternalEUTranCellSingle, bool) {
	if o == nil || isNil(o.ExternalEUTranCell) {
		return nil, false
	}
	return o.ExternalEUTranCell, true
}

// HasExternalEUTranCell returns a boolean if a field has been set.
func (o *ExternalENBFunctionSingleAllOf1) HasExternalEUTranCell() bool {
	if o != nil && !isNil(o.ExternalEUTranCell) {
		return true
	}

	return false
}

// SetExternalEUTranCell gets a reference to the given []ExternalEUTranCellSingle and assigns it to the ExternalEUTranCell field.
func (o *ExternalENBFunctionSingleAllOf1) SetExternalEUTranCell(v []ExternalEUTranCellSingle) {
	o.ExternalEUTranCell = v
}

func (o ExternalENBFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalENBFunctionSingleAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExternalEUTranCell) {
		toSerialize["ExternalEUTranCell"] = o.ExternalEUTranCell
	}
	return toSerialize, nil
}

type NullableExternalENBFunctionSingleAllOf1 struct {
	value *ExternalENBFunctionSingleAllOf1
	isSet bool
}

func (v NullableExternalENBFunctionSingleAllOf1) Get() *ExternalENBFunctionSingleAllOf1 {
	return v.value
}

func (v *NullableExternalENBFunctionSingleAllOf1) Set(val *ExternalENBFunctionSingleAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalENBFunctionSingleAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalENBFunctionSingleAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalENBFunctionSingleAllOf1(val *ExternalENBFunctionSingleAllOf1) *NullableExternalENBFunctionSingleAllOf1 {
	return &NullableExternalENBFunctionSingleAllOf1{value: val, isSet: true}
}

func (v NullableExternalENBFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalENBFunctionSingleAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


