/*
NR NRM

OAS 3.0.1 specification of the NR NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 18.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NrNrm

import (
	"encoding/json"
)

// checks if the BwpSingleAllOfAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BwpSingleAllOfAttributes{}

// BwpSingleAllOfAttributes struct for BwpSingleAllOfAttributes
type BwpSingleAllOfAttributes struct {
	UserLabel *string `json:"userLabel,omitempty"`
	VnfParametersList []VnfParameter `json:"vnfParametersList,omitempty"`
	PeeParametersList []PeeParameter `json:"peeParametersList,omitempty"`
	PriorityLabel *int32 `json:"priorityLabel,omitempty"`
	SupportedPerfMetricGroups []SupportedPerfMetricGroup `json:"supportedPerfMetricGroups,omitempty"`
	SupportedTraceMetrics []string `json:"supportedTraceMetrics,omitempty"`
	BwpContext *BwpContext `json:"bwpContext,omitempty"`
	IsInitialBwp *IsInitialBwp `json:"isInitialBwp,omitempty"`
	SubCarrierSpacing *int32 `json:"subCarrierSpacing,omitempty"`
	CyclicPrefix *CyclicPrefix `json:"cyclicPrefix,omitempty"`
	StartRB *int32 `json:"startRB,omitempty"`
	NumberOfRBs *int32 `json:"numberOfRBs,omitempty"`
}

// NewBwpSingleAllOfAttributes instantiates a new BwpSingleAllOfAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBwpSingleAllOfAttributes() *BwpSingleAllOfAttributes {
	this := BwpSingleAllOfAttributes{}
	return &this
}

// NewBwpSingleAllOfAttributesWithDefaults instantiates a new BwpSingleAllOfAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBwpSingleAllOfAttributesWithDefaults() *BwpSingleAllOfAttributes {
	this := BwpSingleAllOfAttributes{}
	return &this
}

// GetUserLabel returns the UserLabel field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetUserLabel() string {
	if o == nil || IsNil(o.UserLabel) {
		var ret string
		return ret
	}
	return *o.UserLabel
}

// GetUserLabelOk returns a tuple with the UserLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetUserLabelOk() (*string, bool) {
	if o == nil || IsNil(o.UserLabel) {
		return nil, false
	}
	return o.UserLabel, true
}

// HasUserLabel returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasUserLabel() bool {
	if o != nil && !IsNil(o.UserLabel) {
		return true
	}

	return false
}

// SetUserLabel gets a reference to the given string and assigns it to the UserLabel field.
func (o *BwpSingleAllOfAttributes) SetUserLabel(v string) {
	o.UserLabel = &v
}

// GetVnfParametersList returns the VnfParametersList field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetVnfParametersList() []VnfParameter {
	if o == nil || IsNil(o.VnfParametersList) {
		var ret []VnfParameter
		return ret
	}
	return o.VnfParametersList
}

// GetVnfParametersListOk returns a tuple with the VnfParametersList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetVnfParametersListOk() ([]VnfParameter, bool) {
	if o == nil || IsNil(o.VnfParametersList) {
		return nil, false
	}
	return o.VnfParametersList, true
}

// HasVnfParametersList returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasVnfParametersList() bool {
	if o != nil && !IsNil(o.VnfParametersList) {
		return true
	}

	return false
}

// SetVnfParametersList gets a reference to the given []VnfParameter and assigns it to the VnfParametersList field.
func (o *BwpSingleAllOfAttributes) SetVnfParametersList(v []VnfParameter) {
	o.VnfParametersList = v
}

// GetPeeParametersList returns the PeeParametersList field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetPeeParametersList() []PeeParameter {
	if o == nil || IsNil(o.PeeParametersList) {
		var ret []PeeParameter
		return ret
	}
	return o.PeeParametersList
}

// GetPeeParametersListOk returns a tuple with the PeeParametersList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetPeeParametersListOk() ([]PeeParameter, bool) {
	if o == nil || IsNil(o.PeeParametersList) {
		return nil, false
	}
	return o.PeeParametersList, true
}

// HasPeeParametersList returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasPeeParametersList() bool {
	if o != nil && !IsNil(o.PeeParametersList) {
		return true
	}

	return false
}

// SetPeeParametersList gets a reference to the given []PeeParameter and assigns it to the PeeParametersList field.
func (o *BwpSingleAllOfAttributes) SetPeeParametersList(v []PeeParameter) {
	o.PeeParametersList = v
}

// GetPriorityLabel returns the PriorityLabel field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetPriorityLabel() int32 {
	if o == nil || IsNil(o.PriorityLabel) {
		var ret int32
		return ret
	}
	return *o.PriorityLabel
}

// GetPriorityLabelOk returns a tuple with the PriorityLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetPriorityLabelOk() (*int32, bool) {
	if o == nil || IsNil(o.PriorityLabel) {
		return nil, false
	}
	return o.PriorityLabel, true
}

// HasPriorityLabel returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasPriorityLabel() bool {
	if o != nil && !IsNil(o.PriorityLabel) {
		return true
	}

	return false
}

// SetPriorityLabel gets a reference to the given int32 and assigns it to the PriorityLabel field.
func (o *BwpSingleAllOfAttributes) SetPriorityLabel(v int32) {
	o.PriorityLabel = &v
}

// GetSupportedPerfMetricGroups returns the SupportedPerfMetricGroups field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetSupportedPerfMetricGroups() []SupportedPerfMetricGroup {
	if o == nil || IsNil(o.SupportedPerfMetricGroups) {
		var ret []SupportedPerfMetricGroup
		return ret
	}
	return o.SupportedPerfMetricGroups
}

// GetSupportedPerfMetricGroupsOk returns a tuple with the SupportedPerfMetricGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetSupportedPerfMetricGroupsOk() ([]SupportedPerfMetricGroup, bool) {
	if o == nil || IsNil(o.SupportedPerfMetricGroups) {
		return nil, false
	}
	return o.SupportedPerfMetricGroups, true
}

// HasSupportedPerfMetricGroups returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasSupportedPerfMetricGroups() bool {
	if o != nil && !IsNil(o.SupportedPerfMetricGroups) {
		return true
	}

	return false
}

// SetSupportedPerfMetricGroups gets a reference to the given []SupportedPerfMetricGroup and assigns it to the SupportedPerfMetricGroups field.
func (o *BwpSingleAllOfAttributes) SetSupportedPerfMetricGroups(v []SupportedPerfMetricGroup) {
	o.SupportedPerfMetricGroups = v
}

// GetSupportedTraceMetrics returns the SupportedTraceMetrics field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetSupportedTraceMetrics() []string {
	if o == nil || IsNil(o.SupportedTraceMetrics) {
		var ret []string
		return ret
	}
	return o.SupportedTraceMetrics
}

// GetSupportedTraceMetricsOk returns a tuple with the SupportedTraceMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetSupportedTraceMetricsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedTraceMetrics) {
		return nil, false
	}
	return o.SupportedTraceMetrics, true
}

// HasSupportedTraceMetrics returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasSupportedTraceMetrics() bool {
	if o != nil && !IsNil(o.SupportedTraceMetrics) {
		return true
	}

	return false
}

// SetSupportedTraceMetrics gets a reference to the given []string and assigns it to the SupportedTraceMetrics field.
func (o *BwpSingleAllOfAttributes) SetSupportedTraceMetrics(v []string) {
	o.SupportedTraceMetrics = v
}

// GetBwpContext returns the BwpContext field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetBwpContext() BwpContext {
	if o == nil || IsNil(o.BwpContext) {
		var ret BwpContext
		return ret
	}
	return *o.BwpContext
}

// GetBwpContextOk returns a tuple with the BwpContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetBwpContextOk() (*BwpContext, bool) {
	if o == nil || IsNil(o.BwpContext) {
		return nil, false
	}
	return o.BwpContext, true
}

// HasBwpContext returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasBwpContext() bool {
	if o != nil && !IsNil(o.BwpContext) {
		return true
	}

	return false
}

// SetBwpContext gets a reference to the given BwpContext and assigns it to the BwpContext field.
func (o *BwpSingleAllOfAttributes) SetBwpContext(v BwpContext) {
	o.BwpContext = &v
}

// GetIsInitialBwp returns the IsInitialBwp field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetIsInitialBwp() IsInitialBwp {
	if o == nil || IsNil(o.IsInitialBwp) {
		var ret IsInitialBwp
		return ret
	}
	return *o.IsInitialBwp
}

// GetIsInitialBwpOk returns a tuple with the IsInitialBwp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetIsInitialBwpOk() (*IsInitialBwp, bool) {
	if o == nil || IsNil(o.IsInitialBwp) {
		return nil, false
	}
	return o.IsInitialBwp, true
}

// HasIsInitialBwp returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasIsInitialBwp() bool {
	if o != nil && !IsNil(o.IsInitialBwp) {
		return true
	}

	return false
}

// SetIsInitialBwp gets a reference to the given IsInitialBwp and assigns it to the IsInitialBwp field.
func (o *BwpSingleAllOfAttributes) SetIsInitialBwp(v IsInitialBwp) {
	o.IsInitialBwp = &v
}

// GetSubCarrierSpacing returns the SubCarrierSpacing field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetSubCarrierSpacing() int32 {
	if o == nil || IsNil(o.SubCarrierSpacing) {
		var ret int32
		return ret
	}
	return *o.SubCarrierSpacing
}

// GetSubCarrierSpacingOk returns a tuple with the SubCarrierSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetSubCarrierSpacingOk() (*int32, bool) {
	if o == nil || IsNil(o.SubCarrierSpacing) {
		return nil, false
	}
	return o.SubCarrierSpacing, true
}

// HasSubCarrierSpacing returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasSubCarrierSpacing() bool {
	if o != nil && !IsNil(o.SubCarrierSpacing) {
		return true
	}

	return false
}

// SetSubCarrierSpacing gets a reference to the given int32 and assigns it to the SubCarrierSpacing field.
func (o *BwpSingleAllOfAttributes) SetSubCarrierSpacing(v int32) {
	o.SubCarrierSpacing = &v
}

// GetCyclicPrefix returns the CyclicPrefix field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetCyclicPrefix() CyclicPrefix {
	if o == nil || IsNil(o.CyclicPrefix) {
		var ret CyclicPrefix
		return ret
	}
	return *o.CyclicPrefix
}

// GetCyclicPrefixOk returns a tuple with the CyclicPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetCyclicPrefixOk() (*CyclicPrefix, bool) {
	if o == nil || IsNil(o.CyclicPrefix) {
		return nil, false
	}
	return o.CyclicPrefix, true
}

// HasCyclicPrefix returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasCyclicPrefix() bool {
	if o != nil && !IsNil(o.CyclicPrefix) {
		return true
	}

	return false
}

// SetCyclicPrefix gets a reference to the given CyclicPrefix and assigns it to the CyclicPrefix field.
func (o *BwpSingleAllOfAttributes) SetCyclicPrefix(v CyclicPrefix) {
	o.CyclicPrefix = &v
}

// GetStartRB returns the StartRB field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetStartRB() int32 {
	if o == nil || IsNil(o.StartRB) {
		var ret int32
		return ret
	}
	return *o.StartRB
}

// GetStartRBOk returns a tuple with the StartRB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetStartRBOk() (*int32, bool) {
	if o == nil || IsNil(o.StartRB) {
		return nil, false
	}
	return o.StartRB, true
}

// HasStartRB returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasStartRB() bool {
	if o != nil && !IsNil(o.StartRB) {
		return true
	}

	return false
}

// SetStartRB gets a reference to the given int32 and assigns it to the StartRB field.
func (o *BwpSingleAllOfAttributes) SetStartRB(v int32) {
	o.StartRB = &v
}

// GetNumberOfRBs returns the NumberOfRBs field value if set, zero value otherwise.
func (o *BwpSingleAllOfAttributes) GetNumberOfRBs() int32 {
	if o == nil || IsNil(o.NumberOfRBs) {
		var ret int32
		return ret
	}
	return *o.NumberOfRBs
}

// GetNumberOfRBsOk returns a tuple with the NumberOfRBs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BwpSingleAllOfAttributes) GetNumberOfRBsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfRBs) {
		return nil, false
	}
	return o.NumberOfRBs, true
}

// HasNumberOfRBs returns a boolean if a field has been set.
func (o *BwpSingleAllOfAttributes) HasNumberOfRBs() bool {
	if o != nil && !IsNil(o.NumberOfRBs) {
		return true
	}

	return false
}

// SetNumberOfRBs gets a reference to the given int32 and assigns it to the NumberOfRBs field.
func (o *BwpSingleAllOfAttributes) SetNumberOfRBs(v int32) {
	o.NumberOfRBs = &v
}

func (o BwpSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BwpSingleAllOfAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserLabel) {
		toSerialize["userLabel"] = o.UserLabel
	}
	if !IsNil(o.VnfParametersList) {
		toSerialize["vnfParametersList"] = o.VnfParametersList
	}
	if !IsNil(o.PeeParametersList) {
		toSerialize["peeParametersList"] = o.PeeParametersList
	}
	if !IsNil(o.PriorityLabel) {
		toSerialize["priorityLabel"] = o.PriorityLabel
	}
	if !IsNil(o.SupportedPerfMetricGroups) {
		toSerialize["supportedPerfMetricGroups"] = o.SupportedPerfMetricGroups
	}
	if !IsNil(o.SupportedTraceMetrics) {
		toSerialize["supportedTraceMetrics"] = o.SupportedTraceMetrics
	}
	if !IsNil(o.BwpContext) {
		toSerialize["bwpContext"] = o.BwpContext
	}
	if !IsNil(o.IsInitialBwp) {
		toSerialize["isInitialBwp"] = o.IsInitialBwp
	}
	if !IsNil(o.SubCarrierSpacing) {
		toSerialize["subCarrierSpacing"] = o.SubCarrierSpacing
	}
	if !IsNil(o.CyclicPrefix) {
		toSerialize["cyclicPrefix"] = o.CyclicPrefix
	}
	if !IsNil(o.StartRB) {
		toSerialize["startRB"] = o.StartRB
	}
	if !IsNil(o.NumberOfRBs) {
		toSerialize["numberOfRBs"] = o.NumberOfRBs
	}
	return toSerialize, nil
}

type NullableBwpSingleAllOfAttributes struct {
	value *BwpSingleAllOfAttributes
	isSet bool
}

func (v NullableBwpSingleAllOfAttributes) Get() *BwpSingleAllOfAttributes {
	return v.value
}

func (v *NullableBwpSingleAllOfAttributes) Set(val *BwpSingleAllOfAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableBwpSingleAllOfAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableBwpSingleAllOfAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBwpSingleAllOfAttributes(val *BwpSingleAllOfAttributes) *NullableBwpSingleAllOfAttributes {
	return &NullableBwpSingleAllOfAttributes{value: val, isSet: true}
}

func (v NullableBwpSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBwpSingleAllOfAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


