/*
Neasdf_BaselineDNSPattern

EASDF Baseline DNS Pattern Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Neasdf_BaselineDNSPattern

import (
	"encoding/json"
)

// checks if the DnsRspMdt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsRspMdt{}

// DnsRspMdt DNS Response message detection template
type DnsRspMdt struct {
	MdtId               string                    `json:"mdtId"`
	Label               *string                   `json:"label,omitempty"`
	FqdnPatternList     []FqdnPatternMatchingRule `json:"fqdnPatternList,omitempty"`
	EasIpv4AddrRanges   []Ipv4AddressRange        `json:"easIpv4AddrRanges,omitempty"`
	EasIpv6PrefixRanges []Ipv6PrefixRange         `json:"easIpv6PrefixRanges,omitempty"`
}

// NewDnsRspMdt instantiates a new DnsRspMdt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsRspMdt(mdtId string) *DnsRspMdt {
	this := DnsRspMdt{}
	this.MdtId = mdtId
	return &this
}

// NewDnsRspMdtWithDefaults instantiates a new DnsRspMdt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsRspMdtWithDefaults() *DnsRspMdt {
	this := DnsRspMdt{}
	return &this
}

// GetMdtId returns the MdtId field value
func (o *DnsRspMdt) GetMdtId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MdtId
}

// GetMdtIdOk returns a tuple with the MdtId field value
// and a boolean to check if the value has been set.
func (o *DnsRspMdt) GetMdtIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MdtId, true
}

// SetMdtId sets field value
func (o *DnsRspMdt) SetMdtId(v string) {
	o.MdtId = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DnsRspMdt) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRspMdt) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DnsRspMdt) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DnsRspMdt) SetLabel(v string) {
	o.Label = &v
}

// GetFqdnPatternList returns the FqdnPatternList field value if set, zero value otherwise.
func (o *DnsRspMdt) GetFqdnPatternList() []FqdnPatternMatchingRule {
	if o == nil || IsNil(o.FqdnPatternList) {
		var ret []FqdnPatternMatchingRule
		return ret
	}
	return o.FqdnPatternList
}

// GetFqdnPatternListOk returns a tuple with the FqdnPatternList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRspMdt) GetFqdnPatternListOk() ([]FqdnPatternMatchingRule, bool) {
	if o == nil || IsNil(o.FqdnPatternList) {
		return nil, false
	}
	return o.FqdnPatternList, true
}

// HasFqdnPatternList returns a boolean if a field has been set.
func (o *DnsRspMdt) HasFqdnPatternList() bool {
	if o != nil && !IsNil(o.FqdnPatternList) {
		return true
	}

	return false
}

// SetFqdnPatternList gets a reference to the given []FqdnPatternMatchingRule and assigns it to the FqdnPatternList field.
func (o *DnsRspMdt) SetFqdnPatternList(v []FqdnPatternMatchingRule) {
	o.FqdnPatternList = v
}

// GetEasIpv4AddrRanges returns the EasIpv4AddrRanges field value if set, zero value otherwise.
func (o *DnsRspMdt) GetEasIpv4AddrRanges() []Ipv4AddressRange {
	if o == nil || IsNil(o.EasIpv4AddrRanges) {
		var ret []Ipv4AddressRange
		return ret
	}
	return o.EasIpv4AddrRanges
}

// GetEasIpv4AddrRangesOk returns a tuple with the EasIpv4AddrRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRspMdt) GetEasIpv4AddrRangesOk() ([]Ipv4AddressRange, bool) {
	if o == nil || IsNil(o.EasIpv4AddrRanges) {
		return nil, false
	}
	return o.EasIpv4AddrRanges, true
}

// HasEasIpv4AddrRanges returns a boolean if a field has been set.
func (o *DnsRspMdt) HasEasIpv4AddrRanges() bool {
	if o != nil && !IsNil(o.EasIpv4AddrRanges) {
		return true
	}

	return false
}

// SetEasIpv4AddrRanges gets a reference to the given []Ipv4AddressRange and assigns it to the EasIpv4AddrRanges field.
func (o *DnsRspMdt) SetEasIpv4AddrRanges(v []Ipv4AddressRange) {
	o.EasIpv4AddrRanges = v
}

// GetEasIpv6PrefixRanges returns the EasIpv6PrefixRanges field value if set, zero value otherwise.
func (o *DnsRspMdt) GetEasIpv6PrefixRanges() []Ipv6PrefixRange {
	if o == nil || IsNil(o.EasIpv6PrefixRanges) {
		var ret []Ipv6PrefixRange
		return ret
	}
	return o.EasIpv6PrefixRanges
}

// GetEasIpv6PrefixRangesOk returns a tuple with the EasIpv6PrefixRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRspMdt) GetEasIpv6PrefixRangesOk() ([]Ipv6PrefixRange, bool) {
	if o == nil || IsNil(o.EasIpv6PrefixRanges) {
		return nil, false
	}
	return o.EasIpv6PrefixRanges, true
}

// HasEasIpv6PrefixRanges returns a boolean if a field has been set.
func (o *DnsRspMdt) HasEasIpv6PrefixRanges() bool {
	if o != nil && !IsNil(o.EasIpv6PrefixRanges) {
		return true
	}

	return false
}

// SetEasIpv6PrefixRanges gets a reference to the given []Ipv6PrefixRange and assigns it to the EasIpv6PrefixRanges field.
func (o *DnsRspMdt) SetEasIpv6PrefixRanges(v []Ipv6PrefixRange) {
	o.EasIpv6PrefixRanges = v
}

func (o DnsRspMdt) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsRspMdt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mdtId"] = o.MdtId
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.FqdnPatternList) {
		toSerialize["fqdnPatternList"] = o.FqdnPatternList
	}
	if !IsNil(o.EasIpv4AddrRanges) {
		toSerialize["easIpv4AddrRanges"] = o.EasIpv4AddrRanges
	}
	if !IsNil(o.EasIpv6PrefixRanges) {
		toSerialize["easIpv6PrefixRanges"] = o.EasIpv6PrefixRanges
	}
	return toSerialize, nil
}

type NullableDnsRspMdt struct {
	value *DnsRspMdt
	isSet bool
}

func (v NullableDnsRspMdt) Get() *DnsRspMdt {
	return v.value
}

func (v *NullableDnsRspMdt) Set(val *DnsRspMdt) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsRspMdt) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsRspMdt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsRspMdt(val *DnsRspMdt) *NullableDnsRspMdt {
	return &NullableDnsRspMdt{value: val, isSet: true}
}

func (v NullableDnsRspMdt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsRspMdt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
