/*
CAPIF_Events_API

API for event subscription management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CAPIF_Events_API

import (
	"encoding/json"
	"fmt"
)

// CAPIFEvent Possible values are: - SERVICE_API_AVAILABLE:      Events related to the availability of service APIs after the service APIs are published. - SERVICE_API_UNAVAILABLE:      Events related to the unavailability of service APIs after the service APIs are      unpublished. - SERVICE_API_UPDATE: Events related to change in service API information. - API_INVOKER_ONBOARDED: Events related to API invoker onboarded to CAPIF. - API_INVOKER_OFFBOARDED: Events related to API invoker offboarded from CAPIF. - SERVICE_API_INVOCATION_SUCCESS:      Events related to the successful invocation of service APIs. - SERVICE_API_INVOCATION_FAILURE: Events related to the failed invocation of service APIs. - ACCESS_CONTROL_POLICY_UPDATE:      Events related to the update for the access control policy related to the service APIs. - ACCESS_CONTROL_POLICY_UNAVAILABLE:      Events related to the unavailability of the access control policy related to      the service APIs. - API_INVOKER_AUTHORIZATION_REVOKED: Events related to the revocation of the authorization of API invokers to access the service APIs. - API_INVOKER_UPDATED: Events related to API invoker profile updated to CAPIF. - API_TOPOLOGY_HIDING_CREATED:      Events related to the creation or update of the API topology hiding      information of the service APIs after the service APIs are published. - API_TOPOLOGY_HIDING_REVOKED:      Events related to the revocation of the API topology hiding information of      the service APIs after the service APIs are unpublished. 
type CAPIFEvent struct {
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CAPIFEvent) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CAPIFEvent)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CAPIFEvent) MarshalJSON() ([]byte, error) {
	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCAPIFEvent struct {
	value *CAPIFEvent
	isSet bool
}

func (v NullableCAPIFEvent) Get() *CAPIFEvent {
	return v.value
}

func (v *NullableCAPIFEvent) Set(val *CAPIFEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCAPIFEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCAPIFEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCAPIFEvent(val *CAPIFEvent) *NullableCAPIFEvent {
	return &NullableCAPIFEvent{value: val, isSet: true}
}

func (v NullableCAPIFEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCAPIFEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


