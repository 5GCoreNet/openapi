/*
CAPIF_Events_API

API for event subscription management.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CAPIF_Events_API

import (
	"encoding/json"
)

// checks if the EventNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNotification{}

// EventNotification Represents an individual CAPIF Event notification.
type EventNotification struct {
	// Identifier of the subscription resource to which the notification is related – CAPIF resource identifier 
	SubscriptionId string `json:"subscriptionId"`
	Events CAPIFEvent `json:"events"`
	EventDetail *CAPIFEventDetail `json:"eventDetail,omitempty"`
}

// NewEventNotification instantiates a new EventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNotification(subscriptionId string, events CAPIFEvent) *EventNotification {
	this := EventNotification{}
	this.SubscriptionId = subscriptionId
	this.Events = events
	return &this
}

// NewEventNotificationWithDefaults instantiates a new EventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNotificationWithDefaults() *EventNotification {
	this := EventNotification{}
	return &this
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *EventNotification) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *EventNotification) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *EventNotification) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetEvents returns the Events field value
func (o *EventNotification) GetEvents() CAPIFEvent {
	if o == nil {
		var ret CAPIFEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventNotification) GetEventsOk() (*CAPIFEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Events, true
}

// SetEvents sets field value
func (o *EventNotification) SetEvents(v CAPIFEvent) {
	o.Events = v
}

// GetEventDetail returns the EventDetail field value if set, zero value otherwise.
func (o *EventNotification) GetEventDetail() CAPIFEventDetail {
	if o == nil || IsNil(o.EventDetail) {
		var ret CAPIFEventDetail
		return ret
	}
	return *o.EventDetail
}

// GetEventDetailOk returns a tuple with the EventDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetEventDetailOk() (*CAPIFEventDetail, bool) {
	if o == nil || IsNil(o.EventDetail) {
		return nil, false
	}
	return o.EventDetail, true
}

// HasEventDetail returns a boolean if a field has been set.
func (o *EventNotification) HasEventDetail() bool {
	if o != nil && !IsNil(o.EventDetail) {
		return true
	}

	return false
}

// SetEventDetail gets a reference to the given CAPIFEventDetail and assigns it to the EventDetail field.
func (o *EventNotification) SetEventDetail(v CAPIFEventDetail) {
	o.EventDetail = &v
}

func (o EventNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriptionId"] = o.SubscriptionId
	toSerialize["events"] = o.Events
	if !IsNil(o.EventDetail) {
		toSerialize["eventDetail"] = o.EventDetail
	}
	return toSerialize, nil
}

type NullableEventNotification struct {
	value *EventNotification
	isSet bool
}

func (v NullableEventNotification) Get() *EventNotification {
	return v.value
}

func (v *NullableEventNotification) Set(val *EventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNotification(val *EventNotification) *NullableEventNotification {
	return &NullableEventNotification{value: val, isSet: true}
}

func (v NullableEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


