/*
Namf_Location

AMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Location

import (
	"encoding/json"
	"fmt"
)

// LocationTypeAnyOf the model 'LocationTypeAnyOf'
type LocationTypeAnyOf string

// List of LocationType_anyOf
const (
	CURRENT_LOCATION LocationTypeAnyOf = "CURRENT_LOCATION"
	CURRENT_OR_LAST_KNOWN_LOCATION LocationTypeAnyOf = "CURRENT_OR_LAST_KNOWN_LOCATION"
	NOTIFICATION_VERIFICATION_ONLY LocationTypeAnyOf = "NOTIFICATION_VERIFICATION_ONLY"
	DEFERRED_LOCATION LocationTypeAnyOf = "DEFERRED_LOCATION"
)

// All allowed values of LocationTypeAnyOf enum
var AllowedLocationTypeAnyOfEnumValues = []LocationTypeAnyOf{
	"CURRENT_LOCATION",
	"CURRENT_OR_LAST_KNOWN_LOCATION",
	"NOTIFICATION_VERIFICATION_ONLY",
	"DEFERRED_LOCATION",
}

func (v *LocationTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationTypeAnyOf(value)
	for _, existing := range AllowedLocationTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationTypeAnyOf", value)
}

// NewLocationTypeAnyOfFromValue returns a pointer to a valid LocationTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationTypeAnyOfFromValue(v string) (*LocationTypeAnyOf, error) {
	ev := LocationTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationTypeAnyOf: valid values are %v", v, AllowedLocationTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedLocationTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocationType_anyOf value
func (v LocationTypeAnyOf) Ptr() *LocationTypeAnyOf {
	return &v
}

type NullableLocationTypeAnyOf struct {
	value *LocationTypeAnyOf
	isSet bool
}

func (v NullableLocationTypeAnyOf) Get() *LocationTypeAnyOf {
	return v.value
}

func (v *NullableLocationTypeAnyOf) Set(val *LocationTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationTypeAnyOf(val *LocationTypeAnyOf) *NullableLocationTypeAnyOf {
	return &NullableLocationTypeAnyOf{value: val, isSet: true}
}

func (v NullableLocationTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

