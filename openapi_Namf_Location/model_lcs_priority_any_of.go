/*
Namf_Location

AMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Location

import (
	"encoding/json"
	"fmt"
)

// LcsPriorityAnyOf the model 'LcsPriorityAnyOf'
type LcsPriorityAnyOf string

// List of LcsPriority_anyOf
const (
	HIGHEST_PRIORITY LcsPriorityAnyOf = "HIGHEST_PRIORITY"
	NORMAL_PRIORITY LcsPriorityAnyOf = "NORMAL_PRIORITY"
)

// All allowed values of LcsPriorityAnyOf enum
var AllowedLcsPriorityAnyOfEnumValues = []LcsPriorityAnyOf{
	"HIGHEST_PRIORITY",
	"NORMAL_PRIORITY",
}

func (v *LcsPriorityAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LcsPriorityAnyOf(value)
	for _, existing := range AllowedLcsPriorityAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LcsPriorityAnyOf", value)
}

// NewLcsPriorityAnyOfFromValue returns a pointer to a valid LcsPriorityAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLcsPriorityAnyOfFromValue(v string) (*LcsPriorityAnyOf, error) {
	ev := LcsPriorityAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LcsPriorityAnyOf: valid values are %v", v, AllowedLcsPriorityAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LcsPriorityAnyOf) IsValid() bool {
	for _, existing := range AllowedLcsPriorityAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LcsPriority_anyOf value
func (v LcsPriorityAnyOf) Ptr() *LcsPriorityAnyOf {
	return &v
}

type NullableLcsPriorityAnyOf struct {
	value *LcsPriorityAnyOf
	isSet bool
}

func (v NullableLcsPriorityAnyOf) Get() *LcsPriorityAnyOf {
	return v.value
}

func (v *NullableLcsPriorityAnyOf) Set(val *LcsPriorityAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLcsPriorityAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLcsPriorityAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLcsPriorityAnyOf(val *LcsPriorityAnyOf) *NullableLcsPriorityAnyOf {
	return &NullableLcsPriorityAnyOf{value: val, isSet: true}
}

func (v NullableLcsPriorityAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLcsPriorityAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

