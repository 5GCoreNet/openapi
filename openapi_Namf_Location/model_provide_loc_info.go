/*
Namf_Location

AMF Location Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Location

import (
	"encoding/json"
)

// checks if the ProvideLocInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvideLocInfo{}

// ProvideLocInfo Data within Provide Location Information Response
type ProvideLocInfo struct {
	CurrentLoc         *bool           `json:"currentLoc,omitempty"`
	Location           *UserLocation   `json:"location,omitempty"`
	AdditionalLocation *UserLocation   `json:"additionalLocation,omitempty"`
	GeoInfo            *GeographicArea `json:"geoInfo,omitempty"`
	// Indicates value of the age of the location estimate.
	LocationAge *int32   `json:"locationAge,omitempty"`
	RatType     *RatType `json:"ratType,omitempty"`
	// String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time.
	Timezone *string `json:"timezone,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	OldGuami          *Guami  `json:"oldGuami,omitempty"`
}

// NewProvideLocInfo instantiates a new ProvideLocInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvideLocInfo() *ProvideLocInfo {
	this := ProvideLocInfo{}
	return &this
}

// NewProvideLocInfoWithDefaults instantiates a new ProvideLocInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvideLocInfoWithDefaults() *ProvideLocInfo {
	this := ProvideLocInfo{}
	return &this
}

// GetCurrentLoc returns the CurrentLoc field value if set, zero value otherwise.
func (o *ProvideLocInfo) GetCurrentLoc() bool {
	if o == nil || IsNil(o.CurrentLoc) {
		var ret bool
		return ret
	}
	return *o.CurrentLoc
}

// GetCurrentLocOk returns a tuple with the CurrentLoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvideLocInfo) GetCurrentLocOk() (*bool, bool) {
	if o == nil || IsNil(o.CurrentLoc) {
		return nil, false
	}
	return o.CurrentLoc, true
}

// HasCurrentLoc returns a boolean if a field has been set.
func (o *ProvideLocInfo) HasCurrentLoc() bool {
	if o != nil && !IsNil(o.CurrentLoc) {
		return true
	}

	return false
}

// SetCurrentLoc gets a reference to the given bool and assigns it to the CurrentLoc field.
func (o *ProvideLocInfo) SetCurrentLoc(v bool) {
	o.CurrentLoc = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ProvideLocInfo) GetLocation() UserLocation {
	if o == nil || IsNil(o.Location) {
		var ret UserLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvideLocInfo) GetLocationOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ProvideLocInfo) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given UserLocation and assigns it to the Location field.
func (o *ProvideLocInfo) SetLocation(v UserLocation) {
	o.Location = &v
}

// GetAdditionalLocation returns the AdditionalLocation field value if set, zero value otherwise.
func (o *ProvideLocInfo) GetAdditionalLocation() UserLocation {
	if o == nil || IsNil(o.AdditionalLocation) {
		var ret UserLocation
		return ret
	}
	return *o.AdditionalLocation
}

// GetAdditionalLocationOk returns a tuple with the AdditionalLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvideLocInfo) GetAdditionalLocationOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.AdditionalLocation) {
		return nil, false
	}
	return o.AdditionalLocation, true
}

// HasAdditionalLocation returns a boolean if a field has been set.
func (o *ProvideLocInfo) HasAdditionalLocation() bool {
	if o != nil && !IsNil(o.AdditionalLocation) {
		return true
	}

	return false
}

// SetAdditionalLocation gets a reference to the given UserLocation and assigns it to the AdditionalLocation field.
func (o *ProvideLocInfo) SetAdditionalLocation(v UserLocation) {
	o.AdditionalLocation = &v
}

// GetGeoInfo returns the GeoInfo field value if set, zero value otherwise.
func (o *ProvideLocInfo) GetGeoInfo() GeographicArea {
	if o == nil || IsNil(o.GeoInfo) {
		var ret GeographicArea
		return ret
	}
	return *o.GeoInfo
}

// GetGeoInfoOk returns a tuple with the GeoInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvideLocInfo) GetGeoInfoOk() (*GeographicArea, bool) {
	if o == nil || IsNil(o.GeoInfo) {
		return nil, false
	}
	return o.GeoInfo, true
}

// HasGeoInfo returns a boolean if a field has been set.
func (o *ProvideLocInfo) HasGeoInfo() bool {
	if o != nil && !IsNil(o.GeoInfo) {
		return true
	}

	return false
}

// SetGeoInfo gets a reference to the given GeographicArea and assigns it to the GeoInfo field.
func (o *ProvideLocInfo) SetGeoInfo(v GeographicArea) {
	o.GeoInfo = &v
}

// GetLocationAge returns the LocationAge field value if set, zero value otherwise.
func (o *ProvideLocInfo) GetLocationAge() int32 {
	if o == nil || IsNil(o.LocationAge) {
		var ret int32
		return ret
	}
	return *o.LocationAge
}

// GetLocationAgeOk returns a tuple with the LocationAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvideLocInfo) GetLocationAgeOk() (*int32, bool) {
	if o == nil || IsNil(o.LocationAge) {
		return nil, false
	}
	return o.LocationAge, true
}

// HasLocationAge returns a boolean if a field has been set.
func (o *ProvideLocInfo) HasLocationAge() bool {
	if o != nil && !IsNil(o.LocationAge) {
		return true
	}

	return false
}

// SetLocationAge gets a reference to the given int32 and assigns it to the LocationAge field.
func (o *ProvideLocInfo) SetLocationAge(v int32) {
	o.LocationAge = &v
}

// GetRatType returns the RatType field value if set, zero value otherwise.
func (o *ProvideLocInfo) GetRatType() RatType {
	if o == nil || IsNil(o.RatType) {
		var ret RatType
		return ret
	}
	return *o.RatType
}

// GetRatTypeOk returns a tuple with the RatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvideLocInfo) GetRatTypeOk() (*RatType, bool) {
	if o == nil || IsNil(o.RatType) {
		return nil, false
	}
	return o.RatType, true
}

// HasRatType returns a boolean if a field has been set.
func (o *ProvideLocInfo) HasRatType() bool {
	if o != nil && !IsNil(o.RatType) {
		return true
	}

	return false
}

// SetRatType gets a reference to the given RatType and assigns it to the RatType field.
func (o *ProvideLocInfo) SetRatType(v RatType) {
	o.RatType = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *ProvideLocInfo) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvideLocInfo) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *ProvideLocInfo) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *ProvideLocInfo) SetTimezone(v string) {
	o.Timezone = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *ProvideLocInfo) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvideLocInfo) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *ProvideLocInfo) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *ProvideLocInfo) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetOldGuami returns the OldGuami field value if set, zero value otherwise.
func (o *ProvideLocInfo) GetOldGuami() Guami {
	if o == nil || IsNil(o.OldGuami) {
		var ret Guami
		return ret
	}
	return *o.OldGuami
}

// GetOldGuamiOk returns a tuple with the OldGuami field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvideLocInfo) GetOldGuamiOk() (*Guami, bool) {
	if o == nil || IsNil(o.OldGuami) {
		return nil, false
	}
	return o.OldGuami, true
}

// HasOldGuami returns a boolean if a field has been set.
func (o *ProvideLocInfo) HasOldGuami() bool {
	if o != nil && !IsNil(o.OldGuami) {
		return true
	}

	return false
}

// SetOldGuami gets a reference to the given Guami and assigns it to the OldGuami field.
func (o *ProvideLocInfo) SetOldGuami(v Guami) {
	o.OldGuami = &v
}

func (o ProvideLocInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvideLocInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentLoc) {
		toSerialize["currentLoc"] = o.CurrentLoc
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.AdditionalLocation) {
		toSerialize["additionalLocation"] = o.AdditionalLocation
	}
	if !IsNil(o.GeoInfo) {
		toSerialize["geoInfo"] = o.GeoInfo
	}
	if !IsNil(o.LocationAge) {
		toSerialize["locationAge"] = o.LocationAge
	}
	if !IsNil(o.RatType) {
		toSerialize["ratType"] = o.RatType
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !IsNil(o.OldGuami) {
		toSerialize["oldGuami"] = o.OldGuami
	}
	return toSerialize, nil
}

type NullableProvideLocInfo struct {
	value *ProvideLocInfo
	isSet bool
}

func (v NullableProvideLocInfo) Get() *ProvideLocInfo {
	return v.value
}

func (v *NullableProvideLocInfo) Set(val *ProvideLocInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProvideLocInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProvideLocInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvideLocInfo(val *ProvideLocInfo) *NullableProvideLocInfo {
	return &NullableProvideLocInfo{value: val, isSet: true}
}

func (v NullableProvideLocInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvideLocInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
