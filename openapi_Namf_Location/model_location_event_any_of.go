/*
Namf_Location

AMF Location Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Location

import (
	"encoding/json"
	"fmt"
)

// LocationEventAnyOf the model 'LocationEventAnyOf'
type LocationEventAnyOf string

// List of LocationEvent_anyOf
const (
	EMERGENCY_CALL_ORIGINATION LocationEventAnyOf = "EMERGENCY_CALL_ORIGINATION"
	EMERGENCY_CALL_RELEASE LocationEventAnyOf = "EMERGENCY_CALL_RELEASE"
	EMERGENCY_CALL_HANDOVER LocationEventAnyOf = "EMERGENCY_CALL_HANDOVER"
	ACTIVATION_OF_DEFERRED_LOCATION LocationEventAnyOf = "ACTIVATION_OF_DEFERRED_LOCATION"
	UE_MOBILITY_FOR_DEFERRED_LOCATION LocationEventAnyOf = "UE_MOBILITY_FOR_DEFERRED_LOCATION"
	CANCELLATION_OF_DEFERRED_LOCATION LocationEventAnyOf = "CANCELLATION_OF_DEFERRED_LOCATION"
)

// All allowed values of LocationEventAnyOf enum
var AllowedLocationEventAnyOfEnumValues = []LocationEventAnyOf{
	"EMERGENCY_CALL_ORIGINATION",
	"EMERGENCY_CALL_RELEASE",
	"EMERGENCY_CALL_HANDOVER",
	"ACTIVATION_OF_DEFERRED_LOCATION",
	"UE_MOBILITY_FOR_DEFERRED_LOCATION",
	"CANCELLATION_OF_DEFERRED_LOCATION",
}

func (v *LocationEventAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationEventAnyOf(value)
	for _, existing := range AllowedLocationEventAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationEventAnyOf", value)
}

// NewLocationEventAnyOfFromValue returns a pointer to a valid LocationEventAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationEventAnyOfFromValue(v string) (*LocationEventAnyOf, error) {
	ev := LocationEventAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationEventAnyOf: valid values are %v", v, AllowedLocationEventAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationEventAnyOf) IsValid() bool {
	for _, existing := range AllowedLocationEventAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocationEvent_anyOf value
func (v LocationEventAnyOf) Ptr() *LocationEventAnyOf {
	return &v
}

type NullableLocationEventAnyOf struct {
	value *LocationEventAnyOf
	isSet bool
}

func (v NullableLocationEventAnyOf) Get() *LocationEventAnyOf {
	return v.value
}

func (v *NullableLocationEventAnyOf) Set(val *LocationEventAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationEventAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationEventAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationEventAnyOf(val *LocationEventAnyOf) *NullableLocationEventAnyOf {
	return &NullableLocationEventAnyOf{value: val, isSet: true}
}

func (v NullableLocationEventAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationEventAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

