/*
Nnsacf_NSAC

Nnsacf_NSAC Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnsacf_NSAC

import (
	"encoding/json"
	"fmt"
)

// AcuFlag Update Flag of ACU operation. Possible values are - INCREASE - DECREASE - UPDATE 
type AcuFlag struct {
	AcuFlagAnyOf *AcuFlagAnyOf
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AcuFlag) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AcuFlagAnyOf
	err = json.Unmarshal(data, &dst.AcuFlagAnyOf);
	if err == nil {
		jsonAcuFlagAnyOf, _ := json.Marshal(dst.AcuFlagAnyOf)
		if string(jsonAcuFlagAnyOf) == "{}" { // empty struct
			dst.AcuFlagAnyOf = nil
		} else {
			return nil // data stored in dst.AcuFlagAnyOf, return on the first match
		}
	} else {
		dst.AcuFlagAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AcuFlag)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AcuFlag) MarshalJSON() ([]byte, error) {
	if src.AcuFlagAnyOf != nil {
		return json.Marshal(&src.AcuFlagAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableAcuFlag struct {
	value *AcuFlag
	isSet bool
}

func (v NullableAcuFlag) Get() *AcuFlag {
	return v.value
}

func (v *NullableAcuFlag) Set(val *AcuFlag) {
	v.value = val
	v.isSet = true
}

func (v NullableAcuFlag) IsSet() bool {
	return v.isSet
}

func (v *NullableAcuFlag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcuFlag(val *AcuFlag) *NullableAcuFlag {
	return &NullableAcuFlag{value: val, isSet: true}
}

func (v NullableAcuFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcuFlag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


