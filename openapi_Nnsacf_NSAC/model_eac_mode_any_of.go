/*
Nnsacf_NSAC

Nnsacf_NSAC Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnsacf_NSAC

import (
	"encoding/json"
	"fmt"
)

// EACModeAnyOf the model 'EACModeAnyOf'
type EACModeAnyOf string

// List of EACMode_anyOf
const (
	ACTIVE EACModeAnyOf = "ACTIVE"
	DEACTIVE EACModeAnyOf = "DEACTIVE"
)

// All allowed values of EACModeAnyOf enum
var AllowedEACModeAnyOfEnumValues = []EACModeAnyOf{
	"ACTIVE",
	"DEACTIVE",
}

func (v *EACModeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EACModeAnyOf(value)
	for _, existing := range AllowedEACModeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EACModeAnyOf", value)
}

// NewEACModeAnyOfFromValue returns a pointer to a valid EACModeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEACModeAnyOfFromValue(v string) (*EACModeAnyOf, error) {
	ev := EACModeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EACModeAnyOf: valid values are %v", v, AllowedEACModeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EACModeAnyOf) IsValid() bool {
	for _, existing := range AllowedEACModeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EACMode_anyOf value
func (v EACModeAnyOf) Ptr() *EACModeAnyOf {
	return &v
}

type NullableEACModeAnyOf struct {
	value *EACModeAnyOf
	isSet bool
}

func (v NullableEACModeAnyOf) Get() *EACModeAnyOf {
	return v.value
}

func (v *NullableEACModeAnyOf) Set(val *EACModeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEACModeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEACModeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEACModeAnyOf(val *EACModeAnyOf) *NullableEACModeAnyOf {
	return &NullableEACModeAnyOf{value: val, isSet: true}
}

func (v NullableEACModeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEACModeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

