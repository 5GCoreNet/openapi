/*
3gpp-mbs-ud-ingest

API for MBS User Data Ingest Session.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_MBSUserDataIngestSession

import (
	"encoding/json"
	"fmt"
)

// PreemptionVulnerabilityAnyOf the model 'PreemptionVulnerabilityAnyOf'
type PreemptionVulnerabilityAnyOf string

// List of PreemptionVulnerability_anyOf
const (
	NOT_PREEMPTABLE PreemptionVulnerabilityAnyOf = "NOT_PREEMPTABLE"
	PREEMPTABLE PreemptionVulnerabilityAnyOf = "PREEMPTABLE"
)

// All allowed values of PreemptionVulnerabilityAnyOf enum
var AllowedPreemptionVulnerabilityAnyOfEnumValues = []PreemptionVulnerabilityAnyOf{
	"NOT_PREEMPTABLE",
	"PREEMPTABLE",
}

func (v *PreemptionVulnerabilityAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PreemptionVulnerabilityAnyOf(value)
	for _, existing := range AllowedPreemptionVulnerabilityAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PreemptionVulnerabilityAnyOf", value)
}

// NewPreemptionVulnerabilityAnyOfFromValue returns a pointer to a valid PreemptionVulnerabilityAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPreemptionVulnerabilityAnyOfFromValue(v string) (*PreemptionVulnerabilityAnyOf, error) {
	ev := PreemptionVulnerabilityAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PreemptionVulnerabilityAnyOf: valid values are %v", v, AllowedPreemptionVulnerabilityAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PreemptionVulnerabilityAnyOf) IsValid() bool {
	for _, existing := range AllowedPreemptionVulnerabilityAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PreemptionVulnerability_anyOf value
func (v PreemptionVulnerabilityAnyOf) Ptr() *PreemptionVulnerabilityAnyOf {
	return &v
}

type NullablePreemptionVulnerabilityAnyOf struct {
	value *PreemptionVulnerabilityAnyOf
	isSet bool
}

func (v NullablePreemptionVulnerabilityAnyOf) Get() *PreemptionVulnerabilityAnyOf {
	return v.value
}

func (v *NullablePreemptionVulnerabilityAnyOf) Set(val *PreemptionVulnerabilityAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePreemptionVulnerabilityAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePreemptionVulnerabilityAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreemptionVulnerabilityAnyOf(val *PreemptionVulnerabilityAnyOf) *NullablePreemptionVulnerabilityAnyOf {
	return &NullablePreemptionVulnerabilityAnyOf{value: val, isSet: true}
}

func (v NullablePreemptionVulnerabilityAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreemptionVulnerabilityAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

