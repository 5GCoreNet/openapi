/*
3gpp-mbs-ud-ingest

API for MBS User Data Ingest Session.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_MBSUserDataIngestSession

import (
	"encoding/json"
	"fmt"
)

// DistributionMethodAnyOf the model 'DistributionMethodAnyOf'
type DistributionMethodAnyOf string

// List of DistributionMethod_anyOf
const (
	OBJECT DistributionMethodAnyOf = "OBJECT"
	PACKET DistributionMethodAnyOf = "PACKET"
)

// All allowed values of DistributionMethodAnyOf enum
var AllowedDistributionMethodAnyOfEnumValues = []DistributionMethodAnyOf{
	"OBJECT",
	"PACKET",
}

func (v *DistributionMethodAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DistributionMethodAnyOf(value)
	for _, existing := range AllowedDistributionMethodAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DistributionMethodAnyOf", value)
}

// NewDistributionMethodAnyOfFromValue returns a pointer to a valid DistributionMethodAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDistributionMethodAnyOfFromValue(v string) (*DistributionMethodAnyOf, error) {
	ev := DistributionMethodAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DistributionMethodAnyOf: valid values are %v", v, AllowedDistributionMethodAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DistributionMethodAnyOf) IsValid() bool {
	for _, existing := range AllowedDistributionMethodAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DistributionMethod_anyOf value
func (v DistributionMethodAnyOf) Ptr() *DistributionMethodAnyOf {
	return &v
}

type NullableDistributionMethodAnyOf struct {
	value *DistributionMethodAnyOf
	isSet bool
}

func (v NullableDistributionMethodAnyOf) Get() *DistributionMethodAnyOf {
	return v.value
}

func (v *NullableDistributionMethodAnyOf) Set(val *DistributionMethodAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDistributionMethodAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDistributionMethodAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistributionMethodAnyOf(val *DistributionMethodAnyOf) *NullableDistributionMethodAnyOf {
	return &NullableDistributionMethodAnyOf{value: val, isSet: true}
}

func (v NullableDistributionMethodAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistributionMethodAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

