/*
GBA BSF Nbsp_GBA Service

GBA BSF Nbsp_GBA Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nbsp_GBA

import (
	"encoding/json"
	"fmt"
)

// UeIdTypeAnyOf the model 'UeIdTypeAnyOf'
type UeIdTypeAnyOf string

// List of UeIdType_anyOf
const (
	PUBLIC UeIdTypeAnyOf = "PUBLIC"
	PRIVATE UeIdTypeAnyOf = "PRIVATE"
)

// All allowed values of UeIdTypeAnyOf enum
var AllowedUeIdTypeAnyOfEnumValues = []UeIdTypeAnyOf{
	"PUBLIC",
	"PRIVATE",
}

func (v *UeIdTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UeIdTypeAnyOf(value)
	for _, existing := range AllowedUeIdTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UeIdTypeAnyOf", value)
}

// NewUeIdTypeAnyOfFromValue returns a pointer to a valid UeIdTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUeIdTypeAnyOfFromValue(v string) (*UeIdTypeAnyOf, error) {
	ev := UeIdTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UeIdTypeAnyOf: valid values are %v", v, AllowedUeIdTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UeIdTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedUeIdTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UeIdType_anyOf value
func (v UeIdTypeAnyOf) Ptr() *UeIdTypeAnyOf {
	return &v
}

type NullableUeIdTypeAnyOf struct {
	value *UeIdTypeAnyOf
	isSet bool
}

func (v NullableUeIdTypeAnyOf) Get() *UeIdTypeAnyOf {
	return v.value
}

func (v *NullableUeIdTypeAnyOf) Set(val *UeIdTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUeIdTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUeIdTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeIdTypeAnyOf(val *UeIdTypeAnyOf) *NullableUeIdTypeAnyOf {
	return &NullableUeIdTypeAnyOf{value: val, isSet: true}
}

func (v NullableUeIdTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeIdTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

