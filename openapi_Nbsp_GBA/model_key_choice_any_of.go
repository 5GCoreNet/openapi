/*
GBA BSF Nbsp_GBA Service

GBA BSF Nbsp_GBA Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nbsp_GBA

import (
	"encoding/json"
	"fmt"
)

// KeyChoiceAnyOf the model 'KeyChoiceAnyOf'
type KeyChoiceAnyOf string

// List of KeyChoice_anyOf
const (
	ME_BASED_KEY KeyChoiceAnyOf = "ME_BASED_KEY"
	UICC_BASED_KEY KeyChoiceAnyOf = "UICC_BASED_KEY"
	ME_UICC_BASED_KEYS KeyChoiceAnyOf = "ME_UICC_BASED_KEYS"
)

// All allowed values of KeyChoiceAnyOf enum
var AllowedKeyChoiceAnyOfEnumValues = []KeyChoiceAnyOf{
	"ME_BASED_KEY",
	"UICC_BASED_KEY",
	"ME_UICC_BASED_KEYS",
}

func (v *KeyChoiceAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyChoiceAnyOf(value)
	for _, existing := range AllowedKeyChoiceAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyChoiceAnyOf", value)
}

// NewKeyChoiceAnyOfFromValue returns a pointer to a valid KeyChoiceAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyChoiceAnyOfFromValue(v string) (*KeyChoiceAnyOf, error) {
	ev := KeyChoiceAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyChoiceAnyOf: valid values are %v", v, AllowedKeyChoiceAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyChoiceAnyOf) IsValid() bool {
	for _, existing := range AllowedKeyChoiceAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyChoice_anyOf value
func (v KeyChoiceAnyOf) Ptr() *KeyChoiceAnyOf {
	return &v
}

type NullableKeyChoiceAnyOf struct {
	value *KeyChoiceAnyOf
	isSet bool
}

func (v NullableKeyChoiceAnyOf) Get() *KeyChoiceAnyOf {
	return v.value
}

func (v *NullableKeyChoiceAnyOf) Set(val *KeyChoiceAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyChoiceAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyChoiceAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyChoiceAnyOf(val *KeyChoiceAnyOf) *NullableKeyChoiceAnyOf {
	return &NullableKeyChoiceAnyOf{value: val, isSet: true}
}

func (v NullableKeyChoiceAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyChoiceAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

