/*
GBA BSF Nbsp_GBA Service

GBA BSF Nbsp_GBA Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nbsp_GBA

import (
	"encoding/json"
	"fmt"
)

// UiccOrMeAnyOf the model 'UiccOrMeAnyOf'
type UiccOrMeAnyOf string

// List of UiccOrMe_anyOf
const (
	ME UiccOrMeAnyOf = "GBA_ME"
	U UiccOrMeAnyOf = "GBA_U"
)

// All allowed values of UiccOrMeAnyOf enum
var AllowedUiccOrMeAnyOfEnumValues = []UiccOrMeAnyOf{
	"GBA_ME",
	"GBA_U",
}

func (v *UiccOrMeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UiccOrMeAnyOf(value)
	for _, existing := range AllowedUiccOrMeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UiccOrMeAnyOf", value)
}

// NewUiccOrMeAnyOfFromValue returns a pointer to a valid UiccOrMeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUiccOrMeAnyOfFromValue(v string) (*UiccOrMeAnyOf, error) {
	ev := UiccOrMeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UiccOrMeAnyOf: valid values are %v", v, AllowedUiccOrMeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UiccOrMeAnyOf) IsValid() bool {
	for _, existing := range AllowedUiccOrMeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UiccOrMe_anyOf value
func (v UiccOrMeAnyOf) Ptr() *UiccOrMeAnyOf {
	return &v
}

type NullableUiccOrMeAnyOf struct {
	value *UiccOrMeAnyOf
	isSet bool
}

func (v NullableUiccOrMeAnyOf) Get() *UiccOrMeAnyOf {
	return v.value
}

func (v *NullableUiccOrMeAnyOf) Set(val *UiccOrMeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUiccOrMeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUiccOrMeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUiccOrMeAnyOf(val *UiccOrMeAnyOf) *NullableUiccOrMeAnyOf {
	return &NullableUiccOrMeAnyOf{value: val, isSet: true}
}

func (v NullableUiccOrMeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUiccOrMeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

