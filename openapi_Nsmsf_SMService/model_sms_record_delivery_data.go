/*
Nsmsf_SMService Service API

SMSF SMService.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmsf_SMService

import (
	"encoding/json"
)

// checks if the SmsRecordDeliveryData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsRecordDeliveryData{}

// SmsRecordDeliveryData Represents information on the result of invoking the UplinkSMS service operation.
type SmsRecordDeliveryData struct {
	// Represents a record ID, used to identify a message carrying SMS payload.
	SmsRecordId    string            `json:"smsRecordId"`
	DeliveryStatus SmsDeliveryStatus `json:"deliveryStatus"`
}

// NewSmsRecordDeliveryData instantiates a new SmsRecordDeliveryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsRecordDeliveryData(smsRecordId string, deliveryStatus SmsDeliveryStatus) *SmsRecordDeliveryData {
	this := SmsRecordDeliveryData{}
	this.SmsRecordId = smsRecordId
	this.DeliveryStatus = deliveryStatus
	return &this
}

// NewSmsRecordDeliveryDataWithDefaults instantiates a new SmsRecordDeliveryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsRecordDeliveryDataWithDefaults() *SmsRecordDeliveryData {
	this := SmsRecordDeliveryData{}
	return &this
}

// GetSmsRecordId returns the SmsRecordId field value
func (o *SmsRecordDeliveryData) GetSmsRecordId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmsRecordId
}

// GetSmsRecordIdOk returns a tuple with the SmsRecordId field value
// and a boolean to check if the value has been set.
func (o *SmsRecordDeliveryData) GetSmsRecordIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmsRecordId, true
}

// SetSmsRecordId sets field value
func (o *SmsRecordDeliveryData) SetSmsRecordId(v string) {
	o.SmsRecordId = v
}

// GetDeliveryStatus returns the DeliveryStatus field value
func (o *SmsRecordDeliveryData) GetDeliveryStatus() SmsDeliveryStatus {
	if o == nil {
		var ret SmsDeliveryStatus
		return ret
	}

	return o.DeliveryStatus
}

// GetDeliveryStatusOk returns a tuple with the DeliveryStatus field value
// and a boolean to check if the value has been set.
func (o *SmsRecordDeliveryData) GetDeliveryStatusOk() (*SmsDeliveryStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliveryStatus, true
}

// SetDeliveryStatus sets field value
func (o *SmsRecordDeliveryData) SetDeliveryStatus(v SmsDeliveryStatus) {
	o.DeliveryStatus = v
}

func (o SmsRecordDeliveryData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsRecordDeliveryData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["smsRecordId"] = o.SmsRecordId
	toSerialize["deliveryStatus"] = o.DeliveryStatus
	return toSerialize, nil
}

type NullableSmsRecordDeliveryData struct {
	value *SmsRecordDeliveryData
	isSet bool
}

func (v NullableSmsRecordDeliveryData) Get() *SmsRecordDeliveryData {
	return v.value
}

func (v *NullableSmsRecordDeliveryData) Set(val *SmsRecordDeliveryData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsRecordDeliveryData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsRecordDeliveryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsRecordDeliveryData(val *SmsRecordDeliveryData) *NullableSmsRecordDeliveryData {
	return &NullableSmsRecordDeliveryData{value: val, isSet: true}
}

func (v NullableSmsRecordDeliveryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsRecordDeliveryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
