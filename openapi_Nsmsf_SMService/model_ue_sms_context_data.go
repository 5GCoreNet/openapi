/*
Nsmsf_SMService Service API

SMSF SMService.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmsf_SMService

import (
	"encoding/json"
)

// checks if the UeSmsContextData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UeSmsContextData{}

// UeSmsContextData Represents the information used for activating the SMS service for a service user, or updating the parameters of the SMS service.
type UeSmsContextData struct {
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi string `json:"supi"`
	// String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.  
	Pei *string `json:"pei,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	AmfId string `json:"amfId"`
	Guamis []Guami `json:"guamis,omitempty"`
	AccessType AccessType `json:"accessType"`
	AdditionalAccessType *AccessType `json:"additionalAccessType,omitempty"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	Gpsi *string `json:"gpsi,omitempty"`
	UeLocation *UserLocation `json:"ueLocation,omitempty"`
	// String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time. 
	UeTimeZone *string `json:"ueTimeZone,omitempty"`
	TraceData NullableTraceData `json:"traceData,omitempty"`
	BackupAmfInfo []BackupAmfInfo `json:"backupAmfInfo,omitempty"`
	// Identifier of a group of NFs.
	UdmGroupId *string `json:"udmGroupId,omitempty"`
	RoutingIndicator *string `json:"routingIndicator,omitempty"`
	HNwPubKeyId *int32 `json:"hNwPubKeyId,omitempty"`
	RatType *RatType `json:"ratType,omitempty"`
	AdditionalRatType *RatType `json:"additionalRatType,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
}

// NewUeSmsContextData instantiates a new UeSmsContextData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeSmsContextData(supi string, amfId string, accessType AccessType) *UeSmsContextData {
	this := UeSmsContextData{}
	this.Supi = supi
	this.AmfId = amfId
	this.AccessType = accessType
	return &this
}

// NewUeSmsContextDataWithDefaults instantiates a new UeSmsContextData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeSmsContextDataWithDefaults() *UeSmsContextData {
	this := UeSmsContextData{}
	return &this
}

// GetSupi returns the Supi field value
func (o *UeSmsContextData) GetSupi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Supi
}

// GetSupiOk returns a tuple with the Supi field value
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetSupiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supi, true
}

// SetSupi sets field value
func (o *UeSmsContextData) SetSupi(v string) {
	o.Supi = v
}

// GetPei returns the Pei field value if set, zero value otherwise.
func (o *UeSmsContextData) GetPei() string {
	if o == nil || isNil(o.Pei) {
		var ret string
		return ret
	}
	return *o.Pei
}

// GetPeiOk returns a tuple with the Pei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetPeiOk() (*string, bool) {
	if o == nil || isNil(o.Pei) {
		return nil, false
	}
	return o.Pei, true
}

// HasPei returns a boolean if a field has been set.
func (o *UeSmsContextData) HasPei() bool {
	if o != nil && !isNil(o.Pei) {
		return true
	}

	return false
}

// SetPei gets a reference to the given string and assigns it to the Pei field.
func (o *UeSmsContextData) SetPei(v string) {
	o.Pei = &v
}

// GetAmfId returns the AmfId field value
func (o *UeSmsContextData) GetAmfId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmfId
}

// GetAmfIdOk returns a tuple with the AmfId field value
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetAmfIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmfId, true
}

// SetAmfId sets field value
func (o *UeSmsContextData) SetAmfId(v string) {
	o.AmfId = v
}

// GetGuamis returns the Guamis field value if set, zero value otherwise.
func (o *UeSmsContextData) GetGuamis() []Guami {
	if o == nil || isNil(o.Guamis) {
		var ret []Guami
		return ret
	}
	return o.Guamis
}

// GetGuamisOk returns a tuple with the Guamis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetGuamisOk() ([]Guami, bool) {
	if o == nil || isNil(o.Guamis) {
		return nil, false
	}
	return o.Guamis, true
}

// HasGuamis returns a boolean if a field has been set.
func (o *UeSmsContextData) HasGuamis() bool {
	if o != nil && !isNil(o.Guamis) {
		return true
	}

	return false
}

// SetGuamis gets a reference to the given []Guami and assigns it to the Guamis field.
func (o *UeSmsContextData) SetGuamis(v []Guami) {
	o.Guamis = v
}

// GetAccessType returns the AccessType field value
func (o *UeSmsContextData) GetAccessType() AccessType {
	if o == nil {
		var ret AccessType
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *UeSmsContextData) SetAccessType(v AccessType) {
	o.AccessType = v
}

// GetAdditionalAccessType returns the AdditionalAccessType field value if set, zero value otherwise.
func (o *UeSmsContextData) GetAdditionalAccessType() AccessType {
	if o == nil || isNil(o.AdditionalAccessType) {
		var ret AccessType
		return ret
	}
	return *o.AdditionalAccessType
}

// GetAdditionalAccessTypeOk returns a tuple with the AdditionalAccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetAdditionalAccessTypeOk() (*AccessType, bool) {
	if o == nil || isNil(o.AdditionalAccessType) {
		return nil, false
	}
	return o.AdditionalAccessType, true
}

// HasAdditionalAccessType returns a boolean if a field has been set.
func (o *UeSmsContextData) HasAdditionalAccessType() bool {
	if o != nil && !isNil(o.AdditionalAccessType) {
		return true
	}

	return false
}

// SetAdditionalAccessType gets a reference to the given AccessType and assigns it to the AdditionalAccessType field.
func (o *UeSmsContextData) SetAdditionalAccessType(v AccessType) {
	o.AdditionalAccessType = &v
}

// GetGpsi returns the Gpsi field value if set, zero value otherwise.
func (o *UeSmsContextData) GetGpsi() string {
	if o == nil || isNil(o.Gpsi) {
		var ret string
		return ret
	}
	return *o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetGpsiOk() (*string, bool) {
	if o == nil || isNil(o.Gpsi) {
		return nil, false
	}
	return o.Gpsi, true
}

// HasGpsi returns a boolean if a field has been set.
func (o *UeSmsContextData) HasGpsi() bool {
	if o != nil && !isNil(o.Gpsi) {
		return true
	}

	return false
}

// SetGpsi gets a reference to the given string and assigns it to the Gpsi field.
func (o *UeSmsContextData) SetGpsi(v string) {
	o.Gpsi = &v
}

// GetUeLocation returns the UeLocation field value if set, zero value otherwise.
func (o *UeSmsContextData) GetUeLocation() UserLocation {
	if o == nil || isNil(o.UeLocation) {
		var ret UserLocation
		return ret
	}
	return *o.UeLocation
}

// GetUeLocationOk returns a tuple with the UeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetUeLocationOk() (*UserLocation, bool) {
	if o == nil || isNil(o.UeLocation) {
		return nil, false
	}
	return o.UeLocation, true
}

// HasUeLocation returns a boolean if a field has been set.
func (o *UeSmsContextData) HasUeLocation() bool {
	if o != nil && !isNil(o.UeLocation) {
		return true
	}

	return false
}

// SetUeLocation gets a reference to the given UserLocation and assigns it to the UeLocation field.
func (o *UeSmsContextData) SetUeLocation(v UserLocation) {
	o.UeLocation = &v
}

// GetUeTimeZone returns the UeTimeZone field value if set, zero value otherwise.
func (o *UeSmsContextData) GetUeTimeZone() string {
	if o == nil || isNil(o.UeTimeZone) {
		var ret string
		return ret
	}
	return *o.UeTimeZone
}

// GetUeTimeZoneOk returns a tuple with the UeTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetUeTimeZoneOk() (*string, bool) {
	if o == nil || isNil(o.UeTimeZone) {
		return nil, false
	}
	return o.UeTimeZone, true
}

// HasUeTimeZone returns a boolean if a field has been set.
func (o *UeSmsContextData) HasUeTimeZone() bool {
	if o != nil && !isNil(o.UeTimeZone) {
		return true
	}

	return false
}

// SetUeTimeZone gets a reference to the given string and assigns it to the UeTimeZone field.
func (o *UeSmsContextData) SetUeTimeZone(v string) {
	o.UeTimeZone = &v
}

// GetTraceData returns the TraceData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UeSmsContextData) GetTraceData() TraceData {
	if o == nil || isNil(o.TraceData.Get()) {
		var ret TraceData
		return ret
	}
	return *o.TraceData.Get()
}

// GetTraceDataOk returns a tuple with the TraceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UeSmsContextData) GetTraceDataOk() (*TraceData, bool) {
	if o == nil {
		return nil, false
	}
	return o.TraceData.Get(), o.TraceData.IsSet()
}

// HasTraceData returns a boolean if a field has been set.
func (o *UeSmsContextData) HasTraceData() bool {
	if o != nil && o.TraceData.IsSet() {
		return true
	}

	return false
}

// SetTraceData gets a reference to the given NullableTraceData and assigns it to the TraceData field.
func (o *UeSmsContextData) SetTraceData(v TraceData) {
	o.TraceData.Set(&v)
}
// SetTraceDataNil sets the value for TraceData to be an explicit nil
func (o *UeSmsContextData) SetTraceDataNil() {
	o.TraceData.Set(nil)
}

// UnsetTraceData ensures that no value is present for TraceData, not even an explicit nil
func (o *UeSmsContextData) UnsetTraceData() {
	o.TraceData.Unset()
}

// GetBackupAmfInfo returns the BackupAmfInfo field value if set, zero value otherwise.
func (o *UeSmsContextData) GetBackupAmfInfo() []BackupAmfInfo {
	if o == nil || isNil(o.BackupAmfInfo) {
		var ret []BackupAmfInfo
		return ret
	}
	return o.BackupAmfInfo
}

// GetBackupAmfInfoOk returns a tuple with the BackupAmfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetBackupAmfInfoOk() ([]BackupAmfInfo, bool) {
	if o == nil || isNil(o.BackupAmfInfo) {
		return nil, false
	}
	return o.BackupAmfInfo, true
}

// HasBackupAmfInfo returns a boolean if a field has been set.
func (o *UeSmsContextData) HasBackupAmfInfo() bool {
	if o != nil && !isNil(o.BackupAmfInfo) {
		return true
	}

	return false
}

// SetBackupAmfInfo gets a reference to the given []BackupAmfInfo and assigns it to the BackupAmfInfo field.
func (o *UeSmsContextData) SetBackupAmfInfo(v []BackupAmfInfo) {
	o.BackupAmfInfo = v
}

// GetUdmGroupId returns the UdmGroupId field value if set, zero value otherwise.
func (o *UeSmsContextData) GetUdmGroupId() string {
	if o == nil || isNil(o.UdmGroupId) {
		var ret string
		return ret
	}
	return *o.UdmGroupId
}

// GetUdmGroupIdOk returns a tuple with the UdmGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetUdmGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.UdmGroupId) {
		return nil, false
	}
	return o.UdmGroupId, true
}

// HasUdmGroupId returns a boolean if a field has been set.
func (o *UeSmsContextData) HasUdmGroupId() bool {
	if o != nil && !isNil(o.UdmGroupId) {
		return true
	}

	return false
}

// SetUdmGroupId gets a reference to the given string and assigns it to the UdmGroupId field.
func (o *UeSmsContextData) SetUdmGroupId(v string) {
	o.UdmGroupId = &v
}

// GetRoutingIndicator returns the RoutingIndicator field value if set, zero value otherwise.
func (o *UeSmsContextData) GetRoutingIndicator() string {
	if o == nil || isNil(o.RoutingIndicator) {
		var ret string
		return ret
	}
	return *o.RoutingIndicator
}

// GetRoutingIndicatorOk returns a tuple with the RoutingIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetRoutingIndicatorOk() (*string, bool) {
	if o == nil || isNil(o.RoutingIndicator) {
		return nil, false
	}
	return o.RoutingIndicator, true
}

// HasRoutingIndicator returns a boolean if a field has been set.
func (o *UeSmsContextData) HasRoutingIndicator() bool {
	if o != nil && !isNil(o.RoutingIndicator) {
		return true
	}

	return false
}

// SetRoutingIndicator gets a reference to the given string and assigns it to the RoutingIndicator field.
func (o *UeSmsContextData) SetRoutingIndicator(v string) {
	o.RoutingIndicator = &v
}

// GetHNwPubKeyId returns the HNwPubKeyId field value if set, zero value otherwise.
func (o *UeSmsContextData) GetHNwPubKeyId() int32 {
	if o == nil || isNil(o.HNwPubKeyId) {
		var ret int32
		return ret
	}
	return *o.HNwPubKeyId
}

// GetHNwPubKeyIdOk returns a tuple with the HNwPubKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetHNwPubKeyIdOk() (*int32, bool) {
	if o == nil || isNil(o.HNwPubKeyId) {
		return nil, false
	}
	return o.HNwPubKeyId, true
}

// HasHNwPubKeyId returns a boolean if a field has been set.
func (o *UeSmsContextData) HasHNwPubKeyId() bool {
	if o != nil && !isNil(o.HNwPubKeyId) {
		return true
	}

	return false
}

// SetHNwPubKeyId gets a reference to the given int32 and assigns it to the HNwPubKeyId field.
func (o *UeSmsContextData) SetHNwPubKeyId(v int32) {
	o.HNwPubKeyId = &v
}

// GetRatType returns the RatType field value if set, zero value otherwise.
func (o *UeSmsContextData) GetRatType() RatType {
	if o == nil || isNil(o.RatType) {
		var ret RatType
		return ret
	}
	return *o.RatType
}

// GetRatTypeOk returns a tuple with the RatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetRatTypeOk() (*RatType, bool) {
	if o == nil || isNil(o.RatType) {
		return nil, false
	}
	return o.RatType, true
}

// HasRatType returns a boolean if a field has been set.
func (o *UeSmsContextData) HasRatType() bool {
	if o != nil && !isNil(o.RatType) {
		return true
	}

	return false
}

// SetRatType gets a reference to the given RatType and assigns it to the RatType field.
func (o *UeSmsContextData) SetRatType(v RatType) {
	o.RatType = &v
}

// GetAdditionalRatType returns the AdditionalRatType field value if set, zero value otherwise.
func (o *UeSmsContextData) GetAdditionalRatType() RatType {
	if o == nil || isNil(o.AdditionalRatType) {
		var ret RatType
		return ret
	}
	return *o.AdditionalRatType
}

// GetAdditionalRatTypeOk returns a tuple with the AdditionalRatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetAdditionalRatTypeOk() (*RatType, bool) {
	if o == nil || isNil(o.AdditionalRatType) {
		return nil, false
	}
	return o.AdditionalRatType, true
}

// HasAdditionalRatType returns a boolean if a field has been set.
func (o *UeSmsContextData) HasAdditionalRatType() bool {
	if o != nil && !isNil(o.AdditionalRatType) {
		return true
	}

	return false
}

// SetAdditionalRatType gets a reference to the given RatType and assigns it to the AdditionalRatType field.
func (o *UeSmsContextData) SetAdditionalRatType(v RatType) {
	o.AdditionalRatType = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *UeSmsContextData) GetSupportedFeatures() string {
	if o == nil || isNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeSmsContextData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || isNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *UeSmsContextData) HasSupportedFeatures() bool {
	if o != nil && !isNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *UeSmsContextData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

func (o UeSmsContextData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UeSmsContextData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["supi"] = o.Supi
	if !isNil(o.Pei) {
		toSerialize["pei"] = o.Pei
	}
	toSerialize["amfId"] = o.AmfId
	if !isNil(o.Guamis) {
		toSerialize["guamis"] = o.Guamis
	}
	toSerialize["accessType"] = o.AccessType
	if !isNil(o.AdditionalAccessType) {
		toSerialize["additionalAccessType"] = o.AdditionalAccessType
	}
	if !isNil(o.Gpsi) {
		toSerialize["gpsi"] = o.Gpsi
	}
	if !isNil(o.UeLocation) {
		toSerialize["ueLocation"] = o.UeLocation
	}
	if !isNil(o.UeTimeZone) {
		toSerialize["ueTimeZone"] = o.UeTimeZone
	}
	if o.TraceData.IsSet() {
		toSerialize["traceData"] = o.TraceData.Get()
	}
	if !isNil(o.BackupAmfInfo) {
		toSerialize["backupAmfInfo"] = o.BackupAmfInfo
	}
	if !isNil(o.UdmGroupId) {
		toSerialize["udmGroupId"] = o.UdmGroupId
	}
	if !isNil(o.RoutingIndicator) {
		toSerialize["routingIndicator"] = o.RoutingIndicator
	}
	if !isNil(o.HNwPubKeyId) {
		toSerialize["hNwPubKeyId"] = o.HNwPubKeyId
	}
	if !isNil(o.RatType) {
		toSerialize["ratType"] = o.RatType
	}
	if !isNil(o.AdditionalRatType) {
		toSerialize["additionalRatType"] = o.AdditionalRatType
	}
	if !isNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	return toSerialize, nil
}

type NullableUeSmsContextData struct {
	value *UeSmsContextData
	isSet bool
}

func (v NullableUeSmsContextData) Get() *UeSmsContextData {
	return v.value
}

func (v *NullableUeSmsContextData) Set(val *UeSmsContextData) {
	v.value = val
	v.isSet = true
}

func (v NullableUeSmsContextData) IsSet() bool {
	return v.isSet
}

func (v *NullableUeSmsContextData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeSmsContextData(val *UeSmsContextData) *NullableUeSmsContextData {
	return &NullableUeSmsContextData{value: val, isSet: true}
}

func (v NullableUeSmsContextData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeSmsContextData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


