/*
Nsmsf_SMService Service API

SMSF SMService.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsmsf_SMService

import (
	"encoding/json"
)

// checks if the SmsRecordData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsRecordData{}

// SmsRecordData Represents the information sent within a request message of the UplinkSMS service operation, for delivering SMS payload.
type SmsRecordData struct {
	// Represents a record ID, used to identify a message carrying SMS payload.
	SmsRecordId string          `json:"smsRecordId"`
	SmsPayload  RefToBinaryData `json:"smsPayload"`
	AccessType  *AccessType     `json:"accessType,omitempty"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.
	Gpsi *string `json:"gpsi,omitempty"`
	// String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.
	Pei        *string       `json:"pei,omitempty"`
	UeLocation *UserLocation `json:"ueLocation,omitempty"`
	// String with format \"time-numoffset\" optionally appended by \"daylightSavingTime\", where  - \"time-numoffset\" shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \"daylightSavingTime\" shall represent the adjustment that has been made and shall be    encoded as \"+1\" or \"+2\" for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time.
	UeTimeZone *string `json:"ueTimeZone,omitempty"`
}

// NewSmsRecordData instantiates a new SmsRecordData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsRecordData(smsRecordId string, smsPayload RefToBinaryData) *SmsRecordData {
	this := SmsRecordData{}
	this.SmsRecordId = smsRecordId
	this.SmsPayload = smsPayload
	return &this
}

// NewSmsRecordDataWithDefaults instantiates a new SmsRecordData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsRecordDataWithDefaults() *SmsRecordData {
	this := SmsRecordData{}
	return &this
}

// GetSmsRecordId returns the SmsRecordId field value
func (o *SmsRecordData) GetSmsRecordId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmsRecordId
}

// GetSmsRecordIdOk returns a tuple with the SmsRecordId field value
// and a boolean to check if the value has been set.
func (o *SmsRecordData) GetSmsRecordIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmsRecordId, true
}

// SetSmsRecordId sets field value
func (o *SmsRecordData) SetSmsRecordId(v string) {
	o.SmsRecordId = v
}

// GetSmsPayload returns the SmsPayload field value
func (o *SmsRecordData) GetSmsPayload() RefToBinaryData {
	if o == nil {
		var ret RefToBinaryData
		return ret
	}

	return o.SmsPayload
}

// GetSmsPayloadOk returns a tuple with the SmsPayload field value
// and a boolean to check if the value has been set.
func (o *SmsRecordData) GetSmsPayloadOk() (*RefToBinaryData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmsPayload, true
}

// SetSmsPayload sets field value
func (o *SmsRecordData) SetSmsPayload(v RefToBinaryData) {
	o.SmsPayload = v
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *SmsRecordData) GetAccessType() AccessType {
	if o == nil || IsNil(o.AccessType) {
		var ret AccessType
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsRecordData) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil || IsNil(o.AccessType) {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *SmsRecordData) HasAccessType() bool {
	if o != nil && !IsNil(o.AccessType) {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given AccessType and assigns it to the AccessType field.
func (o *SmsRecordData) SetAccessType(v AccessType) {
	o.AccessType = &v
}

// GetGpsi returns the Gpsi field value if set, zero value otherwise.
func (o *SmsRecordData) GetGpsi() string {
	if o == nil || IsNil(o.Gpsi) {
		var ret string
		return ret
	}
	return *o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsRecordData) GetGpsiOk() (*string, bool) {
	if o == nil || IsNil(o.Gpsi) {
		return nil, false
	}
	return o.Gpsi, true
}

// HasGpsi returns a boolean if a field has been set.
func (o *SmsRecordData) HasGpsi() bool {
	if o != nil && !IsNil(o.Gpsi) {
		return true
	}

	return false
}

// SetGpsi gets a reference to the given string and assigns it to the Gpsi field.
func (o *SmsRecordData) SetGpsi(v string) {
	o.Gpsi = &v
}

// GetPei returns the Pei field value if set, zero value otherwise.
func (o *SmsRecordData) GetPei() string {
	if o == nil || IsNil(o.Pei) {
		var ret string
		return ret
	}
	return *o.Pei
}

// GetPeiOk returns a tuple with the Pei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsRecordData) GetPeiOk() (*string, bool) {
	if o == nil || IsNil(o.Pei) {
		return nil, false
	}
	return o.Pei, true
}

// HasPei returns a boolean if a field has been set.
func (o *SmsRecordData) HasPei() bool {
	if o != nil && !IsNil(o.Pei) {
		return true
	}

	return false
}

// SetPei gets a reference to the given string and assigns it to the Pei field.
func (o *SmsRecordData) SetPei(v string) {
	o.Pei = &v
}

// GetUeLocation returns the UeLocation field value if set, zero value otherwise.
func (o *SmsRecordData) GetUeLocation() UserLocation {
	if o == nil || IsNil(o.UeLocation) {
		var ret UserLocation
		return ret
	}
	return *o.UeLocation
}

// GetUeLocationOk returns a tuple with the UeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsRecordData) GetUeLocationOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.UeLocation) {
		return nil, false
	}
	return o.UeLocation, true
}

// HasUeLocation returns a boolean if a field has been set.
func (o *SmsRecordData) HasUeLocation() bool {
	if o != nil && !IsNil(o.UeLocation) {
		return true
	}

	return false
}

// SetUeLocation gets a reference to the given UserLocation and assigns it to the UeLocation field.
func (o *SmsRecordData) SetUeLocation(v UserLocation) {
	o.UeLocation = &v
}

// GetUeTimeZone returns the UeTimeZone field value if set, zero value otherwise.
func (o *SmsRecordData) GetUeTimeZone() string {
	if o == nil || IsNil(o.UeTimeZone) {
		var ret string
		return ret
	}
	return *o.UeTimeZone
}

// GetUeTimeZoneOk returns a tuple with the UeTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsRecordData) GetUeTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.UeTimeZone) {
		return nil, false
	}
	return o.UeTimeZone, true
}

// HasUeTimeZone returns a boolean if a field has been set.
func (o *SmsRecordData) HasUeTimeZone() bool {
	if o != nil && !IsNil(o.UeTimeZone) {
		return true
	}

	return false
}

// SetUeTimeZone gets a reference to the given string and assigns it to the UeTimeZone field.
func (o *SmsRecordData) SetUeTimeZone(v string) {
	o.UeTimeZone = &v
}

func (o SmsRecordData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsRecordData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["smsRecordId"] = o.SmsRecordId
	toSerialize["smsPayload"] = o.SmsPayload
	if !IsNil(o.AccessType) {
		toSerialize["accessType"] = o.AccessType
	}
	if !IsNil(o.Gpsi) {
		toSerialize["gpsi"] = o.Gpsi
	}
	if !IsNil(o.Pei) {
		toSerialize["pei"] = o.Pei
	}
	if !IsNil(o.UeLocation) {
		toSerialize["ueLocation"] = o.UeLocation
	}
	if !IsNil(o.UeTimeZone) {
		toSerialize["ueTimeZone"] = o.UeTimeZone
	}
	return toSerialize, nil
}

type NullableSmsRecordData struct {
	value *SmsRecordData
	isSet bool
}

func (v NullableSmsRecordData) Get() *SmsRecordData {
	return v.value
}

func (v *NullableSmsRecordData) Set(val *SmsRecordData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsRecordData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsRecordData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsRecordData(val *SmsRecordData) *NullableSmsRecordData {
	return &NullableSmsRecordData{value: val, isSet: true}
}

func (v NullableSmsRecordData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsRecordData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
