/*
Npcf_PolicyAuthorization Service API

PCF Policy Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_PolicyAuthorization

import (
	"encoding/json"
)

// checks if the AfRoutingRequirementRm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AfRoutingRequirementRm{}

// AfRoutingRequirementRm This data type is defined in the same way as the AfRoutingRequirement data type, but with the OpenAPI nullable property set to true and the spVal and tempVals attributes defined as removable. 
type AfRoutingRequirementRm struct {
	AppReloc *bool `json:"appReloc,omitempty"`
	RouteToLocs []RouteToLocation `json:"routeToLocs,omitempty"`
	SpVal NullableSpatialValidityRm `json:"spVal,omitempty"`
	TempVals []TemporalValidity `json:"tempVals,omitempty"`
	UpPathChgSub NullableUpPathChgEvent `json:"upPathChgSub,omitempty"`
	AddrPreserInd NullableBool `json:"addrPreserInd,omitempty"`
	// Indicates whether simultaneous connectivity should be temporarily maintained for the source and target PSA. 
	SimConnInd NullableBool `json:"simConnInd,omitempty"`
	// indicating a time in seconds with OpenAPI defined 'nullable: true' property.
	SimConnTerm NullableInt32 `json:"simConnTerm,omitempty"`
	// Contains EAS IP replacement information.
	EasIpReplaceInfos []EasIpReplacementInfo `json:"easIpReplaceInfos,omitempty"`
	// Indicates the EAS rediscovery is required.
	EasRedisInd *bool `json:"easRedisInd,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible with the OpenAPI 'nullable: true' property. 
	MaxAllowedUpLat NullableInt32 `json:"maxAllowedUpLat,omitempty"`
}

// NewAfRoutingRequirementRm instantiates a new AfRoutingRequirementRm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAfRoutingRequirementRm() *AfRoutingRequirementRm {
	this := AfRoutingRequirementRm{}
	return &this
}

// NewAfRoutingRequirementRmWithDefaults instantiates a new AfRoutingRequirementRm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAfRoutingRequirementRmWithDefaults() *AfRoutingRequirementRm {
	this := AfRoutingRequirementRm{}
	return &this
}

// GetAppReloc returns the AppReloc field value if set, zero value otherwise.
func (o *AfRoutingRequirementRm) GetAppReloc() bool {
	if o == nil || isNil(o.AppReloc) {
		var ret bool
		return ret
	}
	return *o.AppReloc
}

// GetAppRelocOk returns a tuple with the AppReloc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirementRm) GetAppRelocOk() (*bool, bool) {
	if o == nil || isNil(o.AppReloc) {
		return nil, false
	}
	return o.AppReloc, true
}

// HasAppReloc returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasAppReloc() bool {
	if o != nil && !isNil(o.AppReloc) {
		return true
	}

	return false
}

// SetAppReloc gets a reference to the given bool and assigns it to the AppReloc field.
func (o *AfRoutingRequirementRm) SetAppReloc(v bool) {
	o.AppReloc = &v
}

// GetRouteToLocs returns the RouteToLocs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirementRm) GetRouteToLocs() []RouteToLocation {
	if o == nil {
		var ret []RouteToLocation
		return ret
	}
	return o.RouteToLocs
}

// GetRouteToLocsOk returns a tuple with the RouteToLocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirementRm) GetRouteToLocsOk() ([]RouteToLocation, bool) {
	if o == nil || isNil(o.RouteToLocs) {
		return nil, false
	}
	return o.RouteToLocs, true
}

// HasRouteToLocs returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasRouteToLocs() bool {
	if o != nil && isNil(o.RouteToLocs) {
		return true
	}

	return false
}

// SetRouteToLocs gets a reference to the given []RouteToLocation and assigns it to the RouteToLocs field.
func (o *AfRoutingRequirementRm) SetRouteToLocs(v []RouteToLocation) {
	o.RouteToLocs = v
}

// GetSpVal returns the SpVal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirementRm) GetSpVal() SpatialValidityRm {
	if o == nil || isNil(o.SpVal.Get()) {
		var ret SpatialValidityRm
		return ret
	}
	return *o.SpVal.Get()
}

// GetSpValOk returns a tuple with the SpVal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirementRm) GetSpValOk() (*SpatialValidityRm, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpVal.Get(), o.SpVal.IsSet()
}

// HasSpVal returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasSpVal() bool {
	if o != nil && o.SpVal.IsSet() {
		return true
	}

	return false
}

// SetSpVal gets a reference to the given NullableSpatialValidityRm and assigns it to the SpVal field.
func (o *AfRoutingRequirementRm) SetSpVal(v SpatialValidityRm) {
	o.SpVal.Set(&v)
}
// SetSpValNil sets the value for SpVal to be an explicit nil
func (o *AfRoutingRequirementRm) SetSpValNil() {
	o.SpVal.Set(nil)
}

// UnsetSpVal ensures that no value is present for SpVal, not even an explicit nil
func (o *AfRoutingRequirementRm) UnsetSpVal() {
	o.SpVal.Unset()
}

// GetTempVals returns the TempVals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirementRm) GetTempVals() []TemporalValidity {
	if o == nil {
		var ret []TemporalValidity
		return ret
	}
	return o.TempVals
}

// GetTempValsOk returns a tuple with the TempVals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirementRm) GetTempValsOk() ([]TemporalValidity, bool) {
	if o == nil || isNil(o.TempVals) {
		return nil, false
	}
	return o.TempVals, true
}

// HasTempVals returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasTempVals() bool {
	if o != nil && isNil(o.TempVals) {
		return true
	}

	return false
}

// SetTempVals gets a reference to the given []TemporalValidity and assigns it to the TempVals field.
func (o *AfRoutingRequirementRm) SetTempVals(v []TemporalValidity) {
	o.TempVals = v
}

// GetUpPathChgSub returns the UpPathChgSub field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirementRm) GetUpPathChgSub() UpPathChgEvent {
	if o == nil || isNil(o.UpPathChgSub.Get()) {
		var ret UpPathChgEvent
		return ret
	}
	return *o.UpPathChgSub.Get()
}

// GetUpPathChgSubOk returns a tuple with the UpPathChgSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirementRm) GetUpPathChgSubOk() (*UpPathChgEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpPathChgSub.Get(), o.UpPathChgSub.IsSet()
}

// HasUpPathChgSub returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasUpPathChgSub() bool {
	if o != nil && o.UpPathChgSub.IsSet() {
		return true
	}

	return false
}

// SetUpPathChgSub gets a reference to the given NullableUpPathChgEvent and assigns it to the UpPathChgSub field.
func (o *AfRoutingRequirementRm) SetUpPathChgSub(v UpPathChgEvent) {
	o.UpPathChgSub.Set(&v)
}
// SetUpPathChgSubNil sets the value for UpPathChgSub to be an explicit nil
func (o *AfRoutingRequirementRm) SetUpPathChgSubNil() {
	o.UpPathChgSub.Set(nil)
}

// UnsetUpPathChgSub ensures that no value is present for UpPathChgSub, not even an explicit nil
func (o *AfRoutingRequirementRm) UnsetUpPathChgSub() {
	o.UpPathChgSub.Unset()
}

// GetAddrPreserInd returns the AddrPreserInd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirementRm) GetAddrPreserInd() bool {
	if o == nil || isNil(o.AddrPreserInd.Get()) {
		var ret bool
		return ret
	}
	return *o.AddrPreserInd.Get()
}

// GetAddrPreserIndOk returns a tuple with the AddrPreserInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirementRm) GetAddrPreserIndOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddrPreserInd.Get(), o.AddrPreserInd.IsSet()
}

// HasAddrPreserInd returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasAddrPreserInd() bool {
	if o != nil && o.AddrPreserInd.IsSet() {
		return true
	}

	return false
}

// SetAddrPreserInd gets a reference to the given NullableBool and assigns it to the AddrPreserInd field.
func (o *AfRoutingRequirementRm) SetAddrPreserInd(v bool) {
	o.AddrPreserInd.Set(&v)
}
// SetAddrPreserIndNil sets the value for AddrPreserInd to be an explicit nil
func (o *AfRoutingRequirementRm) SetAddrPreserIndNil() {
	o.AddrPreserInd.Set(nil)
}

// UnsetAddrPreserInd ensures that no value is present for AddrPreserInd, not even an explicit nil
func (o *AfRoutingRequirementRm) UnsetAddrPreserInd() {
	o.AddrPreserInd.Unset()
}

// GetSimConnInd returns the SimConnInd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirementRm) GetSimConnInd() bool {
	if o == nil || isNil(o.SimConnInd.Get()) {
		var ret bool
		return ret
	}
	return *o.SimConnInd.Get()
}

// GetSimConnIndOk returns a tuple with the SimConnInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirementRm) GetSimConnIndOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SimConnInd.Get(), o.SimConnInd.IsSet()
}

// HasSimConnInd returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasSimConnInd() bool {
	if o != nil && o.SimConnInd.IsSet() {
		return true
	}

	return false
}

// SetSimConnInd gets a reference to the given NullableBool and assigns it to the SimConnInd field.
func (o *AfRoutingRequirementRm) SetSimConnInd(v bool) {
	o.SimConnInd.Set(&v)
}
// SetSimConnIndNil sets the value for SimConnInd to be an explicit nil
func (o *AfRoutingRequirementRm) SetSimConnIndNil() {
	o.SimConnInd.Set(nil)
}

// UnsetSimConnInd ensures that no value is present for SimConnInd, not even an explicit nil
func (o *AfRoutingRequirementRm) UnsetSimConnInd() {
	o.SimConnInd.Unset()
}

// GetSimConnTerm returns the SimConnTerm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirementRm) GetSimConnTerm() int32 {
	if o == nil || isNil(o.SimConnTerm.Get()) {
		var ret int32
		return ret
	}
	return *o.SimConnTerm.Get()
}

// GetSimConnTermOk returns a tuple with the SimConnTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirementRm) GetSimConnTermOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SimConnTerm.Get(), o.SimConnTerm.IsSet()
}

// HasSimConnTerm returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasSimConnTerm() bool {
	if o != nil && o.SimConnTerm.IsSet() {
		return true
	}

	return false
}

// SetSimConnTerm gets a reference to the given NullableInt32 and assigns it to the SimConnTerm field.
func (o *AfRoutingRequirementRm) SetSimConnTerm(v int32) {
	o.SimConnTerm.Set(&v)
}
// SetSimConnTermNil sets the value for SimConnTerm to be an explicit nil
func (o *AfRoutingRequirementRm) SetSimConnTermNil() {
	o.SimConnTerm.Set(nil)
}

// UnsetSimConnTerm ensures that no value is present for SimConnTerm, not even an explicit nil
func (o *AfRoutingRequirementRm) UnsetSimConnTerm() {
	o.SimConnTerm.Unset()
}

// GetEasIpReplaceInfos returns the EasIpReplaceInfos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirementRm) GetEasIpReplaceInfos() []EasIpReplacementInfo {
	if o == nil {
		var ret []EasIpReplacementInfo
		return ret
	}
	return o.EasIpReplaceInfos
}

// GetEasIpReplaceInfosOk returns a tuple with the EasIpReplaceInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirementRm) GetEasIpReplaceInfosOk() ([]EasIpReplacementInfo, bool) {
	if o == nil || isNil(o.EasIpReplaceInfos) {
		return nil, false
	}
	return o.EasIpReplaceInfos, true
}

// HasEasIpReplaceInfos returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasEasIpReplaceInfos() bool {
	if o != nil && isNil(o.EasIpReplaceInfos) {
		return true
	}

	return false
}

// SetEasIpReplaceInfos gets a reference to the given []EasIpReplacementInfo and assigns it to the EasIpReplaceInfos field.
func (o *AfRoutingRequirementRm) SetEasIpReplaceInfos(v []EasIpReplacementInfo) {
	o.EasIpReplaceInfos = v
}

// GetEasRedisInd returns the EasRedisInd field value if set, zero value otherwise.
func (o *AfRoutingRequirementRm) GetEasRedisInd() bool {
	if o == nil || isNil(o.EasRedisInd) {
		var ret bool
		return ret
	}
	return *o.EasRedisInd
}

// GetEasRedisIndOk returns a tuple with the EasRedisInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirementRm) GetEasRedisIndOk() (*bool, bool) {
	if o == nil || isNil(o.EasRedisInd) {
		return nil, false
	}
	return o.EasRedisInd, true
}

// HasEasRedisInd returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasEasRedisInd() bool {
	if o != nil && !isNil(o.EasRedisInd) {
		return true
	}

	return false
}

// SetEasRedisInd gets a reference to the given bool and assigns it to the EasRedisInd field.
func (o *AfRoutingRequirementRm) SetEasRedisInd(v bool) {
	o.EasRedisInd = &v
}

// GetMaxAllowedUpLat returns the MaxAllowedUpLat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirementRm) GetMaxAllowedUpLat() int32 {
	if o == nil || isNil(o.MaxAllowedUpLat.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxAllowedUpLat.Get()
}

// GetMaxAllowedUpLatOk returns a tuple with the MaxAllowedUpLat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirementRm) GetMaxAllowedUpLatOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxAllowedUpLat.Get(), o.MaxAllowedUpLat.IsSet()
}

// HasMaxAllowedUpLat returns a boolean if a field has been set.
func (o *AfRoutingRequirementRm) HasMaxAllowedUpLat() bool {
	if o != nil && o.MaxAllowedUpLat.IsSet() {
		return true
	}

	return false
}

// SetMaxAllowedUpLat gets a reference to the given NullableInt32 and assigns it to the MaxAllowedUpLat field.
func (o *AfRoutingRequirementRm) SetMaxAllowedUpLat(v int32) {
	o.MaxAllowedUpLat.Set(&v)
}
// SetMaxAllowedUpLatNil sets the value for MaxAllowedUpLat to be an explicit nil
func (o *AfRoutingRequirementRm) SetMaxAllowedUpLatNil() {
	o.MaxAllowedUpLat.Set(nil)
}

// UnsetMaxAllowedUpLat ensures that no value is present for MaxAllowedUpLat, not even an explicit nil
func (o *AfRoutingRequirementRm) UnsetMaxAllowedUpLat() {
	o.MaxAllowedUpLat.Unset()
}

func (o AfRoutingRequirementRm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AfRoutingRequirementRm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AppReloc) {
		toSerialize["appReloc"] = o.AppReloc
	}
	if o.RouteToLocs != nil {
		toSerialize["routeToLocs"] = o.RouteToLocs
	}
	if o.SpVal.IsSet() {
		toSerialize["spVal"] = o.SpVal.Get()
	}
	if o.TempVals != nil {
		toSerialize["tempVals"] = o.TempVals
	}
	if o.UpPathChgSub.IsSet() {
		toSerialize["upPathChgSub"] = o.UpPathChgSub.Get()
	}
	if o.AddrPreserInd.IsSet() {
		toSerialize["addrPreserInd"] = o.AddrPreserInd.Get()
	}
	if o.SimConnInd.IsSet() {
		toSerialize["simConnInd"] = o.SimConnInd.Get()
	}
	if o.SimConnTerm.IsSet() {
		toSerialize["simConnTerm"] = o.SimConnTerm.Get()
	}
	if o.EasIpReplaceInfos != nil {
		toSerialize["easIpReplaceInfos"] = o.EasIpReplaceInfos
	}
	if !isNil(o.EasRedisInd) {
		toSerialize["easRedisInd"] = o.EasRedisInd
	}
	if o.MaxAllowedUpLat.IsSet() {
		toSerialize["maxAllowedUpLat"] = o.MaxAllowedUpLat.Get()
	}
	return toSerialize, nil
}

type NullableAfRoutingRequirementRm struct {
	value *AfRoutingRequirementRm
	isSet bool
}

func (v NullableAfRoutingRequirementRm) Get() *AfRoutingRequirementRm {
	return v.value
}

func (v *NullableAfRoutingRequirementRm) Set(val *AfRoutingRequirementRm) {
	v.value = val
	v.isSet = true
}

func (v NullableAfRoutingRequirementRm) IsSet() bool {
	return v.isSet
}

func (v *NullableAfRoutingRequirementRm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAfRoutingRequirementRm(val *AfRoutingRequirementRm) *NullableAfRoutingRequirementRm {
	return &NullableAfRoutingRequirementRm{value: val, isSet: true}
}

func (v NullableAfRoutingRequirementRm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAfRoutingRequirementRm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


