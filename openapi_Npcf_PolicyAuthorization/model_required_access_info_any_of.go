/*
Npcf_PolicyAuthorization Service API

PCF Policy Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_PolicyAuthorization

import (
	"encoding/json"
	"fmt"
)

// RequiredAccessInfoAnyOf the model 'RequiredAccessInfoAnyOf'
type RequiredAccessInfoAnyOf string

// List of RequiredAccessInfo_anyOf
const (
	USER_LOCATION RequiredAccessInfoAnyOf = "USER_LOCATION"
	UE_TIME_ZONE RequiredAccessInfoAnyOf = "UE_TIME_ZONE"
)

// All allowed values of RequiredAccessInfoAnyOf enum
var AllowedRequiredAccessInfoAnyOfEnumValues = []RequiredAccessInfoAnyOf{
	"USER_LOCATION",
	"UE_TIME_ZONE",
}

func (v *RequiredAccessInfoAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequiredAccessInfoAnyOf(value)
	for _, existing := range AllowedRequiredAccessInfoAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequiredAccessInfoAnyOf", value)
}

// NewRequiredAccessInfoAnyOfFromValue returns a pointer to a valid RequiredAccessInfoAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequiredAccessInfoAnyOfFromValue(v string) (*RequiredAccessInfoAnyOf, error) {
	ev := RequiredAccessInfoAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequiredAccessInfoAnyOf: valid values are %v", v, AllowedRequiredAccessInfoAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequiredAccessInfoAnyOf) IsValid() bool {
	for _, existing := range AllowedRequiredAccessInfoAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequiredAccessInfo_anyOf value
func (v RequiredAccessInfoAnyOf) Ptr() *RequiredAccessInfoAnyOf {
	return &v
}

type NullableRequiredAccessInfoAnyOf struct {
	value *RequiredAccessInfoAnyOf
	isSet bool
}

func (v NullableRequiredAccessInfoAnyOf) Get() *RequiredAccessInfoAnyOf {
	return v.value
}

func (v *NullableRequiredAccessInfoAnyOf) Set(val *RequiredAccessInfoAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRequiredAccessInfoAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRequiredAccessInfoAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequiredAccessInfoAnyOf(val *RequiredAccessInfoAnyOf) *NullableRequiredAccessInfoAnyOf {
	return &NullableRequiredAccessInfoAnyOf{value: val, isSet: true}
}

func (v NullableRequiredAccessInfoAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequiredAccessInfoAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

