/*
Npcf_PolicyAuthorization Service API

PCF Policy Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_PolicyAuthorization

import (
	"encoding/json"
)

// checks if the ExtendedProblemDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendedProblemDetails{}

// ExtendedProblemDetails Extends ProblemDetails to also include the acceptable service info.
type ExtendedProblemDetails struct {
	ProblemDetails
	AcceptableServInfo *AcceptableServiceInfo `json:"acceptableServInfo,omitempty"`
}

// NewExtendedProblemDetails instantiates a new ExtendedProblemDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedProblemDetails() *ExtendedProblemDetails {
	this := ExtendedProblemDetails{}
	return &this
}

// NewExtendedProblemDetailsWithDefaults instantiates a new ExtendedProblemDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedProblemDetailsWithDefaults() *ExtendedProblemDetails {
	this := ExtendedProblemDetails{}
	return &this
}

// GetAcceptableServInfo returns the AcceptableServInfo field value if set, zero value otherwise.
func (o *ExtendedProblemDetails) GetAcceptableServInfo() AcceptableServiceInfo {
	if o == nil || IsNil(o.AcceptableServInfo) {
		var ret AcceptableServiceInfo
		return ret
	}
	return *o.AcceptableServInfo
}

// GetAcceptableServInfoOk returns a tuple with the AcceptableServInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedProblemDetails) GetAcceptableServInfoOk() (*AcceptableServiceInfo, bool) {
	if o == nil || IsNil(o.AcceptableServInfo) {
		return nil, false
	}
	return o.AcceptableServInfo, true
}

// HasAcceptableServInfo returns a boolean if a field has been set.
func (o *ExtendedProblemDetails) HasAcceptableServInfo() bool {
	if o != nil && !IsNil(o.AcceptableServInfo) {
		return true
	}

	return false
}

// SetAcceptableServInfo gets a reference to the given AcceptableServiceInfo and assigns it to the AcceptableServInfo field.
func (o *ExtendedProblemDetails) SetAcceptableServInfo(v AcceptableServiceInfo) {
	o.AcceptableServInfo = &v
}

func (o ExtendedProblemDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendedProblemDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedProblemDetails, errProblemDetails := json.Marshal(o.ProblemDetails)
	if errProblemDetails != nil {
		return map[string]interface{}{}, errProblemDetails
	}
	errProblemDetails = json.Unmarshal([]byte(serializedProblemDetails), &toSerialize)
	if errProblemDetails != nil {
		return map[string]interface{}{}, errProblemDetails
	}
	if !IsNil(o.AcceptableServInfo) {
		toSerialize["acceptableServInfo"] = o.AcceptableServInfo
	}
	return toSerialize, nil
}

type NullableExtendedProblemDetails struct {
	value *ExtendedProblemDetails
	isSet bool
}

func (v NullableExtendedProblemDetails) Get() *ExtendedProblemDetails {
	return v.value
}

func (v *NullableExtendedProblemDetails) Set(val *ExtendedProblemDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedProblemDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedProblemDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedProblemDetails(val *ExtendedProblemDetails) *NullableExtendedProblemDetails {
	return &NullableExtendedProblemDetails{value: val, isSet: true}
}

func (v NullableExtendedProblemDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedProblemDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
