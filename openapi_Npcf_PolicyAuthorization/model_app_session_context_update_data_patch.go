/*
Npcf_PolicyAuthorization Service API

PCF Policy Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_PolicyAuthorization

import (
	"encoding/json"
)

// checks if the AppSessionContextUpdateDataPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppSessionContextUpdateDataPatch{}

// AppSessionContextUpdateDataPatch Identifies the modifications to an Individual Application Session Context and/or the modifications to the sub-resource Events Subscription. 
type AppSessionContextUpdateDataPatch struct {
	AscReqData *AppSessionContextUpdateData `json:"ascReqData,omitempty"`
}

// NewAppSessionContextUpdateDataPatch instantiates a new AppSessionContextUpdateDataPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppSessionContextUpdateDataPatch() *AppSessionContextUpdateDataPatch {
	this := AppSessionContextUpdateDataPatch{}
	return &this
}

// NewAppSessionContextUpdateDataPatchWithDefaults instantiates a new AppSessionContextUpdateDataPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppSessionContextUpdateDataPatchWithDefaults() *AppSessionContextUpdateDataPatch {
	this := AppSessionContextUpdateDataPatch{}
	return &this
}

// GetAscReqData returns the AscReqData field value if set, zero value otherwise.
func (o *AppSessionContextUpdateDataPatch) GetAscReqData() AppSessionContextUpdateData {
	if o == nil || IsNil(o.AscReqData) {
		var ret AppSessionContextUpdateData
		return ret
	}
	return *o.AscReqData
}

// GetAscReqDataOk returns a tuple with the AscReqData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSessionContextUpdateDataPatch) GetAscReqDataOk() (*AppSessionContextUpdateData, bool) {
	if o == nil || IsNil(o.AscReqData) {
		return nil, false
	}
	return o.AscReqData, true
}

// HasAscReqData returns a boolean if a field has been set.
func (o *AppSessionContextUpdateDataPatch) HasAscReqData() bool {
	if o != nil && !IsNil(o.AscReqData) {
		return true
	}

	return false
}

// SetAscReqData gets a reference to the given AppSessionContextUpdateData and assigns it to the AscReqData field.
func (o *AppSessionContextUpdateDataPatch) SetAscReqData(v AppSessionContextUpdateData) {
	o.AscReqData = &v
}

func (o AppSessionContextUpdateDataPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppSessionContextUpdateDataPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AscReqData) {
		toSerialize["ascReqData"] = o.AscReqData
	}
	return toSerialize, nil
}

type NullableAppSessionContextUpdateDataPatch struct {
	value *AppSessionContextUpdateDataPatch
	isSet bool
}

func (v NullableAppSessionContextUpdateDataPatch) Get() *AppSessionContextUpdateDataPatch {
	return v.value
}

func (v *NullableAppSessionContextUpdateDataPatch) Set(val *AppSessionContextUpdateDataPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableAppSessionContextUpdateDataPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableAppSessionContextUpdateDataPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppSessionContextUpdateDataPatch(val *AppSessionContextUpdateDataPatch) *NullableAppSessionContextUpdateDataPatch {
	return &NullableAppSessionContextUpdateDataPatch{value: val, isSet: true}
}

func (v NullableAppSessionContextUpdateDataPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppSessionContextUpdateDataPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


