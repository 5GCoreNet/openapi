/*
Npcf_PolicyAuthorization Service API

PCF Policy Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_PolicyAuthorization

import (
	"encoding/json"
)

// checks if the AfRoutingRequirement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AfRoutingRequirement{}

// AfRoutingRequirement Describes the event information delivered in the subscription.
type AfRoutingRequirement struct {
	AppReloc      *bool                  `json:"appReloc,omitempty"`
	RouteToLocs   []RouteToLocation      `json:"routeToLocs,omitempty"`
	SpVal         *SpatialValidity       `json:"spVal,omitempty"`
	TempVals      []TemporalValidity     `json:"tempVals,omitempty"`
	UpPathChgSub  NullableUpPathChgEvent `json:"upPathChgSub,omitempty"`
	AddrPreserInd *bool                  `json:"addrPreserInd,omitempty"`
	// Indicates whether simultaneous connectivity should be temporarily maintained for the source and target PSA.
	SimConnInd *bool `json:"simConnInd,omitempty"`
	// indicating a time in seconds.
	SimConnTerm *int32 `json:"simConnTerm,omitempty"`
	// Contains EAS IP replacement information.
	EasIpReplaceInfos []EasIpReplacementInfo `json:"easIpReplaceInfos,omitempty"`
	// Indicates the EAS rediscovery is required.
	EasRedisInd *bool `json:"easRedisInd,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxAllowedUpLat *int32 `json:"maxAllowedUpLat,omitempty"`
}

// NewAfRoutingRequirement instantiates a new AfRoutingRequirement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAfRoutingRequirement() *AfRoutingRequirement {
	this := AfRoutingRequirement{}
	return &this
}

// NewAfRoutingRequirementWithDefaults instantiates a new AfRoutingRequirement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAfRoutingRequirementWithDefaults() *AfRoutingRequirement {
	this := AfRoutingRequirement{}
	return &this
}

// GetAppReloc returns the AppReloc field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetAppReloc() bool {
	if o == nil || IsNil(o.AppReloc) {
		var ret bool
		return ret
	}
	return *o.AppReloc
}

// GetAppRelocOk returns a tuple with the AppReloc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetAppRelocOk() (*bool, bool) {
	if o == nil || IsNil(o.AppReloc) {
		return nil, false
	}
	return o.AppReloc, true
}

// HasAppReloc returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasAppReloc() bool {
	if o != nil && !IsNil(o.AppReloc) {
		return true
	}

	return false
}

// SetAppReloc gets a reference to the given bool and assigns it to the AppReloc field.
func (o *AfRoutingRequirement) SetAppReloc(v bool) {
	o.AppReloc = &v
}

// GetRouteToLocs returns the RouteToLocs field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetRouteToLocs() []RouteToLocation {
	if o == nil || IsNil(o.RouteToLocs) {
		var ret []RouteToLocation
		return ret
	}
	return o.RouteToLocs
}

// GetRouteToLocsOk returns a tuple with the RouteToLocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetRouteToLocsOk() ([]RouteToLocation, bool) {
	if o == nil || IsNil(o.RouteToLocs) {
		return nil, false
	}
	return o.RouteToLocs, true
}

// HasRouteToLocs returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasRouteToLocs() bool {
	if o != nil && !IsNil(o.RouteToLocs) {
		return true
	}

	return false
}

// SetRouteToLocs gets a reference to the given []RouteToLocation and assigns it to the RouteToLocs field.
func (o *AfRoutingRequirement) SetRouteToLocs(v []RouteToLocation) {
	o.RouteToLocs = v
}

// GetSpVal returns the SpVal field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetSpVal() SpatialValidity {
	if o == nil || IsNil(o.SpVal) {
		var ret SpatialValidity
		return ret
	}
	return *o.SpVal
}

// GetSpValOk returns a tuple with the SpVal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetSpValOk() (*SpatialValidity, bool) {
	if o == nil || IsNil(o.SpVal) {
		return nil, false
	}
	return o.SpVal, true
}

// HasSpVal returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasSpVal() bool {
	if o != nil && !IsNil(o.SpVal) {
		return true
	}

	return false
}

// SetSpVal gets a reference to the given SpatialValidity and assigns it to the SpVal field.
func (o *AfRoutingRequirement) SetSpVal(v SpatialValidity) {
	o.SpVal = &v
}

// GetTempVals returns the TempVals field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetTempVals() []TemporalValidity {
	if o == nil || IsNil(o.TempVals) {
		var ret []TemporalValidity
		return ret
	}
	return o.TempVals
}

// GetTempValsOk returns a tuple with the TempVals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetTempValsOk() ([]TemporalValidity, bool) {
	if o == nil || IsNil(o.TempVals) {
		return nil, false
	}
	return o.TempVals, true
}

// HasTempVals returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasTempVals() bool {
	if o != nil && !IsNil(o.TempVals) {
		return true
	}

	return false
}

// SetTempVals gets a reference to the given []TemporalValidity and assigns it to the TempVals field.
func (o *AfRoutingRequirement) SetTempVals(v []TemporalValidity) {
	o.TempVals = v
}

// GetUpPathChgSub returns the UpPathChgSub field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AfRoutingRequirement) GetUpPathChgSub() UpPathChgEvent {
	if o == nil || IsNil(o.UpPathChgSub.Get()) {
		var ret UpPathChgEvent
		return ret
	}
	return *o.UpPathChgSub.Get()
}

// GetUpPathChgSubOk returns a tuple with the UpPathChgSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AfRoutingRequirement) GetUpPathChgSubOk() (*UpPathChgEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpPathChgSub.Get(), o.UpPathChgSub.IsSet()
}

// HasUpPathChgSub returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasUpPathChgSub() bool {
	if o != nil && o.UpPathChgSub.IsSet() {
		return true
	}

	return false
}

// SetUpPathChgSub gets a reference to the given NullableUpPathChgEvent and assigns it to the UpPathChgSub field.
func (o *AfRoutingRequirement) SetUpPathChgSub(v UpPathChgEvent) {
	o.UpPathChgSub.Set(&v)
}

// SetUpPathChgSubNil sets the value for UpPathChgSub to be an explicit nil
func (o *AfRoutingRequirement) SetUpPathChgSubNil() {
	o.UpPathChgSub.Set(nil)
}

// UnsetUpPathChgSub ensures that no value is present for UpPathChgSub, not even an explicit nil
func (o *AfRoutingRequirement) UnsetUpPathChgSub() {
	o.UpPathChgSub.Unset()
}

// GetAddrPreserInd returns the AddrPreserInd field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetAddrPreserInd() bool {
	if o == nil || IsNil(o.AddrPreserInd) {
		var ret bool
		return ret
	}
	return *o.AddrPreserInd
}

// GetAddrPreserIndOk returns a tuple with the AddrPreserInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetAddrPreserIndOk() (*bool, bool) {
	if o == nil || IsNil(o.AddrPreserInd) {
		return nil, false
	}
	return o.AddrPreserInd, true
}

// HasAddrPreserInd returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasAddrPreserInd() bool {
	if o != nil && !IsNil(o.AddrPreserInd) {
		return true
	}

	return false
}

// SetAddrPreserInd gets a reference to the given bool and assigns it to the AddrPreserInd field.
func (o *AfRoutingRequirement) SetAddrPreserInd(v bool) {
	o.AddrPreserInd = &v
}

// GetSimConnInd returns the SimConnInd field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetSimConnInd() bool {
	if o == nil || IsNil(o.SimConnInd) {
		var ret bool
		return ret
	}
	return *o.SimConnInd
}

// GetSimConnIndOk returns a tuple with the SimConnInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetSimConnIndOk() (*bool, bool) {
	if o == nil || IsNil(o.SimConnInd) {
		return nil, false
	}
	return o.SimConnInd, true
}

// HasSimConnInd returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasSimConnInd() bool {
	if o != nil && !IsNil(o.SimConnInd) {
		return true
	}

	return false
}

// SetSimConnInd gets a reference to the given bool and assigns it to the SimConnInd field.
func (o *AfRoutingRequirement) SetSimConnInd(v bool) {
	o.SimConnInd = &v
}

// GetSimConnTerm returns the SimConnTerm field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetSimConnTerm() int32 {
	if o == nil || IsNil(o.SimConnTerm) {
		var ret int32
		return ret
	}
	return *o.SimConnTerm
}

// GetSimConnTermOk returns a tuple with the SimConnTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetSimConnTermOk() (*int32, bool) {
	if o == nil || IsNil(o.SimConnTerm) {
		return nil, false
	}
	return o.SimConnTerm, true
}

// HasSimConnTerm returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasSimConnTerm() bool {
	if o != nil && !IsNil(o.SimConnTerm) {
		return true
	}

	return false
}

// SetSimConnTerm gets a reference to the given int32 and assigns it to the SimConnTerm field.
func (o *AfRoutingRequirement) SetSimConnTerm(v int32) {
	o.SimConnTerm = &v
}

// GetEasIpReplaceInfos returns the EasIpReplaceInfos field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetEasIpReplaceInfos() []EasIpReplacementInfo {
	if o == nil || IsNil(o.EasIpReplaceInfos) {
		var ret []EasIpReplacementInfo
		return ret
	}
	return o.EasIpReplaceInfos
}

// GetEasIpReplaceInfosOk returns a tuple with the EasIpReplaceInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetEasIpReplaceInfosOk() ([]EasIpReplacementInfo, bool) {
	if o == nil || IsNil(o.EasIpReplaceInfos) {
		return nil, false
	}
	return o.EasIpReplaceInfos, true
}

// HasEasIpReplaceInfos returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasEasIpReplaceInfos() bool {
	if o != nil && !IsNil(o.EasIpReplaceInfos) {
		return true
	}

	return false
}

// SetEasIpReplaceInfos gets a reference to the given []EasIpReplacementInfo and assigns it to the EasIpReplaceInfos field.
func (o *AfRoutingRequirement) SetEasIpReplaceInfos(v []EasIpReplacementInfo) {
	o.EasIpReplaceInfos = v
}

// GetEasRedisInd returns the EasRedisInd field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetEasRedisInd() bool {
	if o == nil || IsNil(o.EasRedisInd) {
		var ret bool
		return ret
	}
	return *o.EasRedisInd
}

// GetEasRedisIndOk returns a tuple with the EasRedisInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetEasRedisIndOk() (*bool, bool) {
	if o == nil || IsNil(o.EasRedisInd) {
		return nil, false
	}
	return o.EasRedisInd, true
}

// HasEasRedisInd returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasEasRedisInd() bool {
	if o != nil && !IsNil(o.EasRedisInd) {
		return true
	}

	return false
}

// SetEasRedisInd gets a reference to the given bool and assigns it to the EasRedisInd field.
func (o *AfRoutingRequirement) SetEasRedisInd(v bool) {
	o.EasRedisInd = &v
}

// GetMaxAllowedUpLat returns the MaxAllowedUpLat field value if set, zero value otherwise.
func (o *AfRoutingRequirement) GetMaxAllowedUpLat() int32 {
	if o == nil || IsNil(o.MaxAllowedUpLat) {
		var ret int32
		return ret
	}
	return *o.MaxAllowedUpLat
}

// GetMaxAllowedUpLatOk returns a tuple with the MaxAllowedUpLat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfRoutingRequirement) GetMaxAllowedUpLatOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAllowedUpLat) {
		return nil, false
	}
	return o.MaxAllowedUpLat, true
}

// HasMaxAllowedUpLat returns a boolean if a field has been set.
func (o *AfRoutingRequirement) HasMaxAllowedUpLat() bool {
	if o != nil && !IsNil(o.MaxAllowedUpLat) {
		return true
	}

	return false
}

// SetMaxAllowedUpLat gets a reference to the given int32 and assigns it to the MaxAllowedUpLat field.
func (o *AfRoutingRequirement) SetMaxAllowedUpLat(v int32) {
	o.MaxAllowedUpLat = &v
}

func (o AfRoutingRequirement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AfRoutingRequirement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppReloc) {
		toSerialize["appReloc"] = o.AppReloc
	}
	if !IsNil(o.RouteToLocs) {
		toSerialize["routeToLocs"] = o.RouteToLocs
	}
	if !IsNil(o.SpVal) {
		toSerialize["spVal"] = o.SpVal
	}
	if !IsNil(o.TempVals) {
		toSerialize["tempVals"] = o.TempVals
	}
	if o.UpPathChgSub.IsSet() {
		toSerialize["upPathChgSub"] = o.UpPathChgSub.Get()
	}
	if !IsNil(o.AddrPreserInd) {
		toSerialize["addrPreserInd"] = o.AddrPreserInd
	}
	if !IsNil(o.SimConnInd) {
		toSerialize["simConnInd"] = o.SimConnInd
	}
	if !IsNil(o.SimConnTerm) {
		toSerialize["simConnTerm"] = o.SimConnTerm
	}
	if !IsNil(o.EasIpReplaceInfos) {
		toSerialize["easIpReplaceInfos"] = o.EasIpReplaceInfos
	}
	if !IsNil(o.EasRedisInd) {
		toSerialize["easRedisInd"] = o.EasRedisInd
	}
	if !IsNil(o.MaxAllowedUpLat) {
		toSerialize["maxAllowedUpLat"] = o.MaxAllowedUpLat
	}
	return toSerialize, nil
}

type NullableAfRoutingRequirement struct {
	value *AfRoutingRequirement
	isSet bool
}

func (v NullableAfRoutingRequirement) Get() *AfRoutingRequirement {
	return v.value
}

func (v *NullableAfRoutingRequirement) Set(val *AfRoutingRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableAfRoutingRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableAfRoutingRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAfRoutingRequirement(val *AfRoutingRequirement) *NullableAfRoutingRequirement {
	return &NullableAfRoutingRequirement{value: val, isSet: true}
}

func (v NullableAfRoutingRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAfRoutingRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
