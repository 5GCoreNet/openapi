/*
Npcf_PolicyAuthorization Service API

PCF Policy Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_PolicyAuthorization

import (
	"encoding/json"
	"fmt"
)

// MpsActionAnyOf the model 'MpsActionAnyOf'
type MpsActionAnyOf string

// List of MpsAction_anyOf
const (
	DISABLE_MPS_FOR_DTS MpsActionAnyOf = "DISABLE_MPS_FOR_DTS"
	ENABLE_MPS_FOR_DTS MpsActionAnyOf = "ENABLE_MPS_FOR_DTS"
	AUTHORIZE_AND_ENABLE_MPS_FOR_DTS MpsActionAnyOf = "AUTHORIZE_AND_ENABLE_MPS_FOR_DTS"
)

// All allowed values of MpsActionAnyOf enum
var AllowedMpsActionAnyOfEnumValues = []MpsActionAnyOf{
	"DISABLE_MPS_FOR_DTS",
	"ENABLE_MPS_FOR_DTS",
	"AUTHORIZE_AND_ENABLE_MPS_FOR_DTS",
}

func (v *MpsActionAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MpsActionAnyOf(value)
	for _, existing := range AllowedMpsActionAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MpsActionAnyOf", value)
}

// NewMpsActionAnyOfFromValue returns a pointer to a valid MpsActionAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMpsActionAnyOfFromValue(v string) (*MpsActionAnyOf, error) {
	ev := MpsActionAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MpsActionAnyOf: valid values are %v", v, AllowedMpsActionAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MpsActionAnyOf) IsValid() bool {
	for _, existing := range AllowedMpsActionAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MpsAction_anyOf value
func (v MpsActionAnyOf) Ptr() *MpsActionAnyOf {
	return &v
}

type NullableMpsActionAnyOf struct {
	value *MpsActionAnyOf
	isSet bool
}

func (v NullableMpsActionAnyOf) Get() *MpsActionAnyOf {
	return v.value
}

func (v *NullableMpsActionAnyOf) Set(val *MpsActionAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMpsActionAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMpsActionAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMpsActionAnyOf(val *MpsActionAnyOf) *NullableMpsActionAnyOf {
	return &NullableMpsActionAnyOf{value: val, isSet: true}
}

func (v NullableMpsActionAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMpsActionAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

