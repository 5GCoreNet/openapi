/*
Npcf_PolicyAuthorization Service API

PCF Policy Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_PolicyAuthorization

import (
	"encoding/json"
)

// checks if the PortManagementContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortManagementContainer{}

// PortManagementContainer Contains the port management information container for a port.
type PortManagementContainer struct {
	// string with format 'bytes' as defined in OpenAPI
	PortManCont string `json:"portManCont"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	PortNum int32 `json:"portNum"`
}

// NewPortManagementContainer instantiates a new PortManagementContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortManagementContainer(portManCont string, portNum int32) *PortManagementContainer {
	this := PortManagementContainer{}
	this.PortManCont = portManCont
	this.PortNum = portNum
	return &this
}

// NewPortManagementContainerWithDefaults instantiates a new PortManagementContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortManagementContainerWithDefaults() *PortManagementContainer {
	this := PortManagementContainer{}
	return &this
}

// GetPortManCont returns the PortManCont field value
func (o *PortManagementContainer) GetPortManCont() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortManCont
}

// GetPortManContOk returns a tuple with the PortManCont field value
// and a boolean to check if the value has been set.
func (o *PortManagementContainer) GetPortManContOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortManCont, true
}

// SetPortManCont sets field value
func (o *PortManagementContainer) SetPortManCont(v string) {
	o.PortManCont = v
}

// GetPortNum returns the PortNum field value
func (o *PortManagementContainer) GetPortNum() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PortNum
}

// GetPortNumOk returns a tuple with the PortNum field value
// and a boolean to check if the value has been set.
func (o *PortManagementContainer) GetPortNumOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortNum, true
}

// SetPortNum sets field value
func (o *PortManagementContainer) SetPortNum(v int32) {
	o.PortNum = v
}

func (o PortManagementContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortManagementContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["portManCont"] = o.PortManCont
	toSerialize["portNum"] = o.PortNum
	return toSerialize, nil
}

type NullablePortManagementContainer struct {
	value *PortManagementContainer
	isSet bool
}

func (v NullablePortManagementContainer) Get() *PortManagementContainer {
	return v.value
}

func (v *NullablePortManagementContainer) Set(val *PortManagementContainer) {
	v.value = val
	v.isSet = true
}

func (v NullablePortManagementContainer) IsSet() bool {
	return v.isSet
}

func (v *NullablePortManagementContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortManagementContainer(val *PortManagementContainer) *NullablePortManagementContainer {
	return &NullablePortManagementContainer{value: val, isSet: true}
}

func (v NullablePortManagementContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortManagementContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


