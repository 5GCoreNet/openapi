/*
Namf_MBSBroadcast

AMF MBSBroadcast Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_MBSBroadcast

import (
	"encoding/json"
	"fmt"
)

// OpEventTypeAnyOf the model 'OpEventTypeAnyOf'
type OpEventTypeAnyOf string

// List of OpEventType_anyOf
const (
	AMF_CHANGE OpEventTypeAnyOf = "AMF_CHANGE"
	NG_RAN_EVENT OpEventTypeAnyOf = "NG_RAN_EVENT"
)

// All allowed values of OpEventTypeAnyOf enum
var AllowedOpEventTypeAnyOfEnumValues = []OpEventTypeAnyOf{
	"AMF_CHANGE",
	"NG_RAN_EVENT",
}

func (v *OpEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpEventTypeAnyOf(value)
	for _, existing := range AllowedOpEventTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpEventTypeAnyOf", value)
}

// NewOpEventTypeAnyOfFromValue returns a pointer to a valid OpEventTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpEventTypeAnyOfFromValue(v string) (*OpEventTypeAnyOf, error) {
	ev := OpEventTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpEventTypeAnyOf: valid values are %v", v, AllowedOpEventTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpEventTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedOpEventTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpEventType_anyOf value
func (v OpEventTypeAnyOf) Ptr() *OpEventTypeAnyOf {
	return &v
}

type NullableOpEventTypeAnyOf struct {
	value *OpEventTypeAnyOf
	isSet bool
}

func (v NullableOpEventTypeAnyOf) Get() *OpEventTypeAnyOf {
	return v.value
}

func (v *NullableOpEventTypeAnyOf) Set(val *OpEventTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOpEventTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOpEventTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpEventTypeAnyOf(val *OpEventTypeAnyOf) *NullableOpEventTypeAnyOf {
	return &NullableOpEventTypeAnyOf{value: val, isSet: true}
}

func (v NullableOpEventTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

