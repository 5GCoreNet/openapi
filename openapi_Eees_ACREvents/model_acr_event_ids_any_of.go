/*
Eees_ACREvents

API for ACR events subscription and notification. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_ACREvents

import (
	"encoding/json"
	"fmt"
)

// ACREventIDsAnyOf the model 'ACREventIDsAnyOf'
type ACREventIDsAnyOf string

// List of ACREventIDs_anyOf
const (
	TARGET_INFORMATION ACREventIDsAnyOf = "TARGET_INFORMATION"
	ACR_COMPLETE ACREventIDsAnyOf = "ACR_COMPLETE"
)

// All allowed values of ACREventIDsAnyOf enum
var AllowedACREventIDsAnyOfEnumValues = []ACREventIDsAnyOf{
	"TARGET_INFORMATION",
	"ACR_COMPLETE",
}

func (v *ACREventIDsAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ACREventIDsAnyOf(value)
	for _, existing := range AllowedACREventIDsAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ACREventIDsAnyOf", value)
}

// NewACREventIDsAnyOfFromValue returns a pointer to a valid ACREventIDsAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewACREventIDsAnyOfFromValue(v string) (*ACREventIDsAnyOf, error) {
	ev := ACREventIDsAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ACREventIDsAnyOf: valid values are %v", v, AllowedACREventIDsAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ACREventIDsAnyOf) IsValid() bool {
	for _, existing := range AllowedACREventIDsAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ACREventIDs_anyOf value
func (v ACREventIDsAnyOf) Ptr() *ACREventIDsAnyOf {
	return &v
}

type NullableACREventIDsAnyOf struct {
	value *ACREventIDsAnyOf
	isSet bool
}

func (v NullableACREventIDsAnyOf) Get() *ACREventIDsAnyOf {
	return v.value
}

func (v *NullableACREventIDsAnyOf) Set(val *ACREventIDsAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableACREventIDsAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableACREventIDsAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACREventIDsAnyOf(val *ACREventIDsAnyOf) *NullableACREventIDsAnyOf {
	return &NullableACREventIDsAnyOf{value: val, isSet: true}
}

func (v NullableACREventIDsAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACREventIDsAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

