/*
Eees_ACREvents

API for ACR events subscription and notification. © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_ACREvents

import (
	"encoding/json"
	"time"
)

// checks if the ACREventsSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACREventsSubscription{}

// ACREventsSubscription ACE Events subscription request.
type ACREventsSubscription struct {
	// Represents a unique identifier of the EEC.
	EecId string `json:"eecId"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.
	UeId *string `json:"ueId,omitempty"`
	// string with format \"date-time\" as defined in OpenAPI.
	ExpTime *time.Time `json:"expTime,omitempty"`
	// The list of application identifiers of the EASs.
	EasIds []string `json:"easIds"`
	// List of AC identities
	AcIds    []string    `json:"acIds,omitempty"`
	EventIds ACREventIDs `json:"eventIds"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationDestination string `json:"notificationDestination"`
	// Set to true by Subscriber to request the ECS to send a test notification. Set to false or omitted otherwise.
	RequestTestNotification *bool               `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig      *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewACREventsSubscription instantiates a new ACREventsSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACREventsSubscription(eecId string, easIds []string, eventIds ACREventIDs, notificationDestination string) *ACREventsSubscription {
	this := ACREventsSubscription{}
	this.EecId = eecId
	this.EasIds = easIds
	this.EventIds = eventIds
	this.NotificationDestination = notificationDestination
	return &this
}

// NewACREventsSubscriptionWithDefaults instantiates a new ACREventsSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACREventsSubscriptionWithDefaults() *ACREventsSubscription {
	this := ACREventsSubscription{}
	return &this
}

// GetEecId returns the EecId field value
func (o *ACREventsSubscription) GetEecId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EecId
}

// GetEecIdOk returns a tuple with the EecId field value
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetEecIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EecId, true
}

// SetEecId sets field value
func (o *ACREventsSubscription) SetEecId(v string) {
	o.EecId = v
}

// GetUeId returns the UeId field value if set, zero value otherwise.
func (o *ACREventsSubscription) GetUeId() string {
	if o == nil || IsNil(o.UeId) {
		var ret string
		return ret
	}
	return *o.UeId
}

// GetUeIdOk returns a tuple with the UeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetUeIdOk() (*string, bool) {
	if o == nil || IsNil(o.UeId) {
		return nil, false
	}
	return o.UeId, true
}

// HasUeId returns a boolean if a field has been set.
func (o *ACREventsSubscription) HasUeId() bool {
	if o != nil && !IsNil(o.UeId) {
		return true
	}

	return false
}

// SetUeId gets a reference to the given string and assigns it to the UeId field.
func (o *ACREventsSubscription) SetUeId(v string) {
	o.UeId = &v
}

// GetExpTime returns the ExpTime field value if set, zero value otherwise.
func (o *ACREventsSubscription) GetExpTime() time.Time {
	if o == nil || IsNil(o.ExpTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpTime
}

// GetExpTimeOk returns a tuple with the ExpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetExpTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpTime) {
		return nil, false
	}
	return o.ExpTime, true
}

// HasExpTime returns a boolean if a field has been set.
func (o *ACREventsSubscription) HasExpTime() bool {
	if o != nil && !IsNil(o.ExpTime) {
		return true
	}

	return false
}

// SetExpTime gets a reference to the given time.Time and assigns it to the ExpTime field.
func (o *ACREventsSubscription) SetExpTime(v time.Time) {
	o.ExpTime = &v
}

// GetEasIds returns the EasIds field value
func (o *ACREventsSubscription) GetEasIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EasIds
}

// GetEasIdsOk returns a tuple with the EasIds field value
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetEasIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EasIds, true
}

// SetEasIds sets field value
func (o *ACREventsSubscription) SetEasIds(v []string) {
	o.EasIds = v
}

// GetAcIds returns the AcIds field value if set, zero value otherwise.
func (o *ACREventsSubscription) GetAcIds() []string {
	if o == nil || IsNil(o.AcIds) {
		var ret []string
		return ret
	}
	return o.AcIds
}

// GetAcIdsOk returns a tuple with the AcIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetAcIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AcIds) {
		return nil, false
	}
	return o.AcIds, true
}

// HasAcIds returns a boolean if a field has been set.
func (o *ACREventsSubscription) HasAcIds() bool {
	if o != nil && !IsNil(o.AcIds) {
		return true
	}

	return false
}

// SetAcIds gets a reference to the given []string and assigns it to the AcIds field.
func (o *ACREventsSubscription) SetAcIds(v []string) {
	o.AcIds = v
}

// GetEventIds returns the EventIds field value
func (o *ACREventsSubscription) GetEventIds() ACREventIDs {
	if o == nil {
		var ret ACREventIDs
		return ret
	}

	return o.EventIds
}

// GetEventIdsOk returns a tuple with the EventIds field value
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetEventIdsOk() (*ACREventIDs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventIds, true
}

// SetEventIds sets field value
func (o *ACREventsSubscription) SetEventIds(v ACREventIDs) {
	o.EventIds = v
}

// GetNotificationDestination returns the NotificationDestination field value
func (o *ACREventsSubscription) GetNotificationDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetNotificationDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationDestination, true
}

// SetNotificationDestination sets field value
func (o *ACREventsSubscription) SetNotificationDestination(v string) {
	o.NotificationDestination = v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *ACREventsSubscription) GetRequestTestNotification() bool {
	if o == nil || IsNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *ACREventsSubscription) HasRequestTestNotification() bool {
	if o != nil && !IsNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *ACREventsSubscription) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *ACREventsSubscription) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *ACREventsSubscription) HasWebsockNotifConfig() bool {
	if o != nil && !IsNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *ACREventsSubscription) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *ACREventsSubscription) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACREventsSubscription) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *ACREventsSubscription) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *ACREventsSubscription) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o ACREventsSubscription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACREventsSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eecId"] = o.EecId
	if !IsNil(o.UeId) {
		toSerialize["ueId"] = o.UeId
	}
	if !IsNil(o.ExpTime) {
		toSerialize["expTime"] = o.ExpTime
	}
	toSerialize["easIds"] = o.EasIds
	if !IsNil(o.AcIds) {
		toSerialize["acIds"] = o.AcIds
	}
	toSerialize["eventIds"] = o.EventIds
	toSerialize["notificationDestination"] = o.NotificationDestination
	if !IsNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !IsNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableACREventsSubscription struct {
	value *ACREventsSubscription
	isSet bool
}

func (v NullableACREventsSubscription) Get() *ACREventsSubscription {
	return v.value
}

func (v *NullableACREventsSubscription) Set(val *ACREventsSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableACREventsSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableACREventsSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACREventsSubscription(val *ACREventsSubscription) *NullableACREventsSubscription {
	return &NullableACREventsSubscription{value: val, isSet: true}
}

func (v NullableACREventsSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACREventsSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
