/*
M1_EventDataProcessingProvisioning

5GMS AF M1 Event Data Processing Provisioning API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_M1_EventDataProcessingProvisioning

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiCreateEventDataProcessingConfigurationRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	eventDataProcessingConfiguration *EventDataProcessingConfiguration
}

// A JSON representation of a Event Data Processing Configuration
func (r ApiCreateEventDataProcessingConfigurationRequest) EventDataProcessingConfiguration(eventDataProcessingConfiguration EventDataProcessingConfiguration) ApiCreateEventDataProcessingConfigurationRequest {
	r.eventDataProcessingConfiguration = &eventDataProcessingConfiguration
	return r
}

func (r ApiCreateEventDataProcessingConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateEventDataProcessingConfigurationExecute(r)
}

/*
CreateEventDataProcessingConfiguration Supply an Event Data Processing Configuration for the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @return ApiCreateEventDataProcessingConfigurationRequest
*/
func (a *DefaultApiService) CreateEventDataProcessingConfiguration(ctx context.Context, provisioningSessionId string) ApiCreateEventDataProcessingConfigurationRequest {
	return ApiCreateEventDataProcessingConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
func (a *DefaultApiService) CreateEventDataProcessingConfigurationExecute(r ApiCreateEventDataProcessingConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateEventDataProcessingConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/event-data-processing-configurations"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventDataProcessingConfiguration == nil {
		return nil, reportError("eventDataProcessingConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventDataProcessingConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDestroyEventDataProcessingConfigurationRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	eventDataProcessingConfigurationId string
}

func (r ApiDestroyEventDataProcessingConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DestroyEventDataProcessingConfigurationExecute(r)
}

/*
DestroyEventDataProcessingConfiguration Destroy the specified Event Data Processing Configuration of the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @param eventDataProcessingConfigurationId The resource identifier of an Event Data Processing Configuration.
 @return ApiDestroyEventDataProcessingConfigurationRequest
*/
func (a *DefaultApiService) DestroyEventDataProcessingConfiguration(ctx context.Context, provisioningSessionId string, eventDataProcessingConfigurationId string) ApiDestroyEventDataProcessingConfigurationRequest {
	return ApiDestroyEventDataProcessingConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		eventDataProcessingConfigurationId: eventDataProcessingConfigurationId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DestroyEventDataProcessingConfigurationExecute(r ApiDestroyEventDataProcessingConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DestroyEventDataProcessingConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/event-data-processing-configurations/{eventDataProcessingConfigurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eventDataProcessingConfigurationId"+"}", url.PathEscape(parameterValueToString(r.eventDataProcessingConfigurationId, "eventDataProcessingConfigurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPatchEventDataProcessingConfigurationRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	eventDataProcessingConfigurationId string
	eventDataProcessingConfiguration *EventDataProcessingConfiguration
}

// A JSON representation of a Event Data Processing Configuration
func (r ApiPatchEventDataProcessingConfigurationRequest) EventDataProcessingConfiguration(eventDataProcessingConfiguration EventDataProcessingConfiguration) ApiPatchEventDataProcessingConfigurationRequest {
	r.eventDataProcessingConfiguration = &eventDataProcessingConfiguration
	return r
}

func (r ApiPatchEventDataProcessingConfigurationRequest) Execute() (*EventDataProcessingConfiguration, *http.Response, error) {
	return r.ApiService.PatchEventDataProcessingConfigurationExecute(r)
}

/*
PatchEventDataProcessingConfiguration Patch the specified Event Data Processing Configuration for the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @param eventDataProcessingConfigurationId The resource identifier of an Event Data Processing Configuration.
 @return ApiPatchEventDataProcessingConfigurationRequest
*/
func (a *DefaultApiService) PatchEventDataProcessingConfiguration(ctx context.Context, provisioningSessionId string, eventDataProcessingConfigurationId string) ApiPatchEventDataProcessingConfigurationRequest {
	return ApiPatchEventDataProcessingConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		eventDataProcessingConfigurationId: eventDataProcessingConfigurationId,
	}
}

// Execute executes the request
//  @return EventDataProcessingConfiguration
func (a *DefaultApiService) PatchEventDataProcessingConfigurationExecute(r ApiPatchEventDataProcessingConfigurationRequest) (*EventDataProcessingConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EventDataProcessingConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchEventDataProcessingConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/event-data-processing-configurations/{eventDataProcessingConfigurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eventDataProcessingConfigurationId"+"}", url.PathEscape(parameterValueToString(r.eventDataProcessingConfigurationId, "eventDataProcessingConfigurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventDataProcessingConfiguration == nil {
		return localVarReturnValue, nil, reportError("eventDataProcessingConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json", "application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventDataProcessingConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveEventDataProcessingConfigurationRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	eventDataProcessingConfigurationId string
}

func (r ApiRetrieveEventDataProcessingConfigurationRequest) Execute() (*EventDataProcessingConfiguration, *http.Response, error) {
	return r.ApiService.RetrieveEventDataProcessingConfigurationExecute(r)
}

/*
RetrieveEventDataProcessingConfiguration Retrieve the specified Event Data Processing Configuration of the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @param eventDataProcessingConfigurationId The resource identifier of an Event Data Processing Configuration.
 @return ApiRetrieveEventDataProcessingConfigurationRequest
*/
func (a *DefaultApiService) RetrieveEventDataProcessingConfiguration(ctx context.Context, provisioningSessionId string, eventDataProcessingConfigurationId string) ApiRetrieveEventDataProcessingConfigurationRequest {
	return ApiRetrieveEventDataProcessingConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		eventDataProcessingConfigurationId: eventDataProcessingConfigurationId,
	}
}

// Execute executes the request
//  @return EventDataProcessingConfiguration
func (a *DefaultApiService) RetrieveEventDataProcessingConfigurationExecute(r ApiRetrieveEventDataProcessingConfigurationRequest) (*EventDataProcessingConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EventDataProcessingConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RetrieveEventDataProcessingConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/event-data-processing-configurations/{eventDataProcessingConfigurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eventDataProcessingConfigurationId"+"}", url.PathEscape(parameterValueToString(r.eventDataProcessingConfigurationId, "eventDataProcessingConfigurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateEventDataProcessingConfigurationRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	eventDataProcessingConfigurationId string
	eventDataProcessingConfiguration *EventDataProcessingConfiguration
}

// A JSON representation of a Event Data Processing Configuration
func (r ApiUpdateEventDataProcessingConfigurationRequest) EventDataProcessingConfiguration(eventDataProcessingConfiguration EventDataProcessingConfiguration) ApiUpdateEventDataProcessingConfigurationRequest {
	r.eventDataProcessingConfiguration = &eventDataProcessingConfiguration
	return r
}

func (r ApiUpdateEventDataProcessingConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateEventDataProcessingConfigurationExecute(r)
}

/*
UpdateEventDataProcessingConfiguration Update the specified Event Data Processing Configuration for the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @param eventDataProcessingConfigurationId The resource identifier of an Event Data Processing Configuration.
 @return ApiUpdateEventDataProcessingConfigurationRequest
*/
func (a *DefaultApiService) UpdateEventDataProcessingConfiguration(ctx context.Context, provisioningSessionId string, eventDataProcessingConfigurationId string) ApiUpdateEventDataProcessingConfigurationRequest {
	return ApiUpdateEventDataProcessingConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		eventDataProcessingConfigurationId: eventDataProcessingConfigurationId,
	}
}

// Execute executes the request
func (a *DefaultApiService) UpdateEventDataProcessingConfigurationExecute(r ApiUpdateEventDataProcessingConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdateEventDataProcessingConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/event-data-processing-configurations/{eventDataProcessingConfigurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eventDataProcessingConfigurationId"+"}", url.PathEscape(parameterValueToString(r.eventDataProcessingConfigurationId, "eventDataProcessingConfigurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventDataProcessingConfiguration == nil {
		return nil, reportError("eventDataProcessingConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventDataProcessingConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
