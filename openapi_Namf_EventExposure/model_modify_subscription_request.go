/*
Namf_EventExposure

AMF Event Exposure Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_EventExposure

import (
	"encoding/json"
	"fmt"
)

// ModifySubscriptionRequest - struct for ModifySubscriptionRequest
type ModifySubscriptionRequest struct {
	ArrayOfAmfUpdateEventOptionItem *[]AmfUpdateEventOptionItem
	ArrayOfAmfUpdateEventSubscriptionItem *[]AmfUpdateEventSubscriptionItem
}

// []AmfUpdateEventOptionItemAsModifySubscriptionRequest is a convenience function that returns []AmfUpdateEventOptionItem wrapped in ModifySubscriptionRequest
func ArrayOfAmfUpdateEventOptionItemAsModifySubscriptionRequest(v *[]AmfUpdateEventOptionItem) ModifySubscriptionRequest {
	return ModifySubscriptionRequest{
		ArrayOfAmfUpdateEventOptionItem: v,
	}
}

// []AmfUpdateEventSubscriptionItemAsModifySubscriptionRequest is a convenience function that returns []AmfUpdateEventSubscriptionItem wrapped in ModifySubscriptionRequest
func ArrayOfAmfUpdateEventSubscriptionItemAsModifySubscriptionRequest(v *[]AmfUpdateEventSubscriptionItem) ModifySubscriptionRequest {
	return ModifySubscriptionRequest{
		ArrayOfAmfUpdateEventSubscriptionItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ModifySubscriptionRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfAmfUpdateEventOptionItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAmfUpdateEventOptionItem)
	if err == nil {
		jsonArrayOfAmfUpdateEventOptionItem, _ := json.Marshal(dst.ArrayOfAmfUpdateEventOptionItem)
		if string(jsonArrayOfAmfUpdateEventOptionItem) == "{}" { // empty struct
			dst.ArrayOfAmfUpdateEventOptionItem = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAmfUpdateEventOptionItem = nil
	}

	// try to unmarshal data into ArrayOfAmfUpdateEventSubscriptionItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAmfUpdateEventSubscriptionItem)
	if err == nil {
		jsonArrayOfAmfUpdateEventSubscriptionItem, _ := json.Marshal(dst.ArrayOfAmfUpdateEventSubscriptionItem)
		if string(jsonArrayOfAmfUpdateEventSubscriptionItem) == "{}" { // empty struct
			dst.ArrayOfAmfUpdateEventSubscriptionItem = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAmfUpdateEventSubscriptionItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfAmfUpdateEventOptionItem = nil
		dst.ArrayOfAmfUpdateEventSubscriptionItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ModifySubscriptionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ModifySubscriptionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ModifySubscriptionRequest) MarshalJSON() ([]byte, error) {
	if src.ArrayOfAmfUpdateEventOptionItem != nil {
		return json.Marshal(&src.ArrayOfAmfUpdateEventOptionItem)
	}

	if src.ArrayOfAmfUpdateEventSubscriptionItem != nil {
		return json.Marshal(&src.ArrayOfAmfUpdateEventSubscriptionItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ModifySubscriptionRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfAmfUpdateEventOptionItem != nil {
		return obj.ArrayOfAmfUpdateEventOptionItem
	}

	if obj.ArrayOfAmfUpdateEventSubscriptionItem != nil {
		return obj.ArrayOfAmfUpdateEventSubscriptionItem
	}

	// all schemas are nil
	return nil
}

type NullableModifySubscriptionRequest struct {
	value *ModifySubscriptionRequest
	isSet bool
}

func (v NullableModifySubscriptionRequest) Get() *ModifySubscriptionRequest {
	return v.value
}

func (v *NullableModifySubscriptionRequest) Set(val *ModifySubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModifySubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModifySubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifySubscriptionRequest(val *ModifySubscriptionRequest) *NullableModifySubscriptionRequest {
	return &NullableModifySubscriptionRequest{value: val, isSet: true}
}

func (v NullableModifySubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifySubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


