/*
Nhss_imsUECM

Nhss UE Context Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsUECM

import (
	"encoding/json"
	"fmt"
)

// LooseRouteIndicationAnyOf the model 'LooseRouteIndicationAnyOf'
type LooseRouteIndicationAnyOf string

// List of LooseRouteIndication_anyOf
const (
	NOT_REQUIRED LooseRouteIndicationAnyOf = "LOOSE_ROUTE_NOT_REQUIRED"
	REQUIRED LooseRouteIndicationAnyOf = "LOOSE_ROUTE_REQUIRED"
)

// All allowed values of LooseRouteIndicationAnyOf enum
var AllowedLooseRouteIndicationAnyOfEnumValues = []LooseRouteIndicationAnyOf{
	"LOOSE_ROUTE_NOT_REQUIRED",
	"LOOSE_ROUTE_REQUIRED",
}

func (v *LooseRouteIndicationAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LooseRouteIndicationAnyOf(value)
	for _, existing := range AllowedLooseRouteIndicationAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LooseRouteIndicationAnyOf", value)
}

// NewLooseRouteIndicationAnyOfFromValue returns a pointer to a valid LooseRouteIndicationAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLooseRouteIndicationAnyOfFromValue(v string) (*LooseRouteIndicationAnyOf, error) {
	ev := LooseRouteIndicationAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LooseRouteIndicationAnyOf: valid values are %v", v, AllowedLooseRouteIndicationAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LooseRouteIndicationAnyOf) IsValid() bool {
	for _, existing := range AllowedLooseRouteIndicationAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LooseRouteIndication_anyOf value
func (v LooseRouteIndicationAnyOf) Ptr() *LooseRouteIndicationAnyOf {
	return &v
}

type NullableLooseRouteIndicationAnyOf struct {
	value *LooseRouteIndicationAnyOf
	isSet bool
}

func (v NullableLooseRouteIndicationAnyOf) Get() *LooseRouteIndicationAnyOf {
	return v.value
}

func (v *NullableLooseRouteIndicationAnyOf) Set(val *LooseRouteIndicationAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLooseRouteIndicationAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLooseRouteIndicationAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLooseRouteIndicationAnyOf(val *LooseRouteIndicationAnyOf) *NullableLooseRouteIndicationAnyOf {
	return &NullableLooseRouteIndicationAnyOf{value: val, isSet: true}
}

func (v NullableLooseRouteIndicationAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLooseRouteIndicationAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

