/*
Nhss_imsUECM

Nhss UE Context Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsUECM

import (
	"encoding/json"
)

// checks if the DeregistrationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeregistrationData{}

// DeregistrationData Data related to the de-registration information of a S-CSCF in HSS
type DeregistrationData struct {
	DeregReason DeregistrationReason `json:"deregReason"`
	// IMS Private Identity of the UE
	Impi                          string                        `json:"impi"`
	AssociatedImpis               []string                      `json:"associatedImpis,omitempty"`
	EmergencyRegisteredIdentities []EmergencyRegisteredIdentity `json:"emergencyRegisteredIdentities,omitempty"`
}

// NewDeregistrationData instantiates a new DeregistrationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeregistrationData(deregReason DeregistrationReason, impi string) *DeregistrationData {
	this := DeregistrationData{}
	this.DeregReason = deregReason
	this.Impi = impi
	return &this
}

// NewDeregistrationDataWithDefaults instantiates a new DeregistrationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeregistrationDataWithDefaults() *DeregistrationData {
	this := DeregistrationData{}
	return &this
}

// GetDeregReason returns the DeregReason field value
func (o *DeregistrationData) GetDeregReason() DeregistrationReason {
	if o == nil {
		var ret DeregistrationReason
		return ret
	}

	return o.DeregReason
}

// GetDeregReasonOk returns a tuple with the DeregReason field value
// and a boolean to check if the value has been set.
func (o *DeregistrationData) GetDeregReasonOk() (*DeregistrationReason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeregReason, true
}

// SetDeregReason sets field value
func (o *DeregistrationData) SetDeregReason(v DeregistrationReason) {
	o.DeregReason = v
}

// GetImpi returns the Impi field value
func (o *DeregistrationData) GetImpi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Impi
}

// GetImpiOk returns a tuple with the Impi field value
// and a boolean to check if the value has been set.
func (o *DeregistrationData) GetImpiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Impi, true
}

// SetImpi sets field value
func (o *DeregistrationData) SetImpi(v string) {
	o.Impi = v
}

// GetAssociatedImpis returns the AssociatedImpis field value if set, zero value otherwise.
func (o *DeregistrationData) GetAssociatedImpis() []string {
	if o == nil || IsNil(o.AssociatedImpis) {
		var ret []string
		return ret
	}
	return o.AssociatedImpis
}

// GetAssociatedImpisOk returns a tuple with the AssociatedImpis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeregistrationData) GetAssociatedImpisOk() ([]string, bool) {
	if o == nil || IsNil(o.AssociatedImpis) {
		return nil, false
	}
	return o.AssociatedImpis, true
}

// HasAssociatedImpis returns a boolean if a field has been set.
func (o *DeregistrationData) HasAssociatedImpis() bool {
	if o != nil && !IsNil(o.AssociatedImpis) {
		return true
	}

	return false
}

// SetAssociatedImpis gets a reference to the given []string and assigns it to the AssociatedImpis field.
func (o *DeregistrationData) SetAssociatedImpis(v []string) {
	o.AssociatedImpis = v
}

// GetEmergencyRegisteredIdentities returns the EmergencyRegisteredIdentities field value if set, zero value otherwise.
func (o *DeregistrationData) GetEmergencyRegisteredIdentities() []EmergencyRegisteredIdentity {
	if o == nil || IsNil(o.EmergencyRegisteredIdentities) {
		var ret []EmergencyRegisteredIdentity
		return ret
	}
	return o.EmergencyRegisteredIdentities
}

// GetEmergencyRegisteredIdentitiesOk returns a tuple with the EmergencyRegisteredIdentities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeregistrationData) GetEmergencyRegisteredIdentitiesOk() ([]EmergencyRegisteredIdentity, bool) {
	if o == nil || IsNil(o.EmergencyRegisteredIdentities) {
		return nil, false
	}
	return o.EmergencyRegisteredIdentities, true
}

// HasEmergencyRegisteredIdentities returns a boolean if a field has been set.
func (o *DeregistrationData) HasEmergencyRegisteredIdentities() bool {
	if o != nil && !IsNil(o.EmergencyRegisteredIdentities) {
		return true
	}

	return false
}

// SetEmergencyRegisteredIdentities gets a reference to the given []EmergencyRegisteredIdentity and assigns it to the EmergencyRegisteredIdentities field.
func (o *DeregistrationData) SetEmergencyRegisteredIdentities(v []EmergencyRegisteredIdentity) {
	o.EmergencyRegisteredIdentities = v
}

func (o DeregistrationData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeregistrationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deregReason"] = o.DeregReason
	toSerialize["impi"] = o.Impi
	if !IsNil(o.AssociatedImpis) {
		toSerialize["associatedImpis"] = o.AssociatedImpis
	}
	if !IsNil(o.EmergencyRegisteredIdentities) {
		toSerialize["emergencyRegisteredIdentities"] = o.EmergencyRegisteredIdentities
	}
	return toSerialize, nil
}

type NullableDeregistrationData struct {
	value *DeregistrationData
	isSet bool
}

func (v NullableDeregistrationData) Get() *DeregistrationData {
	return v.value
}

func (v *NullableDeregistrationData) Set(val *DeregistrationData) {
	v.value = val
	v.isSet = true
}

func (v NullableDeregistrationData) IsSet() bool {
	return v.isSet
}

func (v *NullableDeregistrationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeregistrationData(val *DeregistrationData) *NullableDeregistrationData {
	return &NullableDeregistrationData{value: val, isSet: true}
}

func (v NullableDeregistrationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeregistrationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
