/*
Nhss_imsUECM

Nhss UE Context Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsUECM

import (
	"encoding/json"
	"fmt"
)

// AuthorizationTypeAnyOf the model 'AuthorizationTypeAnyOf'
type AuthorizationTypeAnyOf string

// List of AuthorizationType_anyOf
const (
	REGISTRATION AuthorizationTypeAnyOf = "REGISTRATION"
	DEREGISTRATION AuthorizationTypeAnyOf = "DEREGISTRATION"
)

// All allowed values of AuthorizationTypeAnyOf enum
var AllowedAuthorizationTypeAnyOfEnumValues = []AuthorizationTypeAnyOf{
	"REGISTRATION",
	"DEREGISTRATION",
}

func (v *AuthorizationTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthorizationTypeAnyOf(value)
	for _, existing := range AllowedAuthorizationTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthorizationTypeAnyOf", value)
}

// NewAuthorizationTypeAnyOfFromValue returns a pointer to a valid AuthorizationTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthorizationTypeAnyOfFromValue(v string) (*AuthorizationTypeAnyOf, error) {
	ev := AuthorizationTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthorizationTypeAnyOf: valid values are %v", v, AllowedAuthorizationTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthorizationTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedAuthorizationTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthorizationType_anyOf value
func (v AuthorizationTypeAnyOf) Ptr() *AuthorizationTypeAnyOf {
	return &v
}

type NullableAuthorizationTypeAnyOf struct {
	value *AuthorizationTypeAnyOf
	isSet bool
}

func (v NullableAuthorizationTypeAnyOf) Get() *AuthorizationTypeAnyOf {
	return v.value
}

func (v *NullableAuthorizationTypeAnyOf) Set(val *AuthorizationTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationTypeAnyOf(val *AuthorizationTypeAnyOf) *NullableAuthorizationTypeAnyOf {
	return &NullableAuthorizationTypeAnyOf{value: val, isSet: true}
}

func (v NullableAuthorizationTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

