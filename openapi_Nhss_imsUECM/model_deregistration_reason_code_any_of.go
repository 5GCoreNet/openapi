/*
Nhss_imsUECM

Nhss UE Context Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsUECM

import (
	"encoding/json"
	"fmt"
)

// DeregistrationReasonCodeAnyOf the model 'DeregistrationReasonCodeAnyOf'
type DeregistrationReasonCodeAnyOf string

// List of DeregistrationReasonCode_anyOf
const (
	PERMANENT_TERMINATION DeregistrationReasonCodeAnyOf = "PERMANENT_TERMINATION"
	NEW_SERVER_ASSIGNED DeregistrationReasonCodeAnyOf = "NEW_SERVER_ASSIGNED"
	REMOVE_S_CSCF DeregistrationReasonCodeAnyOf = "REMOVE_S-CSCF"
	SERVER_CHANGE DeregistrationReasonCodeAnyOf = "SERVER_CHANGE"
)

// All allowed values of DeregistrationReasonCodeAnyOf enum
var AllowedDeregistrationReasonCodeAnyOfEnumValues = []DeregistrationReasonCodeAnyOf{
	"PERMANENT_TERMINATION",
	"NEW_SERVER_ASSIGNED",
	"REMOVE_S-CSCF",
	"SERVER_CHANGE",
}

func (v *DeregistrationReasonCodeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeregistrationReasonCodeAnyOf(value)
	for _, existing := range AllowedDeregistrationReasonCodeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeregistrationReasonCodeAnyOf", value)
}

// NewDeregistrationReasonCodeAnyOfFromValue returns a pointer to a valid DeregistrationReasonCodeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeregistrationReasonCodeAnyOfFromValue(v string) (*DeregistrationReasonCodeAnyOf, error) {
	ev := DeregistrationReasonCodeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeregistrationReasonCodeAnyOf: valid values are %v", v, AllowedDeregistrationReasonCodeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeregistrationReasonCodeAnyOf) IsValid() bool {
	for _, existing := range AllowedDeregistrationReasonCodeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeregistrationReasonCode_anyOf value
func (v DeregistrationReasonCodeAnyOf) Ptr() *DeregistrationReasonCodeAnyOf {
	return &v
}

type NullableDeregistrationReasonCodeAnyOf struct {
	value *DeregistrationReasonCodeAnyOf
	isSet bool
}

func (v NullableDeregistrationReasonCodeAnyOf) Get() *DeregistrationReasonCodeAnyOf {
	return v.value
}

func (v *NullableDeregistrationReasonCodeAnyOf) Set(val *DeregistrationReasonCodeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDeregistrationReasonCodeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDeregistrationReasonCodeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeregistrationReasonCodeAnyOf(val *DeregistrationReasonCodeAnyOf) *NullableDeregistrationReasonCodeAnyOf {
	return &NullableDeregistrationReasonCodeAnyOf{value: val, isSet: true}
}

func (v NullableDeregistrationReasonCodeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeregistrationReasonCodeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

