/*
Nudm_SSAU

Nudm Service Specific Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudm_SSAU

import (
	"encoding/json"
	"fmt"
)

// InvalidCauseAnyOf the model 'InvalidCauseAnyOf'
type InvalidCauseAnyOf string

// List of InvalidCause_anyOf
const (
	SUBSRIPTION_WITHDRAWAL InvalidCauseAnyOf = "SUBSRIPTION_WITHDRAWAL"
	DNN_REMOVED InvalidCauseAnyOf = "DNN_REMOVED"
	SLICE_REMOVED InvalidCauseAnyOf = "SLICE_REMOVED"
	AUTHORIZATION_REVOKED InvalidCauseAnyOf = "AUTHORIZATION_REVOKED"
)

// All allowed values of InvalidCauseAnyOf enum
var AllowedInvalidCauseAnyOfEnumValues = []InvalidCauseAnyOf{
	"SUBSRIPTION_WITHDRAWAL",
	"DNN_REMOVED",
	"SLICE_REMOVED",
	"AUTHORIZATION_REVOKED",
}

func (v *InvalidCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvalidCauseAnyOf(value)
	for _, existing := range AllowedInvalidCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InvalidCauseAnyOf", value)
}

// NewInvalidCauseAnyOfFromValue returns a pointer to a valid InvalidCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvalidCauseAnyOfFromValue(v string) (*InvalidCauseAnyOf, error) {
	ev := InvalidCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvalidCauseAnyOf: valid values are %v", v, AllowedInvalidCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvalidCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedInvalidCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvalidCause_anyOf value
func (v InvalidCauseAnyOf) Ptr() *InvalidCauseAnyOf {
	return &v
}

type NullableInvalidCauseAnyOf struct {
	value *InvalidCauseAnyOf
	isSet bool
}

func (v NullableInvalidCauseAnyOf) Get() *InvalidCauseAnyOf {
	return v.value
}

func (v *NullableInvalidCauseAnyOf) Set(val *InvalidCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidCauseAnyOf(val *InvalidCauseAnyOf) *NullableInvalidCauseAnyOf {
	return &NullableInvalidCauseAnyOf{value: val, isSet: true}
}

func (v NullableInvalidCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

