/*
Nudm_SSAU

Nudm Service Specific Authorization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudm_SSAU

import (
	"encoding/json"
)

// checks if the AuthUpdateNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthUpdateNotification{}

// AuthUpdateNotification Represents an authorization update notification.
type AuthUpdateNotification struct {
	ServiceType ServiceType `json:"serviceType"`
	Snssai      *Snssai     `json:"snssai,omitempty"`
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").
	Dnn                *string          `json:"dnn,omitempty"`
	AuthUpdateInfoList []AuthUpdateInfo `json:"authUpdateInfoList"`
	// String uniquely identifying MTC provider information.
	MtcProviderInformation *string `json:"mtcProviderInformation,omitempty"`
	AfId                   *string `json:"afId,omitempty"`
}

// NewAuthUpdateNotification instantiates a new AuthUpdateNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthUpdateNotification(serviceType ServiceType, authUpdateInfoList []AuthUpdateInfo) *AuthUpdateNotification {
	this := AuthUpdateNotification{}
	this.ServiceType = serviceType
	this.AuthUpdateInfoList = authUpdateInfoList
	return &this
}

// NewAuthUpdateNotificationWithDefaults instantiates a new AuthUpdateNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthUpdateNotificationWithDefaults() *AuthUpdateNotification {
	this := AuthUpdateNotification{}
	return &this
}

// GetServiceType returns the ServiceType field value
func (o *AuthUpdateNotification) GetServiceType() ServiceType {
	if o == nil {
		var ret ServiceType
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *AuthUpdateNotification) GetServiceTypeOk() (*ServiceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *AuthUpdateNotification) SetServiceType(v ServiceType) {
	o.ServiceType = v
}

// GetSnssai returns the Snssai field value if set, zero value otherwise.
func (o *AuthUpdateNotification) GetSnssai() Snssai {
	if o == nil || IsNil(o.Snssai) {
		var ret Snssai
		return ret
	}
	return *o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUpdateNotification) GetSnssaiOk() (*Snssai, bool) {
	if o == nil || IsNil(o.Snssai) {
		return nil, false
	}
	return o.Snssai, true
}

// HasSnssai returns a boolean if a field has been set.
func (o *AuthUpdateNotification) HasSnssai() bool {
	if o != nil && !IsNil(o.Snssai) {
		return true
	}

	return false
}

// SetSnssai gets a reference to the given Snssai and assigns it to the Snssai field.
func (o *AuthUpdateNotification) SetSnssai(v Snssai) {
	o.Snssai = &v
}

// GetDnn returns the Dnn field value if set, zero value otherwise.
func (o *AuthUpdateNotification) GetDnn() string {
	if o == nil || IsNil(o.Dnn) {
		var ret string
		return ret
	}
	return *o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUpdateNotification) GetDnnOk() (*string, bool) {
	if o == nil || IsNil(o.Dnn) {
		return nil, false
	}
	return o.Dnn, true
}

// HasDnn returns a boolean if a field has been set.
func (o *AuthUpdateNotification) HasDnn() bool {
	if o != nil && !IsNil(o.Dnn) {
		return true
	}

	return false
}

// SetDnn gets a reference to the given string and assigns it to the Dnn field.
func (o *AuthUpdateNotification) SetDnn(v string) {
	o.Dnn = &v
}

// GetAuthUpdateInfoList returns the AuthUpdateInfoList field value
func (o *AuthUpdateNotification) GetAuthUpdateInfoList() []AuthUpdateInfo {
	if o == nil {
		var ret []AuthUpdateInfo
		return ret
	}

	return o.AuthUpdateInfoList
}

// GetAuthUpdateInfoListOk returns a tuple with the AuthUpdateInfoList field value
// and a boolean to check if the value has been set.
func (o *AuthUpdateNotification) GetAuthUpdateInfoListOk() ([]AuthUpdateInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthUpdateInfoList, true
}

// SetAuthUpdateInfoList sets field value
func (o *AuthUpdateNotification) SetAuthUpdateInfoList(v []AuthUpdateInfo) {
	o.AuthUpdateInfoList = v
}

// GetMtcProviderInformation returns the MtcProviderInformation field value if set, zero value otherwise.
func (o *AuthUpdateNotification) GetMtcProviderInformation() string {
	if o == nil || IsNil(o.MtcProviderInformation) {
		var ret string
		return ret
	}
	return *o.MtcProviderInformation
}

// GetMtcProviderInformationOk returns a tuple with the MtcProviderInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUpdateNotification) GetMtcProviderInformationOk() (*string, bool) {
	if o == nil || IsNil(o.MtcProviderInformation) {
		return nil, false
	}
	return o.MtcProviderInformation, true
}

// HasMtcProviderInformation returns a boolean if a field has been set.
func (o *AuthUpdateNotification) HasMtcProviderInformation() bool {
	if o != nil && !IsNil(o.MtcProviderInformation) {
		return true
	}

	return false
}

// SetMtcProviderInformation gets a reference to the given string and assigns it to the MtcProviderInformation field.
func (o *AuthUpdateNotification) SetMtcProviderInformation(v string) {
	o.MtcProviderInformation = &v
}

// GetAfId returns the AfId field value if set, zero value otherwise.
func (o *AuthUpdateNotification) GetAfId() string {
	if o == nil || IsNil(o.AfId) {
		var ret string
		return ret
	}
	return *o.AfId
}

// GetAfIdOk returns a tuple with the AfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUpdateNotification) GetAfIdOk() (*string, bool) {
	if o == nil || IsNil(o.AfId) {
		return nil, false
	}
	return o.AfId, true
}

// HasAfId returns a boolean if a field has been set.
func (o *AuthUpdateNotification) HasAfId() bool {
	if o != nil && !IsNil(o.AfId) {
		return true
	}

	return false
}

// SetAfId gets a reference to the given string and assigns it to the AfId field.
func (o *AuthUpdateNotification) SetAfId(v string) {
	o.AfId = &v
}

func (o AuthUpdateNotification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthUpdateNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serviceType"] = o.ServiceType
	if !IsNil(o.Snssai) {
		toSerialize["snssai"] = o.Snssai
	}
	if !IsNil(o.Dnn) {
		toSerialize["dnn"] = o.Dnn
	}
	toSerialize["authUpdateInfoList"] = o.AuthUpdateInfoList
	if !IsNil(o.MtcProviderInformation) {
		toSerialize["mtcProviderInformation"] = o.MtcProviderInformation
	}
	if !IsNil(o.AfId) {
		toSerialize["afId"] = o.AfId
	}
	return toSerialize, nil
}

type NullableAuthUpdateNotification struct {
	value *AuthUpdateNotification
	isSet bool
}

func (v NullableAuthUpdateNotification) Get() *AuthUpdateNotification {
	return v.value
}

func (v *NullableAuthUpdateNotification) Set(val *AuthUpdateNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthUpdateNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthUpdateNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthUpdateNotification(val *AuthUpdateNotification) *NullableAuthUpdateNotification {
	return &NullableAuthUpdateNotification{value: val, isSet: true}
}

func (v NullableAuthUpdateNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthUpdateNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
