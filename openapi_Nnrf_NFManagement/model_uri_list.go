/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnrf_NFManagement

import (
	"encoding/json"
)

// checks if the UriList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UriList{}

// UriList Represents a set of URIs following the 3GPP hypermedia format (containing a \"_links\" attribute).
type UriList struct {
	// List of the URI of NF instances. It has two members whose names are item and self. The item attribute contains an array of URIs.
	Links          *map[string]LinksValueSchema `json:"_links,omitempty"`
	TotalItemCount *int32                       `json:"totalItemCount,omitempty"`
}

// NewUriList instantiates a new UriList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUriList() *UriList {
	this := UriList{}
	return &this
}

// NewUriListWithDefaults instantiates a new UriList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUriListWithDefaults() *UriList {
	this := UriList{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *UriList) GetLinks() map[string]LinksValueSchema {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksValueSchema
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UriList) GetLinksOk() (*map[string]LinksValueSchema, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *UriList) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksValueSchema and assigns it to the Links field.
func (o *UriList) SetLinks(v map[string]LinksValueSchema) {
	o.Links = &v
}

// GetTotalItemCount returns the TotalItemCount field value if set, zero value otherwise.
func (o *UriList) GetTotalItemCount() int32 {
	if o == nil || IsNil(o.TotalItemCount) {
		var ret int32
		return ret
	}
	return *o.TotalItemCount
}

// GetTotalItemCountOk returns a tuple with the TotalItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UriList) GetTotalItemCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalItemCount) {
		return nil, false
	}
	return o.TotalItemCount, true
}

// HasTotalItemCount returns a boolean if a field has been set.
func (o *UriList) HasTotalItemCount() bool {
	if o != nil && !IsNil(o.TotalItemCount) {
		return true
	}

	return false
}

// SetTotalItemCount gets a reference to the given int32 and assigns it to the TotalItemCount field.
func (o *UriList) SetTotalItemCount(v int32) {
	o.TotalItemCount = &v
}

func (o UriList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UriList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.TotalItemCount) {
		toSerialize["totalItemCount"] = o.TotalItemCount
	}
	return toSerialize, nil
}

type NullableUriList struct {
	value *UriList
	isSet bool
}

func (v NullableUriList) Get() *UriList {
	return v.value
}

func (v *NullableUriList) Set(val *UriList) {
	v.value = val
	v.isSet = true
}

func (v NullableUriList) IsSet() bool {
	return v.isSet
}

func (v *NullableUriList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUriList(val *UriList) *NullableUriList {
	return &NullableUriList{value: val, isSet: true}
}

func (v NullableUriList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUriList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
