/*
Npcf_AMPolicyControl

Access and Mobility Policy Control Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_AMPolicyControl

import (
	"encoding/json"
)

// checks if the AmRequestedValueRep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmRequestedValueRep{}

// AmRequestedValueRep Represents the current applicable values corresponding to the policy control request triggers.
type AmRequestedValueRep struct {
	UserLoc *UserLocation `json:"userLoc,omitempty"`
	// Contains the UE presence statuses for tracking areas. The praId attribute within the PresenceInfo data type is the key of the map.
	PraStatuses *map[string]PresenceInfo `json:"praStatuses,omitempty"`
	AccessTypes []AccessType             `json:"accessTypes,omitempty"`
	RatTypes    []RatType                `json:"ratTypes,omitempty"`
	// array of allowed S-NSSAIs for the 3GPP access.
	AllowedSnssais []Snssai `json:"allowedSnssais,omitempty"`
	// array of allowed S-NSSAIs for the Non-3GPP access.
	N3gAllowedSnssais []Snssai `json:"n3gAllowedSnssais,omitempty"`
}

// NewAmRequestedValueRep instantiates a new AmRequestedValueRep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmRequestedValueRep() *AmRequestedValueRep {
	this := AmRequestedValueRep{}
	return &this
}

// NewAmRequestedValueRepWithDefaults instantiates a new AmRequestedValueRep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmRequestedValueRepWithDefaults() *AmRequestedValueRep {
	this := AmRequestedValueRep{}
	return &this
}

// GetUserLoc returns the UserLoc field value if set, zero value otherwise.
func (o *AmRequestedValueRep) GetUserLoc() UserLocation {
	if o == nil || IsNil(o.UserLoc) {
		var ret UserLocation
		return ret
	}
	return *o.UserLoc
}

// GetUserLocOk returns a tuple with the UserLoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmRequestedValueRep) GetUserLocOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.UserLoc) {
		return nil, false
	}
	return o.UserLoc, true
}

// HasUserLoc returns a boolean if a field has been set.
func (o *AmRequestedValueRep) HasUserLoc() bool {
	if o != nil && !IsNil(o.UserLoc) {
		return true
	}

	return false
}

// SetUserLoc gets a reference to the given UserLocation and assigns it to the UserLoc field.
func (o *AmRequestedValueRep) SetUserLoc(v UserLocation) {
	o.UserLoc = &v
}

// GetPraStatuses returns the PraStatuses field value if set, zero value otherwise.
func (o *AmRequestedValueRep) GetPraStatuses() map[string]PresenceInfo {
	if o == nil || IsNil(o.PraStatuses) {
		var ret map[string]PresenceInfo
		return ret
	}
	return *o.PraStatuses
}

// GetPraStatusesOk returns a tuple with the PraStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmRequestedValueRep) GetPraStatusesOk() (*map[string]PresenceInfo, bool) {
	if o == nil || IsNil(o.PraStatuses) {
		return nil, false
	}
	return o.PraStatuses, true
}

// HasPraStatuses returns a boolean if a field has been set.
func (o *AmRequestedValueRep) HasPraStatuses() bool {
	if o != nil && !IsNil(o.PraStatuses) {
		return true
	}

	return false
}

// SetPraStatuses gets a reference to the given map[string]PresenceInfo and assigns it to the PraStatuses field.
func (o *AmRequestedValueRep) SetPraStatuses(v map[string]PresenceInfo) {
	o.PraStatuses = &v
}

// GetAccessTypes returns the AccessTypes field value if set, zero value otherwise.
func (o *AmRequestedValueRep) GetAccessTypes() []AccessType {
	if o == nil || IsNil(o.AccessTypes) {
		var ret []AccessType
		return ret
	}
	return o.AccessTypes
}

// GetAccessTypesOk returns a tuple with the AccessTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmRequestedValueRep) GetAccessTypesOk() ([]AccessType, bool) {
	if o == nil || IsNil(o.AccessTypes) {
		return nil, false
	}
	return o.AccessTypes, true
}

// HasAccessTypes returns a boolean if a field has been set.
func (o *AmRequestedValueRep) HasAccessTypes() bool {
	if o != nil && !IsNil(o.AccessTypes) {
		return true
	}

	return false
}

// SetAccessTypes gets a reference to the given []AccessType and assigns it to the AccessTypes field.
func (o *AmRequestedValueRep) SetAccessTypes(v []AccessType) {
	o.AccessTypes = v
}

// GetRatTypes returns the RatTypes field value if set, zero value otherwise.
func (o *AmRequestedValueRep) GetRatTypes() []RatType {
	if o == nil || IsNil(o.RatTypes) {
		var ret []RatType
		return ret
	}
	return o.RatTypes
}

// GetRatTypesOk returns a tuple with the RatTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmRequestedValueRep) GetRatTypesOk() ([]RatType, bool) {
	if o == nil || IsNil(o.RatTypes) {
		return nil, false
	}
	return o.RatTypes, true
}

// HasRatTypes returns a boolean if a field has been set.
func (o *AmRequestedValueRep) HasRatTypes() bool {
	if o != nil && !IsNil(o.RatTypes) {
		return true
	}

	return false
}

// SetRatTypes gets a reference to the given []RatType and assigns it to the RatTypes field.
func (o *AmRequestedValueRep) SetRatTypes(v []RatType) {
	o.RatTypes = v
}

// GetAllowedSnssais returns the AllowedSnssais field value if set, zero value otherwise.
func (o *AmRequestedValueRep) GetAllowedSnssais() []Snssai {
	if o == nil || IsNil(o.AllowedSnssais) {
		var ret []Snssai
		return ret
	}
	return o.AllowedSnssais
}

// GetAllowedSnssaisOk returns a tuple with the AllowedSnssais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmRequestedValueRep) GetAllowedSnssaisOk() ([]Snssai, bool) {
	if o == nil || IsNil(o.AllowedSnssais) {
		return nil, false
	}
	return o.AllowedSnssais, true
}

// HasAllowedSnssais returns a boolean if a field has been set.
func (o *AmRequestedValueRep) HasAllowedSnssais() bool {
	if o != nil && !IsNil(o.AllowedSnssais) {
		return true
	}

	return false
}

// SetAllowedSnssais gets a reference to the given []Snssai and assigns it to the AllowedSnssais field.
func (o *AmRequestedValueRep) SetAllowedSnssais(v []Snssai) {
	o.AllowedSnssais = v
}

// GetN3gAllowedSnssais returns the N3gAllowedSnssais field value if set, zero value otherwise.
func (o *AmRequestedValueRep) GetN3gAllowedSnssais() []Snssai {
	if o == nil || IsNil(o.N3gAllowedSnssais) {
		var ret []Snssai
		return ret
	}
	return o.N3gAllowedSnssais
}

// GetN3gAllowedSnssaisOk returns a tuple with the N3gAllowedSnssais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmRequestedValueRep) GetN3gAllowedSnssaisOk() ([]Snssai, bool) {
	if o == nil || IsNil(o.N3gAllowedSnssais) {
		return nil, false
	}
	return o.N3gAllowedSnssais, true
}

// HasN3gAllowedSnssais returns a boolean if a field has been set.
func (o *AmRequestedValueRep) HasN3gAllowedSnssais() bool {
	if o != nil && !IsNil(o.N3gAllowedSnssais) {
		return true
	}

	return false
}

// SetN3gAllowedSnssais gets a reference to the given []Snssai and assigns it to the N3gAllowedSnssais field.
func (o *AmRequestedValueRep) SetN3gAllowedSnssais(v []Snssai) {
	o.N3gAllowedSnssais = v
}

func (o AmRequestedValueRep) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmRequestedValueRep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserLoc) {
		toSerialize["userLoc"] = o.UserLoc
	}
	if !IsNil(o.PraStatuses) {
		toSerialize["praStatuses"] = o.PraStatuses
	}
	if !IsNil(o.AccessTypes) {
		toSerialize["accessTypes"] = o.AccessTypes
	}
	if !IsNil(o.RatTypes) {
		toSerialize["ratTypes"] = o.RatTypes
	}
	if !IsNil(o.AllowedSnssais) {
		toSerialize["allowedSnssais"] = o.AllowedSnssais
	}
	if !IsNil(o.N3gAllowedSnssais) {
		toSerialize["n3gAllowedSnssais"] = o.N3gAllowedSnssais
	}
	return toSerialize, nil
}

type NullableAmRequestedValueRep struct {
	value *AmRequestedValueRep
	isSet bool
}

func (v NullableAmRequestedValueRep) Get() *AmRequestedValueRep {
	return v.value
}

func (v *NullableAmRequestedValueRep) Set(val *AmRequestedValueRep) {
	v.value = val
	v.isSet = true
}

func (v NullableAmRequestedValueRep) IsSet() bool {
	return v.isSet
}

func (v *NullableAmRequestedValueRep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmRequestedValueRep(val *AmRequestedValueRep) *NullableAmRequestedValueRep {
	return &NullableAmRequestedValueRep{value: val, isSet: true}
}

func (v NullableAmRequestedValueRep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmRequestedValueRep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
