/*
Npcf_AMPolicyControl

Access and Mobility Policy Control Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_AMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// RequestTrigger Possible values are: - LOC_CH: Location change (tracking area). The tracking area of the UE has changed. - PRA_CH: Change of UE presence in PRA. The AMF reports the current presence status   of the UE in a Presence Reporting Area, and notifies that the UE enters/leaves the   Presence Reporting Area. - SERV_AREA_CH: Service Area Restriction change. The UDM notifies the AMF that the   subscribed service area restriction information has changed. - RFSP_CH: RFSP index change. The UDM notifies the AMF that the subscribed RFSP index has   changed. - ALLOWED_NSSAI_CH: Allowed NSSAI change. The AMF notifies that the set of UE allowed   S-NSSAIs has changed. - UE_AMBR_CH: UE-AMBR change. The UDM notifies the AMF that the subscribed UE-AMBR has   changed. - SMF_SELECT_CH: SMF selection information change. The UE requested for an unsupported   DNN or UE requested for a DNN within the list of DNN candidates for replacement per   S-NSSAI. - ACCESS_TYPE_CH: Access Type change. The AMF notifies that the access type and the RAT   type combinations available in the AMF for a UE with simultaneous 3GPP and non-3GPP   connectivity has changed.  - UE_SLICE_MBR_CH: UE-Slice-MBR change. The NF service consumer notifies any changes    in the subscribed UE-Slice-MBR for each subscribed S-NSSAI of the home PLMN mapping    to a S-NSSAI of the serving PLMN. - NWDAF_DATA_CH: NDWAF DATA CHANGE. The AMF notifies that the NWDAF instance IDs used   for the UE and/or associated Analytics IDs used for the UE and available in the AMF   have changed. - TARGET_NSSAI: Generation of Target NSSAI. The NF service consumer notifies that the   Target NSSAI was generated.
type RequestTrigger struct {
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *RequestTrigger) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(RequestTrigger)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *RequestTrigger) MarshalJSON() ([]byte, error) {
	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableRequestTrigger struct {
	value *RequestTrigger
	isSet bool
}

func (v NullableRequestTrigger) Get() *RequestTrigger {
	return v.value
}

func (v *NullableRequestTrigger) Set(val *RequestTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestTrigger(val *RequestTrigger) *NullableRequestTrigger {
	return &NullableRequestTrigger{value: val, isSet: true}
}

func (v NullableRequestTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
