/*
Npcf_AMPolicyControl

Access and Mobility Policy Control Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_AMPolicyControl

import (
	"encoding/json"
)

// checks if the CandidateForReplacement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CandidateForReplacement{}

// CandidateForReplacement Represents a list of candidate DNNs for replacement for an S-NSSAI.
type CandidateForReplacement struct {
	Snssai Snssai `json:"snssai"`
	Dnns []string `json:"dnns,omitempty"`
}

// NewCandidateForReplacement instantiates a new CandidateForReplacement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCandidateForReplacement(snssai Snssai) *CandidateForReplacement {
	this := CandidateForReplacement{}
	this.Snssai = snssai
	return &this
}

// NewCandidateForReplacementWithDefaults instantiates a new CandidateForReplacement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCandidateForReplacementWithDefaults() *CandidateForReplacement {
	this := CandidateForReplacement{}
	return &this
}

// GetSnssai returns the Snssai field value
func (o *CandidateForReplacement) GetSnssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value
// and a boolean to check if the value has been set.
func (o *CandidateForReplacement) GetSnssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snssai, true
}

// SetSnssai sets field value
func (o *CandidateForReplacement) SetSnssai(v Snssai) {
	o.Snssai = v
}

// GetDnns returns the Dnns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CandidateForReplacement) GetDnns() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Dnns
}

// GetDnnsOk returns a tuple with the Dnns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CandidateForReplacement) GetDnnsOk() ([]string, bool) {
	if o == nil || IsNil(o.Dnns) {
		return nil, false
	}
	return o.Dnns, true
}

// HasDnns returns a boolean if a field has been set.
func (o *CandidateForReplacement) HasDnns() bool {
	if o != nil && IsNil(o.Dnns) {
		return true
	}

	return false
}

// SetDnns gets a reference to the given []string and assigns it to the Dnns field.
func (o *CandidateForReplacement) SetDnns(v []string) {
	o.Dnns = v
}

func (o CandidateForReplacement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CandidateForReplacement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snssai"] = o.Snssai
	if o.Dnns != nil {
		toSerialize["dnns"] = o.Dnns
	}
	return toSerialize, nil
}

type NullableCandidateForReplacement struct {
	value *CandidateForReplacement
	isSet bool
}

func (v NullableCandidateForReplacement) Get() *CandidateForReplacement {
	return v.value
}

func (v *NullableCandidateForReplacement) Set(val *CandidateForReplacement) {
	v.value = val
	v.isSet = true
}

func (v NullableCandidateForReplacement) IsSet() bool {
	return v.isSet
}

func (v *NullableCandidateForReplacement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCandidateForReplacement(val *CandidateForReplacement) *NullableCandidateForReplacement {
	return &NullableCandidateForReplacement{value: val, isSet: true}
}

func (v NullableCandidateForReplacement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCandidateForReplacement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


