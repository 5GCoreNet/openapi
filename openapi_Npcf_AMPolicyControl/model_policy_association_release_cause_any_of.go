/*
Npcf_AMPolicyControl

Access and Mobility Policy Control Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Npcf_AMPolicyControl

import (
	"encoding/json"
	"fmt"
)

// PolicyAssociationReleaseCauseAnyOf the model 'PolicyAssociationReleaseCauseAnyOf'
type PolicyAssociationReleaseCauseAnyOf string

// List of PolicyAssociationReleaseCause_anyOf
const (
	UNSPECIFIED PolicyAssociationReleaseCauseAnyOf = "UNSPECIFIED"
	UE_SUBSCRIPTION PolicyAssociationReleaseCauseAnyOf = "UE_SUBSCRIPTION"
	INSUFFICIENT_RES PolicyAssociationReleaseCauseAnyOf = "INSUFFICIENT_RES"
)

// All allowed values of PolicyAssociationReleaseCauseAnyOf enum
var AllowedPolicyAssociationReleaseCauseAnyOfEnumValues = []PolicyAssociationReleaseCauseAnyOf{
	"UNSPECIFIED",
	"UE_SUBSCRIPTION",
	"INSUFFICIENT_RES",
}

func (v *PolicyAssociationReleaseCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyAssociationReleaseCauseAnyOf(value)
	for _, existing := range AllowedPolicyAssociationReleaseCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyAssociationReleaseCauseAnyOf", value)
}

// NewPolicyAssociationReleaseCauseAnyOfFromValue returns a pointer to a valid PolicyAssociationReleaseCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyAssociationReleaseCauseAnyOfFromValue(v string) (*PolicyAssociationReleaseCauseAnyOf, error) {
	ev := PolicyAssociationReleaseCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyAssociationReleaseCauseAnyOf: valid values are %v", v, AllowedPolicyAssociationReleaseCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyAssociationReleaseCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedPolicyAssociationReleaseCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyAssociationReleaseCause_anyOf value
func (v PolicyAssociationReleaseCauseAnyOf) Ptr() *PolicyAssociationReleaseCauseAnyOf {
	return &v
}

type NullablePolicyAssociationReleaseCauseAnyOf struct {
	value *PolicyAssociationReleaseCauseAnyOf
	isSet bool
}

func (v NullablePolicyAssociationReleaseCauseAnyOf) Get() *PolicyAssociationReleaseCauseAnyOf {
	return v.value
}

func (v *NullablePolicyAssociationReleaseCauseAnyOf) Set(val *PolicyAssociationReleaseCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyAssociationReleaseCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyAssociationReleaseCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyAssociationReleaseCauseAnyOf(val *PolicyAssociationReleaseCauseAnyOf) *NullablePolicyAssociationReleaseCauseAnyOf {
	return &NullablePolicyAssociationReleaseCauseAnyOf{value: val, isSet: true}
}

func (v NullablePolicyAssociationReleaseCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyAssociationReleaseCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

