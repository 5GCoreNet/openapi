/*
3GPP Edge NRM

OAS 3.0.1 specification of the Edge NRM Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_EdgeNrm

import (
	"encoding/json"
)

// checks if the SubNetworkSingleAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubNetworkSingleAllOf1{}

// SubNetworkSingleAllOf1 struct for SubNetworkSingleAllOf1
type SubNetworkSingleAllOf1 struct {
	Subnetwork []SubNetworkSingle `json:"Subnetwork,omitempty"`
	ECSFunction []ECSFunctionSingle `json:"ECSFunction,omitempty"`
	EdgeDataNetwork []EdgeDataNetworkSingle `json:"EdgeDataNetwork,omitempty"`
}

// NewSubNetworkSingleAllOf1 instantiates a new SubNetworkSingleAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubNetworkSingleAllOf1() *SubNetworkSingleAllOf1 {
	this := SubNetworkSingleAllOf1{}
	return &this
}

// NewSubNetworkSingleAllOf1WithDefaults instantiates a new SubNetworkSingleAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubNetworkSingleAllOf1WithDefaults() *SubNetworkSingleAllOf1 {
	this := SubNetworkSingleAllOf1{}
	return &this
}

// GetSubnetwork returns the Subnetwork field value if set, zero value otherwise.
func (o *SubNetworkSingleAllOf1) GetSubnetwork() []SubNetworkSingle {
	if o == nil || isNil(o.Subnetwork) {
		var ret []SubNetworkSingle
		return ret
	}
	return o.Subnetwork
}

// GetSubnetworkOk returns a tuple with the Subnetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNetworkSingleAllOf1) GetSubnetworkOk() ([]SubNetworkSingle, bool) {
	if o == nil || isNil(o.Subnetwork) {
		return nil, false
	}
	return o.Subnetwork, true
}

// HasSubnetwork returns a boolean if a field has been set.
func (o *SubNetworkSingleAllOf1) HasSubnetwork() bool {
	if o != nil && !isNil(o.Subnetwork) {
		return true
	}

	return false
}

// SetSubnetwork gets a reference to the given []SubNetworkSingle and assigns it to the Subnetwork field.
func (o *SubNetworkSingleAllOf1) SetSubnetwork(v []SubNetworkSingle) {
	o.Subnetwork = v
}

// GetECSFunction returns the ECSFunction field value if set, zero value otherwise.
func (o *SubNetworkSingleAllOf1) GetECSFunction() []ECSFunctionSingle {
	if o == nil || isNil(o.ECSFunction) {
		var ret []ECSFunctionSingle
		return ret
	}
	return o.ECSFunction
}

// GetECSFunctionOk returns a tuple with the ECSFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNetworkSingleAllOf1) GetECSFunctionOk() ([]ECSFunctionSingle, bool) {
	if o == nil || isNil(o.ECSFunction) {
		return nil, false
	}
	return o.ECSFunction, true
}

// HasECSFunction returns a boolean if a field has been set.
func (o *SubNetworkSingleAllOf1) HasECSFunction() bool {
	if o != nil && !isNil(o.ECSFunction) {
		return true
	}

	return false
}

// SetECSFunction gets a reference to the given []ECSFunctionSingle and assigns it to the ECSFunction field.
func (o *SubNetworkSingleAllOf1) SetECSFunction(v []ECSFunctionSingle) {
	o.ECSFunction = v
}

// GetEdgeDataNetwork returns the EdgeDataNetwork field value if set, zero value otherwise.
func (o *SubNetworkSingleAllOf1) GetEdgeDataNetwork() []EdgeDataNetworkSingle {
	if o == nil || isNil(o.EdgeDataNetwork) {
		var ret []EdgeDataNetworkSingle
		return ret
	}
	return o.EdgeDataNetwork
}

// GetEdgeDataNetworkOk returns a tuple with the EdgeDataNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNetworkSingleAllOf1) GetEdgeDataNetworkOk() ([]EdgeDataNetworkSingle, bool) {
	if o == nil || isNil(o.EdgeDataNetwork) {
		return nil, false
	}
	return o.EdgeDataNetwork, true
}

// HasEdgeDataNetwork returns a boolean if a field has been set.
func (o *SubNetworkSingleAllOf1) HasEdgeDataNetwork() bool {
	if o != nil && !isNil(o.EdgeDataNetwork) {
		return true
	}

	return false
}

// SetEdgeDataNetwork gets a reference to the given []EdgeDataNetworkSingle and assigns it to the EdgeDataNetwork field.
func (o *SubNetworkSingleAllOf1) SetEdgeDataNetwork(v []EdgeDataNetworkSingle) {
	o.EdgeDataNetwork = v
}

func (o SubNetworkSingleAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubNetworkSingleAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Subnetwork) {
		toSerialize["Subnetwork"] = o.Subnetwork
	}
	if !isNil(o.ECSFunction) {
		toSerialize["ECSFunction"] = o.ECSFunction
	}
	if !isNil(o.EdgeDataNetwork) {
		toSerialize["EdgeDataNetwork"] = o.EdgeDataNetwork
	}
	return toSerialize, nil
}

type NullableSubNetworkSingleAllOf1 struct {
	value *SubNetworkSingleAllOf1
	isSet bool
}

func (v NullableSubNetworkSingleAllOf1) Get() *SubNetworkSingleAllOf1 {
	return v.value
}

func (v *NullableSubNetworkSingleAllOf1) Set(val *SubNetworkSingleAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableSubNetworkSingleAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableSubNetworkSingleAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubNetworkSingleAllOf1(val *SubNetworkSingleAllOf1) *NullableSubNetworkSingleAllOf1 {
	return &NullableSubNetworkSingleAllOf1{value: val, isSet: true}
}

func (v NullableSubNetworkSingleAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubNetworkSingleAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


