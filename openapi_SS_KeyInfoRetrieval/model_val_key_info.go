/*
SS_KeyInfoRetrieval

API for SEAL Key Information Retrieval.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_KeyInfoRetrieval

import (
	"encoding/json"
)

// checks if the ValKeyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValKeyInfo{}

// ValKeyInfo Represents key management information associated with VAL server, VAL user or VAL UE. 
type ValKeyInfo struct {
	// string providing an URI formatted according to IETF RFC 3986.
	UserUri string `json:"userUri"`
	// String identifying the key management server.
	SkmsId *string `json:"skmsId,omitempty"`
	// Unique identifier of a VAL Service.
	ValService string `json:"valService"`
	ValTgtUe *ValTargetUe `json:"valTgtUe,omitempty"`
	// Key management information specific to VAL service, VAL User or VAL UE.
	KeyInfo string `json:"keyInfo"`
}

// NewValKeyInfo instantiates a new ValKeyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValKeyInfo(userUri string, valService string, keyInfo string) *ValKeyInfo {
	this := ValKeyInfo{}
	this.UserUri = userUri
	this.ValService = valService
	this.KeyInfo = keyInfo
	return &this
}

// NewValKeyInfoWithDefaults instantiates a new ValKeyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValKeyInfoWithDefaults() *ValKeyInfo {
	this := ValKeyInfo{}
	return &this
}

// GetUserUri returns the UserUri field value
func (o *ValKeyInfo) GetUserUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserUri
}

// GetUserUriOk returns a tuple with the UserUri field value
// and a boolean to check if the value has been set.
func (o *ValKeyInfo) GetUserUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserUri, true
}

// SetUserUri sets field value
func (o *ValKeyInfo) SetUserUri(v string) {
	o.UserUri = v
}

// GetSkmsId returns the SkmsId field value if set, zero value otherwise.
func (o *ValKeyInfo) GetSkmsId() string {
	if o == nil || IsNil(o.SkmsId) {
		var ret string
		return ret
	}
	return *o.SkmsId
}

// GetSkmsIdOk returns a tuple with the SkmsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValKeyInfo) GetSkmsIdOk() (*string, bool) {
	if o == nil || IsNil(o.SkmsId) {
		return nil, false
	}
	return o.SkmsId, true
}

// HasSkmsId returns a boolean if a field has been set.
func (o *ValKeyInfo) HasSkmsId() bool {
	if o != nil && !IsNil(o.SkmsId) {
		return true
	}

	return false
}

// SetSkmsId gets a reference to the given string and assigns it to the SkmsId field.
func (o *ValKeyInfo) SetSkmsId(v string) {
	o.SkmsId = &v
}

// GetValService returns the ValService field value
func (o *ValKeyInfo) GetValService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValService
}

// GetValServiceOk returns a tuple with the ValService field value
// and a boolean to check if the value has been set.
func (o *ValKeyInfo) GetValServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValService, true
}

// SetValService sets field value
func (o *ValKeyInfo) SetValService(v string) {
	o.ValService = v
}

// GetValTgtUe returns the ValTgtUe field value if set, zero value otherwise.
func (o *ValKeyInfo) GetValTgtUe() ValTargetUe {
	if o == nil || IsNil(o.ValTgtUe) {
		var ret ValTargetUe
		return ret
	}
	return *o.ValTgtUe
}

// GetValTgtUeOk returns a tuple with the ValTgtUe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValKeyInfo) GetValTgtUeOk() (*ValTargetUe, bool) {
	if o == nil || IsNil(o.ValTgtUe) {
		return nil, false
	}
	return o.ValTgtUe, true
}

// HasValTgtUe returns a boolean if a field has been set.
func (o *ValKeyInfo) HasValTgtUe() bool {
	if o != nil && !IsNil(o.ValTgtUe) {
		return true
	}

	return false
}

// SetValTgtUe gets a reference to the given ValTargetUe and assigns it to the ValTgtUe field.
func (o *ValKeyInfo) SetValTgtUe(v ValTargetUe) {
	o.ValTgtUe = &v
}

// GetKeyInfo returns the KeyInfo field value
func (o *ValKeyInfo) GetKeyInfo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyInfo
}

// GetKeyInfoOk returns a tuple with the KeyInfo field value
// and a boolean to check if the value has been set.
func (o *ValKeyInfo) GetKeyInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyInfo, true
}

// SetKeyInfo sets field value
func (o *ValKeyInfo) SetKeyInfo(v string) {
	o.KeyInfo = v
}

func (o ValKeyInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValKeyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userUri"] = o.UserUri
	if !IsNil(o.SkmsId) {
		toSerialize["skmsId"] = o.SkmsId
	}
	toSerialize["valService"] = o.ValService
	if !IsNil(o.ValTgtUe) {
		toSerialize["valTgtUe"] = o.ValTgtUe
	}
	toSerialize["keyInfo"] = o.KeyInfo
	return toSerialize, nil
}

type NullableValKeyInfo struct {
	value *ValKeyInfo
	isSet bool
}

func (v NullableValKeyInfo) Get() *ValKeyInfo {
	return v.value
}

func (v *NullableValKeyInfo) Set(val *ValKeyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableValKeyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableValKeyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValKeyInfo(val *ValKeyInfo) *NullableValKeyInfo {
	return &NullableValKeyInfo{value: val, isSet: true}
}

func (v NullableValKeyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValKeyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


