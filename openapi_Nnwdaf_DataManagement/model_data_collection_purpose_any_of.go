/*
Nnwdaf_DataManagement

Nnwdaf_DataManagement API Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnwdaf_DataManagement

import (
	"encoding/json"
	"fmt"
)

// DataCollectionPurposeAnyOf the model 'DataCollectionPurposeAnyOf'
type DataCollectionPurposeAnyOf string

// List of DataCollectionPurpose_anyOf
const (
	ANALYTICS_GENERATION DataCollectionPurposeAnyOf = "ANALYTICS_GENERATION"
	MODEL_TRAINING DataCollectionPurposeAnyOf = "MODEL_TRAINING"
)

// All allowed values of DataCollectionPurposeAnyOf enum
var AllowedDataCollectionPurposeAnyOfEnumValues = []DataCollectionPurposeAnyOf{
	"ANALYTICS_GENERATION",
	"MODEL_TRAINING",
}

func (v *DataCollectionPurposeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataCollectionPurposeAnyOf(value)
	for _, existing := range AllowedDataCollectionPurposeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataCollectionPurposeAnyOf", value)
}

// NewDataCollectionPurposeAnyOfFromValue returns a pointer to a valid DataCollectionPurposeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataCollectionPurposeAnyOfFromValue(v string) (*DataCollectionPurposeAnyOf, error) {
	ev := DataCollectionPurposeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataCollectionPurposeAnyOf: valid values are %v", v, AllowedDataCollectionPurposeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataCollectionPurposeAnyOf) IsValid() bool {
	for _, existing := range AllowedDataCollectionPurposeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataCollectionPurpose_anyOf value
func (v DataCollectionPurposeAnyOf) Ptr() *DataCollectionPurposeAnyOf {
	return &v
}

type NullableDataCollectionPurposeAnyOf struct {
	value *DataCollectionPurposeAnyOf
	isSet bool
}

func (v NullableDataCollectionPurposeAnyOf) Get() *DataCollectionPurposeAnyOf {
	return v.value
}

func (v *NullableDataCollectionPurposeAnyOf) Set(val *DataCollectionPurposeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDataCollectionPurposeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDataCollectionPurposeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataCollectionPurposeAnyOf(val *DataCollectionPurposeAnyOf) *NullableDataCollectionPurposeAnyOf {
	return &NullableDataCollectionPurposeAnyOf{value: val, isSet: true}
}

func (v NullableDataCollectionPurposeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataCollectionPurposeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

