/*
EES EEC Context Relocation API

API for EEC Context Relocation.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EECContextRelocation

import (
	"encoding/json"
)

// checks if the EECContextPush type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EECContextPush{}

// EECContextPush Represents the EEC context push request data.
type EECContextPush struct {
	// Identifier of the S-EES pushing the EEC context information.
	EesId string `json:"eesId"`
	EecCntx EECContext `json:"eecCntx"`
}

// NewEECContextPush instantiates a new EECContextPush object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEECContextPush(eesId string, eecCntx EECContext) *EECContextPush {
	this := EECContextPush{}
	this.EesId = eesId
	this.EecCntx = eecCntx
	return &this
}

// NewEECContextPushWithDefaults instantiates a new EECContextPush object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEECContextPushWithDefaults() *EECContextPush {
	this := EECContextPush{}
	return &this
}

// GetEesId returns the EesId field value
func (o *EECContextPush) GetEesId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EesId
}

// GetEesIdOk returns a tuple with the EesId field value
// and a boolean to check if the value has been set.
func (o *EECContextPush) GetEesIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EesId, true
}

// SetEesId sets field value
func (o *EECContextPush) SetEesId(v string) {
	o.EesId = v
}

// GetEecCntx returns the EecCntx field value
func (o *EECContextPush) GetEecCntx() EECContext {
	if o == nil {
		var ret EECContext
		return ret
	}

	return o.EecCntx
}

// GetEecCntxOk returns a tuple with the EecCntx field value
// and a boolean to check if the value has been set.
func (o *EECContextPush) GetEecCntxOk() (*EECContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EecCntx, true
}

// SetEecCntx sets field value
func (o *EECContextPush) SetEecCntx(v EECContext) {
	o.EecCntx = v
}

func (o EECContextPush) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EECContextPush) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eesId"] = o.EesId
	toSerialize["eecCntx"] = o.EecCntx
	return toSerialize, nil
}

type NullableEECContextPush struct {
	value *EECContextPush
	isSet bool
}

func (v NullableEECContextPush) Get() *EECContextPush {
	return v.value
}

func (v *NullableEECContextPush) Set(val *EECContextPush) {
	v.value = val
	v.isSet = true
}

func (v NullableEECContextPush) IsSet() bool {
	return v.isSet
}

func (v *NullableEECContextPush) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEECContextPush(val *EECContextPush) *NullableEECContextPush {
	return &NullableEECContextPush{value: val, isSet: true}
}

func (v NullableEECContextPush) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEECContextPush) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


