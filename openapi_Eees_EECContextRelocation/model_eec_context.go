/*
EES EEC Context Relocation API

API for EEC Context Relocation.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EECContextRelocation

import (
	"encoding/json"
)

// checks if the EECContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EECContext{}

// EECContext Represents the EEC context information.
type EECContext struct {
	// Unique idenitfier of the EEC.
	EecId string `json:"eecId"`
	// Unique idenitfier assigned to the EEC context.
	CntxId string `json:"cntxId"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.
	UeId *string `json:"ueId,omitempty"`
	// List of subscription IDs for the capability expsoure for the EEC ID.
	E1Subs []string        `json:"e1Subs,omitempty"`
	UeLoc  *LocationArea5G `json:"ueLoc,omitempty"`
	// List AC profiles.
	AcProfs   []ACProfile      `json:"acProfs,omitempty"`
	SessCntxs *SessionContexts `json:"sessCntxs,omitempty"`
}

// NewEECContext instantiates a new EECContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEECContext(eecId string, cntxId string) *EECContext {
	this := EECContext{}
	this.EecId = eecId
	this.CntxId = cntxId
	return &this
}

// NewEECContextWithDefaults instantiates a new EECContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEECContextWithDefaults() *EECContext {
	this := EECContext{}
	return &this
}

// GetEecId returns the EecId field value
func (o *EECContext) GetEecId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EecId
}

// GetEecIdOk returns a tuple with the EecId field value
// and a boolean to check if the value has been set.
func (o *EECContext) GetEecIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EecId, true
}

// SetEecId sets field value
func (o *EECContext) SetEecId(v string) {
	o.EecId = v
}

// GetCntxId returns the CntxId field value
func (o *EECContext) GetCntxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CntxId
}

// GetCntxIdOk returns a tuple with the CntxId field value
// and a boolean to check if the value has been set.
func (o *EECContext) GetCntxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CntxId, true
}

// SetCntxId sets field value
func (o *EECContext) SetCntxId(v string) {
	o.CntxId = v
}

// GetUeId returns the UeId field value if set, zero value otherwise.
func (o *EECContext) GetUeId() string {
	if o == nil || IsNil(o.UeId) {
		var ret string
		return ret
	}
	return *o.UeId
}

// GetUeIdOk returns a tuple with the UeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECContext) GetUeIdOk() (*string, bool) {
	if o == nil || IsNil(o.UeId) {
		return nil, false
	}
	return o.UeId, true
}

// HasUeId returns a boolean if a field has been set.
func (o *EECContext) HasUeId() bool {
	if o != nil && !IsNil(o.UeId) {
		return true
	}

	return false
}

// SetUeId gets a reference to the given string and assigns it to the UeId field.
func (o *EECContext) SetUeId(v string) {
	o.UeId = &v
}

// GetE1Subs returns the E1Subs field value if set, zero value otherwise.
func (o *EECContext) GetE1Subs() []string {
	if o == nil || IsNil(o.E1Subs) {
		var ret []string
		return ret
	}
	return o.E1Subs
}

// GetE1SubsOk returns a tuple with the E1Subs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECContext) GetE1SubsOk() ([]string, bool) {
	if o == nil || IsNil(o.E1Subs) {
		return nil, false
	}
	return o.E1Subs, true
}

// HasE1Subs returns a boolean if a field has been set.
func (o *EECContext) HasE1Subs() bool {
	if o != nil && !IsNil(o.E1Subs) {
		return true
	}

	return false
}

// SetE1Subs gets a reference to the given []string and assigns it to the E1Subs field.
func (o *EECContext) SetE1Subs(v []string) {
	o.E1Subs = v
}

// GetUeLoc returns the UeLoc field value if set, zero value otherwise.
func (o *EECContext) GetUeLoc() LocationArea5G {
	if o == nil || IsNil(o.UeLoc) {
		var ret LocationArea5G
		return ret
	}
	return *o.UeLoc
}

// GetUeLocOk returns a tuple with the UeLoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECContext) GetUeLocOk() (*LocationArea5G, bool) {
	if o == nil || IsNil(o.UeLoc) {
		return nil, false
	}
	return o.UeLoc, true
}

// HasUeLoc returns a boolean if a field has been set.
func (o *EECContext) HasUeLoc() bool {
	if o != nil && !IsNil(o.UeLoc) {
		return true
	}

	return false
}

// SetUeLoc gets a reference to the given LocationArea5G and assigns it to the UeLoc field.
func (o *EECContext) SetUeLoc(v LocationArea5G) {
	o.UeLoc = &v
}

// GetAcProfs returns the AcProfs field value if set, zero value otherwise.
func (o *EECContext) GetAcProfs() []ACProfile {
	if o == nil || IsNil(o.AcProfs) {
		var ret []ACProfile
		return ret
	}
	return o.AcProfs
}

// GetAcProfsOk returns a tuple with the AcProfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECContext) GetAcProfsOk() ([]ACProfile, bool) {
	if o == nil || IsNil(o.AcProfs) {
		return nil, false
	}
	return o.AcProfs, true
}

// HasAcProfs returns a boolean if a field has been set.
func (o *EECContext) HasAcProfs() bool {
	if o != nil && !IsNil(o.AcProfs) {
		return true
	}

	return false
}

// SetAcProfs gets a reference to the given []ACProfile and assigns it to the AcProfs field.
func (o *EECContext) SetAcProfs(v []ACProfile) {
	o.AcProfs = v
}

// GetSessCntxs returns the SessCntxs field value if set, zero value otherwise.
func (o *EECContext) GetSessCntxs() SessionContexts {
	if o == nil || IsNil(o.SessCntxs) {
		var ret SessionContexts
		return ret
	}
	return *o.SessCntxs
}

// GetSessCntxsOk returns a tuple with the SessCntxs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECContext) GetSessCntxsOk() (*SessionContexts, bool) {
	if o == nil || IsNil(o.SessCntxs) {
		return nil, false
	}
	return o.SessCntxs, true
}

// HasSessCntxs returns a boolean if a field has been set.
func (o *EECContext) HasSessCntxs() bool {
	if o != nil && !IsNil(o.SessCntxs) {
		return true
	}

	return false
}

// SetSessCntxs gets a reference to the given SessionContexts and assigns it to the SessCntxs field.
func (o *EECContext) SetSessCntxs(v SessionContexts) {
	o.SessCntxs = &v
}

func (o EECContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EECContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eecId"] = o.EecId
	toSerialize["cntxId"] = o.CntxId
	if !IsNil(o.UeId) {
		toSerialize["ueId"] = o.UeId
	}
	if !IsNil(o.E1Subs) {
		toSerialize["e1Subs"] = o.E1Subs
	}
	if !IsNil(o.UeLoc) {
		toSerialize["ueLoc"] = o.UeLoc
	}
	if !IsNil(o.AcProfs) {
		toSerialize["acProfs"] = o.AcProfs
	}
	if !IsNil(o.SessCntxs) {
		toSerialize["sessCntxs"] = o.SessCntxs
	}
	return toSerialize, nil
}

type NullableEECContext struct {
	value *EECContext
	isSet bool
}

func (v NullableEECContext) Get() *EECContext {
	return v.value
}

func (v *NullableEECContext) Set(val *EECContext) {
	v.value = val
	v.isSet = true
}

func (v NullableEECContext) IsSet() bool {
	return v.isSet
}

func (v *NullableEECContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEECContext(val *EECContext) *NullableEECContext {
	return &NullableEECContext{value: val, isSet: true}
}

func (v NullableEECContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEECContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
