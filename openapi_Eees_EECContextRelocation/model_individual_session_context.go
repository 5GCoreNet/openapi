/*
EES EEC Context Relocation API

API for EEC Context Relocation.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EECContextRelocation

import (
	"encoding/json"
)

// checks if the IndividualSessionContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndividualSessionContext{}

// IndividualSessionContext Represents a single service session context information.
type IndividualSessionContext struct {
	// Identifier of the EAS providing the application services.
	EasId string `json:"easId"`
	EndPt EndPoint `json:"endPt"`
	// Identifier of the AC for which the service session information is provided.
	AcId *string `json:"acId,omitempty"`
}

// NewIndividualSessionContext instantiates a new IndividualSessionContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndividualSessionContext(easId string, endPt EndPoint) *IndividualSessionContext {
	this := IndividualSessionContext{}
	this.EasId = easId
	this.EndPt = endPt
	return &this
}

// NewIndividualSessionContextWithDefaults instantiates a new IndividualSessionContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndividualSessionContextWithDefaults() *IndividualSessionContext {
	this := IndividualSessionContext{}
	return &this
}

// GetEasId returns the EasId field value
func (o *IndividualSessionContext) GetEasId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EasId
}

// GetEasIdOk returns a tuple with the EasId field value
// and a boolean to check if the value has been set.
func (o *IndividualSessionContext) GetEasIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EasId, true
}

// SetEasId sets field value
func (o *IndividualSessionContext) SetEasId(v string) {
	o.EasId = v
}

// GetEndPt returns the EndPt field value
func (o *IndividualSessionContext) GetEndPt() EndPoint {
	if o == nil {
		var ret EndPoint
		return ret
	}

	return o.EndPt
}

// GetEndPtOk returns a tuple with the EndPt field value
// and a boolean to check if the value has been set.
func (o *IndividualSessionContext) GetEndPtOk() (*EndPoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndPt, true
}

// SetEndPt sets field value
func (o *IndividualSessionContext) SetEndPt(v EndPoint) {
	o.EndPt = v
}

// GetAcId returns the AcId field value if set, zero value otherwise.
func (o *IndividualSessionContext) GetAcId() string {
	if o == nil || IsNil(o.AcId) {
		var ret string
		return ret
	}
	return *o.AcId
}

// GetAcIdOk returns a tuple with the AcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualSessionContext) GetAcIdOk() (*string, bool) {
	if o == nil || IsNil(o.AcId) {
		return nil, false
	}
	return o.AcId, true
}

// HasAcId returns a boolean if a field has been set.
func (o *IndividualSessionContext) HasAcId() bool {
	if o != nil && !IsNil(o.AcId) {
		return true
	}

	return false
}

// SetAcId gets a reference to the given string and assigns it to the AcId field.
func (o *IndividualSessionContext) SetAcId(v string) {
	o.AcId = &v
}

func (o IndividualSessionContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndividualSessionContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["easId"] = o.EasId
	toSerialize["endPt"] = o.EndPt
	if !IsNil(o.AcId) {
		toSerialize["acId"] = o.AcId
	}
	return toSerialize, nil
}

type NullableIndividualSessionContext struct {
	value *IndividualSessionContext
	isSet bool
}

func (v NullableIndividualSessionContext) Get() *IndividualSessionContext {
	return v.value
}

func (v *NullableIndividualSessionContext) Set(val *IndividualSessionContext) {
	v.value = val
	v.isSet = true
}

func (v NullableIndividualSessionContext) IsSet() bool {
	return v.isSet
}

func (v *NullableIndividualSessionContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndividualSessionContext(val *IndividualSessionContext) *NullableIndividualSessionContext {
	return &NullableIndividualSessionContext{value: val, isSet: true}
}

func (v NullableIndividualSessionContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndividualSessionContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


