/*
SS_NetworkResourceMonitoring

API for SEAL Network Resource Monitoring.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_NetworkResourceMonitoring

import (
	"encoding/json"
	"fmt"
)

// TerminationModeAnyOf the model 'TerminationModeAnyOf'
type TerminationModeAnyOf string

// List of TerminationMode_anyOf
const (
	TIME_TRIGGERED TerminationModeAnyOf = "TIME_TRIGGERED"
	EVENT_TRIGGERED_NUM_REPORTS_REACHED TerminationModeAnyOf = "EVENT_TRIGGERED_NUM_REPORTS_REACHED"
	EVENT_TRIGGERED_MEAS_THR_REACHED TerminationModeAnyOf = "EVENT_TRIGGERED_MEAS_THR_REACHED"
	USER_TRIGGERED TerminationModeAnyOf = "USER_TRIGGERED"
)

// All allowed values of TerminationModeAnyOf enum
var AllowedTerminationModeAnyOfEnumValues = []TerminationModeAnyOf{
	"TIME_TRIGGERED",
	"EVENT_TRIGGERED_NUM_REPORTS_REACHED",
	"EVENT_TRIGGERED_MEAS_THR_REACHED",
	"USER_TRIGGERED",
}

func (v *TerminationModeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TerminationModeAnyOf(value)
	for _, existing := range AllowedTerminationModeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TerminationModeAnyOf", value)
}

// NewTerminationModeAnyOfFromValue returns a pointer to a valid TerminationModeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTerminationModeAnyOfFromValue(v string) (*TerminationModeAnyOf, error) {
	ev := TerminationModeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TerminationModeAnyOf: valid values are %v", v, AllowedTerminationModeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TerminationModeAnyOf) IsValid() bool {
	for _, existing := range AllowedTerminationModeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TerminationMode_anyOf value
func (v TerminationModeAnyOf) Ptr() *TerminationModeAnyOf {
	return &v
}

type NullableTerminationModeAnyOf struct {
	value *TerminationModeAnyOf
	isSet bool
}

func (v NullableTerminationModeAnyOf) Get() *TerminationModeAnyOf {
	return v.value
}

func (v *NullableTerminationModeAnyOf) Set(val *TerminationModeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminationModeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminationModeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminationModeAnyOf(val *TerminationModeAnyOf) *NullableTerminationModeAnyOf {
	return &NullableTerminationModeAnyOf{value: val, isSet: true}
}

func (v NullableTerminationModeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminationModeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

