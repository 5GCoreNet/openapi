/*
SS_NetworkResourceMonitoring

API for SEAL Network Resource Monitoring.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_NetworkResourceMonitoring

import (
	"encoding/json"
	"fmt"
)

// MeasurementDataTypeAnyOf the model 'MeasurementDataTypeAnyOf'
type MeasurementDataTypeAnyOf string

// List of MeasurementDataType_anyOf
const (
	DL_DELAY MeasurementDataTypeAnyOf = "DL_DELAY"
	UL_DELAY MeasurementDataTypeAnyOf = "UL_DELAY"
	RT_DELAY MeasurementDataTypeAnyOf = "RT_DELAY"
	AVG_PLR MeasurementDataTypeAnyOf = "AVG_PLR"
	AVG_DATA_RATE MeasurementDataTypeAnyOf = "AVG_DATA_RATE"
	MAX_DATA_RATE MeasurementDataTypeAnyOf = "MAX_DATA_RATE"
	AVG_DL_TRAFFIC_VOLUME MeasurementDataTypeAnyOf = "AVG_DL_TRAFFIC_VOLUME"
	AVG_UL_TRAFFIC_VOLUME MeasurementDataTypeAnyOf = "AVG_UL_TRAFFIC_VOLUME"
)

// All allowed values of MeasurementDataTypeAnyOf enum
var AllowedMeasurementDataTypeAnyOfEnumValues = []MeasurementDataTypeAnyOf{
	"DL_DELAY",
	"UL_DELAY",
	"RT_DELAY",
	"AVG_PLR",
	"AVG_DATA_RATE",
	"MAX_DATA_RATE",
	"AVG_DL_TRAFFIC_VOLUME",
	"AVG_UL_TRAFFIC_VOLUME",
}

func (v *MeasurementDataTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MeasurementDataTypeAnyOf(value)
	for _, existing := range AllowedMeasurementDataTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MeasurementDataTypeAnyOf", value)
}

// NewMeasurementDataTypeAnyOfFromValue returns a pointer to a valid MeasurementDataTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMeasurementDataTypeAnyOfFromValue(v string) (*MeasurementDataTypeAnyOf, error) {
	ev := MeasurementDataTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MeasurementDataTypeAnyOf: valid values are %v", v, AllowedMeasurementDataTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MeasurementDataTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedMeasurementDataTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MeasurementDataType_anyOf value
func (v MeasurementDataTypeAnyOf) Ptr() *MeasurementDataTypeAnyOf {
	return &v
}

type NullableMeasurementDataTypeAnyOf struct {
	value *MeasurementDataTypeAnyOf
	isSet bool
}

func (v NullableMeasurementDataTypeAnyOf) Get() *MeasurementDataTypeAnyOf {
	return v.value
}

func (v *NullableMeasurementDataTypeAnyOf) Set(val *MeasurementDataTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurementDataTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurementDataTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurementDataTypeAnyOf(val *MeasurementDataTypeAnyOf) *NullableMeasurementDataTypeAnyOf {
	return &NullableMeasurementDataTypeAnyOf{value: val, isSet: true}
}

func (v NullableMeasurementDataTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurementDataTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

