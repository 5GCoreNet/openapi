/*
Nausf_SoRProtection Service

AUSF SoR Protection Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nausf_SoRProtection

import (
	"encoding/json"
)

// checks if the SorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SorInfo{}

// SorInfo Contains the Steering Information.
type SorInfo struct {
	SteeringContainer *SteeringContainer `json:"steeringContainer,omitempty"`
	// Contains indication whether the acknowledgement from UE is needed.
	AckInd bool `json:"ackInd"`
	// string with format 'bytes' as defined in OpenAPI
	SorHeader *string `json:"sorHeader,omitempty"`
	// string with format 'bytes' as defined in OpenAPI
	SorTransparentInfo *string `json:"sorTransparentInfo,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
}

// NewSorInfo instantiates a new SorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSorInfo(ackInd bool) *SorInfo {
	this := SorInfo{}
	this.AckInd = ackInd
	return &this
}

// NewSorInfoWithDefaults instantiates a new SorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSorInfoWithDefaults() *SorInfo {
	this := SorInfo{}
	return &this
}

// GetSteeringContainer returns the SteeringContainer field value if set, zero value otherwise.
func (o *SorInfo) GetSteeringContainer() SteeringContainer {
	if o == nil || IsNil(o.SteeringContainer) {
		var ret SteeringContainer
		return ret
	}
	return *o.SteeringContainer
}

// GetSteeringContainerOk returns a tuple with the SteeringContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SorInfo) GetSteeringContainerOk() (*SteeringContainer, bool) {
	if o == nil || IsNil(o.SteeringContainer) {
		return nil, false
	}
	return o.SteeringContainer, true
}

// HasSteeringContainer returns a boolean if a field has been set.
func (o *SorInfo) HasSteeringContainer() bool {
	if o != nil && !IsNil(o.SteeringContainer) {
		return true
	}

	return false
}

// SetSteeringContainer gets a reference to the given SteeringContainer and assigns it to the SteeringContainer field.
func (o *SorInfo) SetSteeringContainer(v SteeringContainer) {
	o.SteeringContainer = &v
}

// GetAckInd returns the AckInd field value
func (o *SorInfo) GetAckInd() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AckInd
}

// GetAckIndOk returns a tuple with the AckInd field value
// and a boolean to check if the value has been set.
func (o *SorInfo) GetAckIndOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AckInd, true
}

// SetAckInd sets field value
func (o *SorInfo) SetAckInd(v bool) {
	o.AckInd = v
}

// GetSorHeader returns the SorHeader field value if set, zero value otherwise.
func (o *SorInfo) GetSorHeader() string {
	if o == nil || IsNil(o.SorHeader) {
		var ret string
		return ret
	}
	return *o.SorHeader
}

// GetSorHeaderOk returns a tuple with the SorHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SorInfo) GetSorHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.SorHeader) {
		return nil, false
	}
	return o.SorHeader, true
}

// HasSorHeader returns a boolean if a field has been set.
func (o *SorInfo) HasSorHeader() bool {
	if o != nil && !IsNil(o.SorHeader) {
		return true
	}

	return false
}

// SetSorHeader gets a reference to the given string and assigns it to the SorHeader field.
func (o *SorInfo) SetSorHeader(v string) {
	o.SorHeader = &v
}

// GetSorTransparentInfo returns the SorTransparentInfo field value if set, zero value otherwise.
func (o *SorInfo) GetSorTransparentInfo() string {
	if o == nil || IsNil(o.SorTransparentInfo) {
		var ret string
		return ret
	}
	return *o.SorTransparentInfo
}

// GetSorTransparentInfoOk returns a tuple with the SorTransparentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SorInfo) GetSorTransparentInfoOk() (*string, bool) {
	if o == nil || IsNil(o.SorTransparentInfo) {
		return nil, false
	}
	return o.SorTransparentInfo, true
}

// HasSorTransparentInfo returns a boolean if a field has been set.
func (o *SorInfo) HasSorTransparentInfo() bool {
	if o != nil && !IsNil(o.SorTransparentInfo) {
		return true
	}

	return false
}

// SetSorTransparentInfo gets a reference to the given string and assigns it to the SorTransparentInfo field.
func (o *SorInfo) SetSorTransparentInfo(v string) {
	o.SorTransparentInfo = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *SorInfo) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SorInfo) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *SorInfo) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *SorInfo) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

func (o SorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SteeringContainer) {
		toSerialize["steeringContainer"] = o.SteeringContainer
	}
	toSerialize["ackInd"] = o.AckInd
	if !IsNil(o.SorHeader) {
		toSerialize["sorHeader"] = o.SorHeader
	}
	if !IsNil(o.SorTransparentInfo) {
		toSerialize["sorTransparentInfo"] = o.SorTransparentInfo
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	return toSerialize, nil
}

type NullableSorInfo struct {
	value *SorInfo
	isSet bool
}

func (v NullableSorInfo) Get() *SorInfo {
	return v.value
}

func (v *NullableSorInfo) Set(val *SorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSorInfo(val *SorInfo) *NullableSorInfo {
	return &NullableSorInfo{value: val, isSet: true}
}

func (v NullableSorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


