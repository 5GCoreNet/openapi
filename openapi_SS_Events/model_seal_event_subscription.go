/*
SS_Events

API for SEAL Events management.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
)

// checks if the SEALEventSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SEALEventSubscription{}

// SEALEventSubscription Represents an individual SEAL Event Subscription resource.
type SEALEventSubscription struct {
	// String identifying the subscriber of the event.
	SubscriberId string `json:"subscriberId"`
	// Subscribed events.
	EventSubs []EventSubscription  `json:"eventSubs"`
	EventReq  ReportingInformation `json:"eventReq"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationDestination string `json:"notificationDestination"`
	// Set to true by Subscriber to request the SEAL server to send a test notification. Set to false or omitted otherwise.
	RequestTestNotification *bool               `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig      *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	EventDetails            []SEALEventDetail   `json:"eventDetails,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewSEALEventSubscription instantiates a new SEALEventSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSEALEventSubscription(subscriberId string, eventSubs []EventSubscription, eventReq ReportingInformation, notificationDestination string) *SEALEventSubscription {
	this := SEALEventSubscription{}
	this.SubscriberId = subscriberId
	this.EventSubs = eventSubs
	this.EventReq = eventReq
	this.NotificationDestination = notificationDestination
	return &this
}

// NewSEALEventSubscriptionWithDefaults instantiates a new SEALEventSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSEALEventSubscriptionWithDefaults() *SEALEventSubscription {
	this := SEALEventSubscription{}
	return &this
}

// GetSubscriberId returns the SubscriberId field value
func (o *SEALEventSubscription) GetSubscriberId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriberId
}

// GetSubscriberIdOk returns a tuple with the SubscriberId field value
// and a boolean to check if the value has been set.
func (o *SEALEventSubscription) GetSubscriberIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriberId, true
}

// SetSubscriberId sets field value
func (o *SEALEventSubscription) SetSubscriberId(v string) {
	o.SubscriberId = v
}

// GetEventSubs returns the EventSubs field value
func (o *SEALEventSubscription) GetEventSubs() []EventSubscription {
	if o == nil {
		var ret []EventSubscription
		return ret
	}

	return o.EventSubs
}

// GetEventSubsOk returns a tuple with the EventSubs field value
// and a boolean to check if the value has been set.
func (o *SEALEventSubscription) GetEventSubsOk() ([]EventSubscription, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventSubs, true
}

// SetEventSubs sets field value
func (o *SEALEventSubscription) SetEventSubs(v []EventSubscription) {
	o.EventSubs = v
}

// GetEventReq returns the EventReq field value
func (o *SEALEventSubscription) GetEventReq() ReportingInformation {
	if o == nil {
		var ret ReportingInformation
		return ret
	}

	return o.EventReq
}

// GetEventReqOk returns a tuple with the EventReq field value
// and a boolean to check if the value has been set.
func (o *SEALEventSubscription) GetEventReqOk() (*ReportingInformation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventReq, true
}

// SetEventReq sets field value
func (o *SEALEventSubscription) SetEventReq(v ReportingInformation) {
	o.EventReq = v
}

// GetNotificationDestination returns the NotificationDestination field value
func (o *SEALEventSubscription) GetNotificationDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value
// and a boolean to check if the value has been set.
func (o *SEALEventSubscription) GetNotificationDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationDestination, true
}

// SetNotificationDestination sets field value
func (o *SEALEventSubscription) SetNotificationDestination(v string) {
	o.NotificationDestination = v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *SEALEventSubscription) GetRequestTestNotification() bool {
	if o == nil || IsNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SEALEventSubscription) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *SEALEventSubscription) HasRequestTestNotification() bool {
	if o != nil && !IsNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *SEALEventSubscription) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *SEALEventSubscription) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SEALEventSubscription) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *SEALEventSubscription) HasWebsockNotifConfig() bool {
	if o != nil && !IsNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *SEALEventSubscription) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

// GetEventDetails returns the EventDetails field value if set, zero value otherwise.
func (o *SEALEventSubscription) GetEventDetails() []SEALEventDetail {
	if o == nil || IsNil(o.EventDetails) {
		var ret []SEALEventDetail
		return ret
	}
	return o.EventDetails
}

// GetEventDetailsOk returns a tuple with the EventDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SEALEventSubscription) GetEventDetailsOk() ([]SEALEventDetail, bool) {
	if o == nil || IsNil(o.EventDetails) {
		return nil, false
	}
	return o.EventDetails, true
}

// HasEventDetails returns a boolean if a field has been set.
func (o *SEALEventSubscription) HasEventDetails() bool {
	if o != nil && !IsNil(o.EventDetails) {
		return true
	}

	return false
}

// SetEventDetails gets a reference to the given []SEALEventDetail and assigns it to the EventDetails field.
func (o *SEALEventSubscription) SetEventDetails(v []SEALEventDetail) {
	o.EventDetails = v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *SEALEventSubscription) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SEALEventSubscription) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *SEALEventSubscription) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *SEALEventSubscription) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o SEALEventSubscription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SEALEventSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriberId"] = o.SubscriberId
	toSerialize["eventSubs"] = o.EventSubs
	toSerialize["eventReq"] = o.EventReq
	toSerialize["notificationDestination"] = o.NotificationDestination
	if !IsNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !IsNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	if !IsNil(o.EventDetails) {
		toSerialize["eventDetails"] = o.EventDetails
	}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableSEALEventSubscription struct {
	value *SEALEventSubscription
	isSet bool
}

func (v NullableSEALEventSubscription) Get() *SEALEventSubscription {
	return v.value
}

func (v *NullableSEALEventSubscription) Set(val *SEALEventSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSEALEventSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSEALEventSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSEALEventSubscription(val *SEALEventSubscription) *NullableSEALEventSubscription {
	return &NullableSEALEventSubscription{value: val, isSet: true}
}

func (v NullableSEALEventSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSEALEventSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
