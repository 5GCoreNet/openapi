/*
SS_Events

API for SEAL Events management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
)

// checks if the SEALEventSubscriptionPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SEALEventSubscriptionPatch{}

// SEALEventSubscriptionPatch Represents the partial update of individual SEAL Event Subscription resource.
type SEALEventSubscriptionPatch struct {
	// Subscribed events.
	EventSubs []EventSubscription   `json:"eventSubs,omitempty"`
	EventReq  *ReportingInformation `json:"eventReq,omitempty"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationDestination *string `json:"notificationDestination,omitempty"`
}

// NewSEALEventSubscriptionPatch instantiates a new SEALEventSubscriptionPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSEALEventSubscriptionPatch() *SEALEventSubscriptionPatch {
	this := SEALEventSubscriptionPatch{}
	return &this
}

// NewSEALEventSubscriptionPatchWithDefaults instantiates a new SEALEventSubscriptionPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSEALEventSubscriptionPatchWithDefaults() *SEALEventSubscriptionPatch {
	this := SEALEventSubscriptionPatch{}
	return &this
}

// GetEventSubs returns the EventSubs field value if set, zero value otherwise.
func (o *SEALEventSubscriptionPatch) GetEventSubs() []EventSubscription {
	if o == nil || IsNil(o.EventSubs) {
		var ret []EventSubscription
		return ret
	}
	return o.EventSubs
}

// GetEventSubsOk returns a tuple with the EventSubs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SEALEventSubscriptionPatch) GetEventSubsOk() ([]EventSubscription, bool) {
	if o == nil || IsNil(o.EventSubs) {
		return nil, false
	}
	return o.EventSubs, true
}

// HasEventSubs returns a boolean if a field has been set.
func (o *SEALEventSubscriptionPatch) HasEventSubs() bool {
	if o != nil && !IsNil(o.EventSubs) {
		return true
	}

	return false
}

// SetEventSubs gets a reference to the given []EventSubscription and assigns it to the EventSubs field.
func (o *SEALEventSubscriptionPatch) SetEventSubs(v []EventSubscription) {
	o.EventSubs = v
}

// GetEventReq returns the EventReq field value if set, zero value otherwise.
func (o *SEALEventSubscriptionPatch) GetEventReq() ReportingInformation {
	if o == nil || IsNil(o.EventReq) {
		var ret ReportingInformation
		return ret
	}
	return *o.EventReq
}

// GetEventReqOk returns a tuple with the EventReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SEALEventSubscriptionPatch) GetEventReqOk() (*ReportingInformation, bool) {
	if o == nil || IsNil(o.EventReq) {
		return nil, false
	}
	return o.EventReq, true
}

// HasEventReq returns a boolean if a field has been set.
func (o *SEALEventSubscriptionPatch) HasEventReq() bool {
	if o != nil && !IsNil(o.EventReq) {
		return true
	}

	return false
}

// SetEventReq gets a reference to the given ReportingInformation and assigns it to the EventReq field.
func (o *SEALEventSubscriptionPatch) SetEventReq(v ReportingInformation) {
	o.EventReq = &v
}

// GetNotificationDestination returns the NotificationDestination field value if set, zero value otherwise.
func (o *SEALEventSubscriptionPatch) GetNotificationDestination() string {
	if o == nil || IsNil(o.NotificationDestination) {
		var ret string
		return ret
	}
	return *o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SEALEventSubscriptionPatch) GetNotificationDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationDestination) {
		return nil, false
	}
	return o.NotificationDestination, true
}

// HasNotificationDestination returns a boolean if a field has been set.
func (o *SEALEventSubscriptionPatch) HasNotificationDestination() bool {
	if o != nil && !IsNil(o.NotificationDestination) {
		return true
	}

	return false
}

// SetNotificationDestination gets a reference to the given string and assigns it to the NotificationDestination field.
func (o *SEALEventSubscriptionPatch) SetNotificationDestination(v string) {
	o.NotificationDestination = &v
}

func (o SEALEventSubscriptionPatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SEALEventSubscriptionPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventSubs) {
		toSerialize["eventSubs"] = o.EventSubs
	}
	if !IsNil(o.EventReq) {
		toSerialize["eventReq"] = o.EventReq
	}
	if !IsNil(o.NotificationDestination) {
		toSerialize["notificationDestination"] = o.NotificationDestination
	}
	return toSerialize, nil
}

type NullableSEALEventSubscriptionPatch struct {
	value *SEALEventSubscriptionPatch
	isSet bool
}

func (v NullableSEALEventSubscriptionPatch) Get() *SEALEventSubscriptionPatch {
	return v.value
}

func (v *NullableSEALEventSubscriptionPatch) Set(val *SEALEventSubscriptionPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableSEALEventSubscriptionPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableSEALEventSubscriptionPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSEALEventSubscriptionPatch(val *SEALEventSubscriptionPatch) *NullableSEALEventSubscriptionPatch {
	return &NullableSEALEventSubscriptionPatch{value: val, isSet: true}
}

func (v NullableSEALEventSubscriptionPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSEALEventSubscriptionPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
