/*
SS_Events

API for SEAL Events management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
)

// checks if the SEALEventNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SEALEventNotification{}

// SEALEventNotification Represents notification information of a SEAL Event.
type SEALEventNotification struct {
	// Identifier of the subscription resource.
	SubscriptionId string `json:"subscriptionId"`
	// Detailed notifications of individual events.
	EventDetails []SEALEventDetail `json:"eventDetails"`
}

// NewSEALEventNotification instantiates a new SEALEventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSEALEventNotification(subscriptionId string, eventDetails []SEALEventDetail) *SEALEventNotification {
	this := SEALEventNotification{}
	this.SubscriptionId = subscriptionId
	this.EventDetails = eventDetails
	return &this
}

// NewSEALEventNotificationWithDefaults instantiates a new SEALEventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSEALEventNotificationWithDefaults() *SEALEventNotification {
	this := SEALEventNotification{}
	return &this
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *SEALEventNotification) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *SEALEventNotification) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *SEALEventNotification) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetEventDetails returns the EventDetails field value
func (o *SEALEventNotification) GetEventDetails() []SEALEventDetail {
	if o == nil {
		var ret []SEALEventDetail
		return ret
	}

	return o.EventDetails
}

// GetEventDetailsOk returns a tuple with the EventDetails field value
// and a boolean to check if the value has been set.
func (o *SEALEventNotification) GetEventDetailsOk() ([]SEALEventDetail, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventDetails, true
}

// SetEventDetails sets field value
func (o *SEALEventNotification) SetEventDetails(v []SEALEventDetail) {
	o.EventDetails = v
}

func (o SEALEventNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SEALEventNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriptionId"] = o.SubscriptionId
	toSerialize["eventDetails"] = o.EventDetails
	return toSerialize, nil
}

type NullableSEALEventNotification struct {
	value *SEALEventNotification
	isSet bool
}

func (v NullableSEALEventNotification) Get() *SEALEventNotification {
	return v.value
}

func (v *NullableSEALEventNotification) Set(val *SEALEventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableSEALEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableSEALEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSEALEventNotification(val *SEALEventNotification) *NullableSEALEventNotification {
	return &NullableSEALEventNotification{value: val, isSet: true}
}

func (v NullableSEALEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSEALEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


