/*
SS_Events

API for SEAL Events management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
)

// checks if the MonitorFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorFilter{}

// MonitorFilter Represents the event monitoring filters applicable to a VAL User ID or VAL UE ID.
type MonitorFilter struct {
	// List of VAL User or UE IDs whose events monitoring is requested.
	Idnts []ValTargetUe `json:"idnts,omitempty"`
	// Identity of the VAL service.
	ValSvcId *string `json:"valSvcId,omitempty"`
	// Identity of the group of the target UEs.
	ValGrpId *string `json:"valGrpId,omitempty"`
	// The monitoring profile ID identifying a list of monitoring, analytics events.
	ProfId *string `json:"profId,omitempty"`
	// The temporal,spatial conditions for the events to be considered valid.
	ValCnds []ValidityConditions `json:"valCnds,omitempty"`
	// List of monitoring, analytics events to be monitored.
	EvntDets []MonitorEvents `json:"evntDets,omitempty"`
}

// NewMonitorFilter instantiates a new MonitorFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorFilter() *MonitorFilter {
	this := MonitorFilter{}
	return &this
}

// NewMonitorFilterWithDefaults instantiates a new MonitorFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorFilterWithDefaults() *MonitorFilter {
	this := MonitorFilter{}
	return &this
}

// GetIdnts returns the Idnts field value if set, zero value otherwise.
func (o *MonitorFilter) GetIdnts() []ValTargetUe {
	if o == nil || IsNil(o.Idnts) {
		var ret []ValTargetUe
		return ret
	}
	return o.Idnts
}

// GetIdntsOk returns a tuple with the Idnts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorFilter) GetIdntsOk() ([]ValTargetUe, bool) {
	if o == nil || IsNil(o.Idnts) {
		return nil, false
	}
	return o.Idnts, true
}

// HasIdnts returns a boolean if a field has been set.
func (o *MonitorFilter) HasIdnts() bool {
	if o != nil && !IsNil(o.Idnts) {
		return true
	}

	return false
}

// SetIdnts gets a reference to the given []ValTargetUe and assigns it to the Idnts field.
func (o *MonitorFilter) SetIdnts(v []ValTargetUe) {
	o.Idnts = v
}

// GetValSvcId returns the ValSvcId field value if set, zero value otherwise.
func (o *MonitorFilter) GetValSvcId() string {
	if o == nil || IsNil(o.ValSvcId) {
		var ret string
		return ret
	}
	return *o.ValSvcId
}

// GetValSvcIdOk returns a tuple with the ValSvcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorFilter) GetValSvcIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValSvcId) {
		return nil, false
	}
	return o.ValSvcId, true
}

// HasValSvcId returns a boolean if a field has been set.
func (o *MonitorFilter) HasValSvcId() bool {
	if o != nil && !IsNil(o.ValSvcId) {
		return true
	}

	return false
}

// SetValSvcId gets a reference to the given string and assigns it to the ValSvcId field.
func (o *MonitorFilter) SetValSvcId(v string) {
	o.ValSvcId = &v
}

// GetValGrpId returns the ValGrpId field value if set, zero value otherwise.
func (o *MonitorFilter) GetValGrpId() string {
	if o == nil || IsNil(o.ValGrpId) {
		var ret string
		return ret
	}
	return *o.ValGrpId
}

// GetValGrpIdOk returns a tuple with the ValGrpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorFilter) GetValGrpIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValGrpId) {
		return nil, false
	}
	return o.ValGrpId, true
}

// HasValGrpId returns a boolean if a field has been set.
func (o *MonitorFilter) HasValGrpId() bool {
	if o != nil && !IsNil(o.ValGrpId) {
		return true
	}

	return false
}

// SetValGrpId gets a reference to the given string and assigns it to the ValGrpId field.
func (o *MonitorFilter) SetValGrpId(v string) {
	o.ValGrpId = &v
}

// GetProfId returns the ProfId field value if set, zero value otherwise.
func (o *MonitorFilter) GetProfId() string {
	if o == nil || IsNil(o.ProfId) {
		var ret string
		return ret
	}
	return *o.ProfId
}

// GetProfIdOk returns a tuple with the ProfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorFilter) GetProfIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProfId) {
		return nil, false
	}
	return o.ProfId, true
}

// HasProfId returns a boolean if a field has been set.
func (o *MonitorFilter) HasProfId() bool {
	if o != nil && !IsNil(o.ProfId) {
		return true
	}

	return false
}

// SetProfId gets a reference to the given string and assigns it to the ProfId field.
func (o *MonitorFilter) SetProfId(v string) {
	o.ProfId = &v
}

// GetValCnds returns the ValCnds field value if set, zero value otherwise.
func (o *MonitorFilter) GetValCnds() []ValidityConditions {
	if o == nil || IsNil(o.ValCnds) {
		var ret []ValidityConditions
		return ret
	}
	return o.ValCnds
}

// GetValCndsOk returns a tuple with the ValCnds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorFilter) GetValCndsOk() ([]ValidityConditions, bool) {
	if o == nil || IsNil(o.ValCnds) {
		return nil, false
	}
	return o.ValCnds, true
}

// HasValCnds returns a boolean if a field has been set.
func (o *MonitorFilter) HasValCnds() bool {
	if o != nil && !IsNil(o.ValCnds) {
		return true
	}

	return false
}

// SetValCnds gets a reference to the given []ValidityConditions and assigns it to the ValCnds field.
func (o *MonitorFilter) SetValCnds(v []ValidityConditions) {
	o.ValCnds = v
}

// GetEvntDets returns the EvntDets field value if set, zero value otherwise.
func (o *MonitorFilter) GetEvntDets() []MonitorEvents {
	if o == nil || IsNil(o.EvntDets) {
		var ret []MonitorEvents
		return ret
	}
	return o.EvntDets
}

// GetEvntDetsOk returns a tuple with the EvntDets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorFilter) GetEvntDetsOk() ([]MonitorEvents, bool) {
	if o == nil || IsNil(o.EvntDets) {
		return nil, false
	}
	return o.EvntDets, true
}

// HasEvntDets returns a boolean if a field has been set.
func (o *MonitorFilter) HasEvntDets() bool {
	if o != nil && !IsNil(o.EvntDets) {
		return true
	}

	return false
}

// SetEvntDets gets a reference to the given []MonitorEvents and assigns it to the EvntDets field.
func (o *MonitorFilter) SetEvntDets(v []MonitorEvents) {
	o.EvntDets = v
}

func (o MonitorFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Idnts) {
		toSerialize["idnts"] = o.Idnts
	}
	if !IsNil(o.ValSvcId) {
		toSerialize["valSvcId"] = o.ValSvcId
	}
	if !IsNil(o.ValGrpId) {
		toSerialize["valGrpId"] = o.ValGrpId
	}
	if !IsNil(o.ProfId) {
		toSerialize["profId"] = o.ProfId
	}
	if !IsNil(o.ValCnds) {
		toSerialize["valCnds"] = o.ValCnds
	}
	if !IsNil(o.EvntDets) {
		toSerialize["evntDets"] = o.EvntDets
	}
	return toSerialize, nil
}

type NullableMonitorFilter struct {
	value *MonitorFilter
	isSet bool
}

func (v NullableMonitorFilter) Get() *MonitorFilter {
	return v.value
}

func (v *NullableMonitorFilter) Set(val *MonitorFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorFilter(val *MonitorFilter) *NullableMonitorFilter {
	return &NullableMonitorFilter{value: val, isSet: true}
}

func (v NullableMonitorFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
