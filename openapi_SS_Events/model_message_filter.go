/*
SS_Events

API for SEAL Events management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
)

// checks if the MessageFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageFilter{}

// MessageFilter Represents the message filters applicable to a VAL User ID or VAL UE ID.
type MessageFilter struct {
	ReqUe ValTargetUe `json:"reqUe"`
	// List of VAL User or UE IDs whose message to be sent.
	TgtUe []ValTargetUe `json:"tgtUe,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxMsgs *int32 `json:"maxMsgs,omitempty"`
	// Time frame associated with total number of messages.
	Scheds []ScheduledCommunicationTime `json:"scheds,omitempty"`
	// List of message types to be sent to VAL UE.
	MsgTypes []string `json:"msgTypes,omitempty"`
}

// NewMessageFilter instantiates a new MessageFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageFilter(reqUe ValTargetUe) *MessageFilter {
	this := MessageFilter{}
	this.ReqUe = reqUe
	return &this
}

// NewMessageFilterWithDefaults instantiates a new MessageFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageFilterWithDefaults() *MessageFilter {
	this := MessageFilter{}
	return &this
}

// GetReqUe returns the ReqUe field value
func (o *MessageFilter) GetReqUe() ValTargetUe {
	if o == nil {
		var ret ValTargetUe
		return ret
	}

	return o.ReqUe
}

// GetReqUeOk returns a tuple with the ReqUe field value
// and a boolean to check if the value has been set.
func (o *MessageFilter) GetReqUeOk() (*ValTargetUe, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReqUe, true
}

// SetReqUe sets field value
func (o *MessageFilter) SetReqUe(v ValTargetUe) {
	o.ReqUe = v
}

// GetTgtUe returns the TgtUe field value if set, zero value otherwise.
func (o *MessageFilter) GetTgtUe() []ValTargetUe {
	if o == nil || IsNil(o.TgtUe) {
		var ret []ValTargetUe
		return ret
	}
	return o.TgtUe
}

// GetTgtUeOk returns a tuple with the TgtUe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageFilter) GetTgtUeOk() ([]ValTargetUe, bool) {
	if o == nil || IsNil(o.TgtUe) {
		return nil, false
	}
	return o.TgtUe, true
}

// HasTgtUe returns a boolean if a field has been set.
func (o *MessageFilter) HasTgtUe() bool {
	if o != nil && !IsNil(o.TgtUe) {
		return true
	}

	return false
}

// SetTgtUe gets a reference to the given []ValTargetUe and assigns it to the TgtUe field.
func (o *MessageFilter) SetTgtUe(v []ValTargetUe) {
	o.TgtUe = v
}

// GetMaxMsgs returns the MaxMsgs field value if set, zero value otherwise.
func (o *MessageFilter) GetMaxMsgs() int32 {
	if o == nil || IsNil(o.MaxMsgs) {
		var ret int32
		return ret
	}
	return *o.MaxMsgs
}

// GetMaxMsgsOk returns a tuple with the MaxMsgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageFilter) GetMaxMsgsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMsgs) {
		return nil, false
	}
	return o.MaxMsgs, true
}

// HasMaxMsgs returns a boolean if a field has been set.
func (o *MessageFilter) HasMaxMsgs() bool {
	if o != nil && !IsNil(o.MaxMsgs) {
		return true
	}

	return false
}

// SetMaxMsgs gets a reference to the given int32 and assigns it to the MaxMsgs field.
func (o *MessageFilter) SetMaxMsgs(v int32) {
	o.MaxMsgs = &v
}

// GetScheds returns the Scheds field value if set, zero value otherwise.
func (o *MessageFilter) GetScheds() []ScheduledCommunicationTime {
	if o == nil || IsNil(o.Scheds) {
		var ret []ScheduledCommunicationTime
		return ret
	}
	return o.Scheds
}

// GetSchedsOk returns a tuple with the Scheds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageFilter) GetSchedsOk() ([]ScheduledCommunicationTime, bool) {
	if o == nil || IsNil(o.Scheds) {
		return nil, false
	}
	return o.Scheds, true
}

// HasScheds returns a boolean if a field has been set.
func (o *MessageFilter) HasScheds() bool {
	if o != nil && !IsNil(o.Scheds) {
		return true
	}

	return false
}

// SetScheds gets a reference to the given []ScheduledCommunicationTime and assigns it to the Scheds field.
func (o *MessageFilter) SetScheds(v []ScheduledCommunicationTime) {
	o.Scheds = v
}

// GetMsgTypes returns the MsgTypes field value if set, zero value otherwise.
func (o *MessageFilter) GetMsgTypes() []string {
	if o == nil || IsNil(o.MsgTypes) {
		var ret []string
		return ret
	}
	return o.MsgTypes
}

// GetMsgTypesOk returns a tuple with the MsgTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageFilter) GetMsgTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.MsgTypes) {
		return nil, false
	}
	return o.MsgTypes, true
}

// HasMsgTypes returns a boolean if a field has been set.
func (o *MessageFilter) HasMsgTypes() bool {
	if o != nil && !IsNil(o.MsgTypes) {
		return true
	}

	return false
}

// SetMsgTypes gets a reference to the given []string and assigns it to the MsgTypes field.
func (o *MessageFilter) SetMsgTypes(v []string) {
	o.MsgTypes = v
}

func (o MessageFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reqUe"] = o.ReqUe
	if !IsNil(o.TgtUe) {
		toSerialize["tgtUe"] = o.TgtUe
	}
	if !IsNil(o.MaxMsgs) {
		toSerialize["maxMsgs"] = o.MaxMsgs
	}
	if !IsNil(o.Scheds) {
		toSerialize["scheds"] = o.Scheds
	}
	if !IsNil(o.MsgTypes) {
		toSerialize["msgTypes"] = o.MsgTypes
	}
	return toSerialize, nil
}

type NullableMessageFilter struct {
	value *MessageFilter
	isSet bool
}

func (v NullableMessageFilter) Get() *MessageFilter {
	return v.value
}

func (v *NullableMessageFilter) Set(val *MessageFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageFilter(val *MessageFilter) *NullableMessageFilter {
	return &NullableMessageFilter{value: val, isSet: true}
}

func (v NullableMessageFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


