/*
SS_Events

API for SEAL Events management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
	"fmt"
)

// AnalyticsEventAnyOf the model 'AnalyticsEventAnyOf'
type AnalyticsEventAnyOf string

// List of AnalyticsEvent_anyOf
const (
	UE_MOBILITY AnalyticsEventAnyOf = "UE_MOBILITY"
	UE_COMM AnalyticsEventAnyOf = "UE_COMM"
	ABNORMAL_BEHAVIOR AnalyticsEventAnyOf = "ABNORMAL_BEHAVIOR"
	CONGESTION AnalyticsEventAnyOf = "CONGESTION"
	NETWORK_PERFORMANCE AnalyticsEventAnyOf = "NETWORK_PERFORMANCE"
	QOS_SUSTAINABILITY AnalyticsEventAnyOf = "QOS_SUSTAINABILITY"
	DISPERSION AnalyticsEventAnyOf = "DISPERSION"
	DN_PERFORMANCE AnalyticsEventAnyOf = "DN_PERFORMANCE"
	SERVICE_EXPERIENCE AnalyticsEventAnyOf = "SERVICE_EXPERIENCE"
)

// All allowed values of AnalyticsEventAnyOf enum
var AllowedAnalyticsEventAnyOfEnumValues = []AnalyticsEventAnyOf{
	"UE_MOBILITY",
	"UE_COMM",
	"ABNORMAL_BEHAVIOR",
	"CONGESTION",
	"NETWORK_PERFORMANCE",
	"QOS_SUSTAINABILITY",
	"DISPERSION",
	"DN_PERFORMANCE",
	"SERVICE_EXPERIENCE",
}

func (v *AnalyticsEventAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsEventAnyOf(value)
	for _, existing := range AllowedAnalyticsEventAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsEventAnyOf", value)
}

// NewAnalyticsEventAnyOfFromValue returns a pointer to a valid AnalyticsEventAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsEventAnyOfFromValue(v string) (*AnalyticsEventAnyOf, error) {
	ev := AnalyticsEventAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsEventAnyOf: valid values are %v", v, AllowedAnalyticsEventAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsEventAnyOf) IsValid() bool {
	for _, existing := range AllowedAnalyticsEventAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsEvent_anyOf value
func (v AnalyticsEventAnyOf) Ptr() *AnalyticsEventAnyOf {
	return &v
}

type NullableAnalyticsEventAnyOf struct {
	value *AnalyticsEventAnyOf
	isSet bool
}

func (v NullableAnalyticsEventAnyOf) Get() *AnalyticsEventAnyOf {
	return v.value
}

func (v *NullableAnalyticsEventAnyOf) Set(val *AnalyticsEventAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsEventAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsEventAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsEventAnyOf(val *AnalyticsEventAnyOf) *NullableAnalyticsEventAnyOf {
	return &NullableAnalyticsEventAnyOf{value: val, isSet: true}
}

func (v NullableAnalyticsEventAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsEventAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

