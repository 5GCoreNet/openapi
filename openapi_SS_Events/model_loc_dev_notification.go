/*
SS_Events

API for SEAL Events management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
	"fmt"
)

// LocDevNotification Possible values are: - NOTIFY_MISMATCH_LOCATION: This value indicates that the location information of the VAL UE(s) from the SEAL LM client and the core network are not matching. - NOTIFY_ABSENCE: This value indicates that the current location information of the VAL UE(s)is deviating from the VAL server's area of interest. - NOTIFY_PRESENCE: This value indicates that the current location information of the VAL UE(s) is within the VAL server's area of interest. 
type LocDevNotification struct {
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *LocDevNotification) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(LocDevNotification)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *LocDevNotification) MarshalJSON() ([]byte, error) {
	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableLocDevNotification struct {
	value *LocDevNotification
	isSet bool
}

func (v NullableLocDevNotification) Get() *LocDevNotification {
	return v.value
}

func (v *NullableLocDevNotification) Set(val *LocDevNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableLocDevNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableLocDevNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocDevNotification(val *LocDevNotification) *NullableLocDevNotification {
	return &NullableLocDevNotification{value: val, isSet: true}
}

func (v NullableLocDevNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocDevNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


