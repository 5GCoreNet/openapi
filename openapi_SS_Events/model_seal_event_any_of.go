/*
SS_Events

API for SEAL Events management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
	"fmt"
)

// SEALEventAnyOf the model 'SEALEventAnyOf'
type SEALEventAnyOf string

// List of SEALEvent_anyOf
const (
	LM_LOCATION_INFO_CHANGE SEALEventAnyOf = "LM_LOCATION_INFO_CHANGE"
	GM_GROUP_INFO_CHANGE SEALEventAnyOf = "GM_GROUP_INFO_CHANGE"
	CM_USER_PROFILE_CHANGE SEALEventAnyOf = "CM_USER_PROFILE_CHANGE"
	GM_GROUP_CREATE SEALEventAnyOf = "GM_GROUP_CREATE"
	NRM_MONITOR_UE_USER_EVENTS SEALEventAnyOf = "NRM_MONITOR_UE_USER_EVENTS"
	LM_LOCATION_DEVIATION_MONITOR SEALEventAnyOf = "LM_LOCATION_DEVIATION_MONITOR"
	GM_TEMP_GROUP_FORMATION SEALEventAnyOf = "GM_TEMP_GROUP_FORMATION"
	LM_LOCATION_AREA_MONITOR SEALEventAnyOf = "LM_LOCATION_AREA_MONITOR"
)

// All allowed values of SEALEventAnyOf enum
var AllowedSEALEventAnyOfEnumValues = []SEALEventAnyOf{
	"LM_LOCATION_INFO_CHANGE",
	"GM_GROUP_INFO_CHANGE",
	"CM_USER_PROFILE_CHANGE",
	"GM_GROUP_CREATE",
	"NRM_MONITOR_UE_USER_EVENTS",
	"LM_LOCATION_DEVIATION_MONITOR",
	"GM_TEMP_GROUP_FORMATION",
	"LM_LOCATION_AREA_MONITOR",
}

func (v *SEALEventAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SEALEventAnyOf(value)
	for _, existing := range AllowedSEALEventAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SEALEventAnyOf", value)
}

// NewSEALEventAnyOfFromValue returns a pointer to a valid SEALEventAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSEALEventAnyOfFromValue(v string) (*SEALEventAnyOf, error) {
	ev := SEALEventAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SEALEventAnyOf: valid values are %v", v, AllowedSEALEventAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SEALEventAnyOf) IsValid() bool {
	for _, existing := range AllowedSEALEventAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SEALEvent_anyOf value
func (v SEALEventAnyOf) Ptr() *SEALEventAnyOf {
	return &v
}

type NullableSEALEventAnyOf struct {
	value *SEALEventAnyOf
	isSet bool
}

func (v NullableSEALEventAnyOf) Get() *SEALEventAnyOf {
	return v.value
}

func (v *NullableSEALEventAnyOf) Set(val *SEALEventAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSEALEventAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSEALEventAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSEALEventAnyOf(val *SEALEventAnyOf) *NullableSEALEventAnyOf {
	return &NullableSEALEventAnyOf{value: val, isSet: true}
}

func (v NullableSEALEventAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSEALEventAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

