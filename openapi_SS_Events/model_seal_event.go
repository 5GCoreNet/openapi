/*
SS_Events

API for SEAL Events management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
	"fmt"
)

// SEALEvent Possible values are: - LM_LOCATION_INFO_CHANGE: Events related to the location information of VAL Users or VAL UEs from the Location Management Server. - GM_GROUP_INFO_CHANGE: Events related to the modification of VAL group membership and configuration information from the Group Management Server. - CM_USER_PROFILE_CHANGE: Events related to update of user profile information from the Configuration Management Server. - GM_GROUP_CREATE: Events related to creation of new VAL groups from the Group Mananagement Server. - NRM_MONITOR_UE_USER_EVENTS: Monitoring and analytic events related to VAL UEs, users or VAL group, from the Network Resource Management Server. - LM_LOCATION_DEVIATION_MONITOR: Events from Location Management server, related to the deviation of the VAL User(s) / UE(s) location from an area of interest. - GM_TEMP_GROUP_FORMATION: Events related to the formation of new temporary VAL groups from the Group Management Server. - LM_LOCATION_AREA_MONITOR: Events from Location Management server, related to the list of UEs moving in or moving out of the specific location. 
type SEALEvent struct {
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SEALEvent) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SEALEvent)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SEALEvent) MarshalJSON() ([]byte, error) {
	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSEALEvent struct {
	value *SEALEvent
	isSet bool
}

func (v NullableSEALEvent) Get() *SEALEvent {
	return v.value
}

func (v *NullableSEALEvent) Set(val *SEALEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSEALEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSEALEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSEALEvent(val *SEALEvent) *NullableSEALEvent {
	return &NullableSEALEvent{value: val, isSet: true}
}

func (v NullableSEALEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSEALEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


