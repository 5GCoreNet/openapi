/*
SS_Events

API for SEAL Events management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_SS_Events

import (
	"encoding/json"
	"fmt"
)

// MonLocTriggerEvent Possible values are: - DISTANCE_TRAVELLED: This value indicates the trigger event for the location area monitoring based on the distance travelled by the reference UE. 
type MonLocTriggerEvent struct {
	MonLocTriggerEventAnyOf *MonLocTriggerEventAnyOf
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MonLocTriggerEvent) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into MonLocTriggerEventAnyOf
	err = json.Unmarshal(data, &dst.MonLocTriggerEventAnyOf);
	if err == nil {
		jsonMonLocTriggerEventAnyOf, _ := json.Marshal(dst.MonLocTriggerEventAnyOf)
		if string(jsonMonLocTriggerEventAnyOf) == "{}" { // empty struct
			dst.MonLocTriggerEventAnyOf = nil
		} else {
			return nil // data stored in dst.MonLocTriggerEventAnyOf, return on the first match
		}
	} else {
		dst.MonLocTriggerEventAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(MonLocTriggerEvent)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *MonLocTriggerEvent) MarshalJSON() ([]byte, error) {
	if src.MonLocTriggerEventAnyOf != nil {
		return json.Marshal(&src.MonLocTriggerEventAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableMonLocTriggerEvent struct {
	value *MonLocTriggerEvent
	isSet bool
}

func (v NullableMonLocTriggerEvent) Get() *MonLocTriggerEvent {
	return v.value
}

func (v *NullableMonLocTriggerEvent) Set(val *MonLocTriggerEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableMonLocTriggerEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableMonLocTriggerEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonLocTriggerEvent(val *MonLocTriggerEvent) *NullableMonLocTriggerEvent {
	return &NullableMonLocTriggerEvent{value: val, isSet: true}
}

func (v NullableMonLocTriggerEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonLocTriggerEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


