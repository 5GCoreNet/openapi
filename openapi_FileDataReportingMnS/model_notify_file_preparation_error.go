/*
File Data Reporting MnS

OAS 3.0.1 definition of the File Data Reporting MnS Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_FileDataReportingMnS

import (
	"encoding/json"
	"time"
)

// checks if the NotifyFilePreparationError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyFilePreparationError{}

// NotifyFilePreparationError struct for NotifyFilePreparationError
type NotifyFilePreparationError struct {
	Href string `json:"href"`
	NotificationId int32 `json:"notificationId"`
	NotificationType NotificationType `json:"notificationType"`
	EventTime time.Time `json:"eventTime"`
	SystemDN string `json:"systemDN"`
	FileInfoList []FileInfo `json:"fileInfoList,omitempty"`
	Reason *string `json:"reason,omitempty"`
	AdditionalText *string `json:"additionalText,omitempty"`
}

// NewNotifyFilePreparationError instantiates a new NotifyFilePreparationError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyFilePreparationError(href string, notificationId int32, notificationType NotificationType, eventTime time.Time, systemDN string) *NotifyFilePreparationError {
	this := NotifyFilePreparationError{}
	this.Href = href
	this.NotificationId = notificationId
	this.NotificationType = notificationType
	this.EventTime = eventTime
	this.SystemDN = systemDN
	return &this
}

// NewNotifyFilePreparationErrorWithDefaults instantiates a new NotifyFilePreparationError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyFilePreparationErrorWithDefaults() *NotifyFilePreparationError {
	this := NotifyFilePreparationError{}
	return &this
}

// GetHref returns the Href field value
func (o *NotifyFilePreparationError) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *NotifyFilePreparationError) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *NotifyFilePreparationError) SetHref(v string) {
	o.Href = v
}

// GetNotificationId returns the NotificationId field value
func (o *NotifyFilePreparationError) GetNotificationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NotificationId
}

// GetNotificationIdOk returns a tuple with the NotificationId field value
// and a boolean to check if the value has been set.
func (o *NotifyFilePreparationError) GetNotificationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationId, true
}

// SetNotificationId sets field value
func (o *NotifyFilePreparationError) SetNotificationId(v int32) {
	o.NotificationId = v
}

// GetNotificationType returns the NotificationType field value
func (o *NotifyFilePreparationError) GetNotificationType() NotificationType {
	if o == nil {
		var ret NotificationType
		return ret
	}

	return o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value
// and a boolean to check if the value has been set.
func (o *NotifyFilePreparationError) GetNotificationTypeOk() (*NotificationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationType, true
}

// SetNotificationType sets field value
func (o *NotifyFilePreparationError) SetNotificationType(v NotificationType) {
	o.NotificationType = v
}

// GetEventTime returns the EventTime field value
func (o *NotifyFilePreparationError) GetEventTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value
// and a boolean to check if the value has been set.
func (o *NotifyFilePreparationError) GetEventTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTime, true
}

// SetEventTime sets field value
func (o *NotifyFilePreparationError) SetEventTime(v time.Time) {
	o.EventTime = v
}

// GetSystemDN returns the SystemDN field value
func (o *NotifyFilePreparationError) GetSystemDN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SystemDN
}

// GetSystemDNOk returns a tuple with the SystemDN field value
// and a boolean to check if the value has been set.
func (o *NotifyFilePreparationError) GetSystemDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemDN, true
}

// SetSystemDN sets field value
func (o *NotifyFilePreparationError) SetSystemDN(v string) {
	o.SystemDN = v
}

// GetFileInfoList returns the FileInfoList field value if set, zero value otherwise.
func (o *NotifyFilePreparationError) GetFileInfoList() []FileInfo {
	if o == nil || IsNil(o.FileInfoList) {
		var ret []FileInfo
		return ret
	}
	return o.FileInfoList
}

// GetFileInfoListOk returns a tuple with the FileInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyFilePreparationError) GetFileInfoListOk() ([]FileInfo, bool) {
	if o == nil || IsNil(o.FileInfoList) {
		return nil, false
	}
	return o.FileInfoList, true
}

// HasFileInfoList returns a boolean if a field has been set.
func (o *NotifyFilePreparationError) HasFileInfoList() bool {
	if o != nil && !IsNil(o.FileInfoList) {
		return true
	}

	return false
}

// SetFileInfoList gets a reference to the given []FileInfo and assigns it to the FileInfoList field.
func (o *NotifyFilePreparationError) SetFileInfoList(v []FileInfo) {
	o.FileInfoList = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *NotifyFilePreparationError) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyFilePreparationError) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *NotifyFilePreparationError) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *NotifyFilePreparationError) SetReason(v string) {
	o.Reason = &v
}

// GetAdditionalText returns the AdditionalText field value if set, zero value otherwise.
func (o *NotifyFilePreparationError) GetAdditionalText() string {
	if o == nil || IsNil(o.AdditionalText) {
		var ret string
		return ret
	}
	return *o.AdditionalText
}

// GetAdditionalTextOk returns a tuple with the AdditionalText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyFilePreparationError) GetAdditionalTextOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalText) {
		return nil, false
	}
	return o.AdditionalText, true
}

// HasAdditionalText returns a boolean if a field has been set.
func (o *NotifyFilePreparationError) HasAdditionalText() bool {
	if o != nil && !IsNil(o.AdditionalText) {
		return true
	}

	return false
}

// SetAdditionalText gets a reference to the given string and assigns it to the AdditionalText field.
func (o *NotifyFilePreparationError) SetAdditionalText(v string) {
	o.AdditionalText = &v
}

func (o NotifyFilePreparationError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyFilePreparationError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	toSerialize["notificationId"] = o.NotificationId
	toSerialize["notificationType"] = o.NotificationType
	toSerialize["eventTime"] = o.EventTime
	toSerialize["systemDN"] = o.SystemDN
	if !IsNil(o.FileInfoList) {
		toSerialize["fileInfoList"] = o.FileInfoList
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.AdditionalText) {
		toSerialize["additionalText"] = o.AdditionalText
	}
	return toSerialize, nil
}

type NullableNotifyFilePreparationError struct {
	value *NotifyFilePreparationError
	isSet bool
}

func (v NullableNotifyFilePreparationError) Get() *NotifyFilePreparationError {
	return v.value
}

func (v *NullableNotifyFilePreparationError) Set(val *NotifyFilePreparationError) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyFilePreparationError) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyFilePreparationError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyFilePreparationError(val *NotifyFilePreparationError) *NullableNotifyFilePreparationError {
	return &NullableNotifyFilePreparationError{value: val, isSet: true}
}

func (v NullableNotifyFilePreparationError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyFilePreparationError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


