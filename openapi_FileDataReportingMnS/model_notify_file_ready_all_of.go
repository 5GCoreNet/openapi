/*
File Data Reporting MnS

OAS 3.0.1 definition of the File Data Reporting MnS Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_FileDataReportingMnS

import (
	"encoding/json"
)

// checks if the NotifyFileReadyAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyFileReadyAllOf{}

// NotifyFileReadyAllOf struct for NotifyFileReadyAllOf
type NotifyFileReadyAllOf struct {
	FileInfoList []FileInfo `json:"fileInfoList,omitempty"`
	AdditionalText *string `json:"additionalText,omitempty"`
}

// NewNotifyFileReadyAllOf instantiates a new NotifyFileReadyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyFileReadyAllOf() *NotifyFileReadyAllOf {
	this := NotifyFileReadyAllOf{}
	return &this
}

// NewNotifyFileReadyAllOfWithDefaults instantiates a new NotifyFileReadyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyFileReadyAllOfWithDefaults() *NotifyFileReadyAllOf {
	this := NotifyFileReadyAllOf{}
	return &this
}

// GetFileInfoList returns the FileInfoList field value if set, zero value otherwise.
func (o *NotifyFileReadyAllOf) GetFileInfoList() []FileInfo {
	if o == nil || isNil(o.FileInfoList) {
		var ret []FileInfo
		return ret
	}
	return o.FileInfoList
}

// GetFileInfoListOk returns a tuple with the FileInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyFileReadyAllOf) GetFileInfoListOk() ([]FileInfo, bool) {
	if o == nil || isNil(o.FileInfoList) {
		return nil, false
	}
	return o.FileInfoList, true
}

// HasFileInfoList returns a boolean if a field has been set.
func (o *NotifyFileReadyAllOf) HasFileInfoList() bool {
	if o != nil && !isNil(o.FileInfoList) {
		return true
	}

	return false
}

// SetFileInfoList gets a reference to the given []FileInfo and assigns it to the FileInfoList field.
func (o *NotifyFileReadyAllOf) SetFileInfoList(v []FileInfo) {
	o.FileInfoList = v
}

// GetAdditionalText returns the AdditionalText field value if set, zero value otherwise.
func (o *NotifyFileReadyAllOf) GetAdditionalText() string {
	if o == nil || isNil(o.AdditionalText) {
		var ret string
		return ret
	}
	return *o.AdditionalText
}

// GetAdditionalTextOk returns a tuple with the AdditionalText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyFileReadyAllOf) GetAdditionalTextOk() (*string, bool) {
	if o == nil || isNil(o.AdditionalText) {
		return nil, false
	}
	return o.AdditionalText, true
}

// HasAdditionalText returns a boolean if a field has been set.
func (o *NotifyFileReadyAllOf) HasAdditionalText() bool {
	if o != nil && !isNil(o.AdditionalText) {
		return true
	}

	return false
}

// SetAdditionalText gets a reference to the given string and assigns it to the AdditionalText field.
func (o *NotifyFileReadyAllOf) SetAdditionalText(v string) {
	o.AdditionalText = &v
}

func (o NotifyFileReadyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyFileReadyAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FileInfoList) {
		toSerialize["fileInfoList"] = o.FileInfoList
	}
	if !isNil(o.AdditionalText) {
		toSerialize["additionalText"] = o.AdditionalText
	}
	return toSerialize, nil
}

type NullableNotifyFileReadyAllOf struct {
	value *NotifyFileReadyAllOf
	isSet bool
}

func (v NullableNotifyFileReadyAllOf) Get() *NotifyFileReadyAllOf {
	return v.value
}

func (v *NullableNotifyFileReadyAllOf) Set(val *NotifyFileReadyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyFileReadyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyFileReadyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyFileReadyAllOf(val *NotifyFileReadyAllOf) *NullableNotifyFileReadyAllOf {
	return &NullableNotifyFileReadyAllOf{value: val, isSet: true}
}

func (v NullableNotifyFileReadyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyFileReadyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


