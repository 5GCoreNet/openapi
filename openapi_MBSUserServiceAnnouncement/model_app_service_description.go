/*
MBS User Service Announcement Element units’ definition

MBS User Service Announcement Element units. © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_MBSUserServiceAnnouncement

import (
	"encoding/json"
)

// checks if the AppServiceDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppServiceDescription{}

// AppServiceDescription struct for AppServiceDescription
type AppServiceDescription struct {
	// String providing an URI formatted according to RFC 3986.
	MediaManifestDescriptionURI *string                                       `json:"mediaManifestDescriptionURI,omitempty"`
	MimeType                    *string                                       `json:"mimeType,omitempty"`
	IdenticalContents           []AppServiceDescriptionIdenticalContentsInner `json:"identicalContents,omitempty"`
	AlternativeContents         [][]ApplicationService                        `json:"alternativeContents,omitempty"`
}

// NewAppServiceDescription instantiates a new AppServiceDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppServiceDescription() *AppServiceDescription {
	this := AppServiceDescription{}
	return &this
}

// NewAppServiceDescriptionWithDefaults instantiates a new AppServiceDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppServiceDescriptionWithDefaults() *AppServiceDescription {
	this := AppServiceDescription{}
	return &this
}

// GetMediaManifestDescriptionURI returns the MediaManifestDescriptionURI field value if set, zero value otherwise.
func (o *AppServiceDescription) GetMediaManifestDescriptionURI() string {
	if o == nil || IsNil(o.MediaManifestDescriptionURI) {
		var ret string
		return ret
	}
	return *o.MediaManifestDescriptionURI
}

// GetMediaManifestDescriptionURIOk returns a tuple with the MediaManifestDescriptionURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppServiceDescription) GetMediaManifestDescriptionURIOk() (*string, bool) {
	if o == nil || IsNil(o.MediaManifestDescriptionURI) {
		return nil, false
	}
	return o.MediaManifestDescriptionURI, true
}

// HasMediaManifestDescriptionURI returns a boolean if a field has been set.
func (o *AppServiceDescription) HasMediaManifestDescriptionURI() bool {
	if o != nil && !IsNil(o.MediaManifestDescriptionURI) {
		return true
	}

	return false
}

// SetMediaManifestDescriptionURI gets a reference to the given string and assigns it to the MediaManifestDescriptionURI field.
func (o *AppServiceDescription) SetMediaManifestDescriptionURI(v string) {
	o.MediaManifestDescriptionURI = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *AppServiceDescription) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppServiceDescription) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *AppServiceDescription) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *AppServiceDescription) SetMimeType(v string) {
	o.MimeType = &v
}

// GetIdenticalContents returns the IdenticalContents field value if set, zero value otherwise.
func (o *AppServiceDescription) GetIdenticalContents() []AppServiceDescriptionIdenticalContentsInner {
	if o == nil || IsNil(o.IdenticalContents) {
		var ret []AppServiceDescriptionIdenticalContentsInner
		return ret
	}
	return o.IdenticalContents
}

// GetIdenticalContentsOk returns a tuple with the IdenticalContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppServiceDescription) GetIdenticalContentsOk() ([]AppServiceDescriptionIdenticalContentsInner, bool) {
	if o == nil || IsNil(o.IdenticalContents) {
		return nil, false
	}
	return o.IdenticalContents, true
}

// HasIdenticalContents returns a boolean if a field has been set.
func (o *AppServiceDescription) HasIdenticalContents() bool {
	if o != nil && !IsNil(o.IdenticalContents) {
		return true
	}

	return false
}

// SetIdenticalContents gets a reference to the given []AppServiceDescriptionIdenticalContentsInner and assigns it to the IdenticalContents field.
func (o *AppServiceDescription) SetIdenticalContents(v []AppServiceDescriptionIdenticalContentsInner) {
	o.IdenticalContents = v
}

// GetAlternativeContents returns the AlternativeContents field value if set, zero value otherwise.
func (o *AppServiceDescription) GetAlternativeContents() [][]ApplicationService {
	if o == nil || IsNil(o.AlternativeContents) {
		var ret [][]ApplicationService
		return ret
	}
	return o.AlternativeContents
}

// GetAlternativeContentsOk returns a tuple with the AlternativeContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppServiceDescription) GetAlternativeContentsOk() ([][]ApplicationService, bool) {
	if o == nil || IsNil(o.AlternativeContents) {
		return nil, false
	}
	return o.AlternativeContents, true
}

// HasAlternativeContents returns a boolean if a field has been set.
func (o *AppServiceDescription) HasAlternativeContents() bool {
	if o != nil && !IsNil(o.AlternativeContents) {
		return true
	}

	return false
}

// SetAlternativeContents gets a reference to the given [][]ApplicationService and assigns it to the AlternativeContents field.
func (o *AppServiceDescription) SetAlternativeContents(v [][]ApplicationService) {
	o.AlternativeContents = v
}

func (o AppServiceDescription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppServiceDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MediaManifestDescriptionURI) {
		toSerialize["mediaManifestDescriptionURI"] = o.MediaManifestDescriptionURI
	}
	if !IsNil(o.MimeType) {
		toSerialize["mimeType"] = o.MimeType
	}
	if !IsNil(o.IdenticalContents) {
		toSerialize["identicalContents"] = o.IdenticalContents
	}
	if !IsNil(o.AlternativeContents) {
		toSerialize["alternativeContents"] = o.AlternativeContents
	}
	return toSerialize, nil
}

type NullableAppServiceDescription struct {
	value *AppServiceDescription
	isSet bool
}

func (v NullableAppServiceDescription) Get() *AppServiceDescription {
	return v.value
}

func (v *NullableAppServiceDescription) Set(val *AppServiceDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableAppServiceDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableAppServiceDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppServiceDescription(val *AppServiceDescription) *NullableAppServiceDescription {
	return &NullableAppServiceDescription{value: val, isSet: true}
}

func (v NullableAppServiceDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppServiceDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
