/*
AEF_Security_API

API for AEF security management.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AEF_Security_API

import (
	"encoding/json"
	"fmt"
)

// CauseAnyOf the model 'CauseAnyOf'
type CauseAnyOf string

// List of Cause_anyOf
const (
	OVERLIMIT_USAGE CauseAnyOf = "OVERLIMIT_USAGE"
	UNEXPECTED_REASON CauseAnyOf = "UNEXPECTED_REASON"
)

// All allowed values of CauseAnyOf enum
var AllowedCauseAnyOfEnumValues = []CauseAnyOf{
	"OVERLIMIT_USAGE",
	"UNEXPECTED_REASON",
}

func (v *CauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CauseAnyOf(value)
	for _, existing := range AllowedCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CauseAnyOf", value)
}

// NewCauseAnyOfFromValue returns a pointer to a valid CauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCauseAnyOfFromValue(v string) (*CauseAnyOf, error) {
	ev := CauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CauseAnyOf: valid values are %v", v, AllowedCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CauseAnyOf) IsValid() bool {
	for _, existing := range AllowedCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Cause_anyOf value
func (v CauseAnyOf) Ptr() *CauseAnyOf {
	return &v
}

type NullableCauseAnyOf struct {
	value *CauseAnyOf
	isSet bool
}

func (v NullableCauseAnyOf) Get() *CauseAnyOf {
	return v.value
}

func (v *NullableCauseAnyOf) Set(val *CauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCauseAnyOf(val *CauseAnyOf) *NullableCauseAnyOf {
	return &NullableCauseAnyOf{value: val, isSet: true}
}

func (v NullableCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

