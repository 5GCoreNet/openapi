/*
Unified Data Repository Service API file for structured data for exposure

The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Exposure_Data

import (
	"encoding/json"
	"fmt"
)

// SmsSupportAnyOf the model 'SmsSupportAnyOf'
type SmsSupportAnyOf string

// List of SmsSupport_anyOf
const (
	_3_GPP SmsSupportAnyOf = "3GPP"
	NON_3_GPP SmsSupportAnyOf = "NON_3GPP"
	BOTH SmsSupportAnyOf = "BOTH"
	NONE SmsSupportAnyOf = "NONE"
)

// All allowed values of SmsSupportAnyOf enum
var AllowedSmsSupportAnyOfEnumValues = []SmsSupportAnyOf{
	"3GPP",
	"NON_3GPP",
	"BOTH",
	"NONE",
}

func (v *SmsSupportAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmsSupportAnyOf(value)
	for _, existing := range AllowedSmsSupportAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmsSupportAnyOf", value)
}

// NewSmsSupportAnyOfFromValue returns a pointer to a valid SmsSupportAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmsSupportAnyOfFromValue(v string) (*SmsSupportAnyOf, error) {
	ev := SmsSupportAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmsSupportAnyOf: valid values are %v", v, AllowedSmsSupportAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmsSupportAnyOf) IsValid() bool {
	for _, existing := range AllowedSmsSupportAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmsSupport_anyOf value
func (v SmsSupportAnyOf) Ptr() *SmsSupportAnyOf {
	return &v
}

type NullableSmsSupportAnyOf struct {
	value *SmsSupportAnyOf
	isSet bool
}

func (v NullableSmsSupportAnyOf) Get() *SmsSupportAnyOf {
	return v.value
}

func (v *NullableSmsSupportAnyOf) Set(val *SmsSupportAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsSupportAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsSupportAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsSupportAnyOf(val *SmsSupportAnyOf) *NullableSmsSupportAnyOf {
	return &NullableSmsSupportAnyOf{value: val, isSet: true}
}

func (v NullableSmsSupportAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsSupportAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

