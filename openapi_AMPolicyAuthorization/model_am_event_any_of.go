/*
3gpp-am-policyauthorization

API for AM policy authorization.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_AMPolicyAuthorization

import (
	"encoding/json"
	"fmt"
)

// AmEventAnyOf the model 'AmEventAnyOf'
type AmEventAnyOf string

// List of AmEvent_anyOf
const (
	SAC_CH AmEventAnyOf = "SAC_CH"
	PDUID_CH AmEventAnyOf = "PDUID_CH"
)

// All allowed values of AmEventAnyOf enum
var AllowedAmEventAnyOfEnumValues = []AmEventAnyOf{
	"SAC_CH",
	"PDUID_CH",
}

func (v *AmEventAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AmEventAnyOf(value)
	for _, existing := range AllowedAmEventAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AmEventAnyOf", value)
}

// NewAmEventAnyOfFromValue returns a pointer to a valid AmEventAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAmEventAnyOfFromValue(v string) (*AmEventAnyOf, error) {
	ev := AmEventAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AmEventAnyOf: valid values are %v", v, AllowedAmEventAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AmEventAnyOf) IsValid() bool {
	for _, existing := range AllowedAmEventAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AmEvent_anyOf value
func (v AmEventAnyOf) Ptr() *AmEventAnyOf {
	return &v
}

type NullableAmEventAnyOf struct {
	value *AmEventAnyOf
	isSet bool
}

func (v NullableAmEventAnyOf) Get() *AmEventAnyOf {
	return v.value
}

func (v *NullableAmEventAnyOf) Set(val *AmEventAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAmEventAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAmEventAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmEventAnyOf(val *AmEventAnyOf) *NullableAmEventAnyOf {
	return &NullableAmEventAnyOf{value: val, isSet: true}
}

func (v NullableAmEventAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmEventAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

