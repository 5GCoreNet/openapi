/*
coslaNrm

OAS 3.0.1 specification of the Cosla NRM Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CoslaNrm

import (
	"encoding/json"
)

// checks if the AssuranceTargetStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssuranceTargetStatus{}

// AssuranceTargetStatus struct for AssuranceTargetStatus
type AssuranceTargetStatus struct {
	AssuranceTargetStatusId *string `json:"assuranceTargetStatusId,omitempty"`
	AssuranceTargetName *string `json:"assuranceTargetName,omitempty"`
	AssuranceTargetStatusObserved *AssuranceTargetStatusObserved `json:"assuranceTargetStatusObserved,omitempty"`
	AssuranceTargetStatusPredicted *AssuranceTargetStatusPredicted `json:"assuranceTargetStatusPredicted,omitempty"`
}

// NewAssuranceTargetStatus instantiates a new AssuranceTargetStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssuranceTargetStatus() *AssuranceTargetStatus {
	this := AssuranceTargetStatus{}
	return &this
}

// NewAssuranceTargetStatusWithDefaults instantiates a new AssuranceTargetStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssuranceTargetStatusWithDefaults() *AssuranceTargetStatus {
	this := AssuranceTargetStatus{}
	return &this
}

// GetAssuranceTargetStatusId returns the AssuranceTargetStatusId field value if set, zero value otherwise.
func (o *AssuranceTargetStatus) GetAssuranceTargetStatusId() string {
	if o == nil || IsNil(o.AssuranceTargetStatusId) {
		var ret string
		return ret
	}
	return *o.AssuranceTargetStatusId
}

// GetAssuranceTargetStatusIdOk returns a tuple with the AssuranceTargetStatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssuranceTargetStatus) GetAssuranceTargetStatusIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssuranceTargetStatusId) {
		return nil, false
	}
	return o.AssuranceTargetStatusId, true
}

// HasAssuranceTargetStatusId returns a boolean if a field has been set.
func (o *AssuranceTargetStatus) HasAssuranceTargetStatusId() bool {
	if o != nil && !IsNil(o.AssuranceTargetStatusId) {
		return true
	}

	return false
}

// SetAssuranceTargetStatusId gets a reference to the given string and assigns it to the AssuranceTargetStatusId field.
func (o *AssuranceTargetStatus) SetAssuranceTargetStatusId(v string) {
	o.AssuranceTargetStatusId = &v
}

// GetAssuranceTargetName returns the AssuranceTargetName field value if set, zero value otherwise.
func (o *AssuranceTargetStatus) GetAssuranceTargetName() string {
	if o == nil || IsNil(o.AssuranceTargetName) {
		var ret string
		return ret
	}
	return *o.AssuranceTargetName
}

// GetAssuranceTargetNameOk returns a tuple with the AssuranceTargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssuranceTargetStatus) GetAssuranceTargetNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssuranceTargetName) {
		return nil, false
	}
	return o.AssuranceTargetName, true
}

// HasAssuranceTargetName returns a boolean if a field has been set.
func (o *AssuranceTargetStatus) HasAssuranceTargetName() bool {
	if o != nil && !IsNil(o.AssuranceTargetName) {
		return true
	}

	return false
}

// SetAssuranceTargetName gets a reference to the given string and assigns it to the AssuranceTargetName field.
func (o *AssuranceTargetStatus) SetAssuranceTargetName(v string) {
	o.AssuranceTargetName = &v
}

// GetAssuranceTargetStatusObserved returns the AssuranceTargetStatusObserved field value if set, zero value otherwise.
func (o *AssuranceTargetStatus) GetAssuranceTargetStatusObserved() AssuranceTargetStatusObserved {
	if o == nil || IsNil(o.AssuranceTargetStatusObserved) {
		var ret AssuranceTargetStatusObserved
		return ret
	}
	return *o.AssuranceTargetStatusObserved
}

// GetAssuranceTargetStatusObservedOk returns a tuple with the AssuranceTargetStatusObserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssuranceTargetStatus) GetAssuranceTargetStatusObservedOk() (*AssuranceTargetStatusObserved, bool) {
	if o == nil || IsNil(o.AssuranceTargetStatusObserved) {
		return nil, false
	}
	return o.AssuranceTargetStatusObserved, true
}

// HasAssuranceTargetStatusObserved returns a boolean if a field has been set.
func (o *AssuranceTargetStatus) HasAssuranceTargetStatusObserved() bool {
	if o != nil && !IsNil(o.AssuranceTargetStatusObserved) {
		return true
	}

	return false
}

// SetAssuranceTargetStatusObserved gets a reference to the given AssuranceTargetStatusObserved and assigns it to the AssuranceTargetStatusObserved field.
func (o *AssuranceTargetStatus) SetAssuranceTargetStatusObserved(v AssuranceTargetStatusObserved) {
	o.AssuranceTargetStatusObserved = &v
}

// GetAssuranceTargetStatusPredicted returns the AssuranceTargetStatusPredicted field value if set, zero value otherwise.
func (o *AssuranceTargetStatus) GetAssuranceTargetStatusPredicted() AssuranceTargetStatusPredicted {
	if o == nil || IsNil(o.AssuranceTargetStatusPredicted) {
		var ret AssuranceTargetStatusPredicted
		return ret
	}
	return *o.AssuranceTargetStatusPredicted
}

// GetAssuranceTargetStatusPredictedOk returns a tuple with the AssuranceTargetStatusPredicted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssuranceTargetStatus) GetAssuranceTargetStatusPredictedOk() (*AssuranceTargetStatusPredicted, bool) {
	if o == nil || IsNil(o.AssuranceTargetStatusPredicted) {
		return nil, false
	}
	return o.AssuranceTargetStatusPredicted, true
}

// HasAssuranceTargetStatusPredicted returns a boolean if a field has been set.
func (o *AssuranceTargetStatus) HasAssuranceTargetStatusPredicted() bool {
	if o != nil && !IsNil(o.AssuranceTargetStatusPredicted) {
		return true
	}

	return false
}

// SetAssuranceTargetStatusPredicted gets a reference to the given AssuranceTargetStatusPredicted and assigns it to the AssuranceTargetStatusPredicted field.
func (o *AssuranceTargetStatus) SetAssuranceTargetStatusPredicted(v AssuranceTargetStatusPredicted) {
	o.AssuranceTargetStatusPredicted = &v
}

func (o AssuranceTargetStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssuranceTargetStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssuranceTargetStatusId) {
		toSerialize["assuranceTargetStatusId"] = o.AssuranceTargetStatusId
	}
	if !IsNil(o.AssuranceTargetName) {
		toSerialize["assuranceTargetName"] = o.AssuranceTargetName
	}
	if !IsNil(o.AssuranceTargetStatusObserved) {
		toSerialize["assuranceTargetStatusObserved"] = o.AssuranceTargetStatusObserved
	}
	if !IsNil(o.AssuranceTargetStatusPredicted) {
		toSerialize["assuranceTargetStatusPredicted"] = o.AssuranceTargetStatusPredicted
	}
	return toSerialize, nil
}

type NullableAssuranceTargetStatus struct {
	value *AssuranceTargetStatus
	isSet bool
}

func (v NullableAssuranceTargetStatus) Get() *AssuranceTargetStatus {
	return v.value
}

func (v *NullableAssuranceTargetStatus) Set(val *AssuranceTargetStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAssuranceTargetStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAssuranceTargetStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssuranceTargetStatus(val *AssuranceTargetStatus) *NullableAssuranceTargetStatus {
	return &NullableAssuranceTargetStatus{value: val, isSet: true}
}

func (v NullableAssuranceTargetStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssuranceTargetStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


