/*
coslaNrm

OAS 3.0.1 specification of the Cosla NRM Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CoslaNrm

import (
	"encoding/json"
	"fmt"
)

// ResourcesCoslaNrm - struct for ResourcesCoslaNrm
type ResourcesCoslaNrm struct {
	AssuranceClosedControlLoopSingle *AssuranceClosedControlLoopSingle
	AssuranceGoalSingle              *AssuranceGoalSingle
	AssuranceReportSingle            *AssuranceReportSingle
	ManagedElementSingle             *ManagedElementSingle
	MnS                              *MnS
	SubNetworkSingle                 *SubNetworkSingle
}

// AssuranceClosedControlLoopSingleAsResourcesCoslaNrm is a convenience function that returns AssuranceClosedControlLoopSingle wrapped in ResourcesCoslaNrm
func AssuranceClosedControlLoopSingleAsResourcesCoslaNrm(v *AssuranceClosedControlLoopSingle) ResourcesCoslaNrm {
	return ResourcesCoslaNrm{
		AssuranceClosedControlLoopSingle: v,
	}
}

// AssuranceGoalSingleAsResourcesCoslaNrm is a convenience function that returns AssuranceGoalSingle wrapped in ResourcesCoslaNrm
func AssuranceGoalSingleAsResourcesCoslaNrm(v *AssuranceGoalSingle) ResourcesCoslaNrm {
	return ResourcesCoslaNrm{
		AssuranceGoalSingle: v,
	}
}

// AssuranceReportSingleAsResourcesCoslaNrm is a convenience function that returns AssuranceReportSingle wrapped in ResourcesCoslaNrm
func AssuranceReportSingleAsResourcesCoslaNrm(v *AssuranceReportSingle) ResourcesCoslaNrm {
	return ResourcesCoslaNrm{
		AssuranceReportSingle: v,
	}
}

// ManagedElementSingleAsResourcesCoslaNrm is a convenience function that returns ManagedElementSingle wrapped in ResourcesCoslaNrm
func ManagedElementSingleAsResourcesCoslaNrm(v *ManagedElementSingle) ResourcesCoslaNrm {
	return ResourcesCoslaNrm{
		ManagedElementSingle: v,
	}
}

// MnSAsResourcesCoslaNrm is a convenience function that returns MnS wrapped in ResourcesCoslaNrm
func MnSAsResourcesCoslaNrm(v *MnS) ResourcesCoslaNrm {
	return ResourcesCoslaNrm{
		MnS: v,
	}
}

// SubNetworkSingleAsResourcesCoslaNrm is a convenience function that returns SubNetworkSingle wrapped in ResourcesCoslaNrm
func SubNetworkSingleAsResourcesCoslaNrm(v *SubNetworkSingle) ResourcesCoslaNrm {
	return ResourcesCoslaNrm{
		SubNetworkSingle: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResourcesCoslaNrm) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AssuranceClosedControlLoopSingle
	err = newStrictDecoder(data).Decode(&dst.AssuranceClosedControlLoopSingle)
	if err == nil {
		jsonAssuranceClosedControlLoopSingle, _ := json.Marshal(dst.AssuranceClosedControlLoopSingle)
		if string(jsonAssuranceClosedControlLoopSingle) == "{}" { // empty struct
			dst.AssuranceClosedControlLoopSingle = nil
		} else {
			match++
		}
	} else {
		dst.AssuranceClosedControlLoopSingle = nil
	}

	// try to unmarshal data into AssuranceGoalSingle
	err = newStrictDecoder(data).Decode(&dst.AssuranceGoalSingle)
	if err == nil {
		jsonAssuranceGoalSingle, _ := json.Marshal(dst.AssuranceGoalSingle)
		if string(jsonAssuranceGoalSingle) == "{}" { // empty struct
			dst.AssuranceGoalSingle = nil
		} else {
			match++
		}
	} else {
		dst.AssuranceGoalSingle = nil
	}

	// try to unmarshal data into AssuranceReportSingle
	err = newStrictDecoder(data).Decode(&dst.AssuranceReportSingle)
	if err == nil {
		jsonAssuranceReportSingle, _ := json.Marshal(dst.AssuranceReportSingle)
		if string(jsonAssuranceReportSingle) == "{}" { // empty struct
			dst.AssuranceReportSingle = nil
		} else {
			match++
		}
	} else {
		dst.AssuranceReportSingle = nil
	}

	// try to unmarshal data into ManagedElementSingle
	err = newStrictDecoder(data).Decode(&dst.ManagedElementSingle)
	if err == nil {
		jsonManagedElementSingle, _ := json.Marshal(dst.ManagedElementSingle)
		if string(jsonManagedElementSingle) == "{}" { // empty struct
			dst.ManagedElementSingle = nil
		} else {
			match++
		}
	} else {
		dst.ManagedElementSingle = nil
	}

	// try to unmarshal data into MnS
	err = newStrictDecoder(data).Decode(&dst.MnS)
	if err == nil {
		jsonMnS, _ := json.Marshal(dst.MnS)
		if string(jsonMnS) == "{}" { // empty struct
			dst.MnS = nil
		} else {
			match++
		}
	} else {
		dst.MnS = nil
	}

	// try to unmarshal data into SubNetworkSingle
	err = newStrictDecoder(data).Decode(&dst.SubNetworkSingle)
	if err == nil {
		jsonSubNetworkSingle, _ := json.Marshal(dst.SubNetworkSingle)
		if string(jsonSubNetworkSingle) == "{}" { // empty struct
			dst.SubNetworkSingle = nil
		} else {
			match++
		}
	} else {
		dst.SubNetworkSingle = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AssuranceClosedControlLoopSingle = nil
		dst.AssuranceGoalSingle = nil
		dst.AssuranceReportSingle = nil
		dst.ManagedElementSingle = nil
		dst.MnS = nil
		dst.SubNetworkSingle = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResourcesCoslaNrm)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResourcesCoslaNrm)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResourcesCoslaNrm) MarshalJSON() ([]byte, error) {
	if src.AssuranceClosedControlLoopSingle != nil {
		return json.Marshal(&src.AssuranceClosedControlLoopSingle)
	}

	if src.AssuranceGoalSingle != nil {
		return json.Marshal(&src.AssuranceGoalSingle)
	}

	if src.AssuranceReportSingle != nil {
		return json.Marshal(&src.AssuranceReportSingle)
	}

	if src.ManagedElementSingle != nil {
		return json.Marshal(&src.ManagedElementSingle)
	}

	if src.MnS != nil {
		return json.Marshal(&src.MnS)
	}

	if src.SubNetworkSingle != nil {
		return json.Marshal(&src.SubNetworkSingle)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResourcesCoslaNrm) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AssuranceClosedControlLoopSingle != nil {
		return obj.AssuranceClosedControlLoopSingle
	}

	if obj.AssuranceGoalSingle != nil {
		return obj.AssuranceGoalSingle
	}

	if obj.AssuranceReportSingle != nil {
		return obj.AssuranceReportSingle
	}

	if obj.ManagedElementSingle != nil {
		return obj.ManagedElementSingle
	}

	if obj.MnS != nil {
		return obj.MnS
	}

	if obj.SubNetworkSingle != nil {
		return obj.SubNetworkSingle
	}

	// all schemas are nil
	return nil
}

type NullableResourcesCoslaNrm struct {
	value *ResourcesCoslaNrm
	isSet bool
}

func (v NullableResourcesCoslaNrm) Get() *ResourcesCoslaNrm {
	return v.value
}

func (v *NullableResourcesCoslaNrm) Set(val *ResourcesCoslaNrm) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesCoslaNrm) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesCoslaNrm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesCoslaNrm(val *ResourcesCoslaNrm) *NullableResourcesCoslaNrm {
	return &NullableResourcesCoslaNrm{value: val, isSet: true}
}

func (v NullableResourcesCoslaNrm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesCoslaNrm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
