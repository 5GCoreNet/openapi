/*
coslaNrm

OAS 3.0.1 specification of the Cosla NRM Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CoslaNrm

import (
	"encoding/json"
	"fmt"
)

// AssuranceGoalStatusObserved the model 'AssuranceGoalStatusObserved'
type AssuranceGoalStatusObserved string

// List of AssuranceGoalStatusObserved
const (
	FULFILLED AssuranceGoalStatusObserved = "FULFILLED"
	NOT_FULFILLED AssuranceGoalStatusObserved = "NOT_FULFILLED"
)

// All allowed values of AssuranceGoalStatusObserved enum
var AllowedAssuranceGoalStatusObservedEnumValues = []AssuranceGoalStatusObserved{
	"FULFILLED",
	"NOT_FULFILLED",
}

func (v *AssuranceGoalStatusObserved) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssuranceGoalStatusObserved(value)
	for _, existing := range AllowedAssuranceGoalStatusObservedEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssuranceGoalStatusObserved", value)
}

// NewAssuranceGoalStatusObservedFromValue returns a pointer to a valid AssuranceGoalStatusObserved
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssuranceGoalStatusObservedFromValue(v string) (*AssuranceGoalStatusObserved, error) {
	ev := AssuranceGoalStatusObserved(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssuranceGoalStatusObserved: valid values are %v", v, AllowedAssuranceGoalStatusObservedEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssuranceGoalStatusObserved) IsValid() bool {
	for _, existing := range AllowedAssuranceGoalStatusObservedEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssuranceGoalStatusObserved value
func (v AssuranceGoalStatusObserved) Ptr() *AssuranceGoalStatusObserved {
	return &v
}

type NullableAssuranceGoalStatusObserved struct {
	value *AssuranceGoalStatusObserved
	isSet bool
}

func (v NullableAssuranceGoalStatusObserved) Get() *AssuranceGoalStatusObserved {
	return v.value
}

func (v *NullableAssuranceGoalStatusObserved) Set(val *AssuranceGoalStatusObserved) {
	v.value = val
	v.isSet = true
}

func (v NullableAssuranceGoalStatusObserved) IsSet() bool {
	return v.isSet
}

func (v *NullableAssuranceGoalStatusObserved) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssuranceGoalStatusObserved(val *AssuranceGoalStatusObserved) *NullableAssuranceGoalStatusObserved {
	return &NullableAssuranceGoalStatusObserved{value: val, isSet: true}
}

func (v NullableAssuranceGoalStatusObserved) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssuranceGoalStatusObserved) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

