/*
coslaNrm

OAS 3.0.1 specification of the Cosla NRM Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_CoslaNrm

import (
	"encoding/json"
	"fmt"
)

// AssuranceTargetStatusObserved the model 'AssuranceTargetStatusObserved'
type AssuranceTargetStatusObserved string

// List of AssuranceTargetStatusObserved
const (
	FULFILLED     AssuranceTargetStatusObserved = "FULFILLED"
	NOT_FULFILLED AssuranceTargetStatusObserved = "NOT_FULFILLED"
)

// All allowed values of AssuranceTargetStatusObserved enum
var AllowedAssuranceTargetStatusObservedEnumValues = []AssuranceTargetStatusObserved{
	"FULFILLED",
	"NOT_FULFILLED",
}

func (v *AssuranceTargetStatusObserved) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssuranceTargetStatusObserved(value)
	for _, existing := range AllowedAssuranceTargetStatusObservedEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssuranceTargetStatusObserved", value)
}

// NewAssuranceTargetStatusObservedFromValue returns a pointer to a valid AssuranceTargetStatusObserved
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssuranceTargetStatusObservedFromValue(v string) (*AssuranceTargetStatusObserved, error) {
	ev := AssuranceTargetStatusObserved(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssuranceTargetStatusObserved: valid values are %v", v, AllowedAssuranceTargetStatusObservedEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssuranceTargetStatusObserved) IsValid() bool {
	for _, existing := range AllowedAssuranceTargetStatusObservedEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssuranceTargetStatusObserved value
func (v AssuranceTargetStatusObserved) Ptr() *AssuranceTargetStatusObserved {
	return &v
}

type NullableAssuranceTargetStatusObserved struct {
	value *AssuranceTargetStatusObserved
	isSet bool
}

func (v NullableAssuranceTargetStatusObserved) Get() *AssuranceTargetStatusObserved {
	return v.value
}

func (v *NullableAssuranceTargetStatusObserved) Set(val *AssuranceTargetStatusObserved) {
	v.value = val
	v.isSet = true
}

func (v NullableAssuranceTargetStatusObserved) IsSet() bool {
	return v.isSet
}

func (v *NullableAssuranceTargetStatusObserved) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssuranceTargetStatusObserved(val *AssuranceTargetStatusObserved) *NullableAssuranceTargetStatusObserved {
	return &NullableAssuranceTargetStatusObserved{value: val, isSet: true}
}

func (v NullableAssuranceTargetStatusObserved) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssuranceTargetStatusObserved) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
