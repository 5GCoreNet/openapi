/*
TS 28.532 Performance Threshold Monitoring MnS

OAS 3.0.1 definition of the Performance Threshold Monitoring MnS Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_PerfMnS

import (
	"encoding/json"
	"fmt"
)

// PerfMetricDirection the model 'PerfMetricDirection'
type PerfMetricDirection string

// List of PerfMetricDirection
const (
	UP PerfMetricDirection = "UP"
	DOWN PerfMetricDirection = "DOWN"
)

// All allowed values of PerfMetricDirection enum
var AllowedPerfMetricDirectionEnumValues = []PerfMetricDirection{
	"UP",
	"DOWN",
}

func (v *PerfMetricDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PerfMetricDirection(value)
	for _, existing := range AllowedPerfMetricDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PerfMetricDirection", value)
}

// NewPerfMetricDirectionFromValue returns a pointer to a valid PerfMetricDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPerfMetricDirectionFromValue(v string) (*PerfMetricDirection, error) {
	ev := PerfMetricDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PerfMetricDirection: valid values are %v", v, AllowedPerfMetricDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PerfMetricDirection) IsValid() bool {
	for _, existing := range AllowedPerfMetricDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PerfMetricDirection value
func (v PerfMetricDirection) Ptr() *PerfMetricDirection {
	return &v
}

type NullablePerfMetricDirection struct {
	value *PerfMetricDirection
	isSet bool
}

func (v NullablePerfMetricDirection) Get() *PerfMetricDirection {
	return v.value
}

func (v *NullablePerfMetricDirection) Set(val *PerfMetricDirection) {
	v.value = val
	v.isSet = true
}

func (v NullablePerfMetricDirection) IsSet() bool {
	return v.isSet
}

func (v *NullablePerfMetricDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerfMetricDirection(val *PerfMetricDirection) *NullablePerfMetricDirection {
	return &NullablePerfMetricDirection{value: val, isSet: true}
}

func (v NullablePerfMetricDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerfMetricDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

