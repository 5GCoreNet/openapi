/*
Nucmf_UECapabilityManagement

Nucmf_UECapabilityManagement Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nucmf_UERCM

import (
	"encoding/json"
)

// checks if the DicEntryCreateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DicEntryCreateData{}

// DicEntryCreateData Data for a creating a dictionary entry request
type DicEntryCreateData struct {
	// Type Allocation Code (TAC) of the UE, comprising the initial eight-digit portion of the 15-digit IMEI and 16-digit IMEISV codes. See clause 6.2 of 3GPP TS 23.003.
	TypeAllocationCode   string           `json:"typeAllocationCode"`
	UeRadioCapability5GS *RefToBinaryData `json:"ueRadioCapability5GS,omitempty"`
	UeRadioCapabilityEPS *RefToBinaryData `json:"ueRadioCapabilityEPS,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SupportedFeatures      *string          `json:"supportedFeatures,omitempty"`
	UeRadioCap5GSForPaging *RefToBinaryData `json:"ueRadioCap5GSForPaging,omitempty"`
	UeRadioCapEPSForPaging *RefToBinaryData `json:"ueRadioCapEPSForPaging,omitempty"`
}

// NewDicEntryCreateData instantiates a new DicEntryCreateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDicEntryCreateData(typeAllocationCode string) *DicEntryCreateData {
	this := DicEntryCreateData{}
	this.TypeAllocationCode = typeAllocationCode
	return &this
}

// NewDicEntryCreateDataWithDefaults instantiates a new DicEntryCreateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDicEntryCreateDataWithDefaults() *DicEntryCreateData {
	this := DicEntryCreateData{}
	return &this
}

// GetTypeAllocationCode returns the TypeAllocationCode field value
func (o *DicEntryCreateData) GetTypeAllocationCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeAllocationCode
}

// GetTypeAllocationCodeOk returns a tuple with the TypeAllocationCode field value
// and a boolean to check if the value has been set.
func (o *DicEntryCreateData) GetTypeAllocationCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeAllocationCode, true
}

// SetTypeAllocationCode sets field value
func (o *DicEntryCreateData) SetTypeAllocationCode(v string) {
	o.TypeAllocationCode = v
}

// GetUeRadioCapability5GS returns the UeRadioCapability5GS field value if set, zero value otherwise.
func (o *DicEntryCreateData) GetUeRadioCapability5GS() RefToBinaryData {
	if o == nil || IsNil(o.UeRadioCapability5GS) {
		var ret RefToBinaryData
		return ret
	}
	return *o.UeRadioCapability5GS
}

// GetUeRadioCapability5GSOk returns a tuple with the UeRadioCapability5GS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryCreateData) GetUeRadioCapability5GSOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.UeRadioCapability5GS) {
		return nil, false
	}
	return o.UeRadioCapability5GS, true
}

// HasUeRadioCapability5GS returns a boolean if a field has been set.
func (o *DicEntryCreateData) HasUeRadioCapability5GS() bool {
	if o != nil && !IsNil(o.UeRadioCapability5GS) {
		return true
	}

	return false
}

// SetUeRadioCapability5GS gets a reference to the given RefToBinaryData and assigns it to the UeRadioCapability5GS field.
func (o *DicEntryCreateData) SetUeRadioCapability5GS(v RefToBinaryData) {
	o.UeRadioCapability5GS = &v
}

// GetUeRadioCapabilityEPS returns the UeRadioCapabilityEPS field value if set, zero value otherwise.
func (o *DicEntryCreateData) GetUeRadioCapabilityEPS() RefToBinaryData {
	if o == nil || IsNil(o.UeRadioCapabilityEPS) {
		var ret RefToBinaryData
		return ret
	}
	return *o.UeRadioCapabilityEPS
}

// GetUeRadioCapabilityEPSOk returns a tuple with the UeRadioCapabilityEPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryCreateData) GetUeRadioCapabilityEPSOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.UeRadioCapabilityEPS) {
		return nil, false
	}
	return o.UeRadioCapabilityEPS, true
}

// HasUeRadioCapabilityEPS returns a boolean if a field has been set.
func (o *DicEntryCreateData) HasUeRadioCapabilityEPS() bool {
	if o != nil && !IsNil(o.UeRadioCapabilityEPS) {
		return true
	}

	return false
}

// SetUeRadioCapabilityEPS gets a reference to the given RefToBinaryData and assigns it to the UeRadioCapabilityEPS field.
func (o *DicEntryCreateData) SetUeRadioCapabilityEPS(v RefToBinaryData) {
	o.UeRadioCapabilityEPS = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *DicEntryCreateData) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryCreateData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *DicEntryCreateData) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *DicEntryCreateData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetUeRadioCap5GSForPaging returns the UeRadioCap5GSForPaging field value if set, zero value otherwise.
func (o *DicEntryCreateData) GetUeRadioCap5GSForPaging() RefToBinaryData {
	if o == nil || IsNil(o.UeRadioCap5GSForPaging) {
		var ret RefToBinaryData
		return ret
	}
	return *o.UeRadioCap5GSForPaging
}

// GetUeRadioCap5GSForPagingOk returns a tuple with the UeRadioCap5GSForPaging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryCreateData) GetUeRadioCap5GSForPagingOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.UeRadioCap5GSForPaging) {
		return nil, false
	}
	return o.UeRadioCap5GSForPaging, true
}

// HasUeRadioCap5GSForPaging returns a boolean if a field has been set.
func (o *DicEntryCreateData) HasUeRadioCap5GSForPaging() bool {
	if o != nil && !IsNil(o.UeRadioCap5GSForPaging) {
		return true
	}

	return false
}

// SetUeRadioCap5GSForPaging gets a reference to the given RefToBinaryData and assigns it to the UeRadioCap5GSForPaging field.
func (o *DicEntryCreateData) SetUeRadioCap5GSForPaging(v RefToBinaryData) {
	o.UeRadioCap5GSForPaging = &v
}

// GetUeRadioCapEPSForPaging returns the UeRadioCapEPSForPaging field value if set, zero value otherwise.
func (o *DicEntryCreateData) GetUeRadioCapEPSForPaging() RefToBinaryData {
	if o == nil || IsNil(o.UeRadioCapEPSForPaging) {
		var ret RefToBinaryData
		return ret
	}
	return *o.UeRadioCapEPSForPaging
}

// GetUeRadioCapEPSForPagingOk returns a tuple with the UeRadioCapEPSForPaging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryCreateData) GetUeRadioCapEPSForPagingOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.UeRadioCapEPSForPaging) {
		return nil, false
	}
	return o.UeRadioCapEPSForPaging, true
}

// HasUeRadioCapEPSForPaging returns a boolean if a field has been set.
func (o *DicEntryCreateData) HasUeRadioCapEPSForPaging() bool {
	if o != nil && !IsNil(o.UeRadioCapEPSForPaging) {
		return true
	}

	return false
}

// SetUeRadioCapEPSForPaging gets a reference to the given RefToBinaryData and assigns it to the UeRadioCapEPSForPaging field.
func (o *DicEntryCreateData) SetUeRadioCapEPSForPaging(v RefToBinaryData) {
	o.UeRadioCapEPSForPaging = &v
}

func (o DicEntryCreateData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DicEntryCreateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["typeAllocationCode"] = o.TypeAllocationCode
	if !IsNil(o.UeRadioCapability5GS) {
		toSerialize["ueRadioCapability5GS"] = o.UeRadioCapability5GS
	}
	if !IsNil(o.UeRadioCapabilityEPS) {
		toSerialize["ueRadioCapabilityEPS"] = o.UeRadioCapabilityEPS
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !IsNil(o.UeRadioCap5GSForPaging) {
		toSerialize["ueRadioCap5GSForPaging"] = o.UeRadioCap5GSForPaging
	}
	if !IsNil(o.UeRadioCapEPSForPaging) {
		toSerialize["ueRadioCapEPSForPaging"] = o.UeRadioCapEPSForPaging
	}
	return toSerialize, nil
}

type NullableDicEntryCreateData struct {
	value *DicEntryCreateData
	isSet bool
}

func (v NullableDicEntryCreateData) Get() *DicEntryCreateData {
	return v.value
}

func (v *NullableDicEntryCreateData) Set(val *DicEntryCreateData) {
	v.value = val
	v.isSet = true
}

func (v NullableDicEntryCreateData) IsSet() bool {
	return v.isSet
}

func (v *NullableDicEntryCreateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDicEntryCreateData(val *DicEntryCreateData) *NullableDicEntryCreateData {
	return &NullableDicEntryCreateData{value: val, isSet: true}
}

func (v NullableDicEntryCreateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDicEntryCreateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
