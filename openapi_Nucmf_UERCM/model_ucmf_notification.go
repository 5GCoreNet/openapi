/*
Nucmf_UECapabilityManagement

Nucmf_UECapabilityManagement Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nucmf_UERCM

import (
	"encoding/json"
)

// checks if the UcmfNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UcmfNotification{}

// UcmfNotification Data for a notification request from a UCMF
type UcmfNotification struct {
	DicEntryId          int32                `json:"dicEntryId"`
	EventType           EventType            `json:"eventType"`
	ManAssOpRequestlist *ManAssOpRequestlist `json:"manAssOpRequestlist,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	VersionId *int32 `json:"versionId,omitempty"`
}

// NewUcmfNotification instantiates a new UcmfNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUcmfNotification(dicEntryId int32, eventType EventType) *UcmfNotification {
	this := UcmfNotification{}
	this.DicEntryId = dicEntryId
	this.EventType = eventType
	return &this
}

// NewUcmfNotificationWithDefaults instantiates a new UcmfNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUcmfNotificationWithDefaults() *UcmfNotification {
	this := UcmfNotification{}
	return &this
}

// GetDicEntryId returns the DicEntryId field value
func (o *UcmfNotification) GetDicEntryId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DicEntryId
}

// GetDicEntryIdOk returns a tuple with the DicEntryId field value
// and a boolean to check if the value has been set.
func (o *UcmfNotification) GetDicEntryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DicEntryId, true
}

// SetDicEntryId sets field value
func (o *UcmfNotification) SetDicEntryId(v int32) {
	o.DicEntryId = v
}

// GetEventType returns the EventType field value
func (o *UcmfNotification) GetEventType() EventType {
	if o == nil {
		var ret EventType
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *UcmfNotification) GetEventTypeOk() (*EventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *UcmfNotification) SetEventType(v EventType) {
	o.EventType = v
}

// GetManAssOpRequestlist returns the ManAssOpRequestlist field value if set, zero value otherwise.
func (o *UcmfNotification) GetManAssOpRequestlist() ManAssOpRequestlist {
	if o == nil || IsNil(o.ManAssOpRequestlist) {
		var ret ManAssOpRequestlist
		return ret
	}
	return *o.ManAssOpRequestlist
}

// GetManAssOpRequestlistOk returns a tuple with the ManAssOpRequestlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UcmfNotification) GetManAssOpRequestlistOk() (*ManAssOpRequestlist, bool) {
	if o == nil || IsNil(o.ManAssOpRequestlist) {
		return nil, false
	}
	return o.ManAssOpRequestlist, true
}

// HasManAssOpRequestlist returns a boolean if a field has been set.
func (o *UcmfNotification) HasManAssOpRequestlist() bool {
	if o != nil && !IsNil(o.ManAssOpRequestlist) {
		return true
	}

	return false
}

// SetManAssOpRequestlist gets a reference to the given ManAssOpRequestlist and assigns it to the ManAssOpRequestlist field.
func (o *UcmfNotification) SetManAssOpRequestlist(v ManAssOpRequestlist) {
	o.ManAssOpRequestlist = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *UcmfNotification) GetVersionId() int32 {
	if o == nil || IsNil(o.VersionId) {
		var ret int32
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UcmfNotification) GetVersionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VersionId) {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *UcmfNotification) HasVersionId() bool {
	if o != nil && !IsNil(o.VersionId) {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given int32 and assigns it to the VersionId field.
func (o *UcmfNotification) SetVersionId(v int32) {
	o.VersionId = &v
}

func (o UcmfNotification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UcmfNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dicEntryId"] = o.DicEntryId
	toSerialize["eventType"] = o.EventType
	if !IsNil(o.ManAssOpRequestlist) {
		toSerialize["manAssOpRequestlist"] = o.ManAssOpRequestlist
	}
	if !IsNil(o.VersionId) {
		toSerialize["versionId"] = o.VersionId
	}
	return toSerialize, nil
}

type NullableUcmfNotification struct {
	value *UcmfNotification
	isSet bool
}

func (v NullableUcmfNotification) Get() *UcmfNotification {
	return v.value
}

func (v *NullableUcmfNotification) Set(val *UcmfNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableUcmfNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableUcmfNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUcmfNotification(val *UcmfNotification) *NullableUcmfNotification {
	return &NullableUcmfNotification{value: val, isSet: true}
}

func (v NullableUcmfNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUcmfNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
