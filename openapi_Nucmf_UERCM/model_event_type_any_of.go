/*
Nucmf_UECapabilityManagement

Nucmf_UECapabilityManagement Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nucmf_UERCM

import (
	"encoding/json"
	"fmt"
)

// EventTypeAnyOf the model 'EventTypeAnyOf'
type EventTypeAnyOf string

// List of EventType_anyOf
const (
	CREATION_OF_DICTIONARY_ENTRY EventTypeAnyOf = "CREATION_OF_DICTIONARY_ENTRY"
	DELETION_OF_PLMN_ASSIGNED_IDS EventTypeAnyOf = "DELETION_OF_PLMN_ASSIGNED_IDS"
	NEW_VERSION_ID_OF_PLMN_ASSIGNED_IDS EventTypeAnyOf = "NEW_VERSION_ID_OF_PLMN_ASSIGNED_IDs"
)

// All allowed values of EventTypeAnyOf enum
var AllowedEventTypeAnyOfEnumValues = []EventTypeAnyOf{
	"CREATION_OF_DICTIONARY_ENTRY",
	"DELETION_OF_PLMN_ASSIGNED_IDS",
	"NEW_VERSION_ID_OF_PLMN_ASSIGNED_IDs",
}

func (v *EventTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventTypeAnyOf(value)
	for _, existing := range AllowedEventTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventTypeAnyOf", value)
}

// NewEventTypeAnyOfFromValue returns a pointer to a valid EventTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventTypeAnyOfFromValue(v string) (*EventTypeAnyOf, error) {
	ev := EventTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventTypeAnyOf: valid values are %v", v, AllowedEventTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedEventTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventType_anyOf value
func (v EventTypeAnyOf) Ptr() *EventTypeAnyOf {
	return &v
}

type NullableEventTypeAnyOf struct {
	value *EventTypeAnyOf
	isSet bool
}

func (v NullableEventTypeAnyOf) Get() *EventTypeAnyOf {
	return v.value
}

func (v *NullableEventTypeAnyOf) Set(val *EventTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeAnyOf(val *EventTypeAnyOf) *NullableEventTypeAnyOf {
	return &NullableEventTypeAnyOf{value: val, isSet: true}
}

func (v NullableEventTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

