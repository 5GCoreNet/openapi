/*
3gpp-akma

API for Naanf_AKMA.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Naanf_AKMA

import (
	"encoding/json"
)

// checks if the AkmaKeyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AkmaKeyInfo{}

// AkmaKeyInfo Represents AKMA related key material.
type AkmaKeyInfo struct {
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SuppFeat *string `json:"suppFeat,omitempty"`
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.
	Supi string `json:"supi"`
	// Represents an AKMA Key Identifier.
	AKId  string `json:"aKId"`
	KAkma string `json:"kAkma"`
}

// NewAkmaKeyInfo instantiates a new AkmaKeyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAkmaKeyInfo(supi string, aKId string, kAkma string) *AkmaKeyInfo {
	this := AkmaKeyInfo{}
	this.Supi = supi
	this.AKId = aKId
	this.KAkma = kAkma
	return &this
}

// NewAkmaKeyInfoWithDefaults instantiates a new AkmaKeyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAkmaKeyInfoWithDefaults() *AkmaKeyInfo {
	this := AkmaKeyInfo{}
	return &this
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *AkmaKeyInfo) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AkmaKeyInfo) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *AkmaKeyInfo) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *AkmaKeyInfo) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

// GetSupi returns the Supi field value
func (o *AkmaKeyInfo) GetSupi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Supi
}

// GetSupiOk returns a tuple with the Supi field value
// and a boolean to check if the value has been set.
func (o *AkmaKeyInfo) GetSupiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supi, true
}

// SetSupi sets field value
func (o *AkmaKeyInfo) SetSupi(v string) {
	o.Supi = v
}

// GetAKId returns the AKId field value
func (o *AkmaKeyInfo) GetAKId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AKId
}

// GetAKIdOk returns a tuple with the AKId field value
// and a boolean to check if the value has been set.
func (o *AkmaKeyInfo) GetAKIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AKId, true
}

// SetAKId sets field value
func (o *AkmaKeyInfo) SetAKId(v string) {
	o.AKId = v
}

// GetKAkma returns the KAkma field value
func (o *AkmaKeyInfo) GetKAkma() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KAkma
}

// GetKAkmaOk returns a tuple with the KAkma field value
// and a boolean to check if the value has been set.
func (o *AkmaKeyInfo) GetKAkmaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KAkma, true
}

// SetKAkma sets field value
func (o *AkmaKeyInfo) SetKAkma(v string) {
	o.KAkma = v
}

func (o AkmaKeyInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AkmaKeyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	toSerialize["supi"] = o.Supi
	toSerialize["aKId"] = o.AKId
	toSerialize["kAkma"] = o.KAkma
	return toSerialize, nil
}

type NullableAkmaKeyInfo struct {
	value *AkmaKeyInfo
	isSet bool
}

func (v NullableAkmaKeyInfo) Get() *AkmaKeyInfo {
	return v.value
}

func (v *NullableAkmaKeyInfo) Set(val *AkmaKeyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAkmaKeyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAkmaKeyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAkmaKeyInfo(val *AkmaKeyInfo) *NullableAkmaKeyInfo {
	return &NullableAkmaKeyInfo{value: val, isSet: true}
}

func (v NullableAkmaKeyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAkmaKeyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
