/*
Intent NRM

OAS 3.0.1 definition of the Intent NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_IntentNrm

import (
	"encoding/json"
	"fmt"
)

// ServiceSupportExpectationExpectationContextsInner - struct for ServiceSupportExpectationExpectationContextsInner
type ServiceSupportExpectationExpectationContextsInner struct {
	ExpectationContext *ExpectationContext
	ResourceSharingLevelContext *ResourceSharingLevelContext
	ServiceEndTimeContext *ServiceEndTimeContext
	ServiceStartTimeContext *ServiceStartTimeContext
	UEMobilityLevelContext *UEMobilityLevelContext
}

// ExpectationContextAsServiceSupportExpectationExpectationContextsInner is a convenience function that returns ExpectationContext wrapped in ServiceSupportExpectationExpectationContextsInner
func ExpectationContextAsServiceSupportExpectationExpectationContextsInner(v *ExpectationContext) ServiceSupportExpectationExpectationContextsInner {
	return ServiceSupportExpectationExpectationContextsInner{
		ExpectationContext: v,
	}
}

// ResourceSharingLevelContextAsServiceSupportExpectationExpectationContextsInner is a convenience function that returns ResourceSharingLevelContext wrapped in ServiceSupportExpectationExpectationContextsInner
func ResourceSharingLevelContextAsServiceSupportExpectationExpectationContextsInner(v *ResourceSharingLevelContext) ServiceSupportExpectationExpectationContextsInner {
	return ServiceSupportExpectationExpectationContextsInner{
		ResourceSharingLevelContext: v,
	}
}

// ServiceEndTimeContextAsServiceSupportExpectationExpectationContextsInner is a convenience function that returns ServiceEndTimeContext wrapped in ServiceSupportExpectationExpectationContextsInner
func ServiceEndTimeContextAsServiceSupportExpectationExpectationContextsInner(v *ServiceEndTimeContext) ServiceSupportExpectationExpectationContextsInner {
	return ServiceSupportExpectationExpectationContextsInner{
		ServiceEndTimeContext: v,
	}
}

// ServiceStartTimeContextAsServiceSupportExpectationExpectationContextsInner is a convenience function that returns ServiceStartTimeContext wrapped in ServiceSupportExpectationExpectationContextsInner
func ServiceStartTimeContextAsServiceSupportExpectationExpectationContextsInner(v *ServiceStartTimeContext) ServiceSupportExpectationExpectationContextsInner {
	return ServiceSupportExpectationExpectationContextsInner{
		ServiceStartTimeContext: v,
	}
}

// UEMobilityLevelContextAsServiceSupportExpectationExpectationContextsInner is a convenience function that returns UEMobilityLevelContext wrapped in ServiceSupportExpectationExpectationContextsInner
func UEMobilityLevelContextAsServiceSupportExpectationExpectationContextsInner(v *UEMobilityLevelContext) ServiceSupportExpectationExpectationContextsInner {
	return ServiceSupportExpectationExpectationContextsInner{
		UEMobilityLevelContext: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServiceSupportExpectationExpectationContextsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ExpectationContext
	err = newStrictDecoder(data).Decode(&dst.ExpectationContext)
	if err == nil {
		jsonExpectationContext, _ := json.Marshal(dst.ExpectationContext)
		if string(jsonExpectationContext) == "{}" { // empty struct
			dst.ExpectationContext = nil
		} else {
			match++
		}
	} else {
		dst.ExpectationContext = nil
	}

	// try to unmarshal data into ResourceSharingLevelContext
	err = newStrictDecoder(data).Decode(&dst.ResourceSharingLevelContext)
	if err == nil {
		jsonResourceSharingLevelContext, _ := json.Marshal(dst.ResourceSharingLevelContext)
		if string(jsonResourceSharingLevelContext) == "{}" { // empty struct
			dst.ResourceSharingLevelContext = nil
		} else {
			match++
		}
	} else {
		dst.ResourceSharingLevelContext = nil
	}

	// try to unmarshal data into ServiceEndTimeContext
	err = newStrictDecoder(data).Decode(&dst.ServiceEndTimeContext)
	if err == nil {
		jsonServiceEndTimeContext, _ := json.Marshal(dst.ServiceEndTimeContext)
		if string(jsonServiceEndTimeContext) == "{}" { // empty struct
			dst.ServiceEndTimeContext = nil
		} else {
			match++
		}
	} else {
		dst.ServiceEndTimeContext = nil
	}

	// try to unmarshal data into ServiceStartTimeContext
	err = newStrictDecoder(data).Decode(&dst.ServiceStartTimeContext)
	if err == nil {
		jsonServiceStartTimeContext, _ := json.Marshal(dst.ServiceStartTimeContext)
		if string(jsonServiceStartTimeContext) == "{}" { // empty struct
			dst.ServiceStartTimeContext = nil
		} else {
			match++
		}
	} else {
		dst.ServiceStartTimeContext = nil
	}

	// try to unmarshal data into UEMobilityLevelContext
	err = newStrictDecoder(data).Decode(&dst.UEMobilityLevelContext)
	if err == nil {
		jsonUEMobilityLevelContext, _ := json.Marshal(dst.UEMobilityLevelContext)
		if string(jsonUEMobilityLevelContext) == "{}" { // empty struct
			dst.UEMobilityLevelContext = nil
		} else {
			match++
		}
	} else {
		dst.UEMobilityLevelContext = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ExpectationContext = nil
		dst.ResourceSharingLevelContext = nil
		dst.ServiceEndTimeContext = nil
		dst.ServiceStartTimeContext = nil
		dst.UEMobilityLevelContext = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ServiceSupportExpectationExpectationContextsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ServiceSupportExpectationExpectationContextsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServiceSupportExpectationExpectationContextsInner) MarshalJSON() ([]byte, error) {
	if src.ExpectationContext != nil {
		return json.Marshal(&src.ExpectationContext)
	}

	if src.ResourceSharingLevelContext != nil {
		return json.Marshal(&src.ResourceSharingLevelContext)
	}

	if src.ServiceEndTimeContext != nil {
		return json.Marshal(&src.ServiceEndTimeContext)
	}

	if src.ServiceStartTimeContext != nil {
		return json.Marshal(&src.ServiceStartTimeContext)
	}

	if src.UEMobilityLevelContext != nil {
		return json.Marshal(&src.UEMobilityLevelContext)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServiceSupportExpectationExpectationContextsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ExpectationContext != nil {
		return obj.ExpectationContext
	}

	if obj.ResourceSharingLevelContext != nil {
		return obj.ResourceSharingLevelContext
	}

	if obj.ServiceEndTimeContext != nil {
		return obj.ServiceEndTimeContext
	}

	if obj.ServiceStartTimeContext != nil {
		return obj.ServiceStartTimeContext
	}

	if obj.UEMobilityLevelContext != nil {
		return obj.UEMobilityLevelContext
	}

	// all schemas are nil
	return nil
}

type NullableServiceSupportExpectationExpectationContextsInner struct {
	value *ServiceSupportExpectationExpectationContextsInner
	isSet bool
}

func (v NullableServiceSupportExpectationExpectationContextsInner) Get() *ServiceSupportExpectationExpectationContextsInner {
	return v.value
}

func (v *NullableServiceSupportExpectationExpectationContextsInner) Set(val *ServiceSupportExpectationExpectationContextsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceSupportExpectationExpectationContextsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceSupportExpectationExpectationContextsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceSupportExpectationExpectationContextsInner(val *ServiceSupportExpectationExpectationContextsInner) *NullableServiceSupportExpectationExpectationContextsInner {
	return &NullableServiceSupportExpectationExpectationContextsInner{value: val, isSet: true}
}

func (v NullableServiceSupportExpectationExpectationContextsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceSupportExpectationExpectationContextsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


