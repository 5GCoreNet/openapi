/*
Intent NRM

OAS 3.0.1 definition of the Intent NRM Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_IntentNrm

import (
	"encoding/json"
	"fmt"
)

// FulfilStatus the model 'FulfilStatus'
type FulfilStatus string

// List of FulfilStatus
const (
	FULFILLED     FulfilStatus = "FULFILLED"
	NOT_FULFILLED FulfilStatus = "NOT_FULFILLED"
)

// All allowed values of FulfilStatus enum
var AllowedFulfilStatusEnumValues = []FulfilStatus{
	"FULFILLED",
	"NOT_FULFILLED",
}

func (v *FulfilStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FulfilStatus(value)
	for _, existing := range AllowedFulfilStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FulfilStatus", value)
}

// NewFulfilStatusFromValue returns a pointer to a valid FulfilStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFulfilStatusFromValue(v string) (*FulfilStatus, error) {
	ev := FulfilStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FulfilStatus: valid values are %v", v, AllowedFulfilStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FulfilStatus) IsValid() bool {
	for _, existing := range AllowedFulfilStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FulfilStatus value
func (v FulfilStatus) Ptr() *FulfilStatus {
	return &v
}

type NullableFulfilStatus struct {
	value *FulfilStatus
	isSet bool
}

func (v NullableFulfilStatus) Get() *FulfilStatus {
	return v.value
}

func (v *NullableFulfilStatus) Set(val *FulfilStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFulfilStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFulfilStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFulfilStatus(val *FulfilStatus) *NullableFulfilStatus {
	return &NullableFulfilStatus{value: val, isSet: true}
}

func (v NullableFulfilStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFulfilStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
