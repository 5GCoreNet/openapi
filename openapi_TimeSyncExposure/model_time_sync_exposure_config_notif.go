/*
3gpp-time-sync-exposure

API for time synchronization exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_TimeSyncExposure

import (
	"encoding/json"
)

// checks if the TimeSyncExposureConfigNotif type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeSyncExposureConfigNotif{}

// TimeSyncExposureConfigNotif Contains the notification of time synchronization service state.
type TimeSyncExposureConfigNotif struct {
	// Notification Correlation ID assigned by the NF service consumer.
	ConfigNotifId string `json:"configNotifId"`
	StateOfConfig StateOfConfiguration `json:"stateOfConfig"`
}

// NewTimeSyncExposureConfigNotif instantiates a new TimeSyncExposureConfigNotif object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSyncExposureConfigNotif(configNotifId string, stateOfConfig StateOfConfiguration) *TimeSyncExposureConfigNotif {
	this := TimeSyncExposureConfigNotif{}
	this.ConfigNotifId = configNotifId
	this.StateOfConfig = stateOfConfig
	return &this
}

// NewTimeSyncExposureConfigNotifWithDefaults instantiates a new TimeSyncExposureConfigNotif object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSyncExposureConfigNotifWithDefaults() *TimeSyncExposureConfigNotif {
	this := TimeSyncExposureConfigNotif{}
	return &this
}

// GetConfigNotifId returns the ConfigNotifId field value
func (o *TimeSyncExposureConfigNotif) GetConfigNotifId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigNotifId
}

// GetConfigNotifIdOk returns a tuple with the ConfigNotifId field value
// and a boolean to check if the value has been set.
func (o *TimeSyncExposureConfigNotif) GetConfigNotifIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigNotifId, true
}

// SetConfigNotifId sets field value
func (o *TimeSyncExposureConfigNotif) SetConfigNotifId(v string) {
	o.ConfigNotifId = v
}

// GetStateOfConfig returns the StateOfConfig field value
func (o *TimeSyncExposureConfigNotif) GetStateOfConfig() StateOfConfiguration {
	if o == nil {
		var ret StateOfConfiguration
		return ret
	}

	return o.StateOfConfig
}

// GetStateOfConfigOk returns a tuple with the StateOfConfig field value
// and a boolean to check if the value has been set.
func (o *TimeSyncExposureConfigNotif) GetStateOfConfigOk() (*StateOfConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateOfConfig, true
}

// SetStateOfConfig sets field value
func (o *TimeSyncExposureConfigNotif) SetStateOfConfig(v StateOfConfiguration) {
	o.StateOfConfig = v
}

func (o TimeSyncExposureConfigNotif) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeSyncExposureConfigNotif) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configNotifId"] = o.ConfigNotifId
	toSerialize["stateOfConfig"] = o.StateOfConfig
	return toSerialize, nil
}

type NullableTimeSyncExposureConfigNotif struct {
	value *TimeSyncExposureConfigNotif
	isSet bool
}

func (v NullableTimeSyncExposureConfigNotif) Get() *TimeSyncExposureConfigNotif {
	return v.value
}

func (v *NullableTimeSyncExposureConfigNotif) Set(val *TimeSyncExposureConfigNotif) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSyncExposureConfigNotif) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSyncExposureConfigNotif) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSyncExposureConfigNotif(val *TimeSyncExposureConfigNotif) *NullableTimeSyncExposureConfigNotif {
	return &NullableTimeSyncExposureConfigNotif{value: val, isSet: true}
}

func (v NullableTimeSyncExposureConfigNotif) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSyncExposureConfigNotif) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


