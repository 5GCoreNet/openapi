/*
3gpp-time-sync-exposure

API for time synchronization exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_TimeSyncExposure

import (
	"encoding/json"
	"fmt"
)

// InstanceTypeAnyOf the model 'InstanceTypeAnyOf'
type InstanceTypeAnyOf string

// List of InstanceType_anyOf
const (
	BOUNDARY_CLOCK InstanceTypeAnyOf = "BOUNDARY_CLOCK"
	E2_E_TRANS_CLOCK InstanceTypeAnyOf = "E2E_TRANS_CLOCK"
	P2_P_TRANS_CLOCK InstanceTypeAnyOf = "P2P_TRANS_CLOCK"
	P2_P_RELAY_INSTANCE InstanceTypeAnyOf = "P2P_RELAY_INSTANCE"
)

// All allowed values of InstanceTypeAnyOf enum
var AllowedInstanceTypeAnyOfEnumValues = []InstanceTypeAnyOf{
	"BOUNDARY_CLOCK",
	"E2E_TRANS_CLOCK",
	"P2P_TRANS_CLOCK",
	"P2P_RELAY_INSTANCE",
}

func (v *InstanceTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstanceTypeAnyOf(value)
	for _, existing := range AllowedInstanceTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstanceTypeAnyOf", value)
}

// NewInstanceTypeAnyOfFromValue returns a pointer to a valid InstanceTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceTypeAnyOfFromValue(v string) (*InstanceTypeAnyOf, error) {
	ev := InstanceTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceTypeAnyOf: valid values are %v", v, AllowedInstanceTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedInstanceTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstanceType_anyOf value
func (v InstanceTypeAnyOf) Ptr() *InstanceTypeAnyOf {
	return &v
}

type NullableInstanceTypeAnyOf struct {
	value *InstanceTypeAnyOf
	isSet bool
}

func (v NullableInstanceTypeAnyOf) Get() *InstanceTypeAnyOf {
	return v.value
}

func (v *NullableInstanceTypeAnyOf) Set(val *InstanceTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeAnyOf(val *InstanceTypeAnyOf) *NullableInstanceTypeAnyOf {
	return &NullableInstanceTypeAnyOf{value: val, isSet: true}
}

func (v NullableInstanceTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

