/*
3gpp-time-sync-exposure

API for time synchronization exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_TimeSyncExposure

import (
	"encoding/json"
)

// checks if the TimeSyncExposureSubsNotif type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeSyncExposureSubsNotif{}

// TimeSyncExposureSubsNotif Contains the notification of time synchronization capability.
type TimeSyncExposureSubsNotif struct {
	// Notification Correlation ID assigned by the NF service consumer.
	SubsNotifId string                  `json:"subsNotifId"`
	EventNotifs []SubsEventNotification `json:"eventNotifs"`
}

// NewTimeSyncExposureSubsNotif instantiates a new TimeSyncExposureSubsNotif object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSyncExposureSubsNotif(subsNotifId string, eventNotifs []SubsEventNotification) *TimeSyncExposureSubsNotif {
	this := TimeSyncExposureSubsNotif{}
	this.SubsNotifId = subsNotifId
	this.EventNotifs = eventNotifs
	return &this
}

// NewTimeSyncExposureSubsNotifWithDefaults instantiates a new TimeSyncExposureSubsNotif object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSyncExposureSubsNotifWithDefaults() *TimeSyncExposureSubsNotif {
	this := TimeSyncExposureSubsNotif{}
	return &this
}

// GetSubsNotifId returns the SubsNotifId field value
func (o *TimeSyncExposureSubsNotif) GetSubsNotifId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubsNotifId
}

// GetSubsNotifIdOk returns a tuple with the SubsNotifId field value
// and a boolean to check if the value has been set.
func (o *TimeSyncExposureSubsNotif) GetSubsNotifIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubsNotifId, true
}

// SetSubsNotifId sets field value
func (o *TimeSyncExposureSubsNotif) SetSubsNotifId(v string) {
	o.SubsNotifId = v
}

// GetEventNotifs returns the EventNotifs field value
func (o *TimeSyncExposureSubsNotif) GetEventNotifs() []SubsEventNotification {
	if o == nil {
		var ret []SubsEventNotification
		return ret
	}

	return o.EventNotifs
}

// GetEventNotifsOk returns a tuple with the EventNotifs field value
// and a boolean to check if the value has been set.
func (o *TimeSyncExposureSubsNotif) GetEventNotifsOk() ([]SubsEventNotification, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventNotifs, true
}

// SetEventNotifs sets field value
func (o *TimeSyncExposureSubsNotif) SetEventNotifs(v []SubsEventNotification) {
	o.EventNotifs = v
}

func (o TimeSyncExposureSubsNotif) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeSyncExposureSubsNotif) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subsNotifId"] = o.SubsNotifId
	toSerialize["eventNotifs"] = o.EventNotifs
	return toSerialize, nil
}

type NullableTimeSyncExposureSubsNotif struct {
	value *TimeSyncExposureSubsNotif
	isSet bool
}

func (v NullableTimeSyncExposureSubsNotif) Get() *TimeSyncExposureSubsNotif {
	return v.value
}

func (v *NullableTimeSyncExposureSubsNotif) Set(val *TimeSyncExposureSubsNotif) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSyncExposureSubsNotif) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSyncExposureSubsNotif) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSyncExposureSubsNotif(val *TimeSyncExposureSubsNotif) *NullableTimeSyncExposureSubsNotif {
	return &NullableTimeSyncExposureSubsNotif{value: val, isSet: true}
}

func (v NullableTimeSyncExposureSubsNotif) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSyncExposureSubsNotif) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
