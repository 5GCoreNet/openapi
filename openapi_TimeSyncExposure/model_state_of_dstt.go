/*
3gpp-time-sync-exposure

API for time synchronization exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_TimeSyncExposure

import (
	"encoding/json"
)

// checks if the StateOfDstt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StateOfDstt{}

// StateOfDstt Contains the PTP port state of a DS-TT.
type StateOfDstt struct {
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	Gpsi string `json:"gpsi"`
	// When the PTP port state is Leader, Follower or Passive, it is included and set to true to indicate the state of configuration for DS-TT port is active; when PTP port state is in any other case, it is included and set to false to indicate the state of  configuration for DS port is inactive. Default value is false. 
	State bool `json:"state"`
}

// NewStateOfDstt instantiates a new StateOfDstt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateOfDstt(gpsi string, state bool) *StateOfDstt {
	this := StateOfDstt{}
	this.Gpsi = gpsi
	this.State = state
	return &this
}

// NewStateOfDsttWithDefaults instantiates a new StateOfDstt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateOfDsttWithDefaults() *StateOfDstt {
	this := StateOfDstt{}
	return &this
}

// GetGpsi returns the Gpsi field value
func (o *StateOfDstt) GetGpsi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gpsi
}

// GetGpsiOk returns a tuple with the Gpsi field value
// and a boolean to check if the value has been set.
func (o *StateOfDstt) GetGpsiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gpsi, true
}

// SetGpsi sets field value
func (o *StateOfDstt) SetGpsi(v string) {
	o.Gpsi = v
}

// GetState returns the State field value
func (o *StateOfDstt) GetState() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *StateOfDstt) GetStateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *StateOfDstt) SetState(v bool) {
	o.State = v
}

func (o StateOfDstt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StateOfDstt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gpsi"] = o.Gpsi
	toSerialize["state"] = o.State
	return toSerialize, nil
}

type NullableStateOfDstt struct {
	value *StateOfDstt
	isSet bool
}

func (v NullableStateOfDstt) Get() *StateOfDstt {
	return v.value
}

func (v *NullableStateOfDstt) Set(val *StateOfDstt) {
	v.value = val
	v.isSet = true
}

func (v NullableStateOfDstt) IsSet() bool {
	return v.isSet
}

func (v *NullableStateOfDstt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateOfDstt(val *StateOfDstt) *NullableStateOfDstt {
	return &NullableStateOfDstt{value: val, isSet: true}
}

func (v NullableStateOfDstt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateOfDstt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


