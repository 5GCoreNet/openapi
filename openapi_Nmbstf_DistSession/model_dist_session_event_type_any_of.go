/*
Nmbstf-distsession

MBSTF Distribution Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nmbstf_DistSession

import (
	"encoding/json"
	"fmt"
)

// DistSessionEventTypeAnyOf the model 'DistSessionEventTypeAnyOf'
type DistSessionEventTypeAnyOf string

// List of DistSessionEventType_anyOf
const (
	DATA_INGEST_FAILURE DistSessionEventTypeAnyOf = "DATA_INGEST_FAILURE"
	SESSION_DEACTIVATED DistSessionEventTypeAnyOf = "SESSION_DEACTIVATED"
	SESSION_ACTIVATED DistSessionEventTypeAnyOf = "SESSION_ACTIVATED"
)

// All allowed values of DistSessionEventTypeAnyOf enum
var AllowedDistSessionEventTypeAnyOfEnumValues = []DistSessionEventTypeAnyOf{
	"DATA_INGEST_FAILURE",
	"SESSION_DEACTIVATED",
	"SESSION_ACTIVATED",
}

func (v *DistSessionEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DistSessionEventTypeAnyOf(value)
	for _, existing := range AllowedDistSessionEventTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DistSessionEventTypeAnyOf", value)
}

// NewDistSessionEventTypeAnyOfFromValue returns a pointer to a valid DistSessionEventTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDistSessionEventTypeAnyOfFromValue(v string) (*DistSessionEventTypeAnyOf, error) {
	ev := DistSessionEventTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DistSessionEventTypeAnyOf: valid values are %v", v, AllowedDistSessionEventTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DistSessionEventTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedDistSessionEventTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DistSessionEventType_anyOf value
func (v DistSessionEventTypeAnyOf) Ptr() *DistSessionEventTypeAnyOf {
	return &v
}

type NullableDistSessionEventTypeAnyOf struct {
	value *DistSessionEventTypeAnyOf
	isSet bool
}

func (v NullableDistSessionEventTypeAnyOf) Get() *DistSessionEventTypeAnyOf {
	return v.value
}

func (v *NullableDistSessionEventTypeAnyOf) Set(val *DistSessionEventTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDistSessionEventTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDistSessionEventTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistSessionEventTypeAnyOf(val *DistSessionEventTypeAnyOf) *NullableDistSessionEventTypeAnyOf {
	return &NullableDistSessionEventTypeAnyOf{value: val, isSet: true}
}

func (v NullableDistSessionEventTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistSessionEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

