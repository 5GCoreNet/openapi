/*
Nmbstf-distsession

MBSTF Distribution Session Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nmbstf_DistSession

import (
	"encoding/json"
	"time"
)

// checks if the DistSessionSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DistSessionSubscription{}

// DistSessionSubscription Data within the Status Subscription
type DistSessionSubscription struct {
	NfcInstanceId *string `json:"nfcInstanceId,omitempty"`
	EventList []DistSessionEventType `json:"eventList"`
	NotifyUri string `json:"notifyUri"`
	NotifyCorrelationId *string `json:"notifyCorrelationId,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`
	DistSessionSubscUri *string `json:"distSessionSubscUri,omitempty"`
}

// NewDistSessionSubscription instantiates a new DistSessionSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDistSessionSubscription(eventList []DistSessionEventType, notifyUri string) *DistSessionSubscription {
	this := DistSessionSubscription{}
	this.EventList = eventList
	this.NotifyUri = notifyUri
	return &this
}

// NewDistSessionSubscriptionWithDefaults instantiates a new DistSessionSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDistSessionSubscriptionWithDefaults() *DistSessionSubscription {
	this := DistSessionSubscription{}
	return &this
}

// GetNfcInstanceId returns the NfcInstanceId field value if set, zero value otherwise.
func (o *DistSessionSubscription) GetNfcInstanceId() string {
	if o == nil || isNil(o.NfcInstanceId) {
		var ret string
		return ret
	}
	return *o.NfcInstanceId
}

// GetNfcInstanceIdOk returns a tuple with the NfcInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistSessionSubscription) GetNfcInstanceIdOk() (*string, bool) {
	if o == nil || isNil(o.NfcInstanceId) {
		return nil, false
	}
	return o.NfcInstanceId, true
}

// HasNfcInstanceId returns a boolean if a field has been set.
func (o *DistSessionSubscription) HasNfcInstanceId() bool {
	if o != nil && !isNil(o.NfcInstanceId) {
		return true
	}

	return false
}

// SetNfcInstanceId gets a reference to the given string and assigns it to the NfcInstanceId field.
func (o *DistSessionSubscription) SetNfcInstanceId(v string) {
	o.NfcInstanceId = &v
}

// GetEventList returns the EventList field value
func (o *DistSessionSubscription) GetEventList() []DistSessionEventType {
	if o == nil {
		var ret []DistSessionEventType
		return ret
	}

	return o.EventList
}

// GetEventListOk returns a tuple with the EventList field value
// and a boolean to check if the value has been set.
func (o *DistSessionSubscription) GetEventListOk() ([]DistSessionEventType, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventList, true
}

// SetEventList sets field value
func (o *DistSessionSubscription) SetEventList(v []DistSessionEventType) {
	o.EventList = v
}

// GetNotifyUri returns the NotifyUri field value
func (o *DistSessionSubscription) GetNotifyUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifyUri
}

// GetNotifyUriOk returns a tuple with the NotifyUri field value
// and a boolean to check if the value has been set.
func (o *DistSessionSubscription) GetNotifyUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyUri, true
}

// SetNotifyUri sets field value
func (o *DistSessionSubscription) SetNotifyUri(v string) {
	o.NotifyUri = v
}

// GetNotifyCorrelationId returns the NotifyCorrelationId field value if set, zero value otherwise.
func (o *DistSessionSubscription) GetNotifyCorrelationId() string {
	if o == nil || isNil(o.NotifyCorrelationId) {
		var ret string
		return ret
	}
	return *o.NotifyCorrelationId
}

// GetNotifyCorrelationIdOk returns a tuple with the NotifyCorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistSessionSubscription) GetNotifyCorrelationIdOk() (*string, bool) {
	if o == nil || isNil(o.NotifyCorrelationId) {
		return nil, false
	}
	return o.NotifyCorrelationId, true
}

// HasNotifyCorrelationId returns a boolean if a field has been set.
func (o *DistSessionSubscription) HasNotifyCorrelationId() bool {
	if o != nil && !isNil(o.NotifyCorrelationId) {
		return true
	}

	return false
}

// SetNotifyCorrelationId gets a reference to the given string and assigns it to the NotifyCorrelationId field.
func (o *DistSessionSubscription) SetNotifyCorrelationId(v string) {
	o.NotifyCorrelationId = &v
}

// GetExpiryTime returns the ExpiryTime field value if set, zero value otherwise.
func (o *DistSessionSubscription) GetExpiryTime() time.Time {
	if o == nil || isNil(o.ExpiryTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpiryTime
}

// GetExpiryTimeOk returns a tuple with the ExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistSessionSubscription) GetExpiryTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.ExpiryTime) {
		return nil, false
	}
	return o.ExpiryTime, true
}

// HasExpiryTime returns a boolean if a field has been set.
func (o *DistSessionSubscription) HasExpiryTime() bool {
	if o != nil && !isNil(o.ExpiryTime) {
		return true
	}

	return false
}

// SetExpiryTime gets a reference to the given time.Time and assigns it to the ExpiryTime field.
func (o *DistSessionSubscription) SetExpiryTime(v time.Time) {
	o.ExpiryTime = &v
}

// GetDistSessionSubscUri returns the DistSessionSubscUri field value if set, zero value otherwise.
func (o *DistSessionSubscription) GetDistSessionSubscUri() string {
	if o == nil || isNil(o.DistSessionSubscUri) {
		var ret string
		return ret
	}
	return *o.DistSessionSubscUri
}

// GetDistSessionSubscUriOk returns a tuple with the DistSessionSubscUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistSessionSubscription) GetDistSessionSubscUriOk() (*string, bool) {
	if o == nil || isNil(o.DistSessionSubscUri) {
		return nil, false
	}
	return o.DistSessionSubscUri, true
}

// HasDistSessionSubscUri returns a boolean if a field has been set.
func (o *DistSessionSubscription) HasDistSessionSubscUri() bool {
	if o != nil && !isNil(o.DistSessionSubscUri) {
		return true
	}

	return false
}

// SetDistSessionSubscUri gets a reference to the given string and assigns it to the DistSessionSubscUri field.
func (o *DistSessionSubscription) SetDistSessionSubscUri(v string) {
	o.DistSessionSubscUri = &v
}

func (o DistSessionSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DistSessionSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NfcInstanceId) {
		toSerialize["nfcInstanceId"] = o.NfcInstanceId
	}
	toSerialize["eventList"] = o.EventList
	toSerialize["notifyUri"] = o.NotifyUri
	if !isNil(o.NotifyCorrelationId) {
		toSerialize["notifyCorrelationId"] = o.NotifyCorrelationId
	}
	if !isNil(o.ExpiryTime) {
		toSerialize["expiryTime"] = o.ExpiryTime
	}
	if !isNil(o.DistSessionSubscUri) {
		toSerialize["distSessionSubscUri"] = o.DistSessionSubscUri
	}
	return toSerialize, nil
}

type NullableDistSessionSubscription struct {
	value *DistSessionSubscription
	isSet bool
}

func (v NullableDistSessionSubscription) Get() *DistSessionSubscription {
	return v.value
}

func (v *NullableDistSessionSubscription) Set(val *DistSessionSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableDistSessionSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableDistSessionSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistSessionSubscription(val *DistSessionSubscription) *NullableDistSessionSubscription {
	return &NullableDistSessionSubscription{value: val, isSet: true}
}

func (v NullableDistSessionSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistSessionSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


