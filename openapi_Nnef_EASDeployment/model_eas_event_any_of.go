/*
Nnef_EASDeployment

NEF EAS Deployment service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnef_EASDeployment

import (
	"encoding/json"
	"fmt"
)

// EasEventAnyOf the model 'EasEventAnyOf'
type EasEventAnyOf string

// List of EasEvent_anyOf
const (
	EAS_INFO_CHG EasEventAnyOf = "EAS_INFO_CHG"
)

// All allowed values of EasEventAnyOf enum
var AllowedEasEventAnyOfEnumValues = []EasEventAnyOf{
	"EAS_INFO_CHG",
}

func (v *EasEventAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EasEventAnyOf(value)
	for _, existing := range AllowedEasEventAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EasEventAnyOf", value)
}

// NewEasEventAnyOfFromValue returns a pointer to a valid EasEventAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEasEventAnyOfFromValue(v string) (*EasEventAnyOf, error) {
	ev := EasEventAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EasEventAnyOf: valid values are %v", v, AllowedEasEventAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EasEventAnyOf) IsValid() bool {
	for _, existing := range AllowedEasEventAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EasEvent_anyOf value
func (v EasEventAnyOf) Ptr() *EasEventAnyOf {
	return &v
}

type NullableEasEventAnyOf struct {
	value *EasEventAnyOf
	isSet bool
}

func (v NullableEasEventAnyOf) Get() *EasEventAnyOf {
	return v.value
}

func (v *NullableEasEventAnyOf) Set(val *EasEventAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEasEventAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEasEventAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEasEventAnyOf(val *EasEventAnyOf) *NullableEasEventAnyOf {
	return &NullableEasEventAnyOf{value: val, isSet: true}
}

func (v NullableEasEventAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEasEventAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

