/*
Nnef_SMContext

Nnef SMContext Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnef_SMContext

import (
	"encoding/json"
)

// checks if the SmallDataRateControl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmallDataRateControl{}

// SmallDataRateControl Configuration of Small Data Rate Control for the SM Context.
type SmallDataRateControl struct {
	TimeUnit SmallDataRateControlTimeUnit `json:"timeUnit"`
	MaxPacketRateUl *int32 `json:"maxPacketRateUl,omitempty"`
	MaxPacketRateDl *int32 `json:"maxPacketRateDl,omitempty"`
	MaxAdditionalPacketRateUl *int32 `json:"maxAdditionalPacketRateUl,omitempty"`
	MaxAdditionalPacketRateDl *int32 `json:"maxAdditionalPacketRateDl,omitempty"`
}

// NewSmallDataRateControl instantiates a new SmallDataRateControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmallDataRateControl(timeUnit SmallDataRateControlTimeUnit) *SmallDataRateControl {
	this := SmallDataRateControl{}
	this.TimeUnit = timeUnit
	return &this
}

// NewSmallDataRateControlWithDefaults instantiates a new SmallDataRateControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmallDataRateControlWithDefaults() *SmallDataRateControl {
	this := SmallDataRateControl{}
	return &this
}

// GetTimeUnit returns the TimeUnit field value
func (o *SmallDataRateControl) GetTimeUnit() SmallDataRateControlTimeUnit {
	if o == nil {
		var ret SmallDataRateControlTimeUnit
		return ret
	}

	return o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value
// and a boolean to check if the value has been set.
func (o *SmallDataRateControl) GetTimeUnitOk() (*SmallDataRateControlTimeUnit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeUnit, true
}

// SetTimeUnit sets field value
func (o *SmallDataRateControl) SetTimeUnit(v SmallDataRateControlTimeUnit) {
	o.TimeUnit = v
}

// GetMaxPacketRateUl returns the MaxPacketRateUl field value if set, zero value otherwise.
func (o *SmallDataRateControl) GetMaxPacketRateUl() int32 {
	if o == nil || IsNil(o.MaxPacketRateUl) {
		var ret int32
		return ret
	}
	return *o.MaxPacketRateUl
}

// GetMaxPacketRateUlOk returns a tuple with the MaxPacketRateUl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmallDataRateControl) GetMaxPacketRateUlOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxPacketRateUl) {
		return nil, false
	}
	return o.MaxPacketRateUl, true
}

// HasMaxPacketRateUl returns a boolean if a field has been set.
func (o *SmallDataRateControl) HasMaxPacketRateUl() bool {
	if o != nil && !IsNil(o.MaxPacketRateUl) {
		return true
	}

	return false
}

// SetMaxPacketRateUl gets a reference to the given int32 and assigns it to the MaxPacketRateUl field.
func (o *SmallDataRateControl) SetMaxPacketRateUl(v int32) {
	o.MaxPacketRateUl = &v
}

// GetMaxPacketRateDl returns the MaxPacketRateDl field value if set, zero value otherwise.
func (o *SmallDataRateControl) GetMaxPacketRateDl() int32 {
	if o == nil || IsNil(o.MaxPacketRateDl) {
		var ret int32
		return ret
	}
	return *o.MaxPacketRateDl
}

// GetMaxPacketRateDlOk returns a tuple with the MaxPacketRateDl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmallDataRateControl) GetMaxPacketRateDlOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxPacketRateDl) {
		return nil, false
	}
	return o.MaxPacketRateDl, true
}

// HasMaxPacketRateDl returns a boolean if a field has been set.
func (o *SmallDataRateControl) HasMaxPacketRateDl() bool {
	if o != nil && !IsNil(o.MaxPacketRateDl) {
		return true
	}

	return false
}

// SetMaxPacketRateDl gets a reference to the given int32 and assigns it to the MaxPacketRateDl field.
func (o *SmallDataRateControl) SetMaxPacketRateDl(v int32) {
	o.MaxPacketRateDl = &v
}

// GetMaxAdditionalPacketRateUl returns the MaxAdditionalPacketRateUl field value if set, zero value otherwise.
func (o *SmallDataRateControl) GetMaxAdditionalPacketRateUl() int32 {
	if o == nil || IsNil(o.MaxAdditionalPacketRateUl) {
		var ret int32
		return ret
	}
	return *o.MaxAdditionalPacketRateUl
}

// GetMaxAdditionalPacketRateUlOk returns a tuple with the MaxAdditionalPacketRateUl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmallDataRateControl) GetMaxAdditionalPacketRateUlOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAdditionalPacketRateUl) {
		return nil, false
	}
	return o.MaxAdditionalPacketRateUl, true
}

// HasMaxAdditionalPacketRateUl returns a boolean if a field has been set.
func (o *SmallDataRateControl) HasMaxAdditionalPacketRateUl() bool {
	if o != nil && !IsNil(o.MaxAdditionalPacketRateUl) {
		return true
	}

	return false
}

// SetMaxAdditionalPacketRateUl gets a reference to the given int32 and assigns it to the MaxAdditionalPacketRateUl field.
func (o *SmallDataRateControl) SetMaxAdditionalPacketRateUl(v int32) {
	o.MaxAdditionalPacketRateUl = &v
}

// GetMaxAdditionalPacketRateDl returns the MaxAdditionalPacketRateDl field value if set, zero value otherwise.
func (o *SmallDataRateControl) GetMaxAdditionalPacketRateDl() int32 {
	if o == nil || IsNil(o.MaxAdditionalPacketRateDl) {
		var ret int32
		return ret
	}
	return *o.MaxAdditionalPacketRateDl
}

// GetMaxAdditionalPacketRateDlOk returns a tuple with the MaxAdditionalPacketRateDl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmallDataRateControl) GetMaxAdditionalPacketRateDlOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAdditionalPacketRateDl) {
		return nil, false
	}
	return o.MaxAdditionalPacketRateDl, true
}

// HasMaxAdditionalPacketRateDl returns a boolean if a field has been set.
func (o *SmallDataRateControl) HasMaxAdditionalPacketRateDl() bool {
	if o != nil && !IsNil(o.MaxAdditionalPacketRateDl) {
		return true
	}

	return false
}

// SetMaxAdditionalPacketRateDl gets a reference to the given int32 and assigns it to the MaxAdditionalPacketRateDl field.
func (o *SmallDataRateControl) SetMaxAdditionalPacketRateDl(v int32) {
	o.MaxAdditionalPacketRateDl = &v
}

func (o SmallDataRateControl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmallDataRateControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timeUnit"] = o.TimeUnit
	if !IsNil(o.MaxPacketRateUl) {
		toSerialize["maxPacketRateUl"] = o.MaxPacketRateUl
	}
	if !IsNil(o.MaxPacketRateDl) {
		toSerialize["maxPacketRateDl"] = o.MaxPacketRateDl
	}
	if !IsNil(o.MaxAdditionalPacketRateUl) {
		toSerialize["maxAdditionalPacketRateUl"] = o.MaxAdditionalPacketRateUl
	}
	if !IsNil(o.MaxAdditionalPacketRateDl) {
		toSerialize["maxAdditionalPacketRateDl"] = o.MaxAdditionalPacketRateDl
	}
	return toSerialize, nil
}

type NullableSmallDataRateControl struct {
	value *SmallDataRateControl
	isSet bool
}

func (v NullableSmallDataRateControl) Get() *SmallDataRateControl {
	return v.value
}

func (v *NullableSmallDataRateControl) Set(val *SmallDataRateControl) {
	v.value = val
	v.isSet = true
}

func (v NullableSmallDataRateControl) IsSet() bool {
	return v.isSet
}

func (v *NullableSmallDataRateControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmallDataRateControl(val *SmallDataRateControl) *NullableSmallDataRateControl {
	return &NullableSmallDataRateControl{value: val, isSet: true}
}

func (v NullableSmallDataRateControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmallDataRateControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


