/*
Nnef_SMContext

Nnef SMContext Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnef_SMContext

import (
	"encoding/json"
	"fmt"
)

// ReleaseCauseAnyOf the model 'ReleaseCauseAnyOf'
type ReleaseCauseAnyOf string

// List of ReleaseCause_anyOf
const (
	PDU_SESSION_RELEASED ReleaseCauseAnyOf = "PDU_SESSION_RELEASED"
)

// All allowed values of ReleaseCauseAnyOf enum
var AllowedReleaseCauseAnyOfEnumValues = []ReleaseCauseAnyOf{
	"PDU_SESSION_RELEASED",
}

func (v *ReleaseCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReleaseCauseAnyOf(value)
	for _, existing := range AllowedReleaseCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReleaseCauseAnyOf", value)
}

// NewReleaseCauseAnyOfFromValue returns a pointer to a valid ReleaseCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReleaseCauseAnyOfFromValue(v string) (*ReleaseCauseAnyOf, error) {
	ev := ReleaseCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReleaseCauseAnyOf: valid values are %v", v, AllowedReleaseCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReleaseCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedReleaseCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReleaseCause_anyOf value
func (v ReleaseCauseAnyOf) Ptr() *ReleaseCauseAnyOf {
	return &v
}

type NullableReleaseCauseAnyOf struct {
	value *ReleaseCauseAnyOf
	isSet bool
}

func (v NullableReleaseCauseAnyOf) Get() *ReleaseCauseAnyOf {
	return v.value
}

func (v *NullableReleaseCauseAnyOf) Set(val *ReleaseCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseCauseAnyOf(val *ReleaseCauseAnyOf) *NullableReleaseCauseAnyOf {
	return &NullableReleaseCauseAnyOf{value: val, isSet: true}
}

func (v NullableReleaseCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

