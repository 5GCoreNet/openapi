/*
Nnef_SMContext

Nnef SMContext Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnef_SMContext

import (
	"encoding/json"
	"fmt"
)

// SmallDataRateControlTimeUnitAnyOf the model 'SmallDataRateControlTimeUnitAnyOf'
type SmallDataRateControlTimeUnitAnyOf string

// List of SmallDataRateControlTimeUnit_anyOf
const (
	MINUTE SmallDataRateControlTimeUnitAnyOf = "MINUTE"
	HOUR SmallDataRateControlTimeUnitAnyOf = "HOUR"
	DAY SmallDataRateControlTimeUnitAnyOf = "DAY"
	WEEK SmallDataRateControlTimeUnitAnyOf = "WEEK"
	_6_MINUTES SmallDataRateControlTimeUnitAnyOf = "6MINUTES"
)

// All allowed values of SmallDataRateControlTimeUnitAnyOf enum
var AllowedSmallDataRateControlTimeUnitAnyOfEnumValues = []SmallDataRateControlTimeUnitAnyOf{
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"6MINUTES",
}

func (v *SmallDataRateControlTimeUnitAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmallDataRateControlTimeUnitAnyOf(value)
	for _, existing := range AllowedSmallDataRateControlTimeUnitAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmallDataRateControlTimeUnitAnyOf", value)
}

// NewSmallDataRateControlTimeUnitAnyOfFromValue returns a pointer to a valid SmallDataRateControlTimeUnitAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmallDataRateControlTimeUnitAnyOfFromValue(v string) (*SmallDataRateControlTimeUnitAnyOf, error) {
	ev := SmallDataRateControlTimeUnitAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmallDataRateControlTimeUnitAnyOf: valid values are %v", v, AllowedSmallDataRateControlTimeUnitAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmallDataRateControlTimeUnitAnyOf) IsValid() bool {
	for _, existing := range AllowedSmallDataRateControlTimeUnitAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmallDataRateControlTimeUnit_anyOf value
func (v SmallDataRateControlTimeUnitAnyOf) Ptr() *SmallDataRateControlTimeUnitAnyOf {
	return &v
}

type NullableSmallDataRateControlTimeUnitAnyOf struct {
	value *SmallDataRateControlTimeUnitAnyOf
	isSet bool
}

func (v NullableSmallDataRateControlTimeUnitAnyOf) Get() *SmallDataRateControlTimeUnitAnyOf {
	return v.value
}

func (v *NullableSmallDataRateControlTimeUnitAnyOf) Set(val *SmallDataRateControlTimeUnitAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSmallDataRateControlTimeUnitAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSmallDataRateControlTimeUnitAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmallDataRateControlTimeUnitAnyOf(val *SmallDataRateControlTimeUnitAnyOf) *NullableSmallDataRateControlTimeUnitAnyOf {
	return &NullableSmallDataRateControlTimeUnitAnyOf{value: val, isSet: true}
}

func (v NullableSmallDataRateControlTimeUnitAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmallDataRateControlTimeUnitAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

