/*
Nnef_SMContext

Nnef SMContext Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnef_SMContext

import (
	"encoding/json"
)

// checks if the SmContextStatusNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmContextStatusNotification{}

// SmContextStatusNotification Representation of the SM Context status notification.
type SmContextStatusNotification struct {
	Status SmContextStatus `json:"status"`
	// String providing an URI formatted according to RFC 3986.
	SmContextId string `json:"smContextId"`
	Cause *ReleaseCause `json:"cause,omitempty"`
	SmallDataRateStatus *SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	ApnRateStatus *ApnRateStatus `json:"apnRateStatus,omitempty"`
}

// NewSmContextStatusNotification instantiates a new SmContextStatusNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmContextStatusNotification(status SmContextStatus, smContextId string) *SmContextStatusNotification {
	this := SmContextStatusNotification{}
	this.Status = status
	this.SmContextId = smContextId
	return &this
}

// NewSmContextStatusNotificationWithDefaults instantiates a new SmContextStatusNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmContextStatusNotificationWithDefaults() *SmContextStatusNotification {
	this := SmContextStatusNotification{}
	return &this
}

// GetStatus returns the Status field value
func (o *SmContextStatusNotification) GetStatus() SmContextStatus {
	if o == nil {
		var ret SmContextStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SmContextStatusNotification) GetStatusOk() (*SmContextStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SmContextStatusNotification) SetStatus(v SmContextStatus) {
	o.Status = v
}

// GetSmContextId returns the SmContextId field value
func (o *SmContextStatusNotification) GetSmContextId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmContextId
}

// GetSmContextIdOk returns a tuple with the SmContextId field value
// and a boolean to check if the value has been set.
func (o *SmContextStatusNotification) GetSmContextIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmContextId, true
}

// SetSmContextId sets field value
func (o *SmContextStatusNotification) SetSmContextId(v string) {
	o.SmContextId = v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *SmContextStatusNotification) GetCause() ReleaseCause {
	if o == nil || IsNil(o.Cause) {
		var ret ReleaseCause
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextStatusNotification) GetCauseOk() (*ReleaseCause, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *SmContextStatusNotification) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given ReleaseCause and assigns it to the Cause field.
func (o *SmContextStatusNotification) SetCause(v ReleaseCause) {
	o.Cause = &v
}

// GetSmallDataRateStatus returns the SmallDataRateStatus field value if set, zero value otherwise.
func (o *SmContextStatusNotification) GetSmallDataRateStatus() SmallDataRateStatus {
	if o == nil || IsNil(o.SmallDataRateStatus) {
		var ret SmallDataRateStatus
		return ret
	}
	return *o.SmallDataRateStatus
}

// GetSmallDataRateStatusOk returns a tuple with the SmallDataRateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextStatusNotification) GetSmallDataRateStatusOk() (*SmallDataRateStatus, bool) {
	if o == nil || IsNil(o.SmallDataRateStatus) {
		return nil, false
	}
	return o.SmallDataRateStatus, true
}

// HasSmallDataRateStatus returns a boolean if a field has been set.
func (o *SmContextStatusNotification) HasSmallDataRateStatus() bool {
	if o != nil && !IsNil(o.SmallDataRateStatus) {
		return true
	}

	return false
}

// SetSmallDataRateStatus gets a reference to the given SmallDataRateStatus and assigns it to the SmallDataRateStatus field.
func (o *SmContextStatusNotification) SetSmallDataRateStatus(v SmallDataRateStatus) {
	o.SmallDataRateStatus = &v
}

// GetApnRateStatus returns the ApnRateStatus field value if set, zero value otherwise.
func (o *SmContextStatusNotification) GetApnRateStatus() ApnRateStatus {
	if o == nil || IsNil(o.ApnRateStatus) {
		var ret ApnRateStatus
		return ret
	}
	return *o.ApnRateStatus
}

// GetApnRateStatusOk returns a tuple with the ApnRateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextStatusNotification) GetApnRateStatusOk() (*ApnRateStatus, bool) {
	if o == nil || IsNil(o.ApnRateStatus) {
		return nil, false
	}
	return o.ApnRateStatus, true
}

// HasApnRateStatus returns a boolean if a field has been set.
func (o *SmContextStatusNotification) HasApnRateStatus() bool {
	if o != nil && !IsNil(o.ApnRateStatus) {
		return true
	}

	return false
}

// SetApnRateStatus gets a reference to the given ApnRateStatus and assigns it to the ApnRateStatus field.
func (o *SmContextStatusNotification) SetApnRateStatus(v ApnRateStatus) {
	o.ApnRateStatus = &v
}

func (o SmContextStatusNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmContextStatusNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["smContextId"] = o.SmContextId
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !IsNil(o.SmallDataRateStatus) {
		toSerialize["smallDataRateStatus"] = o.SmallDataRateStatus
	}
	if !IsNil(o.ApnRateStatus) {
		toSerialize["apnRateStatus"] = o.ApnRateStatus
	}
	return toSerialize, nil
}

type NullableSmContextStatusNotification struct {
	value *SmContextStatusNotification
	isSet bool
}

func (v NullableSmContextStatusNotification) Get() *SmContextStatusNotification {
	return v.value
}

func (v *NullableSmContextStatusNotification) Set(val *SmContextStatusNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableSmContextStatusNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableSmContextStatusNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmContextStatusNotification(val *SmContextStatusNotification) *NullableSmContextStatusNotification {
	return &NullableSmContextStatusNotification{value: val, isSet: true}
}

func (v NullableSmContextStatusNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmContextStatusNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


