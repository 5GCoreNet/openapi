/*
Nnef_SMContext

Nnef SMContext Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnef_SMContext

import (
	"encoding/json"
	"fmt"
)

// SmContextStatusAnyOf the model 'SmContextStatusAnyOf'
type SmContextStatusAnyOf string

// List of SmContextStatus_anyOf
const (
	RELEASED SmContextStatusAnyOf = "RELEASED"
)

// All allowed values of SmContextStatusAnyOf enum
var AllowedSmContextStatusAnyOfEnumValues = []SmContextStatusAnyOf{
	"RELEASED",
}

func (v *SmContextStatusAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmContextStatusAnyOf(value)
	for _, existing := range AllowedSmContextStatusAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmContextStatusAnyOf", value)
}

// NewSmContextStatusAnyOfFromValue returns a pointer to a valid SmContextStatusAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmContextStatusAnyOfFromValue(v string) (*SmContextStatusAnyOf, error) {
	ev := SmContextStatusAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmContextStatusAnyOf: valid values are %v", v, AllowedSmContextStatusAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmContextStatusAnyOf) IsValid() bool {
	for _, existing := range AllowedSmContextStatusAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmContextStatus_anyOf value
func (v SmContextStatusAnyOf) Ptr() *SmContextStatusAnyOf {
	return &v
}

type NullableSmContextStatusAnyOf struct {
	value *SmContextStatusAnyOf
	isSet bool
}

func (v NullableSmContextStatusAnyOf) Get() *SmContextStatusAnyOf {
	return v.value
}

func (v *NullableSmContextStatusAnyOf) Set(val *SmContextStatusAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSmContextStatusAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSmContextStatusAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmContextStatusAnyOf(val *SmContextStatusAnyOf) *NullableSmContextStatusAnyOf {
	return &NullableSmContextStatusAnyOf{value: val, isSet: true}
}

func (v NullableSmContextStatusAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmContextStatusAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

