/*
NSSF NSSAI Availability

NSSF NSSAI Availability Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnssf_NSSAIAvailability

import (
	"encoding/json"
)

// checks if the NssaiAvailabilityInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NssaiAvailabilityInfo{}

// NssaiAvailabilityInfo This contains the Nssai availability information requested by the AMF
type NssaiAvailabilityInfo struct {
	SupportedNssaiAvailabilityData []SupportedNssaiAvailabilityData `json:"supportedNssaiAvailabilityData"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	AmfSetId *string `json:"amfSetId,omitempty"`
}

// NewNssaiAvailabilityInfo instantiates a new NssaiAvailabilityInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNssaiAvailabilityInfo(supportedNssaiAvailabilityData []SupportedNssaiAvailabilityData) *NssaiAvailabilityInfo {
	this := NssaiAvailabilityInfo{}
	this.SupportedNssaiAvailabilityData = supportedNssaiAvailabilityData
	return &this
}

// NewNssaiAvailabilityInfoWithDefaults instantiates a new NssaiAvailabilityInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNssaiAvailabilityInfoWithDefaults() *NssaiAvailabilityInfo {
	this := NssaiAvailabilityInfo{}
	return &this
}

// GetSupportedNssaiAvailabilityData returns the SupportedNssaiAvailabilityData field value
func (o *NssaiAvailabilityInfo) GetSupportedNssaiAvailabilityData() []SupportedNssaiAvailabilityData {
	if o == nil {
		var ret []SupportedNssaiAvailabilityData
		return ret
	}

	return o.SupportedNssaiAvailabilityData
}

// GetSupportedNssaiAvailabilityDataOk returns a tuple with the SupportedNssaiAvailabilityData field value
// and a boolean to check if the value has been set.
func (o *NssaiAvailabilityInfo) GetSupportedNssaiAvailabilityDataOk() ([]SupportedNssaiAvailabilityData, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedNssaiAvailabilityData, true
}

// SetSupportedNssaiAvailabilityData sets field value
func (o *NssaiAvailabilityInfo) SetSupportedNssaiAvailabilityData(v []SupportedNssaiAvailabilityData) {
	o.SupportedNssaiAvailabilityData = v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *NssaiAvailabilityInfo) GetSupportedFeatures() string {
	if o == nil || isNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NssaiAvailabilityInfo) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || isNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *NssaiAvailabilityInfo) HasSupportedFeatures() bool {
	if o != nil && !isNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *NssaiAvailabilityInfo) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetAmfSetId returns the AmfSetId field value if set, zero value otherwise.
func (o *NssaiAvailabilityInfo) GetAmfSetId() string {
	if o == nil || isNil(o.AmfSetId) {
		var ret string
		return ret
	}
	return *o.AmfSetId
}

// GetAmfSetIdOk returns a tuple with the AmfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NssaiAvailabilityInfo) GetAmfSetIdOk() (*string, bool) {
	if o == nil || isNil(o.AmfSetId) {
		return nil, false
	}
	return o.AmfSetId, true
}

// HasAmfSetId returns a boolean if a field has been set.
func (o *NssaiAvailabilityInfo) HasAmfSetId() bool {
	if o != nil && !isNil(o.AmfSetId) {
		return true
	}

	return false
}

// SetAmfSetId gets a reference to the given string and assigns it to the AmfSetId field.
func (o *NssaiAvailabilityInfo) SetAmfSetId(v string) {
	o.AmfSetId = &v
}

func (o NssaiAvailabilityInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NssaiAvailabilityInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["supportedNssaiAvailabilityData"] = o.SupportedNssaiAvailabilityData
	if !isNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !isNil(o.AmfSetId) {
		toSerialize["amfSetId"] = o.AmfSetId
	}
	return toSerialize, nil
}

type NullableNssaiAvailabilityInfo struct {
	value *NssaiAvailabilityInfo
	isSet bool
}

func (v NullableNssaiAvailabilityInfo) Get() *NssaiAvailabilityInfo {
	return v.value
}

func (v *NullableNssaiAvailabilityInfo) Set(val *NssaiAvailabilityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNssaiAvailabilityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNssaiAvailabilityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNssaiAvailabilityInfo(val *NssaiAvailabilityInfo) *NullableNssaiAvailabilityInfo {
	return &NullableNssaiAvailabilityInfo{value: val, isSet: true}
}

func (v NullableNssaiAvailabilityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNssaiAvailabilityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


