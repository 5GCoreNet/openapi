/*
NSSF NSSAI Availability

NSSF NSSAI Availability Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnssf_NSSAIAvailability

import (
	"encoding/json"
)

// checks if the RestrictedSnssai type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestrictedSnssai{}

// RestrictedSnssai This contains the restricted SNssai information per PLMN
type RestrictedSnssai struct {
	HomePlmnId PlmnId `json:"homePlmnId"`
	SNssaiList []ExtSnssai `json:"sNssaiList"`
	HomePlmnIdList []PlmnId `json:"homePlmnIdList,omitempty"`
	RoamingRestriction *bool `json:"roamingRestriction,omitempty"`
}

// NewRestrictedSnssai instantiates a new RestrictedSnssai object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestrictedSnssai(homePlmnId PlmnId, sNssaiList []ExtSnssai) *RestrictedSnssai {
	this := RestrictedSnssai{}
	this.HomePlmnId = homePlmnId
	this.SNssaiList = sNssaiList
	var roamingRestriction bool = false
	this.RoamingRestriction = &roamingRestriction
	return &this
}

// NewRestrictedSnssaiWithDefaults instantiates a new RestrictedSnssai object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestrictedSnssaiWithDefaults() *RestrictedSnssai {
	this := RestrictedSnssai{}
	var roamingRestriction bool = false
	this.RoamingRestriction = &roamingRestriction
	return &this
}

// GetHomePlmnId returns the HomePlmnId field value
func (o *RestrictedSnssai) GetHomePlmnId() PlmnId {
	if o == nil {
		var ret PlmnId
		return ret
	}

	return o.HomePlmnId
}

// GetHomePlmnIdOk returns a tuple with the HomePlmnId field value
// and a boolean to check if the value has been set.
func (o *RestrictedSnssai) GetHomePlmnIdOk() (*PlmnId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HomePlmnId, true
}

// SetHomePlmnId sets field value
func (o *RestrictedSnssai) SetHomePlmnId(v PlmnId) {
	o.HomePlmnId = v
}

// GetSNssaiList returns the SNssaiList field value
func (o *RestrictedSnssai) GetSNssaiList() []ExtSnssai {
	if o == nil {
		var ret []ExtSnssai
		return ret
	}

	return o.SNssaiList
}

// GetSNssaiListOk returns a tuple with the SNssaiList field value
// and a boolean to check if the value has been set.
func (o *RestrictedSnssai) GetSNssaiListOk() ([]ExtSnssai, bool) {
	if o == nil {
		return nil, false
	}
	return o.SNssaiList, true
}

// SetSNssaiList sets field value
func (o *RestrictedSnssai) SetSNssaiList(v []ExtSnssai) {
	o.SNssaiList = v
}

// GetHomePlmnIdList returns the HomePlmnIdList field value if set, zero value otherwise.
func (o *RestrictedSnssai) GetHomePlmnIdList() []PlmnId {
	if o == nil || IsNil(o.HomePlmnIdList) {
		var ret []PlmnId
		return ret
	}
	return o.HomePlmnIdList
}

// GetHomePlmnIdListOk returns a tuple with the HomePlmnIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictedSnssai) GetHomePlmnIdListOk() ([]PlmnId, bool) {
	if o == nil || IsNil(o.HomePlmnIdList) {
		return nil, false
	}
	return o.HomePlmnIdList, true
}

// HasHomePlmnIdList returns a boolean if a field has been set.
func (o *RestrictedSnssai) HasHomePlmnIdList() bool {
	if o != nil && !IsNil(o.HomePlmnIdList) {
		return true
	}

	return false
}

// SetHomePlmnIdList gets a reference to the given []PlmnId and assigns it to the HomePlmnIdList field.
func (o *RestrictedSnssai) SetHomePlmnIdList(v []PlmnId) {
	o.HomePlmnIdList = v
}

// GetRoamingRestriction returns the RoamingRestriction field value if set, zero value otherwise.
func (o *RestrictedSnssai) GetRoamingRestriction() bool {
	if o == nil || IsNil(o.RoamingRestriction) {
		var ret bool
		return ret
	}
	return *o.RoamingRestriction
}

// GetRoamingRestrictionOk returns a tuple with the RoamingRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictedSnssai) GetRoamingRestrictionOk() (*bool, bool) {
	if o == nil || IsNil(o.RoamingRestriction) {
		return nil, false
	}
	return o.RoamingRestriction, true
}

// HasRoamingRestriction returns a boolean if a field has been set.
func (o *RestrictedSnssai) HasRoamingRestriction() bool {
	if o != nil && !IsNil(o.RoamingRestriction) {
		return true
	}

	return false
}

// SetRoamingRestriction gets a reference to the given bool and assigns it to the RoamingRestriction field.
func (o *RestrictedSnssai) SetRoamingRestriction(v bool) {
	o.RoamingRestriction = &v
}

func (o RestrictedSnssai) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestrictedSnssai) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["homePlmnId"] = o.HomePlmnId
	toSerialize["sNssaiList"] = o.SNssaiList
	if !IsNil(o.HomePlmnIdList) {
		toSerialize["homePlmnIdList"] = o.HomePlmnIdList
	}
	if !IsNil(o.RoamingRestriction) {
		toSerialize["roamingRestriction"] = o.RoamingRestriction
	}
	return toSerialize, nil
}

type NullableRestrictedSnssai struct {
	value *RestrictedSnssai
	isSet bool
}

func (v NullableRestrictedSnssai) Get() *RestrictedSnssai {
	return v.value
}

func (v *NullableRestrictedSnssai) Set(val *RestrictedSnssai) {
	v.value = val
	v.isSet = true
}

func (v NullableRestrictedSnssai) IsSet() bool {
	return v.isSet
}

func (v *NullableRestrictedSnssai) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestrictedSnssai(val *RestrictedSnssai) *NullableRestrictedSnssai {
	return &NullableRestrictedSnssai{value: val, isSet: true}
}

func (v NullableRestrictedSnssai) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestrictedSnssai) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


