/*
NSSF NSSAI Availability

NSSF NSSAI Availability Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnssf_NSSAIAvailability

import (
	"encoding/json"
)

// checks if the SupportedNssaiAvailabilityData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedNssaiAvailabilityData{}

// SupportedNssaiAvailabilityData This contains the Nssai availability data information per TA supported by the AMF
type SupportedNssaiAvailabilityData struct {
	Tai Tai `json:"tai"`
	SupportedSnssaiList []ExtSnssai `json:"supportedSnssaiList"`
	TaiList []Tai `json:"taiList,omitempty"`
	TaiRangeList []TaiRange `json:"taiRangeList,omitempty"`
	NsagInfos []NsagInfo `json:"nsagInfos,omitempty"`
}

// NewSupportedNssaiAvailabilityData instantiates a new SupportedNssaiAvailabilityData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedNssaiAvailabilityData(tai Tai, supportedSnssaiList []ExtSnssai) *SupportedNssaiAvailabilityData {
	this := SupportedNssaiAvailabilityData{}
	this.Tai = tai
	this.SupportedSnssaiList = supportedSnssaiList
	return &this
}

// NewSupportedNssaiAvailabilityDataWithDefaults instantiates a new SupportedNssaiAvailabilityData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedNssaiAvailabilityDataWithDefaults() *SupportedNssaiAvailabilityData {
	this := SupportedNssaiAvailabilityData{}
	return &this
}

// GetTai returns the Tai field value
func (o *SupportedNssaiAvailabilityData) GetTai() Tai {
	if o == nil {
		var ret Tai
		return ret
	}

	return o.Tai
}

// GetTaiOk returns a tuple with the Tai field value
// and a boolean to check if the value has been set.
func (o *SupportedNssaiAvailabilityData) GetTaiOk() (*Tai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tai, true
}

// SetTai sets field value
func (o *SupportedNssaiAvailabilityData) SetTai(v Tai) {
	o.Tai = v
}

// GetSupportedSnssaiList returns the SupportedSnssaiList field value
func (o *SupportedNssaiAvailabilityData) GetSupportedSnssaiList() []ExtSnssai {
	if o == nil {
		var ret []ExtSnssai
		return ret
	}

	return o.SupportedSnssaiList
}

// GetSupportedSnssaiListOk returns a tuple with the SupportedSnssaiList field value
// and a boolean to check if the value has been set.
func (o *SupportedNssaiAvailabilityData) GetSupportedSnssaiListOk() ([]ExtSnssai, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedSnssaiList, true
}

// SetSupportedSnssaiList sets field value
func (o *SupportedNssaiAvailabilityData) SetSupportedSnssaiList(v []ExtSnssai) {
	o.SupportedSnssaiList = v
}

// GetTaiList returns the TaiList field value if set, zero value otherwise.
func (o *SupportedNssaiAvailabilityData) GetTaiList() []Tai {
	if o == nil || isNil(o.TaiList) {
		var ret []Tai
		return ret
	}
	return o.TaiList
}

// GetTaiListOk returns a tuple with the TaiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedNssaiAvailabilityData) GetTaiListOk() ([]Tai, bool) {
	if o == nil || isNil(o.TaiList) {
		return nil, false
	}
	return o.TaiList, true
}

// HasTaiList returns a boolean if a field has been set.
func (o *SupportedNssaiAvailabilityData) HasTaiList() bool {
	if o != nil && !isNil(o.TaiList) {
		return true
	}

	return false
}

// SetTaiList gets a reference to the given []Tai and assigns it to the TaiList field.
func (o *SupportedNssaiAvailabilityData) SetTaiList(v []Tai) {
	o.TaiList = v
}

// GetTaiRangeList returns the TaiRangeList field value if set, zero value otherwise.
func (o *SupportedNssaiAvailabilityData) GetTaiRangeList() []TaiRange {
	if o == nil || isNil(o.TaiRangeList) {
		var ret []TaiRange
		return ret
	}
	return o.TaiRangeList
}

// GetTaiRangeListOk returns a tuple with the TaiRangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedNssaiAvailabilityData) GetTaiRangeListOk() ([]TaiRange, bool) {
	if o == nil || isNil(o.TaiRangeList) {
		return nil, false
	}
	return o.TaiRangeList, true
}

// HasTaiRangeList returns a boolean if a field has been set.
func (o *SupportedNssaiAvailabilityData) HasTaiRangeList() bool {
	if o != nil && !isNil(o.TaiRangeList) {
		return true
	}

	return false
}

// SetTaiRangeList gets a reference to the given []TaiRange and assigns it to the TaiRangeList field.
func (o *SupportedNssaiAvailabilityData) SetTaiRangeList(v []TaiRange) {
	o.TaiRangeList = v
}

// GetNsagInfos returns the NsagInfos field value if set, zero value otherwise.
func (o *SupportedNssaiAvailabilityData) GetNsagInfos() []NsagInfo {
	if o == nil || isNil(o.NsagInfos) {
		var ret []NsagInfo
		return ret
	}
	return o.NsagInfos
}

// GetNsagInfosOk returns a tuple with the NsagInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedNssaiAvailabilityData) GetNsagInfosOk() ([]NsagInfo, bool) {
	if o == nil || isNil(o.NsagInfos) {
		return nil, false
	}
	return o.NsagInfos, true
}

// HasNsagInfos returns a boolean if a field has been set.
func (o *SupportedNssaiAvailabilityData) HasNsagInfos() bool {
	if o != nil && !isNil(o.NsagInfos) {
		return true
	}

	return false
}

// SetNsagInfos gets a reference to the given []NsagInfo and assigns it to the NsagInfos field.
func (o *SupportedNssaiAvailabilityData) SetNsagInfos(v []NsagInfo) {
	o.NsagInfos = v
}

func (o SupportedNssaiAvailabilityData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedNssaiAvailabilityData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tai"] = o.Tai
	toSerialize["supportedSnssaiList"] = o.SupportedSnssaiList
	if !isNil(o.TaiList) {
		toSerialize["taiList"] = o.TaiList
	}
	if !isNil(o.TaiRangeList) {
		toSerialize["taiRangeList"] = o.TaiRangeList
	}
	if !isNil(o.NsagInfos) {
		toSerialize["nsagInfos"] = o.NsagInfos
	}
	return toSerialize, nil
}

type NullableSupportedNssaiAvailabilityData struct {
	value *SupportedNssaiAvailabilityData
	isSet bool
}

func (v NullableSupportedNssaiAvailabilityData) Get() *SupportedNssaiAvailabilityData {
	return v.value
}

func (v *NullableSupportedNssaiAvailabilityData) Set(val *SupportedNssaiAvailabilityData) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedNssaiAvailabilityData) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedNssaiAvailabilityData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedNssaiAvailabilityData(val *SupportedNssaiAvailabilityData) *NullableSupportedNssaiAvailabilityData {
	return &NullableSupportedNssaiAvailabilityData{value: val, isSet: true}
}

func (v NullableSupportedNssaiAvailabilityData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedNssaiAvailabilityData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


