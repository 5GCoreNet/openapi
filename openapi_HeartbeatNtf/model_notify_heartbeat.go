/*
Heartbeat notification

OAS 3.0.1 definition of the heartbeat notification Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_HeartbeatNtf

import (
	"encoding/json"
)

// checks if the NotifyHeartbeat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyHeartbeat{}

// NotifyHeartbeat struct for NotifyHeartbeat
type NotifyHeartbeat struct {
	NotificationHeader
	HeartbeatNtfPeriod *int32 `json:"heartbeatNtfPeriod,omitempty"`
}

// NewNotifyHeartbeat instantiates a new NotifyHeartbeat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyHeartbeat(href string, notificationId int32, notificationType NotificationType, eventTime time.Time, systemDN string) *NotifyHeartbeat {
	this := NotifyHeartbeat{}
	this.Href = href
	this.NotificationId = notificationId
	this.NotificationType = notificationType
	this.EventTime = eventTime
	this.SystemDN = systemDN
	return &this
}

// NewNotifyHeartbeatWithDefaults instantiates a new NotifyHeartbeat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyHeartbeatWithDefaults() *NotifyHeartbeat {
	this := NotifyHeartbeat{}
	return &this
}

// GetHeartbeatNtfPeriod returns the HeartbeatNtfPeriod field value if set, zero value otherwise.
func (o *NotifyHeartbeat) GetHeartbeatNtfPeriod() int32 {
	if o == nil || IsNil(o.HeartbeatNtfPeriod) {
		var ret int32
		return ret
	}
	return *o.HeartbeatNtfPeriod
}

// GetHeartbeatNtfPeriodOk returns a tuple with the HeartbeatNtfPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyHeartbeat) GetHeartbeatNtfPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.HeartbeatNtfPeriod) {
		return nil, false
	}
	return o.HeartbeatNtfPeriod, true
}

// HasHeartbeatNtfPeriod returns a boolean if a field has been set.
func (o *NotifyHeartbeat) HasHeartbeatNtfPeriod() bool {
	if o != nil && !IsNil(o.HeartbeatNtfPeriod) {
		return true
	}

	return false
}

// SetHeartbeatNtfPeriod gets a reference to the given int32 and assigns it to the HeartbeatNtfPeriod field.
func (o *NotifyHeartbeat) SetHeartbeatNtfPeriod(v int32) {
	o.HeartbeatNtfPeriod = &v
}

func (o NotifyHeartbeat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyHeartbeat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedNotificationHeader, errNotificationHeader := json.Marshal(o.NotificationHeader)
	if errNotificationHeader != nil {
		return map[string]interface{}{}, errNotificationHeader
	}
	errNotificationHeader = json.Unmarshal([]byte(serializedNotificationHeader), &toSerialize)
	if errNotificationHeader != nil {
		return map[string]interface{}{}, errNotificationHeader
	}
	if !IsNil(o.HeartbeatNtfPeriod) {
		toSerialize["heartbeatNtfPeriod"] = o.HeartbeatNtfPeriod
	}
	return toSerialize, nil
}

type NullableNotifyHeartbeat struct {
	value *NotifyHeartbeat
	isSet bool
}

func (v NullableNotifyHeartbeat) Get() *NotifyHeartbeat {
	return v.value
}

func (v *NullableNotifyHeartbeat) Set(val *NotifyHeartbeat) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyHeartbeat) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyHeartbeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyHeartbeat(val *NotifyHeartbeat) *NullableNotifyHeartbeat {
	return &NullableNotifyHeartbeat{value: val, isSet: true}
}

func (v NullableNotifyHeartbeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyHeartbeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
