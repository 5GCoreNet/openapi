/*
UAE Server C2 Operation Mode Management Service

UAE Server C2 Operation Mode Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_UAE_C2OperationModeManagement

import (
	"encoding/json"
	"fmt"
)

// C2SwitchingCause Possible values are: - DIRECT_LINK_QUALITY_DEGRADATION: Indicates that the C2 Communication Mode switching was triggered due to a degradation in the direct radio link quality. - DIRECT_LINK_AVAILABLE: Indicates that the C2 Communication Mode switching was triggered due to the availability of a direct link, i.e. direct radio link quality enables its usage. - MOVING_BVLOS: Indicates that the C2 Communication Mode switching was triggered due to the UAV moving BVLOS. - LOCATION_CHANGE: Indicates that the C2 Communication Mode switching was triggered due to an actual or expected location/mobility of the UAV (e.g. which impacts the UAV-to-UAV-C location). - TRAFFIC_CONTROL_NEEDED: Indicates that the C2 Communication Mode switching was triggered due to the necessity to have air traffic control. - SECURITY_REASONS: Indicates that the C2 Communication Mode switching was triggered due to security reasons. - OTHER_REASONS: Indicates that the C2 Communication Mode switching was triggered due to other reasons (e.g. unpredictable event, unknown reason, weather conditions, topography, etc.). 
type C2SwitchingCause struct {
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *C2SwitchingCause) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(C2SwitchingCause)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *C2SwitchingCause) MarshalJSON() ([]byte, error) {
	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableC2SwitchingCause struct {
	value *C2SwitchingCause
	isSet bool
}

func (v NullableC2SwitchingCause) Get() *C2SwitchingCause {
	return v.value
}

func (v *NullableC2SwitchingCause) Set(val *C2SwitchingCause) {
	v.value = val
	v.isSet = true
}

func (v NullableC2SwitchingCause) IsSet() bool {
	return v.isSet
}

func (v *NullableC2SwitchingCause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC2SwitchingCause(val *C2SwitchingCause) *NullableC2SwitchingCause {
	return &NullableC2SwitchingCause{value: val, isSet: true}
}

func (v NullableC2SwitchingCause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC2SwitchingCause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


