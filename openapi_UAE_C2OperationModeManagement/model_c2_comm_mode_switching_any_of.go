/*
UAE Server C2 Operation Mode Management Service

UAE Server C2 Operation Mode Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_UAE_C2OperationModeManagement

import (
	"encoding/json"
	"fmt"
)

// C2CommModeSwitchingAnyOf the model 'C2CommModeSwitchingAnyOf'
type C2CommModeSwitchingAnyOf string

// List of C2CommModeSwitching_anyOf
const (
	DIRECT_TO_NETWORK_ASSISTED_C2 C2CommModeSwitchingAnyOf = "DIRECT_TO_NETWORK_ASSISTED_C2"
	NETWORK_ASSISTED_TO_DIRECT_C2 C2CommModeSwitchingAnyOf = "NETWORK_ASSISTED_TO_DIRECT_C2"
	DIRECT_TO_UTM_NAVIGATED_C2 C2CommModeSwitchingAnyOf = "DIRECT_TO_UTM_NAVIGATED_C2"
	NETWORK_ASSISTED_TO_UTM_NAVIGATED_C2 C2CommModeSwitchingAnyOf = "NETWORK_ASSISTED_TO_UTM_NAVIGATED_C2"
)

// All allowed values of C2CommModeSwitchingAnyOf enum
var AllowedC2CommModeSwitchingAnyOfEnumValues = []C2CommModeSwitchingAnyOf{
	"DIRECT_TO_NETWORK_ASSISTED_C2",
	"NETWORK_ASSISTED_TO_DIRECT_C2",
	"DIRECT_TO_UTM_NAVIGATED_C2",
	"NETWORK_ASSISTED_TO_UTM_NAVIGATED_C2",
}

func (v *C2CommModeSwitchingAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := C2CommModeSwitchingAnyOf(value)
	for _, existing := range AllowedC2CommModeSwitchingAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid C2CommModeSwitchingAnyOf", value)
}

// NewC2CommModeSwitchingAnyOfFromValue returns a pointer to a valid C2CommModeSwitchingAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewC2CommModeSwitchingAnyOfFromValue(v string) (*C2CommModeSwitchingAnyOf, error) {
	ev := C2CommModeSwitchingAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for C2CommModeSwitchingAnyOf: valid values are %v", v, AllowedC2CommModeSwitchingAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v C2CommModeSwitchingAnyOf) IsValid() bool {
	for _, existing := range AllowedC2CommModeSwitchingAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to C2CommModeSwitching_anyOf value
func (v C2CommModeSwitchingAnyOf) Ptr() *C2CommModeSwitchingAnyOf {
	return &v
}

type NullableC2CommModeSwitchingAnyOf struct {
	value *C2CommModeSwitchingAnyOf
	isSet bool
}

func (v NullableC2CommModeSwitchingAnyOf) Get() *C2CommModeSwitchingAnyOf {
	return v.value
}

func (v *NullableC2CommModeSwitchingAnyOf) Set(val *C2CommModeSwitchingAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableC2CommModeSwitchingAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableC2CommModeSwitchingAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC2CommModeSwitchingAnyOf(val *C2CommModeSwitchingAnyOf) *NullableC2CommModeSwitchingAnyOf {
	return &NullableC2CommModeSwitchingAnyOf{value: val, isSet: true}
}

func (v NullableC2CommModeSwitchingAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC2CommModeSwitchingAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

