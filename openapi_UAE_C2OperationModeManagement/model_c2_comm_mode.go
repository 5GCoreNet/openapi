/*
UAE Server C2 Operation Mode Management Service

UAE Server C2 Operation Mode Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_UAE_C2OperationModeManagement

import (
	"encoding/json"
	"fmt"
)

// C2CommMode Possible values are: - DIRECT_C2_COMMUNICATION: Indicates Direct C2 Communication mode. - NETWORK_ASSISTED_C2_COMMUNICATION: Indicates Network-Assisted C2 Communication mode. - UTM_NAVIGATED_C2_COMMUNICATION: Indicates UTM-Navigated C2 communication mode. 
type C2CommMode struct {
	C2CommModeAnyOf *C2CommModeAnyOf
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *C2CommMode) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into C2CommModeAnyOf
	err = json.Unmarshal(data, &dst.C2CommModeAnyOf);
	if err == nil {
		jsonC2CommModeAnyOf, _ := json.Marshal(dst.C2CommModeAnyOf)
		if string(jsonC2CommModeAnyOf) == "{}" { // empty struct
			dst.C2CommModeAnyOf = nil
		} else {
			return nil // data stored in dst.C2CommModeAnyOf, return on the first match
		}
	} else {
		dst.C2CommModeAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(C2CommMode)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *C2CommMode) MarshalJSON() ([]byte, error) {
	if src.C2CommModeAnyOf != nil {
		return json.Marshal(&src.C2CommModeAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableC2CommMode struct {
	value *C2CommMode
	isSet bool
}

func (v NullableC2CommMode) Get() *C2CommMode {
	return v.value
}

func (v *NullableC2CommMode) Set(val *C2CommMode) {
	v.value = val
	v.isSet = true
}

func (v NullableC2CommMode) IsSet() bool {
	return v.isSet
}

func (v *NullableC2CommMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC2CommMode(val *C2CommMode) *NullableC2CommMode {
	return &NullableC2CommMode{value: val, isSet: true}
}

func (v NullableC2CommMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC2CommMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


