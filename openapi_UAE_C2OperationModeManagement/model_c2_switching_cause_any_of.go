/*
UAE Server C2 Operation Mode Management Service

UAE Server C2 Operation Mode Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_UAE_C2OperationModeManagement

import (
	"encoding/json"
	"fmt"
)

// C2SwitchingCauseAnyOf the model 'C2SwitchingCauseAnyOf'
type C2SwitchingCauseAnyOf string

// List of C2SwitchingCause_anyOf
const (
	DIRECT_LINK_QUALITY_DEGRADATION C2SwitchingCauseAnyOf = "DIRECT_LINK_QUALITY_DEGRADATION"
	DIRECT_LINK_AVAILABLE C2SwitchingCauseAnyOf = "DIRECT_LINK_AVAILABLE"
	MOVING_BVLOS C2SwitchingCauseAnyOf = "MOVING_BVLOS"
	LOCATION_CHANGE C2SwitchingCauseAnyOf = "LOCATION_CHANGE"
	TRAFFIC_CONTROL_NEEDED C2SwitchingCauseAnyOf = "TRAFFIC_CONTROL_NEEDED"
	SECURITY_REASONS C2SwitchingCauseAnyOf = "SECURITY_REASONS"
	OTHER_REASONS C2SwitchingCauseAnyOf = "OTHER_REASONS"
)

// All allowed values of C2SwitchingCauseAnyOf enum
var AllowedC2SwitchingCauseAnyOfEnumValues = []C2SwitchingCauseAnyOf{
	"DIRECT_LINK_QUALITY_DEGRADATION",
	"DIRECT_LINK_AVAILABLE",
	"MOVING_BVLOS",
	"LOCATION_CHANGE",
	"TRAFFIC_CONTROL_NEEDED",
	"SECURITY_REASONS",
	"OTHER_REASONS",
}

func (v *C2SwitchingCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := C2SwitchingCauseAnyOf(value)
	for _, existing := range AllowedC2SwitchingCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid C2SwitchingCauseAnyOf", value)
}

// NewC2SwitchingCauseAnyOfFromValue returns a pointer to a valid C2SwitchingCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewC2SwitchingCauseAnyOfFromValue(v string) (*C2SwitchingCauseAnyOf, error) {
	ev := C2SwitchingCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for C2SwitchingCauseAnyOf: valid values are %v", v, AllowedC2SwitchingCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v C2SwitchingCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedC2SwitchingCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to C2SwitchingCause_anyOf value
func (v C2SwitchingCauseAnyOf) Ptr() *C2SwitchingCauseAnyOf {
	return &v
}

type NullableC2SwitchingCauseAnyOf struct {
	value *C2SwitchingCauseAnyOf
	isSet bool
}

func (v NullableC2SwitchingCauseAnyOf) Get() *C2SwitchingCauseAnyOf {
	return v.value
}

func (v *NullableC2SwitchingCauseAnyOf) Set(val *C2SwitchingCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableC2SwitchingCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableC2SwitchingCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC2SwitchingCauseAnyOf(val *C2SwitchingCauseAnyOf) *NullableC2SwitchingCauseAnyOf {
	return &NullableC2SwitchingCauseAnyOf{value: val, isSet: true}
}

func (v NullableC2SwitchingCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC2SwitchingCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

