/*
Nmfaf_3caDataManagement

MFAF 3GPP Consumer Adaptor (3CA) Data Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nmfaf_3caDataManagement

import (
	"encoding/json"
	"fmt"
)

// NFServiceStatusAnyOf the model 'NFServiceStatusAnyOf'
type NFServiceStatusAnyOf string

// List of NFServiceStatus_anyOf
const (
	REGISTERED NFServiceStatusAnyOf = "REGISTERED"
	SUSPENDED NFServiceStatusAnyOf = "SUSPENDED"
	UNDISCOVERABLE NFServiceStatusAnyOf = "UNDISCOVERABLE"
)

// All allowed values of NFServiceStatusAnyOf enum
var AllowedNFServiceStatusAnyOfEnumValues = []NFServiceStatusAnyOf{
	"REGISTERED",
	"SUSPENDED",
	"UNDISCOVERABLE",
}

func (v *NFServiceStatusAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NFServiceStatusAnyOf(value)
	for _, existing := range AllowedNFServiceStatusAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NFServiceStatusAnyOf", value)
}

// NewNFServiceStatusAnyOfFromValue returns a pointer to a valid NFServiceStatusAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNFServiceStatusAnyOfFromValue(v string) (*NFServiceStatusAnyOf, error) {
	ev := NFServiceStatusAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NFServiceStatusAnyOf: valid values are %v", v, AllowedNFServiceStatusAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NFServiceStatusAnyOf) IsValid() bool {
	for _, existing := range AllowedNFServiceStatusAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NFServiceStatus_anyOf value
func (v NFServiceStatusAnyOf) Ptr() *NFServiceStatusAnyOf {
	return &v
}

type NullableNFServiceStatusAnyOf struct {
	value *NFServiceStatusAnyOf
	isSet bool
}

func (v NullableNFServiceStatusAnyOf) Get() *NFServiceStatusAnyOf {
	return v.value
}

func (v *NullableNFServiceStatusAnyOf) Set(val *NFServiceStatusAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNFServiceStatusAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNFServiceStatusAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFServiceStatusAnyOf(val *NFServiceStatusAnyOf) *NullableNFServiceStatusAnyOf {
	return &NullableNFServiceStatusAnyOf{value: val, isSet: true}
}

func (v NullableNFServiceStatusAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFServiceStatusAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

