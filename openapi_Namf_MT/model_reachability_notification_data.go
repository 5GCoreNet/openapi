/*
Namf_MT

AMF Mobile Terminated Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_MT

import (
	"encoding/json"
)

// checks if the ReachabilityNotificationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReachabilityNotificationData{}

// ReachabilityNotificationData Data within the UE Reachability Info Notify
type ReachabilityNotificationData struct {
	ReachableUeList []ReachableUeInfo `json:"reachableUeList,omitempty"`
	UnreachableUeList []string `json:"unreachableUeList,omitempty"`
}

// NewReachabilityNotificationData instantiates a new ReachabilityNotificationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReachabilityNotificationData() *ReachabilityNotificationData {
	this := ReachabilityNotificationData{}
	return &this
}

// NewReachabilityNotificationDataWithDefaults instantiates a new ReachabilityNotificationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReachabilityNotificationDataWithDefaults() *ReachabilityNotificationData {
	this := ReachabilityNotificationData{}
	return &this
}

// GetReachableUeList returns the ReachableUeList field value if set, zero value otherwise.
func (o *ReachabilityNotificationData) GetReachableUeList() []ReachableUeInfo {
	if o == nil || isNil(o.ReachableUeList) {
		var ret []ReachableUeInfo
		return ret
	}
	return o.ReachableUeList
}

// GetReachableUeListOk returns a tuple with the ReachableUeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachabilityNotificationData) GetReachableUeListOk() ([]ReachableUeInfo, bool) {
	if o == nil || isNil(o.ReachableUeList) {
		return nil, false
	}
	return o.ReachableUeList, true
}

// HasReachableUeList returns a boolean if a field has been set.
func (o *ReachabilityNotificationData) HasReachableUeList() bool {
	if o != nil && !isNil(o.ReachableUeList) {
		return true
	}

	return false
}

// SetReachableUeList gets a reference to the given []ReachableUeInfo and assigns it to the ReachableUeList field.
func (o *ReachabilityNotificationData) SetReachableUeList(v []ReachableUeInfo) {
	o.ReachableUeList = v
}

// GetUnreachableUeList returns the UnreachableUeList field value if set, zero value otherwise.
func (o *ReachabilityNotificationData) GetUnreachableUeList() []string {
	if o == nil || isNil(o.UnreachableUeList) {
		var ret []string
		return ret
	}
	return o.UnreachableUeList
}

// GetUnreachableUeListOk returns a tuple with the UnreachableUeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachabilityNotificationData) GetUnreachableUeListOk() ([]string, bool) {
	if o == nil || isNil(o.UnreachableUeList) {
		return nil, false
	}
	return o.UnreachableUeList, true
}

// HasUnreachableUeList returns a boolean if a field has been set.
func (o *ReachabilityNotificationData) HasUnreachableUeList() bool {
	if o != nil && !isNil(o.UnreachableUeList) {
		return true
	}

	return false
}

// SetUnreachableUeList gets a reference to the given []string and assigns it to the UnreachableUeList field.
func (o *ReachabilityNotificationData) SetUnreachableUeList(v []string) {
	o.UnreachableUeList = v
}

func (o ReachabilityNotificationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReachabilityNotificationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ReachableUeList) {
		toSerialize["reachableUeList"] = o.ReachableUeList
	}
	if !isNil(o.UnreachableUeList) {
		toSerialize["unreachableUeList"] = o.UnreachableUeList
	}
	return toSerialize, nil
}

type NullableReachabilityNotificationData struct {
	value *ReachabilityNotificationData
	isSet bool
}

func (v NullableReachabilityNotificationData) Get() *ReachabilityNotificationData {
	return v.value
}

func (v *NullableReachabilityNotificationData) Set(val *ReachabilityNotificationData) {
	v.value = val
	v.isSet = true
}

func (v NullableReachabilityNotificationData) IsSet() bool {
	return v.isSet
}

func (v *NullableReachabilityNotificationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReachabilityNotificationData(val *ReachabilityNotificationData) *NullableReachabilityNotificationData {
	return &NullableReachabilityNotificationData{value: val, isSet: true}
}

func (v NullableReachabilityNotificationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReachabilityNotificationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


