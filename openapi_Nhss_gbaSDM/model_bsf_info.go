/*
Nhss_gbaSDM

Nhss Subscriber Data Management Service for GBA.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_gbaSDM

import (
	"encoding/json"
)

// checks if the BsfInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BsfInfo{}

// BsfInfo Information about the BSF; it includes an indication of whether GBA or GBA_U is to be used, the key lifetime and a user-specific list of security features 
type BsfInfo struct {
	UiccType *UiccType `json:"uiccType,omitempty"`
	// indicating a time in seconds.
	LifeTime *int32 `json:"lifeTime,omitempty"`
	SecurityFeatures []SecFeature `json:"securityFeatures,omitempty"`
}

// NewBsfInfo instantiates a new BsfInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBsfInfo() *BsfInfo {
	this := BsfInfo{}
	return &this
}

// NewBsfInfoWithDefaults instantiates a new BsfInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBsfInfoWithDefaults() *BsfInfo {
	this := BsfInfo{}
	return &this
}

// GetUiccType returns the UiccType field value if set, zero value otherwise.
func (o *BsfInfo) GetUiccType() UiccType {
	if o == nil || IsNil(o.UiccType) {
		var ret UiccType
		return ret
	}
	return *o.UiccType
}

// GetUiccTypeOk returns a tuple with the UiccType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetUiccTypeOk() (*UiccType, bool) {
	if o == nil || IsNil(o.UiccType) {
		return nil, false
	}
	return o.UiccType, true
}

// HasUiccType returns a boolean if a field has been set.
func (o *BsfInfo) HasUiccType() bool {
	if o != nil && !IsNil(o.UiccType) {
		return true
	}

	return false
}

// SetUiccType gets a reference to the given UiccType and assigns it to the UiccType field.
func (o *BsfInfo) SetUiccType(v UiccType) {
	o.UiccType = &v
}

// GetLifeTime returns the LifeTime field value if set, zero value otherwise.
func (o *BsfInfo) GetLifeTime() int32 {
	if o == nil || IsNil(o.LifeTime) {
		var ret int32
		return ret
	}
	return *o.LifeTime
}

// GetLifeTimeOk returns a tuple with the LifeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetLifeTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.LifeTime) {
		return nil, false
	}
	return o.LifeTime, true
}

// HasLifeTime returns a boolean if a field has been set.
func (o *BsfInfo) HasLifeTime() bool {
	if o != nil && !IsNil(o.LifeTime) {
		return true
	}

	return false
}

// SetLifeTime gets a reference to the given int32 and assigns it to the LifeTime field.
func (o *BsfInfo) SetLifeTime(v int32) {
	o.LifeTime = &v
}

// GetSecurityFeatures returns the SecurityFeatures field value if set, zero value otherwise.
func (o *BsfInfo) GetSecurityFeatures() []SecFeature {
	if o == nil || IsNil(o.SecurityFeatures) {
		var ret []SecFeature
		return ret
	}
	return o.SecurityFeatures
}

// GetSecurityFeaturesOk returns a tuple with the SecurityFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetSecurityFeaturesOk() ([]SecFeature, bool) {
	if o == nil || IsNil(o.SecurityFeatures) {
		return nil, false
	}
	return o.SecurityFeatures, true
}

// HasSecurityFeatures returns a boolean if a field has been set.
func (o *BsfInfo) HasSecurityFeatures() bool {
	if o != nil && !IsNil(o.SecurityFeatures) {
		return true
	}

	return false
}

// SetSecurityFeatures gets a reference to the given []SecFeature and assigns it to the SecurityFeatures field.
func (o *BsfInfo) SetSecurityFeatures(v []SecFeature) {
	o.SecurityFeatures = v
}

func (o BsfInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BsfInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UiccType) {
		toSerialize["uiccType"] = o.UiccType
	}
	if !IsNil(o.LifeTime) {
		toSerialize["lifeTime"] = o.LifeTime
	}
	if !IsNil(o.SecurityFeatures) {
		toSerialize["securityFeatures"] = o.SecurityFeatures
	}
	return toSerialize, nil
}

type NullableBsfInfo struct {
	value *BsfInfo
	isSet bool
}

func (v NullableBsfInfo) Get() *BsfInfo {
	return v.value
}

func (v *NullableBsfInfo) Set(val *BsfInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBsfInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBsfInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBsfInfo(val *BsfInfo) *NullableBsfInfo {
	return &NullableBsfInfo{value: val, isSet: true}
}

func (v NullableBsfInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBsfInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


