/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AMFNon3GPPAccessRegistrationDocumentApiService AMFNon3GPPAccessRegistrationDocumentApi service
type AMFNon3GPPAccessRegistrationDocumentApiService service

type ApiAmfContextNon3gppRequest struct {
	ctx context.Context
	ApiService *AMFNon3GPPAccessRegistrationDocumentApiService
	ueId string
	patchItem *[]PatchItem
	supportedFeatures *string
}

func (r ApiAmfContextNon3gppRequest) PatchItem(patchItem []PatchItem) ApiAmfContextNon3gppRequest {
	r.patchItem = &patchItem
	return r
}

// Features required to be supported by the target NF
func (r ApiAmfContextNon3gppRequest) SupportedFeatures(supportedFeatures string) ApiAmfContextNon3gppRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

func (r ApiAmfContextNon3gppRequest) Execute() (*PatchResult, *http.Response, error) {
	return r.ApiService.AmfContextNon3gppExecute(r)
}

/*
AmfContextNon3gpp To modify the AMF context data of a UE using non 3gpp access in the UDR

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ueId UE id
 @return ApiAmfContextNon3gppRequest
*/
func (a *AMFNon3GPPAccessRegistrationDocumentApiService) AmfContextNon3gpp(ctx context.Context, ueId string) ApiAmfContextNon3gppRequest {
	return ApiAmfContextNon3gppRequest{
		ApiService: a,
		ctx: ctx,
		ueId: ueId,
	}
}

// Execute executes the request
//  @return PatchResult
func (a *AMFNon3GPPAccessRegistrationDocumentApiService) AmfContextNon3gppExecute(r ApiAmfContextNon3gppRequest) (*PatchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AMFNon3GPPAccessRegistrationDocumentApiService.AmfContextNon3gpp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/amf-non-3gpp-access"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchItem == nil {
		return localVarReturnValue, nil, reportError("patchItem is required and must be specified")
	}

	if r.supportedFeatures != nil {
		parameterAddToQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAmfContextNon3gppRequest struct {
	ctx context.Context
	ApiService *AMFNon3GPPAccessRegistrationDocumentApiService
	ueId string
	amfNon3GppAccessRegistration *AmfNon3GppAccessRegistration
}

func (r ApiCreateAmfContextNon3gppRequest) AmfNon3GppAccessRegistration(amfNon3GppAccessRegistration AmfNon3GppAccessRegistration) ApiCreateAmfContextNon3gppRequest {
	r.amfNon3GppAccessRegistration = &amfNon3GppAccessRegistration
	return r
}

func (r ApiCreateAmfContextNon3gppRequest) Execute() (*Amf3GppAccessRegistration, *http.Response, error) {
	return r.ApiService.CreateAmfContextNon3gppExecute(r)
}

/*
CreateAmfContextNon3gpp To store the AMF context data of a UE using non-3gpp access in the UDR

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ueId UE id
 @return ApiCreateAmfContextNon3gppRequest
*/
func (a *AMFNon3GPPAccessRegistrationDocumentApiService) CreateAmfContextNon3gpp(ctx context.Context, ueId string) ApiCreateAmfContextNon3gppRequest {
	return ApiCreateAmfContextNon3gppRequest{
		ApiService: a,
		ctx: ctx,
		ueId: ueId,
	}
}

// Execute executes the request
//  @return Amf3GppAccessRegistration
func (a *AMFNon3GPPAccessRegistrationDocumentApiService) CreateAmfContextNon3gppExecute(r ApiCreateAmfContextNon3gppRequest) (*Amf3GppAccessRegistration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Amf3GppAccessRegistration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AMFNon3GPPAccessRegistrationDocumentApiService.CreateAmfContextNon3gpp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/amf-non-3gpp-access"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.amfNon3GppAccessRegistration == nil {
		return localVarReturnValue, nil, reportError("amfNon3GppAccessRegistration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.amfNon3GppAccessRegistration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryAmfContextNon3gppRequest struct {
	ctx context.Context
	ApiService *AMFNon3GPPAccessRegistrationDocumentApiService
	ueId string
	fields *[]string
	supportedFeatures *string
}

// attributes to be retrieved
func (r ApiQueryAmfContextNon3gppRequest) Fields(fields []string) ApiQueryAmfContextNon3gppRequest {
	r.fields = &fields
	return r
}

// Supported Features
func (r ApiQueryAmfContextNon3gppRequest) SupportedFeatures(supportedFeatures string) ApiQueryAmfContextNon3gppRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

func (r ApiQueryAmfContextNon3gppRequest) Execute() (*AmfNon3GppAccessRegistration, *http.Response, error) {
	return r.ApiService.QueryAmfContextNon3gppExecute(r)
}

/*
QueryAmfContextNon3gpp Retrieves the AMF context data of a UE using non-3gpp access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ueId UE id
 @return ApiQueryAmfContextNon3gppRequest
*/
func (a *AMFNon3GPPAccessRegistrationDocumentApiService) QueryAmfContextNon3gpp(ctx context.Context, ueId string) ApiQueryAmfContextNon3gppRequest {
	return ApiQueryAmfContextNon3gppRequest{
		ApiService: a,
		ctx: ctx,
		ueId: ueId,
	}
}

// Execute executes the request
//  @return AmfNon3GppAccessRegistration
func (a *AMFNon3GPPAccessRegistrationDocumentApiService) QueryAmfContextNon3gppExecute(r ApiQueryAmfContextNon3gppRequest) (*AmfNon3GppAccessRegistration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AmfNon3GppAccessRegistration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AMFNon3GPPAccessRegistrationDocumentApiService.QueryAmfContextNon3gpp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/amf-non-3gpp-access"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.supportedFeatures != nil {
		parameterAddToQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
