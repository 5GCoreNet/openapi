/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the DatalinkReportingConfiguration1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatalinkReportingConfiguration1{}

// DatalinkReportingConfiguration1 struct for DatalinkReportingConfiguration1
type DatalinkReportingConfiguration1 struct {
	DddTrafficDes []DddTrafficDescriptor1 `json:"dddTrafficDes,omitempty"`
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn *string `json:"dnn,omitempty"`
	Slice *Snssai `json:"slice,omitempty"`
	DddStatusList []DlDataDeliveryStatus `json:"dddStatusList,omitempty"`
}

// NewDatalinkReportingConfiguration1 instantiates a new DatalinkReportingConfiguration1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatalinkReportingConfiguration1() *DatalinkReportingConfiguration1 {
	this := DatalinkReportingConfiguration1{}
	return &this
}

// NewDatalinkReportingConfiguration1WithDefaults instantiates a new DatalinkReportingConfiguration1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatalinkReportingConfiguration1WithDefaults() *DatalinkReportingConfiguration1 {
	this := DatalinkReportingConfiguration1{}
	return &this
}

// GetDddTrafficDes returns the DddTrafficDes field value if set, zero value otherwise.
func (o *DatalinkReportingConfiguration1) GetDddTrafficDes() []DddTrafficDescriptor1 {
	if o == nil || isNil(o.DddTrafficDes) {
		var ret []DddTrafficDescriptor1
		return ret
	}
	return o.DddTrafficDes
}

// GetDddTrafficDesOk returns a tuple with the DddTrafficDes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatalinkReportingConfiguration1) GetDddTrafficDesOk() ([]DddTrafficDescriptor1, bool) {
	if o == nil || isNil(o.DddTrafficDes) {
		return nil, false
	}
	return o.DddTrafficDes, true
}

// HasDddTrafficDes returns a boolean if a field has been set.
func (o *DatalinkReportingConfiguration1) HasDddTrafficDes() bool {
	if o != nil && !isNil(o.DddTrafficDes) {
		return true
	}

	return false
}

// SetDddTrafficDes gets a reference to the given []DddTrafficDescriptor1 and assigns it to the DddTrafficDes field.
func (o *DatalinkReportingConfiguration1) SetDddTrafficDes(v []DddTrafficDescriptor1) {
	o.DddTrafficDes = v
}

// GetDnn returns the Dnn field value if set, zero value otherwise.
func (o *DatalinkReportingConfiguration1) GetDnn() string {
	if o == nil || isNil(o.Dnn) {
		var ret string
		return ret
	}
	return *o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatalinkReportingConfiguration1) GetDnnOk() (*string, bool) {
	if o == nil || isNil(o.Dnn) {
		return nil, false
	}
	return o.Dnn, true
}

// HasDnn returns a boolean if a field has been set.
func (o *DatalinkReportingConfiguration1) HasDnn() bool {
	if o != nil && !isNil(o.Dnn) {
		return true
	}

	return false
}

// SetDnn gets a reference to the given string and assigns it to the Dnn field.
func (o *DatalinkReportingConfiguration1) SetDnn(v string) {
	o.Dnn = &v
}

// GetSlice returns the Slice field value if set, zero value otherwise.
func (o *DatalinkReportingConfiguration1) GetSlice() Snssai {
	if o == nil || isNil(o.Slice) {
		var ret Snssai
		return ret
	}
	return *o.Slice
}

// GetSliceOk returns a tuple with the Slice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatalinkReportingConfiguration1) GetSliceOk() (*Snssai, bool) {
	if o == nil || isNil(o.Slice) {
		return nil, false
	}
	return o.Slice, true
}

// HasSlice returns a boolean if a field has been set.
func (o *DatalinkReportingConfiguration1) HasSlice() bool {
	if o != nil && !isNil(o.Slice) {
		return true
	}

	return false
}

// SetSlice gets a reference to the given Snssai and assigns it to the Slice field.
func (o *DatalinkReportingConfiguration1) SetSlice(v Snssai) {
	o.Slice = &v
}

// GetDddStatusList returns the DddStatusList field value if set, zero value otherwise.
func (o *DatalinkReportingConfiguration1) GetDddStatusList() []DlDataDeliveryStatus {
	if o == nil || isNil(o.DddStatusList) {
		var ret []DlDataDeliveryStatus
		return ret
	}
	return o.DddStatusList
}

// GetDddStatusListOk returns a tuple with the DddStatusList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatalinkReportingConfiguration1) GetDddStatusListOk() ([]DlDataDeliveryStatus, bool) {
	if o == nil || isNil(o.DddStatusList) {
		return nil, false
	}
	return o.DddStatusList, true
}

// HasDddStatusList returns a boolean if a field has been set.
func (o *DatalinkReportingConfiguration1) HasDddStatusList() bool {
	if o != nil && !isNil(o.DddStatusList) {
		return true
	}

	return false
}

// SetDddStatusList gets a reference to the given []DlDataDeliveryStatus and assigns it to the DddStatusList field.
func (o *DatalinkReportingConfiguration1) SetDddStatusList(v []DlDataDeliveryStatus) {
	o.DddStatusList = v
}

func (o DatalinkReportingConfiguration1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatalinkReportingConfiguration1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DddTrafficDes) {
		toSerialize["dddTrafficDes"] = o.DddTrafficDes
	}
	if !isNil(o.Dnn) {
		toSerialize["dnn"] = o.Dnn
	}
	if !isNil(o.Slice) {
		toSerialize["slice"] = o.Slice
	}
	if !isNil(o.DddStatusList) {
		toSerialize["dddStatusList"] = o.DddStatusList
	}
	return toSerialize, nil
}

type NullableDatalinkReportingConfiguration1 struct {
	value *DatalinkReportingConfiguration1
	isSet bool
}

func (v NullableDatalinkReportingConfiguration1) Get() *DatalinkReportingConfiguration1 {
	return v.value
}

func (v *NullableDatalinkReportingConfiguration1) Set(val *DatalinkReportingConfiguration1) {
	v.value = val
	v.isSet = true
}

func (v NullableDatalinkReportingConfiguration1) IsSet() bool {
	return v.isSet
}

func (v *NullableDatalinkReportingConfiguration1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatalinkReportingConfiguration1(val *DatalinkReportingConfiguration1) *NullableDatalinkReportingConfiguration1 {
	return &NullableDatalinkReportingConfiguration1{value: val, isSet: true}
}

func (v NullableDatalinkReportingConfiguration1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatalinkReportingConfiguration1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


