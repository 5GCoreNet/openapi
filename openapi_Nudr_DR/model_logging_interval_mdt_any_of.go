/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
	"fmt"
)

// LoggingIntervalMdtAnyOf the model 'LoggingIntervalMdtAnyOf'
type LoggingIntervalMdtAnyOf string

// List of LoggingIntervalMdt_anyOf
const (
	_128 LoggingIntervalMdtAnyOf = "128"
	_256 LoggingIntervalMdtAnyOf = "256"
	_512 LoggingIntervalMdtAnyOf = "512"
	_1024 LoggingIntervalMdtAnyOf = "1024"
	_2048 LoggingIntervalMdtAnyOf = "2048"
	_3072 LoggingIntervalMdtAnyOf = "3072"
	_4096 LoggingIntervalMdtAnyOf = "4096"
	_6144 LoggingIntervalMdtAnyOf = "6144"
)

// All allowed values of LoggingIntervalMdtAnyOf enum
var AllowedLoggingIntervalMdtAnyOfEnumValues = []LoggingIntervalMdtAnyOf{
	"128",
	"256",
	"512",
	"1024",
	"2048",
	"3072",
	"4096",
	"6144",
}

func (v *LoggingIntervalMdtAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoggingIntervalMdtAnyOf(value)
	for _, existing := range AllowedLoggingIntervalMdtAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoggingIntervalMdtAnyOf", value)
}

// NewLoggingIntervalMdtAnyOfFromValue returns a pointer to a valid LoggingIntervalMdtAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoggingIntervalMdtAnyOfFromValue(v string) (*LoggingIntervalMdtAnyOf, error) {
	ev := LoggingIntervalMdtAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoggingIntervalMdtAnyOf: valid values are %v", v, AllowedLoggingIntervalMdtAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoggingIntervalMdtAnyOf) IsValid() bool {
	for _, existing := range AllowedLoggingIntervalMdtAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoggingIntervalMdt_anyOf value
func (v LoggingIntervalMdtAnyOf) Ptr() *LoggingIntervalMdtAnyOf {
	return &v
}

type NullableLoggingIntervalMdtAnyOf struct {
	value *LoggingIntervalMdtAnyOf
	isSet bool
}

func (v NullableLoggingIntervalMdtAnyOf) Get() *LoggingIntervalMdtAnyOf {
	return v.value
}

func (v *NullableLoggingIntervalMdtAnyOf) Set(val *LoggingIntervalMdtAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggingIntervalMdtAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggingIntervalMdtAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggingIntervalMdtAnyOf(val *LoggingIntervalMdtAnyOf) *NullableLoggingIntervalMdtAnyOf {
	return &NullableLoggingIntervalMdtAnyOf{value: val, isSet: true}
}

func (v NullableLoggingIntervalMdtAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggingIntervalMdtAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

