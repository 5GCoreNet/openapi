/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// GroupIdentifiersApiService GroupIdentifiersApi service
type GroupIdentifiersApiService service

type ApiGetGroupIdentifiersRequest struct {
	ctx               context.Context
	ApiService        *GroupIdentifiersApiService
	extGroupId        *string
	intGroupId        *string
	ueIdInd           *bool
	supportedFeatures *string
}

// External Group Identifier
func (r ApiGetGroupIdentifiersRequest) ExtGroupId(extGroupId string) ApiGetGroupIdentifiersRequest {
	r.extGroupId = &extGroupId
	return r
}

// Internal Group Identifier
func (r ApiGetGroupIdentifiersRequest) IntGroupId(intGroupId string) ApiGetGroupIdentifiersRequest {
	r.intGroupId = &intGroupId
	return r
}

// Indication whether UE identifiers are required or not
func (r ApiGetGroupIdentifiersRequest) UeIdInd(ueIdInd bool) ApiGetGroupIdentifiersRequest {
	r.ueIdInd = &ueIdInd
	return r
}

// Supported Features
func (r ApiGetGroupIdentifiersRequest) SupportedFeatures(supportedFeatures string) ApiGetGroupIdentifiersRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

func (r ApiGetGroupIdentifiersRequest) Execute() (*GroupIdentifiers, *http.Response, error) {
	return r.ApiService.GetGroupIdentifiersExecute(r)
}

/*
GetGroupIdentifiers Mapping of Group Identifiers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetGroupIdentifiersRequest
*/
func (a *GroupIdentifiersApiService) GetGroupIdentifiers(ctx context.Context) ApiGetGroupIdentifiersRequest {
	return ApiGetGroupIdentifiersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GroupIdentifiers
func (a *GroupIdentifiersApiService) GetGroupIdentifiersExecute(r ApiGetGroupIdentifiersRequest) (*GroupIdentifiers, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GroupIdentifiers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupIdentifiersApiService.GetGroupIdentifiers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/group-data/group-identifiers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.extGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ext-group-id", r.extGroupId, "")
	}
	if r.intGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "int-group-id", r.intGroupId, "")
	}
	if r.ueIdInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ue-id-ind", r.ueIdInd, "")
	}
	if r.supportedFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
