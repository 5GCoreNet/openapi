/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the LimitIdToMonitoringKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LimitIdToMonitoringKey{}

// LimitIdToMonitoringKey Contains the limit identifier and the corresponding monitoring key for a given S-NSSAI and DNN. 
type LimitIdToMonitoringKey struct {
	LimitId string `json:"limitId"`
	Monkey []string `json:"monkey,omitempty"`
}

// NewLimitIdToMonitoringKey instantiates a new LimitIdToMonitoringKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitIdToMonitoringKey(limitId string) *LimitIdToMonitoringKey {
	this := LimitIdToMonitoringKey{}
	this.LimitId = limitId
	return &this
}

// NewLimitIdToMonitoringKeyWithDefaults instantiates a new LimitIdToMonitoringKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitIdToMonitoringKeyWithDefaults() *LimitIdToMonitoringKey {
	this := LimitIdToMonitoringKey{}
	return &this
}

// GetLimitId returns the LimitId field value
func (o *LimitIdToMonitoringKey) GetLimitId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LimitId
}

// GetLimitIdOk returns a tuple with the LimitId field value
// and a boolean to check if the value has been set.
func (o *LimitIdToMonitoringKey) GetLimitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LimitId, true
}

// SetLimitId sets field value
func (o *LimitIdToMonitoringKey) SetLimitId(v string) {
	o.LimitId = v
}

// GetMonkey returns the Monkey field value if set, zero value otherwise.
func (o *LimitIdToMonitoringKey) GetMonkey() []string {
	if o == nil || IsNil(o.Monkey) {
		var ret []string
		return ret
	}
	return o.Monkey
}

// GetMonkeyOk returns a tuple with the Monkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitIdToMonitoringKey) GetMonkeyOk() ([]string, bool) {
	if o == nil || IsNil(o.Monkey) {
		return nil, false
	}
	return o.Monkey, true
}

// HasMonkey returns a boolean if a field has been set.
func (o *LimitIdToMonitoringKey) HasMonkey() bool {
	if o != nil && !IsNil(o.Monkey) {
		return true
	}

	return false
}

// SetMonkey gets a reference to the given []string and assigns it to the Monkey field.
func (o *LimitIdToMonitoringKey) SetMonkey(v []string) {
	o.Monkey = v
}

func (o LimitIdToMonitoringKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LimitIdToMonitoringKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limitId"] = o.LimitId
	if !IsNil(o.Monkey) {
		toSerialize["monkey"] = o.Monkey
	}
	return toSerialize, nil
}

type NullableLimitIdToMonitoringKey struct {
	value *LimitIdToMonitoringKey
	isSet bool
}

func (v NullableLimitIdToMonitoringKey) Get() *LimitIdToMonitoringKey {
	return v.value
}

func (v *NullableLimitIdToMonitoringKey) Set(val *LimitIdToMonitoringKey) {
	v.value = val
	v.isSet = true
}

func (v NullableLimitIdToMonitoringKey) IsSet() bool {
	return v.isSet
}

func (v *NullableLimitIdToMonitoringKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimitIdToMonitoringKey(val *LimitIdToMonitoringKey) *NullableLimitIdToMonitoringKey {
	return &NullableLimitIdToMonitoringKey{value: val, isSet: true}
}

func (v NullableLimitIdToMonitoringKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimitIdToMonitoringKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


