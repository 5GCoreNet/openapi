/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
	"fmt"
)

// UsageMonLevelAnyOf the model 'UsageMonLevelAnyOf'
type UsageMonLevelAnyOf string

// List of UsageMonLevel_anyOf
const (
	SESSION_LEVEL UsageMonLevelAnyOf = "SESSION_LEVEL"
	SERVICE_LEVEL UsageMonLevelAnyOf = "SERVICE_LEVEL"
)

// All allowed values of UsageMonLevelAnyOf enum
var AllowedUsageMonLevelAnyOfEnumValues = []UsageMonLevelAnyOf{
	"SESSION_LEVEL",
	"SERVICE_LEVEL",
}

func (v *UsageMonLevelAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UsageMonLevelAnyOf(value)
	for _, existing := range AllowedUsageMonLevelAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UsageMonLevelAnyOf", value)
}

// NewUsageMonLevelAnyOfFromValue returns a pointer to a valid UsageMonLevelAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageMonLevelAnyOfFromValue(v string) (*UsageMonLevelAnyOf, error) {
	ev := UsageMonLevelAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageMonLevelAnyOf: valid values are %v", v, AllowedUsageMonLevelAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageMonLevelAnyOf) IsValid() bool {
	for _, existing := range AllowedUsageMonLevelAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageMonLevel_anyOf value
func (v UsageMonLevelAnyOf) Ptr() *UsageMonLevelAnyOf {
	return &v
}

type NullableUsageMonLevelAnyOf struct {
	value *UsageMonLevelAnyOf
	isSet bool
}

func (v NullableUsageMonLevelAnyOf) Get() *UsageMonLevelAnyOf {
	return v.value
}

func (v *NullableUsageMonLevelAnyOf) Set(val *UsageMonLevelAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageMonLevelAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageMonLevelAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageMonLevelAnyOf(val *UsageMonLevelAnyOf) *NullableUsageMonLevelAnyOf {
	return &NullableUsageMonLevelAnyOf{value: val, isSet: true}
}

func (v NullableUsageMonLevelAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageMonLevelAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

