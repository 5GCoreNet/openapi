/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the ReachabilityForDataConfiguration1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReachabilityForDataConfiguration1{}

// ReachabilityForDataConfiguration1 struct for ReachabilityForDataConfiguration1
type ReachabilityForDataConfiguration1 struct {
	ReportCfg ReachabilityForDataReportConfig `json:"reportCfg"`
	// indicating a time in seconds.
	MinInterval *int32 `json:"minInterval,omitempty"`
}

// NewReachabilityForDataConfiguration1 instantiates a new ReachabilityForDataConfiguration1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReachabilityForDataConfiguration1(reportCfg ReachabilityForDataReportConfig) *ReachabilityForDataConfiguration1 {
	this := ReachabilityForDataConfiguration1{}
	this.ReportCfg = reportCfg
	return &this
}

// NewReachabilityForDataConfiguration1WithDefaults instantiates a new ReachabilityForDataConfiguration1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReachabilityForDataConfiguration1WithDefaults() *ReachabilityForDataConfiguration1 {
	this := ReachabilityForDataConfiguration1{}
	return &this
}

// GetReportCfg returns the ReportCfg field value
func (o *ReachabilityForDataConfiguration1) GetReportCfg() ReachabilityForDataReportConfig {
	if o == nil {
		var ret ReachabilityForDataReportConfig
		return ret
	}

	return o.ReportCfg
}

// GetReportCfgOk returns a tuple with the ReportCfg field value
// and a boolean to check if the value has been set.
func (o *ReachabilityForDataConfiguration1) GetReportCfgOk() (*ReachabilityForDataReportConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportCfg, true
}

// SetReportCfg sets field value
func (o *ReachabilityForDataConfiguration1) SetReportCfg(v ReachabilityForDataReportConfig) {
	o.ReportCfg = v
}

// GetMinInterval returns the MinInterval field value if set, zero value otherwise.
func (o *ReachabilityForDataConfiguration1) GetMinInterval() int32 {
	if o == nil || IsNil(o.MinInterval) {
		var ret int32
		return ret
	}
	return *o.MinInterval
}

// GetMinIntervalOk returns a tuple with the MinInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachabilityForDataConfiguration1) GetMinIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.MinInterval) {
		return nil, false
	}
	return o.MinInterval, true
}

// HasMinInterval returns a boolean if a field has been set.
func (o *ReachabilityForDataConfiguration1) HasMinInterval() bool {
	if o != nil && !IsNil(o.MinInterval) {
		return true
	}

	return false
}

// SetMinInterval gets a reference to the given int32 and assigns it to the MinInterval field.
func (o *ReachabilityForDataConfiguration1) SetMinInterval(v int32) {
	o.MinInterval = &v
}

func (o ReachabilityForDataConfiguration1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReachabilityForDataConfiguration1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reportCfg"] = o.ReportCfg
	if !IsNil(o.MinInterval) {
		toSerialize["minInterval"] = o.MinInterval
	}
	return toSerialize, nil
}

type NullableReachabilityForDataConfiguration1 struct {
	value *ReachabilityForDataConfiguration1
	isSet bool
}

func (v NullableReachabilityForDataConfiguration1) Get() *ReachabilityForDataConfiguration1 {
	return v.value
}

func (v *NullableReachabilityForDataConfiguration1) Set(val *ReachabilityForDataConfiguration1) {
	v.value = val
	v.isSet = true
}

func (v NullableReachabilityForDataConfiguration1) IsSet() bool {
	return v.isSet
}

func (v *NullableReachabilityForDataConfiguration1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReachabilityForDataConfiguration1(val *ReachabilityForDataConfiguration1) *NullableReachabilityForDataConfiguration1 {
	return &NullableReachabilityForDataConfiguration1{value: val, isSet: true}
}

func (v NullableReachabilityForDataConfiguration1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReachabilityForDataConfiguration1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
