/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the CagInfo1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CagInfo1{}

// CagInfo1 struct for CagInfo1
type CagInfo1 struct {
	AllowedCagList []string `json:"allowedCagList"`
	CagOnlyIndicator *bool `json:"cagOnlyIndicator,omitempty"`
}

// NewCagInfo1 instantiates a new CagInfo1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCagInfo1(allowedCagList []string) *CagInfo1 {
	this := CagInfo1{}
	this.AllowedCagList = allowedCagList
	return &this
}

// NewCagInfo1WithDefaults instantiates a new CagInfo1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCagInfo1WithDefaults() *CagInfo1 {
	this := CagInfo1{}
	return &this
}

// GetAllowedCagList returns the AllowedCagList field value
func (o *CagInfo1) GetAllowedCagList() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedCagList
}

// GetAllowedCagListOk returns a tuple with the AllowedCagList field value
// and a boolean to check if the value has been set.
func (o *CagInfo1) GetAllowedCagListOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedCagList, true
}

// SetAllowedCagList sets field value
func (o *CagInfo1) SetAllowedCagList(v []string) {
	o.AllowedCagList = v
}

// GetCagOnlyIndicator returns the CagOnlyIndicator field value if set, zero value otherwise.
func (o *CagInfo1) GetCagOnlyIndicator() bool {
	if o == nil || isNil(o.CagOnlyIndicator) {
		var ret bool
		return ret
	}
	return *o.CagOnlyIndicator
}

// GetCagOnlyIndicatorOk returns a tuple with the CagOnlyIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CagInfo1) GetCagOnlyIndicatorOk() (*bool, bool) {
	if o == nil || isNil(o.CagOnlyIndicator) {
		return nil, false
	}
	return o.CagOnlyIndicator, true
}

// HasCagOnlyIndicator returns a boolean if a field has been set.
func (o *CagInfo1) HasCagOnlyIndicator() bool {
	if o != nil && !isNil(o.CagOnlyIndicator) {
		return true
	}

	return false
}

// SetCagOnlyIndicator gets a reference to the given bool and assigns it to the CagOnlyIndicator field.
func (o *CagInfo1) SetCagOnlyIndicator(v bool) {
	o.CagOnlyIndicator = &v
}

func (o CagInfo1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CagInfo1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowedCagList"] = o.AllowedCagList
	if !isNil(o.CagOnlyIndicator) {
		toSerialize["cagOnlyIndicator"] = o.CagOnlyIndicator
	}
	return toSerialize, nil
}

type NullableCagInfo1 struct {
	value *CagInfo1
	isSet bool
}

func (v NullableCagInfo1) Get() *CagInfo1 {
	return v.value
}

func (v *NullableCagInfo1) Set(val *CagInfo1) {
	v.value = val
	v.isSet = true
}

func (v NullableCagInfo1) IsSet() bool {
	return v.isSet
}

func (v *NullableCagInfo1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCagInfo1(val *CagInfo1) *NullableCagInfo1 {
	return &NullableCagInfo1{value: val, isSet: true}
}

func (v NullableCagInfo1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCagInfo1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


