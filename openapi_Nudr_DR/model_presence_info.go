/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the PresenceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PresenceInfo{}

// PresenceInfo If the additionalPraId IE is present, this IE shall state the presence information of the UE for the individual PRA identified by the additionalPraId IE;  If the additionalPraId IE is not present, this IE shall state the presence information of the UE for the PRA identified by the praId IE. 
type PresenceInfo struct {
	// Represents an identifier of the Presence Reporting Area (see clause 28.10 of 3GPP  TS 23.003.  This IE shall be present  if the Area of Interest subscribed or reported is a Presence Reporting Area or a Set of Core Network predefined Presence Reporting Areas. When present, it shall be encoded as a string representing an integer in the following ranges: 0 to 8 388 607 for UE-dedicated PRA 8 388 608 to 16 777 215 for Core Network predefined PRA Examples: PRA ID 123 is encoded as \"123\" PRA ID 11 238 660 is encoded as \"11238660\" 
	PraId *string `json:"praId,omitempty"`
	// This IE may be present if the praId IE is present and if it contains a PRA identifier referring to a set of Core Network predefined Presence Reporting Areas. When present, this IE shall contain a PRA Identifier of an individual PRA within the Set of Core Network predefined Presence Reporting Areas indicated by the praId IE.  
	AdditionalPraId *string `json:"additionalPraId,omitempty"`
	PresenceState *PresenceState `json:"presenceState,omitempty"`
	// Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or  the event report is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI.  
	TrackingAreaList []Tai1 `json:"trackingAreaList,omitempty"`
	// Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids.  
	EcgiList []Ecgi1 `json:"ecgiList,omitempty"`
	// Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids.  
	NcgiList []Ncgi1 `json:"ncgiList,omitempty"`
	// Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers.  
	GlobalRanNodeIdList []GlobalRanNodeId1 `json:"globalRanNodeIdList,omitempty"`
	// Represents the list of eNodeB identifiers that constitutes the area. This IE shall be  present if the Area of Interest subscribed is a list of eNodeB identifiers. 
	GlobaleNbIdList []GlobalRanNodeId1 `json:"globaleNbIdList,omitempty"`
}

// NewPresenceInfo instantiates a new PresenceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresenceInfo() *PresenceInfo {
	this := PresenceInfo{}
	return &this
}

// NewPresenceInfoWithDefaults instantiates a new PresenceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresenceInfoWithDefaults() *PresenceInfo {
	this := PresenceInfo{}
	return &this
}

// GetPraId returns the PraId field value if set, zero value otherwise.
func (o *PresenceInfo) GetPraId() string {
	if o == nil || IsNil(o.PraId) {
		var ret string
		return ret
	}
	return *o.PraId
}

// GetPraIdOk returns a tuple with the PraId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetPraIdOk() (*string, bool) {
	if o == nil || IsNil(o.PraId) {
		return nil, false
	}
	return o.PraId, true
}

// HasPraId returns a boolean if a field has been set.
func (o *PresenceInfo) HasPraId() bool {
	if o != nil && !IsNil(o.PraId) {
		return true
	}

	return false
}

// SetPraId gets a reference to the given string and assigns it to the PraId field.
func (o *PresenceInfo) SetPraId(v string) {
	o.PraId = &v
}

// GetAdditionalPraId returns the AdditionalPraId field value if set, zero value otherwise.
func (o *PresenceInfo) GetAdditionalPraId() string {
	if o == nil || IsNil(o.AdditionalPraId) {
		var ret string
		return ret
	}
	return *o.AdditionalPraId
}

// GetAdditionalPraIdOk returns a tuple with the AdditionalPraId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetAdditionalPraIdOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalPraId) {
		return nil, false
	}
	return o.AdditionalPraId, true
}

// HasAdditionalPraId returns a boolean if a field has been set.
func (o *PresenceInfo) HasAdditionalPraId() bool {
	if o != nil && !IsNil(o.AdditionalPraId) {
		return true
	}

	return false
}

// SetAdditionalPraId gets a reference to the given string and assigns it to the AdditionalPraId field.
func (o *PresenceInfo) SetAdditionalPraId(v string) {
	o.AdditionalPraId = &v
}

// GetPresenceState returns the PresenceState field value if set, zero value otherwise.
func (o *PresenceInfo) GetPresenceState() PresenceState {
	if o == nil || IsNil(o.PresenceState) {
		var ret PresenceState
		return ret
	}
	return *o.PresenceState
}

// GetPresenceStateOk returns a tuple with the PresenceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetPresenceStateOk() (*PresenceState, bool) {
	if o == nil || IsNil(o.PresenceState) {
		return nil, false
	}
	return o.PresenceState, true
}

// HasPresenceState returns a boolean if a field has been set.
func (o *PresenceInfo) HasPresenceState() bool {
	if o != nil && !IsNil(o.PresenceState) {
		return true
	}

	return false
}

// SetPresenceState gets a reference to the given PresenceState and assigns it to the PresenceState field.
func (o *PresenceInfo) SetPresenceState(v PresenceState) {
	o.PresenceState = &v
}

// GetTrackingAreaList returns the TrackingAreaList field value if set, zero value otherwise.
func (o *PresenceInfo) GetTrackingAreaList() []Tai1 {
	if o == nil || IsNil(o.TrackingAreaList) {
		var ret []Tai1
		return ret
	}
	return o.TrackingAreaList
}

// GetTrackingAreaListOk returns a tuple with the TrackingAreaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetTrackingAreaListOk() ([]Tai1, bool) {
	if o == nil || IsNil(o.TrackingAreaList) {
		return nil, false
	}
	return o.TrackingAreaList, true
}

// HasTrackingAreaList returns a boolean if a field has been set.
func (o *PresenceInfo) HasTrackingAreaList() bool {
	if o != nil && !IsNil(o.TrackingAreaList) {
		return true
	}

	return false
}

// SetTrackingAreaList gets a reference to the given []Tai1 and assigns it to the TrackingAreaList field.
func (o *PresenceInfo) SetTrackingAreaList(v []Tai1) {
	o.TrackingAreaList = v
}

// GetEcgiList returns the EcgiList field value if set, zero value otherwise.
func (o *PresenceInfo) GetEcgiList() []Ecgi1 {
	if o == nil || IsNil(o.EcgiList) {
		var ret []Ecgi1
		return ret
	}
	return o.EcgiList
}

// GetEcgiListOk returns a tuple with the EcgiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetEcgiListOk() ([]Ecgi1, bool) {
	if o == nil || IsNil(o.EcgiList) {
		return nil, false
	}
	return o.EcgiList, true
}

// HasEcgiList returns a boolean if a field has been set.
func (o *PresenceInfo) HasEcgiList() bool {
	if o != nil && !IsNil(o.EcgiList) {
		return true
	}

	return false
}

// SetEcgiList gets a reference to the given []Ecgi1 and assigns it to the EcgiList field.
func (o *PresenceInfo) SetEcgiList(v []Ecgi1) {
	o.EcgiList = v
}

// GetNcgiList returns the NcgiList field value if set, zero value otherwise.
func (o *PresenceInfo) GetNcgiList() []Ncgi1 {
	if o == nil || IsNil(o.NcgiList) {
		var ret []Ncgi1
		return ret
	}
	return o.NcgiList
}

// GetNcgiListOk returns a tuple with the NcgiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetNcgiListOk() ([]Ncgi1, bool) {
	if o == nil || IsNil(o.NcgiList) {
		return nil, false
	}
	return o.NcgiList, true
}

// HasNcgiList returns a boolean if a field has been set.
func (o *PresenceInfo) HasNcgiList() bool {
	if o != nil && !IsNil(o.NcgiList) {
		return true
	}

	return false
}

// SetNcgiList gets a reference to the given []Ncgi1 and assigns it to the NcgiList field.
func (o *PresenceInfo) SetNcgiList(v []Ncgi1) {
	o.NcgiList = v
}

// GetGlobalRanNodeIdList returns the GlobalRanNodeIdList field value if set, zero value otherwise.
func (o *PresenceInfo) GetGlobalRanNodeIdList() []GlobalRanNodeId1 {
	if o == nil || IsNil(o.GlobalRanNodeIdList) {
		var ret []GlobalRanNodeId1
		return ret
	}
	return o.GlobalRanNodeIdList
}

// GetGlobalRanNodeIdListOk returns a tuple with the GlobalRanNodeIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetGlobalRanNodeIdListOk() ([]GlobalRanNodeId1, bool) {
	if o == nil || IsNil(o.GlobalRanNodeIdList) {
		return nil, false
	}
	return o.GlobalRanNodeIdList, true
}

// HasGlobalRanNodeIdList returns a boolean if a field has been set.
func (o *PresenceInfo) HasGlobalRanNodeIdList() bool {
	if o != nil && !IsNil(o.GlobalRanNodeIdList) {
		return true
	}

	return false
}

// SetGlobalRanNodeIdList gets a reference to the given []GlobalRanNodeId1 and assigns it to the GlobalRanNodeIdList field.
func (o *PresenceInfo) SetGlobalRanNodeIdList(v []GlobalRanNodeId1) {
	o.GlobalRanNodeIdList = v
}

// GetGlobaleNbIdList returns the GlobaleNbIdList field value if set, zero value otherwise.
func (o *PresenceInfo) GetGlobaleNbIdList() []GlobalRanNodeId1 {
	if o == nil || IsNil(o.GlobaleNbIdList) {
		var ret []GlobalRanNodeId1
		return ret
	}
	return o.GlobaleNbIdList
}

// GetGlobaleNbIdListOk returns a tuple with the GlobaleNbIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetGlobaleNbIdListOk() ([]GlobalRanNodeId1, bool) {
	if o == nil || IsNil(o.GlobaleNbIdList) {
		return nil, false
	}
	return o.GlobaleNbIdList, true
}

// HasGlobaleNbIdList returns a boolean if a field has been set.
func (o *PresenceInfo) HasGlobaleNbIdList() bool {
	if o != nil && !IsNil(o.GlobaleNbIdList) {
		return true
	}

	return false
}

// SetGlobaleNbIdList gets a reference to the given []GlobalRanNodeId1 and assigns it to the GlobaleNbIdList field.
func (o *PresenceInfo) SetGlobaleNbIdList(v []GlobalRanNodeId1) {
	o.GlobaleNbIdList = v
}

func (o PresenceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PresenceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PraId) {
		toSerialize["praId"] = o.PraId
	}
	if !IsNil(o.AdditionalPraId) {
		toSerialize["additionalPraId"] = o.AdditionalPraId
	}
	if !IsNil(o.PresenceState) {
		toSerialize["presenceState"] = o.PresenceState
	}
	if !IsNil(o.TrackingAreaList) {
		toSerialize["trackingAreaList"] = o.TrackingAreaList
	}
	if !IsNil(o.EcgiList) {
		toSerialize["ecgiList"] = o.EcgiList
	}
	if !IsNil(o.NcgiList) {
		toSerialize["ncgiList"] = o.NcgiList
	}
	if !IsNil(o.GlobalRanNodeIdList) {
		toSerialize["globalRanNodeIdList"] = o.GlobalRanNodeIdList
	}
	if !IsNil(o.GlobaleNbIdList) {
		toSerialize["globaleNbIdList"] = o.GlobaleNbIdList
	}
	return toSerialize, nil
}

type NullablePresenceInfo struct {
	value *PresenceInfo
	isSet bool
}

func (v NullablePresenceInfo) Get() *PresenceInfo {
	return v.value
}

func (v *NullablePresenceInfo) Set(val *PresenceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePresenceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePresenceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresenceInfo(val *PresenceInfo) *NullablePresenceInfo {
	return &NullablePresenceInfo{value: val, isSet: true}
}

func (v NullablePresenceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresenceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


