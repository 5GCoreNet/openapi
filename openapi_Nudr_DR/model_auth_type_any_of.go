/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
	"fmt"
)

// AuthTypeAnyOf the model 'AuthTypeAnyOf'
type AuthTypeAnyOf string

// List of AuthType_anyOf
const (
	_5_G_AKA AuthTypeAnyOf = "5G_AKA"
	EAP_AKA_PRIME AuthTypeAnyOf = "EAP_AKA_PRIME"
	EAP_TLS AuthTypeAnyOf = "EAP_TLS"
	NONE AuthTypeAnyOf = "NONE"
	EAP_TTLS AuthTypeAnyOf = "EAP_TTLS"
)

// All allowed values of AuthTypeAnyOf enum
var AllowedAuthTypeAnyOfEnumValues = []AuthTypeAnyOf{
	"5G_AKA",
	"EAP_AKA_PRIME",
	"EAP_TLS",
	"NONE",
	"EAP_TTLS",
}

func (v *AuthTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthTypeAnyOf(value)
	for _, existing := range AllowedAuthTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthTypeAnyOf", value)
}

// NewAuthTypeAnyOfFromValue returns a pointer to a valid AuthTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthTypeAnyOfFromValue(v string) (*AuthTypeAnyOf, error) {
	ev := AuthTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthTypeAnyOf: valid values are %v", v, AllowedAuthTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedAuthTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthType_anyOf value
func (v AuthTypeAnyOf) Ptr() *AuthTypeAnyOf {
	return &v
}

type NullableAuthTypeAnyOf struct {
	value *AuthTypeAnyOf
	isSet bool
}

func (v NullableAuthTypeAnyOf) Get() *AuthTypeAnyOf {
	return v.value
}

func (v *NullableAuthTypeAnyOf) Set(val *AuthTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthTypeAnyOf(val *AuthTypeAnyOf) *NullableAuthTypeAnyOf {
	return &NullableAuthTypeAnyOf{value: val, isSet: true}
}

func (v NullableAuthTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

