/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the Tai1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tai1{}

// Tai1 Contains the tracking area identity as described in 3GPP 23.003
type Tai1 struct {
	PlmnId PlmnId1 `json:"plmnId"`
	// 2 or 3-octet string identifying a tracking area code as specified in clause 9.3.3.10  of 3GPP TS 38.413, in hexadecimal representation. Each character in the string shall  take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the TAC shall  appear first in the string, and the character representing the 4 least significant bit  of the TAC shall appear last in the string.  
	Tac string `json:"tac"`
	// This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).  
	Nid *string `json:"nid,omitempty"`
}

// NewTai1 instantiates a new Tai1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTai1(plmnId PlmnId1, tac string) *Tai1 {
	this := Tai1{}
	this.PlmnId = plmnId
	this.Tac = tac
	return &this
}

// NewTai1WithDefaults instantiates a new Tai1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTai1WithDefaults() *Tai1 {
	this := Tai1{}
	return &this
}

// GetPlmnId returns the PlmnId field value
func (o *Tai1) GetPlmnId() PlmnId1 {
	if o == nil {
		var ret PlmnId1
		return ret
	}

	return o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value
// and a boolean to check if the value has been set.
func (o *Tai1) GetPlmnIdOk() (*PlmnId1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlmnId, true
}

// SetPlmnId sets field value
func (o *Tai1) SetPlmnId(v PlmnId1) {
	o.PlmnId = v
}

// GetTac returns the Tac field value
func (o *Tai1) GetTac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tac
}

// GetTacOk returns a tuple with the Tac field value
// and a boolean to check if the value has been set.
func (o *Tai1) GetTacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tac, true
}

// SetTac sets field value
func (o *Tai1) SetTac(v string) {
	o.Tac = v
}

// GetNid returns the Nid field value if set, zero value otherwise.
func (o *Tai1) GetNid() string {
	if o == nil || IsNil(o.Nid) {
		var ret string
		return ret
	}
	return *o.Nid
}

// GetNidOk returns a tuple with the Nid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tai1) GetNidOk() (*string, bool) {
	if o == nil || IsNil(o.Nid) {
		return nil, false
	}
	return o.Nid, true
}

// HasNid returns a boolean if a field has been set.
func (o *Tai1) HasNid() bool {
	if o != nil && !IsNil(o.Nid) {
		return true
	}

	return false
}

// SetNid gets a reference to the given string and assigns it to the Nid field.
func (o *Tai1) SetNid(v string) {
	o.Nid = &v
}

func (o Tai1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tai1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plmnId"] = o.PlmnId
	toSerialize["tac"] = o.Tac
	if !IsNil(o.Nid) {
		toSerialize["nid"] = o.Nid
	}
	return toSerialize, nil
}

type NullableTai1 struct {
	value *Tai1
	isSet bool
}

func (v NullableTai1) Get() *Tai1 {
	return v.value
}

func (v *NullableTai1) Set(val *Tai1) {
	v.value = val
	v.isSet = true
}

func (v NullableTai1) IsSet() bool {
	return v.isSet
}

func (v *NullableTai1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTai1(val *Tai1) *NullableTai1 {
	return &NullableTai1{value: val, isSet: true}
}

func (v NullableTai1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTai1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


