/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the SmPolicySnssaiData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmPolicySnssaiData{}

// SmPolicySnssaiData Contains the SM policy data for a given subscriber and S-NSSAI.
type SmPolicySnssaiData struct {
	Snssai Snssai `json:"snssai"`
	// Session Management Policy data per DNN for all the DNNs of the indicated S-NSSAI. The key of the map is the DNN.
	SmPolicyDnnData *map[string]SmPolicyDnnData `json:"smPolicyDnnData,omitempty"`
	UeSliceMbr      *SliceMbr1                  `json:"ueSliceMbr,omitempty"`
}

// NewSmPolicySnssaiData instantiates a new SmPolicySnssaiData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmPolicySnssaiData(snssai Snssai) *SmPolicySnssaiData {
	this := SmPolicySnssaiData{}
	this.Snssai = snssai
	return &this
}

// NewSmPolicySnssaiDataWithDefaults instantiates a new SmPolicySnssaiData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmPolicySnssaiDataWithDefaults() *SmPolicySnssaiData {
	this := SmPolicySnssaiData{}
	return &this
}

// GetSnssai returns the Snssai field value
func (o *SmPolicySnssaiData) GetSnssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value
// and a boolean to check if the value has been set.
func (o *SmPolicySnssaiData) GetSnssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snssai, true
}

// SetSnssai sets field value
func (o *SmPolicySnssaiData) SetSnssai(v Snssai) {
	o.Snssai = v
}

// GetSmPolicyDnnData returns the SmPolicyDnnData field value if set, zero value otherwise.
func (o *SmPolicySnssaiData) GetSmPolicyDnnData() map[string]SmPolicyDnnData {
	if o == nil || IsNil(o.SmPolicyDnnData) {
		var ret map[string]SmPolicyDnnData
		return ret
	}
	return *o.SmPolicyDnnData
}

// GetSmPolicyDnnDataOk returns a tuple with the SmPolicyDnnData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicySnssaiData) GetSmPolicyDnnDataOk() (*map[string]SmPolicyDnnData, bool) {
	if o == nil || IsNil(o.SmPolicyDnnData) {
		return nil, false
	}
	return o.SmPolicyDnnData, true
}

// HasSmPolicyDnnData returns a boolean if a field has been set.
func (o *SmPolicySnssaiData) HasSmPolicyDnnData() bool {
	if o != nil && !IsNil(o.SmPolicyDnnData) {
		return true
	}

	return false
}

// SetSmPolicyDnnData gets a reference to the given map[string]SmPolicyDnnData and assigns it to the SmPolicyDnnData field.
func (o *SmPolicySnssaiData) SetSmPolicyDnnData(v map[string]SmPolicyDnnData) {
	o.SmPolicyDnnData = &v
}

// GetUeSliceMbr returns the UeSliceMbr field value if set, zero value otherwise.
func (o *SmPolicySnssaiData) GetUeSliceMbr() SliceMbr1 {
	if o == nil || IsNil(o.UeSliceMbr) {
		var ret SliceMbr1
		return ret
	}
	return *o.UeSliceMbr
}

// GetUeSliceMbrOk returns a tuple with the UeSliceMbr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicySnssaiData) GetUeSliceMbrOk() (*SliceMbr1, bool) {
	if o == nil || IsNil(o.UeSliceMbr) {
		return nil, false
	}
	return o.UeSliceMbr, true
}

// HasUeSliceMbr returns a boolean if a field has been set.
func (o *SmPolicySnssaiData) HasUeSliceMbr() bool {
	if o != nil && !IsNil(o.UeSliceMbr) {
		return true
	}

	return false
}

// SetUeSliceMbr gets a reference to the given SliceMbr1 and assigns it to the UeSliceMbr field.
func (o *SmPolicySnssaiData) SetUeSliceMbr(v SliceMbr1) {
	o.UeSliceMbr = &v
}

func (o SmPolicySnssaiData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmPolicySnssaiData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snssai"] = o.Snssai
	if !IsNil(o.SmPolicyDnnData) {
		toSerialize["smPolicyDnnData"] = o.SmPolicyDnnData
	}
	if !IsNil(o.UeSliceMbr) {
		toSerialize["ueSliceMbr"] = o.UeSliceMbr
	}
	return toSerialize, nil
}

type NullableSmPolicySnssaiData struct {
	value *SmPolicySnssaiData
	isSet bool
}

func (v NullableSmPolicySnssaiData) Get() *SmPolicySnssaiData {
	return v.value
}

func (v *NullableSmPolicySnssaiData) Set(val *SmPolicySnssaiData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmPolicySnssaiData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmPolicySnssaiData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmPolicySnssaiData(val *SmPolicySnssaiData) *NullableSmPolicySnssaiData {
	return &NullableSmPolicySnssaiData{value: val, isSet: true}
}

func (v NullableSmPolicySnssaiData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmPolicySnssaiData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
