/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
	"time"
)

// checks if the Nssai type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Nssai{}

// Nssai struct for Nssai
type Nssai struct {
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	DefaultSingleNssais []Snssai `json:"defaultSingleNssais"`
	SingleNssais []Snssai `json:"singleNssais,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	ProvisioningTime *time.Time `json:"provisioningTime,omitempty"`
	// A map(list of key-value pairs) where singleNssai serves as key of AdditionalSnssaiData
	AdditionalSnssaiData *map[string]AdditionalSnssaiData `json:"additionalSnssaiData,omitempty"`
	SuppressNssrgInd *bool `json:"suppressNssrgInd,omitempty"`
}

// NewNssai instantiates a new Nssai object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNssai(defaultSingleNssais []Snssai) *Nssai {
	this := Nssai{}
	this.DefaultSingleNssais = defaultSingleNssais
	return &this
}

// NewNssaiWithDefaults instantiates a new Nssai object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNssaiWithDefaults() *Nssai {
	this := Nssai{}
	return &this
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *Nssai) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nssai) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *Nssai) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *Nssai) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetDefaultSingleNssais returns the DefaultSingleNssais field value
func (o *Nssai) GetDefaultSingleNssais() []Snssai {
	if o == nil {
		var ret []Snssai
		return ret
	}

	return o.DefaultSingleNssais
}

// GetDefaultSingleNssaisOk returns a tuple with the DefaultSingleNssais field value
// and a boolean to check if the value has been set.
func (o *Nssai) GetDefaultSingleNssaisOk() ([]Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultSingleNssais, true
}

// SetDefaultSingleNssais sets field value
func (o *Nssai) SetDefaultSingleNssais(v []Snssai) {
	o.DefaultSingleNssais = v
}

// GetSingleNssais returns the SingleNssais field value if set, zero value otherwise.
func (o *Nssai) GetSingleNssais() []Snssai {
	if o == nil || IsNil(o.SingleNssais) {
		var ret []Snssai
		return ret
	}
	return o.SingleNssais
}

// GetSingleNssaisOk returns a tuple with the SingleNssais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nssai) GetSingleNssaisOk() ([]Snssai, bool) {
	if o == nil || IsNil(o.SingleNssais) {
		return nil, false
	}
	return o.SingleNssais, true
}

// HasSingleNssais returns a boolean if a field has been set.
func (o *Nssai) HasSingleNssais() bool {
	if o != nil && !IsNil(o.SingleNssais) {
		return true
	}

	return false
}

// SetSingleNssais gets a reference to the given []Snssai and assigns it to the SingleNssais field.
func (o *Nssai) SetSingleNssais(v []Snssai) {
	o.SingleNssais = v
}

// GetProvisioningTime returns the ProvisioningTime field value if set, zero value otherwise.
func (o *Nssai) GetProvisioningTime() time.Time {
	if o == nil || IsNil(o.ProvisioningTime) {
		var ret time.Time
		return ret
	}
	return *o.ProvisioningTime
}

// GetProvisioningTimeOk returns a tuple with the ProvisioningTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nssai) GetProvisioningTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ProvisioningTime) {
		return nil, false
	}
	return o.ProvisioningTime, true
}

// HasProvisioningTime returns a boolean if a field has been set.
func (o *Nssai) HasProvisioningTime() bool {
	if o != nil && !IsNil(o.ProvisioningTime) {
		return true
	}

	return false
}

// SetProvisioningTime gets a reference to the given time.Time and assigns it to the ProvisioningTime field.
func (o *Nssai) SetProvisioningTime(v time.Time) {
	o.ProvisioningTime = &v
}

// GetAdditionalSnssaiData returns the AdditionalSnssaiData field value if set, zero value otherwise.
func (o *Nssai) GetAdditionalSnssaiData() map[string]AdditionalSnssaiData {
	if o == nil || IsNil(o.AdditionalSnssaiData) {
		var ret map[string]AdditionalSnssaiData
		return ret
	}
	return *o.AdditionalSnssaiData
}

// GetAdditionalSnssaiDataOk returns a tuple with the AdditionalSnssaiData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nssai) GetAdditionalSnssaiDataOk() (*map[string]AdditionalSnssaiData, bool) {
	if o == nil || IsNil(o.AdditionalSnssaiData) {
		return nil, false
	}
	return o.AdditionalSnssaiData, true
}

// HasAdditionalSnssaiData returns a boolean if a field has been set.
func (o *Nssai) HasAdditionalSnssaiData() bool {
	if o != nil && !IsNil(o.AdditionalSnssaiData) {
		return true
	}

	return false
}

// SetAdditionalSnssaiData gets a reference to the given map[string]AdditionalSnssaiData and assigns it to the AdditionalSnssaiData field.
func (o *Nssai) SetAdditionalSnssaiData(v map[string]AdditionalSnssaiData) {
	o.AdditionalSnssaiData = &v
}

// GetSuppressNssrgInd returns the SuppressNssrgInd field value if set, zero value otherwise.
func (o *Nssai) GetSuppressNssrgInd() bool {
	if o == nil || IsNil(o.SuppressNssrgInd) {
		var ret bool
		return ret
	}
	return *o.SuppressNssrgInd
}

// GetSuppressNssrgIndOk returns a tuple with the SuppressNssrgInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nssai) GetSuppressNssrgIndOk() (*bool, bool) {
	if o == nil || IsNil(o.SuppressNssrgInd) {
		return nil, false
	}
	return o.SuppressNssrgInd, true
}

// HasSuppressNssrgInd returns a boolean if a field has been set.
func (o *Nssai) HasSuppressNssrgInd() bool {
	if o != nil && !IsNil(o.SuppressNssrgInd) {
		return true
	}

	return false
}

// SetSuppressNssrgInd gets a reference to the given bool and assigns it to the SuppressNssrgInd field.
func (o *Nssai) SetSuppressNssrgInd(v bool) {
	o.SuppressNssrgInd = &v
}

func (o Nssai) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Nssai) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	toSerialize["defaultSingleNssais"] = o.DefaultSingleNssais
	if !IsNil(o.SingleNssais) {
		toSerialize["singleNssais"] = o.SingleNssais
	}
	if !IsNil(o.ProvisioningTime) {
		toSerialize["provisioningTime"] = o.ProvisioningTime
	}
	if !IsNil(o.AdditionalSnssaiData) {
		toSerialize["additionalSnssaiData"] = o.AdditionalSnssaiData
	}
	if !IsNil(o.SuppressNssrgInd) {
		toSerialize["suppressNssrgInd"] = o.SuppressNssrgInd
	}
	return toSerialize, nil
}

type NullableNssai struct {
	value *Nssai
	isSet bool
}

func (v NullableNssai) Get() *Nssai {
	return v.value
}

func (v *NullableNssai) Set(val *Nssai) {
	v.value = val
	v.isSet = true
}

func (v NullableNssai) IsSet() bool {
	return v.isSet
}

func (v *NullableNssai) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNssai(val *Nssai) *NullableNssai {
	return &NullableNssai{value: val, isSet: true}
}

func (v NullableNssai) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNssai) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


