/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the SmfSubscriptionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmfSubscriptionItem{}

// SmfSubscriptionItem Contains info about a single SMF event subscription
type SmfSubscriptionItem struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	SmfInstanceId string `json:"smfInstanceId"`
	// String providing an URI formatted according to RFC 3986.
	SubscriptionId string       `json:"subscriptionId"`
	ContextInfo    *ContextInfo `json:"contextInfo,omitempty"`
}

// NewSmfSubscriptionItem instantiates a new SmfSubscriptionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmfSubscriptionItem(smfInstanceId string, subscriptionId string) *SmfSubscriptionItem {
	this := SmfSubscriptionItem{}
	this.SmfInstanceId = smfInstanceId
	this.SubscriptionId = subscriptionId
	return &this
}

// NewSmfSubscriptionItemWithDefaults instantiates a new SmfSubscriptionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmfSubscriptionItemWithDefaults() *SmfSubscriptionItem {
	this := SmfSubscriptionItem{}
	return &this
}

// GetSmfInstanceId returns the SmfInstanceId field value
func (o *SmfSubscriptionItem) GetSmfInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmfInstanceId
}

// GetSmfInstanceIdOk returns a tuple with the SmfInstanceId field value
// and a boolean to check if the value has been set.
func (o *SmfSubscriptionItem) GetSmfInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmfInstanceId, true
}

// SetSmfInstanceId sets field value
func (o *SmfSubscriptionItem) SetSmfInstanceId(v string) {
	o.SmfInstanceId = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *SmfSubscriptionItem) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *SmfSubscriptionItem) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *SmfSubscriptionItem) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetContextInfo returns the ContextInfo field value if set, zero value otherwise.
func (o *SmfSubscriptionItem) GetContextInfo() ContextInfo {
	if o == nil || IsNil(o.ContextInfo) {
		var ret ContextInfo
		return ret
	}
	return *o.ContextInfo
}

// GetContextInfoOk returns a tuple with the ContextInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmfSubscriptionItem) GetContextInfoOk() (*ContextInfo, bool) {
	if o == nil || IsNil(o.ContextInfo) {
		return nil, false
	}
	return o.ContextInfo, true
}

// HasContextInfo returns a boolean if a field has been set.
func (o *SmfSubscriptionItem) HasContextInfo() bool {
	if o != nil && !IsNil(o.ContextInfo) {
		return true
	}

	return false
}

// SetContextInfo gets a reference to the given ContextInfo and assigns it to the ContextInfo field.
func (o *SmfSubscriptionItem) SetContextInfo(v ContextInfo) {
	o.ContextInfo = &v
}

func (o SmfSubscriptionItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmfSubscriptionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["smfInstanceId"] = o.SmfInstanceId
	toSerialize["subscriptionId"] = o.SubscriptionId
	if !IsNil(o.ContextInfo) {
		toSerialize["contextInfo"] = o.ContextInfo
	}
	return toSerialize, nil
}

type NullableSmfSubscriptionItem struct {
	value *SmfSubscriptionItem
	isSet bool
}

func (v NullableSmfSubscriptionItem) Get() *SmfSubscriptionItem {
	return v.value
}

func (v *NullableSmfSubscriptionItem) Set(val *SmfSubscriptionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSmfSubscriptionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSmfSubscriptionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmfSubscriptionItem(val *SmfSubscriptionItem) *NullableSmfSubscriptionItem {
	return &NullableSmfSubscriptionItem{value: val, isSet: true}
}

func (v NullableSmfSubscriptionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmfSubscriptionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
