/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the AppDescriptor1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDescriptor1{}

// AppDescriptor1 Represents an operation system and the corresponding applications.
type AppDescriptor1 struct {
	// Represents the Operating System of the served UE.
	OsId string `json:"osId"`
	// Identifies applications that are running on the UE's operating system. Any string value can be used as a key of the map.
	AppIds map[string]string `json:"appIds"`
}

// NewAppDescriptor1 instantiates a new AppDescriptor1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDescriptor1(osId string, appIds map[string]string) *AppDescriptor1 {
	this := AppDescriptor1{}
	this.OsId = osId
	this.AppIds = appIds
	return &this
}

// NewAppDescriptor1WithDefaults instantiates a new AppDescriptor1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDescriptor1WithDefaults() *AppDescriptor1 {
	this := AppDescriptor1{}
	return &this
}

// GetOsId returns the OsId field value
func (o *AppDescriptor1) GetOsId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OsId
}

// GetOsIdOk returns a tuple with the OsId field value
// and a boolean to check if the value has been set.
func (o *AppDescriptor1) GetOsIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OsId, true
}

// SetOsId sets field value
func (o *AppDescriptor1) SetOsId(v string) {
	o.OsId = v
}

// GetAppIds returns the AppIds field value
func (o *AppDescriptor1) GetAppIds() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.AppIds
}

// GetAppIdsOk returns a tuple with the AppIds field value
// and a boolean to check if the value has been set.
func (o *AppDescriptor1) GetAppIdsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppIds, true
}

// SetAppIds sets field value
func (o *AppDescriptor1) SetAppIds(v map[string]string) {
	o.AppIds = v
}

func (o AppDescriptor1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDescriptor1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["osId"] = o.OsId
	toSerialize["appIds"] = o.AppIds
	return toSerialize, nil
}

type NullableAppDescriptor1 struct {
	value *AppDescriptor1
	isSet bool
}

func (v NullableAppDescriptor1) Get() *AppDescriptor1 {
	return v.value
}

func (v *NullableAppDescriptor1) Set(val *AppDescriptor1) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDescriptor1) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDescriptor1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDescriptor1(val *AppDescriptor1) *NullableAppDescriptor1 {
	return &NullableAppDescriptor1{value: val, isSet: true}
}

func (v NullableAppDescriptor1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDescriptor1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
