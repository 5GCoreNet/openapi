/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
)

// checks if the UePolicySet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UePolicySet{}

// UePolicySet Contains the UE policy data for a given subscriber.
type UePolicySet struct {
	// Contains Presence reporting area information. The praId attribute within the PresenceInfo data type is the key of the map. 
	PraInfos *map[string]PresenceInfo `json:"praInfos,omitempty"`
	SubscCats []string `json:"subscCats,omitempty"`
	// Contains the UE Policy Sections. The UE Policy Section Identifier is used as the key of the map. 
	UePolicySections *map[string]UePolicySection `json:"uePolicySections,omitempty"`
	Upsis []string `json:"upsis,omitempty"`
	// Contains allowed route selection descriptors per serving PLMN for a UE. The serving PLMN identifier is the key of the map. 
	AllowedRouteSelDescs *map[string]PlmnRouteSelectionDescriptor `json:"allowedRouteSelDescs,omitempty"`
	AndspInd *bool `json:"andspInd,omitempty"`
	// String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.  
	Pei *string `json:"pei,omitempty"`
	OsIds []string `json:"osIds,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
	ResetIds []string `json:"resetIds,omitempty"`
}

// NewUePolicySet instantiates a new UePolicySet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUePolicySet() *UePolicySet {
	this := UePolicySet{}
	return &this
}

// NewUePolicySetWithDefaults instantiates a new UePolicySet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUePolicySetWithDefaults() *UePolicySet {
	this := UePolicySet{}
	return &this
}

// GetPraInfos returns the PraInfos field value if set, zero value otherwise.
func (o *UePolicySet) GetPraInfos() map[string]PresenceInfo {
	if o == nil || IsNil(o.PraInfos) {
		var ret map[string]PresenceInfo
		return ret
	}
	return *o.PraInfos
}

// GetPraInfosOk returns a tuple with the PraInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetPraInfosOk() (*map[string]PresenceInfo, bool) {
	if o == nil || IsNil(o.PraInfos) {
		return nil, false
	}
	return o.PraInfos, true
}

// HasPraInfos returns a boolean if a field has been set.
func (o *UePolicySet) HasPraInfos() bool {
	if o != nil && !IsNil(o.PraInfos) {
		return true
	}

	return false
}

// SetPraInfos gets a reference to the given map[string]PresenceInfo and assigns it to the PraInfos field.
func (o *UePolicySet) SetPraInfos(v map[string]PresenceInfo) {
	o.PraInfos = &v
}

// GetSubscCats returns the SubscCats field value if set, zero value otherwise.
func (o *UePolicySet) GetSubscCats() []string {
	if o == nil || IsNil(o.SubscCats) {
		var ret []string
		return ret
	}
	return o.SubscCats
}

// GetSubscCatsOk returns a tuple with the SubscCats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetSubscCatsOk() ([]string, bool) {
	if o == nil || IsNil(o.SubscCats) {
		return nil, false
	}
	return o.SubscCats, true
}

// HasSubscCats returns a boolean if a field has been set.
func (o *UePolicySet) HasSubscCats() bool {
	if o != nil && !IsNil(o.SubscCats) {
		return true
	}

	return false
}

// SetSubscCats gets a reference to the given []string and assigns it to the SubscCats field.
func (o *UePolicySet) SetSubscCats(v []string) {
	o.SubscCats = v
}

// GetUePolicySections returns the UePolicySections field value if set, zero value otherwise.
func (o *UePolicySet) GetUePolicySections() map[string]UePolicySection {
	if o == nil || IsNil(o.UePolicySections) {
		var ret map[string]UePolicySection
		return ret
	}
	return *o.UePolicySections
}

// GetUePolicySectionsOk returns a tuple with the UePolicySections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetUePolicySectionsOk() (*map[string]UePolicySection, bool) {
	if o == nil || IsNil(o.UePolicySections) {
		return nil, false
	}
	return o.UePolicySections, true
}

// HasUePolicySections returns a boolean if a field has been set.
func (o *UePolicySet) HasUePolicySections() bool {
	if o != nil && !IsNil(o.UePolicySections) {
		return true
	}

	return false
}

// SetUePolicySections gets a reference to the given map[string]UePolicySection and assigns it to the UePolicySections field.
func (o *UePolicySet) SetUePolicySections(v map[string]UePolicySection) {
	o.UePolicySections = &v
}

// GetUpsis returns the Upsis field value if set, zero value otherwise.
func (o *UePolicySet) GetUpsis() []string {
	if o == nil || IsNil(o.Upsis) {
		var ret []string
		return ret
	}
	return o.Upsis
}

// GetUpsisOk returns a tuple with the Upsis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetUpsisOk() ([]string, bool) {
	if o == nil || IsNil(o.Upsis) {
		return nil, false
	}
	return o.Upsis, true
}

// HasUpsis returns a boolean if a field has been set.
func (o *UePolicySet) HasUpsis() bool {
	if o != nil && !IsNil(o.Upsis) {
		return true
	}

	return false
}

// SetUpsis gets a reference to the given []string and assigns it to the Upsis field.
func (o *UePolicySet) SetUpsis(v []string) {
	o.Upsis = v
}

// GetAllowedRouteSelDescs returns the AllowedRouteSelDescs field value if set, zero value otherwise.
func (o *UePolicySet) GetAllowedRouteSelDescs() map[string]PlmnRouteSelectionDescriptor {
	if o == nil || IsNil(o.AllowedRouteSelDescs) {
		var ret map[string]PlmnRouteSelectionDescriptor
		return ret
	}
	return *o.AllowedRouteSelDescs
}

// GetAllowedRouteSelDescsOk returns a tuple with the AllowedRouteSelDescs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetAllowedRouteSelDescsOk() (*map[string]PlmnRouteSelectionDescriptor, bool) {
	if o == nil || IsNil(o.AllowedRouteSelDescs) {
		return nil, false
	}
	return o.AllowedRouteSelDescs, true
}

// HasAllowedRouteSelDescs returns a boolean if a field has been set.
func (o *UePolicySet) HasAllowedRouteSelDescs() bool {
	if o != nil && !IsNil(o.AllowedRouteSelDescs) {
		return true
	}

	return false
}

// SetAllowedRouteSelDescs gets a reference to the given map[string]PlmnRouteSelectionDescriptor and assigns it to the AllowedRouteSelDescs field.
func (o *UePolicySet) SetAllowedRouteSelDescs(v map[string]PlmnRouteSelectionDescriptor) {
	o.AllowedRouteSelDescs = &v
}

// GetAndspInd returns the AndspInd field value if set, zero value otherwise.
func (o *UePolicySet) GetAndspInd() bool {
	if o == nil || IsNil(o.AndspInd) {
		var ret bool
		return ret
	}
	return *o.AndspInd
}

// GetAndspIndOk returns a tuple with the AndspInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetAndspIndOk() (*bool, bool) {
	if o == nil || IsNil(o.AndspInd) {
		return nil, false
	}
	return o.AndspInd, true
}

// HasAndspInd returns a boolean if a field has been set.
func (o *UePolicySet) HasAndspInd() bool {
	if o != nil && !IsNil(o.AndspInd) {
		return true
	}

	return false
}

// SetAndspInd gets a reference to the given bool and assigns it to the AndspInd field.
func (o *UePolicySet) SetAndspInd(v bool) {
	o.AndspInd = &v
}

// GetPei returns the Pei field value if set, zero value otherwise.
func (o *UePolicySet) GetPei() string {
	if o == nil || IsNil(o.Pei) {
		var ret string
		return ret
	}
	return *o.Pei
}

// GetPeiOk returns a tuple with the Pei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetPeiOk() (*string, bool) {
	if o == nil || IsNil(o.Pei) {
		return nil, false
	}
	return o.Pei, true
}

// HasPei returns a boolean if a field has been set.
func (o *UePolicySet) HasPei() bool {
	if o != nil && !IsNil(o.Pei) {
		return true
	}

	return false
}

// SetPei gets a reference to the given string and assigns it to the Pei field.
func (o *UePolicySet) SetPei(v string) {
	o.Pei = &v
}

// GetOsIds returns the OsIds field value if set, zero value otherwise.
func (o *UePolicySet) GetOsIds() []string {
	if o == nil || IsNil(o.OsIds) {
		var ret []string
		return ret
	}
	return o.OsIds
}

// GetOsIdsOk returns a tuple with the OsIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetOsIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OsIds) {
		return nil, false
	}
	return o.OsIds, true
}

// HasOsIds returns a boolean if a field has been set.
func (o *UePolicySet) HasOsIds() bool {
	if o != nil && !IsNil(o.OsIds) {
		return true
	}

	return false
}

// SetOsIds gets a reference to the given []string and assigns it to the OsIds field.
func (o *UePolicySet) SetOsIds(v []string) {
	o.OsIds = v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *UePolicySet) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *UePolicySet) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *UePolicySet) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

// GetResetIds returns the ResetIds field value if set, zero value otherwise.
func (o *UePolicySet) GetResetIds() []string {
	if o == nil || IsNil(o.ResetIds) {
		var ret []string
		return ret
	}
	return o.ResetIds
}

// GetResetIdsOk returns a tuple with the ResetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UePolicySet) GetResetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ResetIds) {
		return nil, false
	}
	return o.ResetIds, true
}

// HasResetIds returns a boolean if a field has been set.
func (o *UePolicySet) HasResetIds() bool {
	if o != nil && !IsNil(o.ResetIds) {
		return true
	}

	return false
}

// SetResetIds gets a reference to the given []string and assigns it to the ResetIds field.
func (o *UePolicySet) SetResetIds(v []string) {
	o.ResetIds = v
}

func (o UePolicySet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UePolicySet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PraInfos) {
		toSerialize["praInfos"] = o.PraInfos
	}
	if !IsNil(o.SubscCats) {
		toSerialize["subscCats"] = o.SubscCats
	}
	if !IsNil(o.UePolicySections) {
		toSerialize["uePolicySections"] = o.UePolicySections
	}
	if !IsNil(o.Upsis) {
		toSerialize["upsis"] = o.Upsis
	}
	if !IsNil(o.AllowedRouteSelDescs) {
		toSerialize["allowedRouteSelDescs"] = o.AllowedRouteSelDescs
	}
	if !IsNil(o.AndspInd) {
		toSerialize["andspInd"] = o.AndspInd
	}
	if !IsNil(o.Pei) {
		toSerialize["pei"] = o.Pei
	}
	if !IsNil(o.OsIds) {
		toSerialize["osIds"] = o.OsIds
	}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	if !IsNil(o.ResetIds) {
		toSerialize["resetIds"] = o.ResetIds
	}
	return toSerialize, nil
}

type NullableUePolicySet struct {
	value *UePolicySet
	isSet bool
}

func (v NullableUePolicySet) Get() *UePolicySet {
	return v.value
}

func (v *NullableUePolicySet) Set(val *UePolicySet) {
	v.value = val
	v.isSet = true
}

func (v NullableUePolicySet) IsSet() bool {
	return v.isSet
}

func (v *NullableUePolicySet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUePolicySet(val *UePolicySet) *NullableUePolicySet {
	return &NullableUePolicySet{value: val, isSet: true}
}

func (v NullableUePolicySet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUePolicySet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


