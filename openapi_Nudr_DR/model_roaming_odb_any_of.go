/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"encoding/json"
	"fmt"
)

// RoamingOdbAnyOf the model 'RoamingOdbAnyOf'
type RoamingOdbAnyOf string

// List of RoamingOdb_anyOf
const (
	PLMN RoamingOdbAnyOf = "OUTSIDE_HOME_PLMN"
	PLMN_COUNTRY RoamingOdbAnyOf = "OUTSIDE_HOME_PLMN_COUNTRY"
)

// All allowed values of RoamingOdbAnyOf enum
var AllowedRoamingOdbAnyOfEnumValues = []RoamingOdbAnyOf{
	"OUTSIDE_HOME_PLMN",
	"OUTSIDE_HOME_PLMN_COUNTRY",
}

func (v *RoamingOdbAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoamingOdbAnyOf(value)
	for _, existing := range AllowedRoamingOdbAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoamingOdbAnyOf", value)
}

// NewRoamingOdbAnyOfFromValue returns a pointer to a valid RoamingOdbAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoamingOdbAnyOfFromValue(v string) (*RoamingOdbAnyOf, error) {
	ev := RoamingOdbAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoamingOdbAnyOf: valid values are %v", v, AllowedRoamingOdbAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoamingOdbAnyOf) IsValid() bool {
	for _, existing := range AllowedRoamingOdbAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoamingOdb_anyOf value
func (v RoamingOdbAnyOf) Ptr() *RoamingOdbAnyOf {
	return &v
}

type NullableRoamingOdbAnyOf struct {
	value *RoamingOdbAnyOf
	isSet bool
}

func (v NullableRoamingOdbAnyOf) Get() *RoamingOdbAnyOf {
	return v.value
}

func (v *NullableRoamingOdbAnyOf) Set(val *RoamingOdbAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoamingOdbAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoamingOdbAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoamingOdbAnyOf(val *RoamingOdbAnyOf) *NullableRoamingOdbAnyOf {
	return &NullableRoamingOdbAnyOf{value: val, isSet: true}
}

func (v NullableRoamingOdbAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoamingOdbAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

