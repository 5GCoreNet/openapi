/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// EventExposureSubscriptionsCollectionApiService EventExposureSubscriptionsCollectionApi service
type EventExposureSubscriptionsCollectionApiService service

type ApiCreateEeSubscriptionsRequest struct {
	ctx context.Context
	ApiService *EventExposureSubscriptionsCollectionApiService
	ueId string
	eeSubscription *EeSubscription
}

func (r ApiCreateEeSubscriptionsRequest) EeSubscription(eeSubscription EeSubscription) ApiCreateEeSubscriptionsRequest {
	r.eeSubscription = &eeSubscription
	return r
}

func (r ApiCreateEeSubscriptionsRequest) Execute() (*EeSubscription, *http.Response, error) {
	return r.ApiService.CreateEeSubscriptionsExecute(r)
}

/*
CreateEeSubscriptions Create individual EE subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ueId UE ID
 @return ApiCreateEeSubscriptionsRequest
*/
func (a *EventExposureSubscriptionsCollectionApiService) CreateEeSubscriptions(ctx context.Context, ueId string) ApiCreateEeSubscriptionsRequest {
	return ApiCreateEeSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
		ueId: ueId,
	}
}

// Execute executes the request
//  @return EeSubscription
func (a *EventExposureSubscriptionsCollectionApiService) CreateEeSubscriptionsExecute(r ApiCreateEeSubscriptionsRequest) (*EeSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EeSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventExposureSubscriptionsCollectionApiService.CreateEeSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/ee-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eeSubscription == nil {
		return localVarReturnValue, nil, reportError("eeSubscription is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eeSubscription
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryeesubscriptionsRequest struct {
	ctx context.Context
	ApiService *EventExposureSubscriptionsCollectionApiService
	ueId string
	supportedFeatures *string
	eventTypes *[]EventType
	nfIdentifiers *[]NfIdentifier
}

// Supported Features
func (r ApiQueryeesubscriptionsRequest) SupportedFeatures(supportedFeatures string) ApiQueryeesubscriptionsRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

// Event Types
func (r ApiQueryeesubscriptionsRequest) EventTypes(eventTypes []EventType) ApiQueryeesubscriptionsRequest {
	r.eventTypes = &eventTypes
	return r
}

// NF Identifiers
func (r ApiQueryeesubscriptionsRequest) NfIdentifiers(nfIdentifiers []NfIdentifier) ApiQueryeesubscriptionsRequest {
	r.nfIdentifiers = &nfIdentifiers
	return r
}

func (r ApiQueryeesubscriptionsRequest) Execute() ([]EeSubscriptionExt, *http.Response, error) {
	return r.ApiService.QueryeesubscriptionsExecute(r)
}

/*
Queryeesubscriptions Retrieves the ee subscriptions of a UE

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ueId UE id
 @return ApiQueryeesubscriptionsRequest
*/
func (a *EventExposureSubscriptionsCollectionApiService) Queryeesubscriptions(ctx context.Context, ueId string) ApiQueryeesubscriptionsRequest {
	return ApiQueryeesubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
		ueId: ueId,
	}
}

// Execute executes the request
//  @return []EeSubscriptionExt
func (a *EventExposureSubscriptionsCollectionApiService) QueryeesubscriptionsExecute(r ApiQueryeesubscriptionsRequest) ([]EeSubscriptionExt, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EeSubscriptionExt
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventExposureSubscriptionsCollectionApiService.Queryeesubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/ee-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.supportedFeatures != nil {
		parameterAddToQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	if r.eventTypes != nil {
		parameterAddToQuery(localVarQueryParams, "event-types", r.eventTypes, "csv")
	}
	if r.nfIdentifiers != nil {
		parameterAddToQuery(localVarQueryParams, "nf-identifiers", r.nfIdentifiers, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
