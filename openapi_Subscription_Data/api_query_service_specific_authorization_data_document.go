/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// QueryServiceSpecificAuthorizationDataDocumentApiService QueryServiceSpecificAuthorizationDataDocumentApi service
type QueryServiceSpecificAuthorizationDataDocumentApiService service

type ApiGetSSAuDataRequest struct {
	ctx                    context.Context
	ApiService             *QueryServiceSpecificAuthorizationDataDocumentApiService
	ueId                   string
	serviceType            ServiceType
	singleNssai            *VarSnssai
	dnn                    *string
	mtcProviderInformation *string
	afId                   *string
	ifNoneMatch            *string
	ifModifiedSince        *string
}

// single NSSAI
func (r ApiGetSSAuDataRequest) SingleNssai(singleNssai VarSnssai) ApiGetSSAuDataRequest {
	r.singleNssai = &singleNssai
	return r
}

// DNN
func (r ApiGetSSAuDataRequest) Dnn(dnn string) ApiGetSSAuDataRequest {
	r.dnn = &dnn
	return r
}

// MTC Provider Information
func (r ApiGetSSAuDataRequest) MtcProviderInformation(mtcProviderInformation string) ApiGetSSAuDataRequest {
	r.mtcProviderInformation = &mtcProviderInformation
	return r
}

// Application Function Identifier
func (r ApiGetSSAuDataRequest) AfId(afId string) ApiGetSSAuDataRequest {
	r.afId = &afId
	return r
}

// Validator for conditional requests, as described in RFC 7232, 3.2
func (r ApiGetSSAuDataRequest) IfNoneMatch(ifNoneMatch string) ApiGetSSAuDataRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// Validator for conditional requests, as described in RFC 7232, 3.3
func (r ApiGetSSAuDataRequest) IfModifiedSince(ifModifiedSince string) ApiGetSSAuDataRequest {
	r.ifModifiedSince = &ifModifiedSince
	return r
}

func (r ApiGetSSAuDataRequest) Execute() (*AuthorizationData, *http.Response, error) {
	return r.ApiService.GetSSAuDataExecute(r)
}

/*
GetSSAuData Retrieve ServiceSpecific Authorization Data

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueId UE ID
	@param serviceType Service Type
	@return ApiGetSSAuDataRequest
*/
func (a *QueryServiceSpecificAuthorizationDataDocumentApiService) GetSSAuData(ctx context.Context, ueId string, serviceType ServiceType) ApiGetSSAuDataRequest {
	return ApiGetSSAuDataRequest{
		ApiService:  a,
		ctx:         ctx,
		ueId:        ueId,
		serviceType: serviceType,
	}
}

// Execute executes the request
//
//	@return AuthorizationData
func (a *QueryServiceSpecificAuthorizationDataDocumentApiService) GetSSAuDataExecute(r ApiGetSSAuDataRequest) (*AuthorizationData, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuthorizationData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryServiceSpecificAuthorizationDataDocumentApiService.GetSSAuData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/service-specific-authorization-data/{serviceType}"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceType"+"}", url.PathEscape(parameterValueToString(r.serviceType, "serviceType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.singleNssai == nil {
		return localVarReturnValue, nil, reportError("singleNssai is required and must be specified")
	}
	if r.dnn == nil {
		return localVarReturnValue, nil, reportError("dnn is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "single-nssai", r.singleNssai, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "dnn", r.dnn, "")
	if r.mtcProviderInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mtc-provider-information", r.mtcProviderInformation, "")
	}
	if r.afId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "af-id", r.afId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "")
	}
	if r.ifModifiedSince != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Modified-Since", r.ifModifiedSince, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
