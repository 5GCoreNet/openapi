/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
	"fmt"
)

// AerialUeIndication Indicates the Aerial service for the UE is allowed or not allowed, possible values are - AERIAL_UE_ALLOWED: Aerial service for the UE is allowed. - AERIAL_UE_NOT_ALLOWED: Aerial service for the UE is not allowed. 
type AerialUeIndication struct {
	AerialUeIndicationAnyOf *AerialUeIndicationAnyOf
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AerialUeIndication) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AerialUeIndicationAnyOf
	err = json.Unmarshal(data, &dst.AerialUeIndicationAnyOf);
	if err == nil {
		jsonAerialUeIndicationAnyOf, _ := json.Marshal(dst.AerialUeIndicationAnyOf)
		if string(jsonAerialUeIndicationAnyOf) == "{}" { // empty struct
			dst.AerialUeIndicationAnyOf = nil
		} else {
			return nil // data stored in dst.AerialUeIndicationAnyOf, return on the first match
		}
	} else {
		dst.AerialUeIndicationAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AerialUeIndication)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AerialUeIndication) MarshalJSON() ([]byte, error) {
	if src.AerialUeIndicationAnyOf != nil {
		return json.Marshal(&src.AerialUeIndicationAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableAerialUeIndication struct {
	value *AerialUeIndication
	isSet bool
}

func (v NullableAerialUeIndication) Get() *AerialUeIndication {
	return v.value
}

func (v *NullableAerialUeIndication) Set(val *AerialUeIndication) {
	v.value = val
	v.isSet = true
}

func (v NullableAerialUeIndication) IsSet() bool {
	return v.isSet
}

func (v *NullableAerialUeIndication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAerialUeIndication(val *AerialUeIndication) *NullableAerialUeIndication {
	return &NullableAerialUeIndication{value: val, isSet: true}
}

func (v NullableAerialUeIndication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAerialUeIndication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


