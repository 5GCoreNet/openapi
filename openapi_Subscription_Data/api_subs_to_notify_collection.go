/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// SubsToNotifyCollectionApiService SubsToNotifyCollectionApi service
type SubsToNotifyCollectionApiService service

type ApiQuerySubsToNotifyRequest struct {
	ctx context.Context
	ApiService *SubsToNotifyCollectionApiService
	ueId *string
	supportedFeatures *string
}

// UE id
func (r ApiQuerySubsToNotifyRequest) UeId(ueId string) ApiQuerySubsToNotifyRequest {
	r.ueId = &ueId
	return r
}

// Supported Features
func (r ApiQuerySubsToNotifyRequest) SupportedFeatures(supportedFeatures string) ApiQuerySubsToNotifyRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

func (r ApiQuerySubsToNotifyRequest) Execute() ([]SubscriptionDataSubscriptions, *http.Response, error) {
	return r.ApiService.QuerySubsToNotifyExecute(r)
}

/*
QuerySubsToNotify Retrieves the list of subscriptions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQuerySubsToNotifyRequest
*/
func (a *SubsToNotifyCollectionApiService) QuerySubsToNotify(ctx context.Context) ApiQuerySubsToNotifyRequest {
	return ApiQuerySubsToNotifyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SubscriptionDataSubscriptions
func (a *SubsToNotifyCollectionApiService) QuerySubsToNotifyExecute(r ApiQuerySubsToNotifyRequest) ([]SubscriptionDataSubscriptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SubscriptionDataSubscriptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubsToNotifyCollectionApiService.QuerySubsToNotify")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/subs-to-notify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ueId == nil {
		return localVarReturnValue, nil, reportError("ueId is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "ue-id", r.ueId, "")
	if r.supportedFeatures != nil {
		parameterAddToQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveMultipleSubscriptionDataSubscriptionsRequest struct {
	ctx context.Context
	ApiService *SubsToNotifyCollectionApiService
	ueId *string
	nfInstanceId *string
	deleteAllNfs *bool
	implicitUnsubscribeIndication *bool
}

// UE ID
func (r ApiRemoveMultipleSubscriptionDataSubscriptionsRequest) UeId(ueId string) ApiRemoveMultipleSubscriptionDataSubscriptionsRequest {
	r.ueId = &ueId
	return r
}

// NF Instance ID
func (r ApiRemoveMultipleSubscriptionDataSubscriptionsRequest) NfInstanceId(nfInstanceId string) ApiRemoveMultipleSubscriptionDataSubscriptionsRequest {
	r.nfInstanceId = &nfInstanceId
	return r
}

// Flag to delete subscriptions from all NFs
func (r ApiRemoveMultipleSubscriptionDataSubscriptionsRequest) DeleteAllNfs(deleteAllNfs bool) ApiRemoveMultipleSubscriptionDataSubscriptionsRequest {
	r.deleteAllNfs = &deleteAllNfs
	return r
}

// Implicit Unsubscribe Indication
func (r ApiRemoveMultipleSubscriptionDataSubscriptionsRequest) ImplicitUnsubscribeIndication(implicitUnsubscribeIndication bool) ApiRemoveMultipleSubscriptionDataSubscriptionsRequest {
	r.implicitUnsubscribeIndication = &implicitUnsubscribeIndication
	return r
}

func (r ApiRemoveMultipleSubscriptionDataSubscriptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveMultipleSubscriptionDataSubscriptionsExecute(r)
}

/*
RemoveMultipleSubscriptionDataSubscriptions Deletes subscriptions identified by a given ue-id parameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRemoveMultipleSubscriptionDataSubscriptionsRequest
*/
func (a *SubsToNotifyCollectionApiService) RemoveMultipleSubscriptionDataSubscriptions(ctx context.Context) ApiRemoveMultipleSubscriptionDataSubscriptionsRequest {
	return ApiRemoveMultipleSubscriptionDataSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SubsToNotifyCollectionApiService) RemoveMultipleSubscriptionDataSubscriptionsExecute(r ApiRemoveMultipleSubscriptionDataSubscriptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubsToNotifyCollectionApiService.RemoveMultipleSubscriptionDataSubscriptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/subs-to-notify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ueId == nil {
		return nil, reportError("ueId is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "ue-id", r.ueId, "")
	if r.nfInstanceId != nil {
		parameterAddToQuery(localVarQueryParams, "nf-instance-id", r.nfInstanceId, "")
	}
	if r.deleteAllNfs != nil {
		parameterAddToQuery(localVarQueryParams, "delete-all-nfs", r.deleteAllNfs, "")
	}
	if r.implicitUnsubscribeIndication != nil {
		parameterAddToQuery(localVarQueryParams, "implicit-unsubscribe-indication", r.implicitUnsubscribeIndication, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSubscriptionDataSubscriptionsRequest struct {
	ctx context.Context
	ApiService *SubsToNotifyCollectionApiService
	subscriptionDataSubscriptions *SubscriptionDataSubscriptions
}

func (r ApiSubscriptionDataSubscriptionsRequest) SubscriptionDataSubscriptions(subscriptionDataSubscriptions SubscriptionDataSubscriptions) ApiSubscriptionDataSubscriptionsRequest {
	r.subscriptionDataSubscriptions = &subscriptionDataSubscriptions
	return r
}

func (r ApiSubscriptionDataSubscriptionsRequest) Execute() (*SubscriptionDataSubscriptions, *http.Response, error) {
	return r.ApiService.SubscriptionDataSubscriptionsExecute(r)
}

/*
SubscriptionDataSubscriptions Subscription data subscriptions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubscriptionDataSubscriptionsRequest
*/
func (a *SubsToNotifyCollectionApiService) SubscriptionDataSubscriptions(ctx context.Context) ApiSubscriptionDataSubscriptionsRequest {
	return ApiSubscriptionDataSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubscriptionDataSubscriptions
func (a *SubsToNotifyCollectionApiService) SubscriptionDataSubscriptionsExecute(r ApiSubscriptionDataSubscriptionsRequest) (*SubscriptionDataSubscriptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionDataSubscriptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubsToNotifyCollectionApiService.SubscriptionDataSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/subs-to-notify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionDataSubscriptions == nil {
		return localVarReturnValue, nil, reportError("subscriptionDataSubscriptions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionDataSubscriptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
