/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
	"fmt"
)

// OperationModeAnyOf the model 'OperationModeAnyOf'
type OperationModeAnyOf string

// List of OperationMode_anyOf
const (
	WB_S1 OperationModeAnyOf = "WB_S1"
	NB_S1 OperationModeAnyOf = "NB_S1"
	WB_N1 OperationModeAnyOf = "WB_N1"
	NB_N1 OperationModeAnyOf = "NB_N1"
)

// All allowed values of OperationModeAnyOf enum
var AllowedOperationModeAnyOfEnumValues = []OperationModeAnyOf{
	"WB_S1",
	"NB_S1",
	"WB_N1",
	"NB_N1",
}

func (v *OperationModeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OperationModeAnyOf(value)
	for _, existing := range AllowedOperationModeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OperationModeAnyOf", value)
}

// NewOperationModeAnyOfFromValue returns a pointer to a valid OperationModeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperationModeAnyOfFromValue(v string) (*OperationModeAnyOf, error) {
	ev := OperationModeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OperationModeAnyOf: valid values are %v", v, AllowedOperationModeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OperationModeAnyOf) IsValid() bool {
	for _, existing := range AllowedOperationModeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OperationMode_anyOf value
func (v OperationModeAnyOf) Ptr() *OperationModeAnyOf {
	return &v
}

type NullableOperationModeAnyOf struct {
	value *OperationModeAnyOf
	isSet bool
}

func (v NullableOperationModeAnyOf) Get() *OperationModeAnyOf {
	return v.value
}

func (v *NullableOperationModeAnyOf) Set(val *OperationModeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationModeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationModeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationModeAnyOf(val *OperationModeAnyOf) *NullableOperationModeAnyOf {
	return &NullableOperationModeAnyOf{value: val, isSet: true}
}

func (v NullableOperationModeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationModeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

