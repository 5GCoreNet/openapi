/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
)

// checks if the EcsServerAddr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EcsServerAddr{}

// EcsServerAddr Contains the Edge Configuration Server Address Configuration Information as defined in clause 5.2.3.6.1 of 3GPP TS 23.502.
type EcsServerAddr struct {
	EcsFqdnList      []string `json:"ecsFqdnList,omitempty"`
	EcsIpAddressList []IpAddr `json:"ecsIpAddressList,omitempty"`
	EcsUriList       []string `json:"ecsUriList,omitempty"`
	EcsProviderId    *string  `json:"ecsProviderId,omitempty"`
}

// NewEcsServerAddr instantiates a new EcsServerAddr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEcsServerAddr() *EcsServerAddr {
	this := EcsServerAddr{}
	return &this
}

// NewEcsServerAddrWithDefaults instantiates a new EcsServerAddr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEcsServerAddrWithDefaults() *EcsServerAddr {
	this := EcsServerAddr{}
	return &this
}

// GetEcsFqdnList returns the EcsFqdnList field value if set, zero value otherwise.
func (o *EcsServerAddr) GetEcsFqdnList() []string {
	if o == nil || IsNil(o.EcsFqdnList) {
		var ret []string
		return ret
	}
	return o.EcsFqdnList
}

// GetEcsFqdnListOk returns a tuple with the EcsFqdnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcsServerAddr) GetEcsFqdnListOk() ([]string, bool) {
	if o == nil || IsNil(o.EcsFqdnList) {
		return nil, false
	}
	return o.EcsFqdnList, true
}

// HasEcsFqdnList returns a boolean if a field has been set.
func (o *EcsServerAddr) HasEcsFqdnList() bool {
	if o != nil && !IsNil(o.EcsFqdnList) {
		return true
	}

	return false
}

// SetEcsFqdnList gets a reference to the given []string and assigns it to the EcsFqdnList field.
func (o *EcsServerAddr) SetEcsFqdnList(v []string) {
	o.EcsFqdnList = v
}

// GetEcsIpAddressList returns the EcsIpAddressList field value if set, zero value otherwise.
func (o *EcsServerAddr) GetEcsIpAddressList() []IpAddr {
	if o == nil || IsNil(o.EcsIpAddressList) {
		var ret []IpAddr
		return ret
	}
	return o.EcsIpAddressList
}

// GetEcsIpAddressListOk returns a tuple with the EcsIpAddressList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcsServerAddr) GetEcsIpAddressListOk() ([]IpAddr, bool) {
	if o == nil || IsNil(o.EcsIpAddressList) {
		return nil, false
	}
	return o.EcsIpAddressList, true
}

// HasEcsIpAddressList returns a boolean if a field has been set.
func (o *EcsServerAddr) HasEcsIpAddressList() bool {
	if o != nil && !IsNil(o.EcsIpAddressList) {
		return true
	}

	return false
}

// SetEcsIpAddressList gets a reference to the given []IpAddr and assigns it to the EcsIpAddressList field.
func (o *EcsServerAddr) SetEcsIpAddressList(v []IpAddr) {
	o.EcsIpAddressList = v
}

// GetEcsUriList returns the EcsUriList field value if set, zero value otherwise.
func (o *EcsServerAddr) GetEcsUriList() []string {
	if o == nil || IsNil(o.EcsUriList) {
		var ret []string
		return ret
	}
	return o.EcsUriList
}

// GetEcsUriListOk returns a tuple with the EcsUriList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcsServerAddr) GetEcsUriListOk() ([]string, bool) {
	if o == nil || IsNil(o.EcsUriList) {
		return nil, false
	}
	return o.EcsUriList, true
}

// HasEcsUriList returns a boolean if a field has been set.
func (o *EcsServerAddr) HasEcsUriList() bool {
	if o != nil && !IsNil(o.EcsUriList) {
		return true
	}

	return false
}

// SetEcsUriList gets a reference to the given []string and assigns it to the EcsUriList field.
func (o *EcsServerAddr) SetEcsUriList(v []string) {
	o.EcsUriList = v
}

// GetEcsProviderId returns the EcsProviderId field value if set, zero value otherwise.
func (o *EcsServerAddr) GetEcsProviderId() string {
	if o == nil || IsNil(o.EcsProviderId) {
		var ret string
		return ret
	}
	return *o.EcsProviderId
}

// GetEcsProviderIdOk returns a tuple with the EcsProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcsServerAddr) GetEcsProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.EcsProviderId) {
		return nil, false
	}
	return o.EcsProviderId, true
}

// HasEcsProviderId returns a boolean if a field has been set.
func (o *EcsServerAddr) HasEcsProviderId() bool {
	if o != nil && !IsNil(o.EcsProviderId) {
		return true
	}

	return false
}

// SetEcsProviderId gets a reference to the given string and assigns it to the EcsProviderId field.
func (o *EcsServerAddr) SetEcsProviderId(v string) {
	o.EcsProviderId = &v
}

func (o EcsServerAddr) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EcsServerAddr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EcsFqdnList) {
		toSerialize["ecsFqdnList"] = o.EcsFqdnList
	}
	if !IsNil(o.EcsIpAddressList) {
		toSerialize["ecsIpAddressList"] = o.EcsIpAddressList
	}
	if !IsNil(o.EcsUriList) {
		toSerialize["ecsUriList"] = o.EcsUriList
	}
	if !IsNil(o.EcsProviderId) {
		toSerialize["ecsProviderId"] = o.EcsProviderId
	}
	return toSerialize, nil
}

type NullableEcsServerAddr struct {
	value *EcsServerAddr
	isSet bool
}

func (v NullableEcsServerAddr) Get() *EcsServerAddr {
	return v.value
}

func (v *NullableEcsServerAddr) Set(val *EcsServerAddr) {
	v.value = val
	v.isSet = true
}

func (v NullableEcsServerAddr) IsSet() bool {
	return v.isSet
}

func (v *NullableEcsServerAddr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEcsServerAddr(val *EcsServerAddr) *NullableEcsServerAddr {
	return &NullableEcsServerAddr{value: val, isSet: true}
}

func (v NullableEcsServerAddr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEcsServerAddr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
