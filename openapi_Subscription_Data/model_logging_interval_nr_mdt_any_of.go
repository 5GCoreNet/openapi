/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
	"fmt"
)

// LoggingIntervalNrMdtAnyOf the model 'LoggingIntervalNrMdtAnyOf'
type LoggingIntervalNrMdtAnyOf string

// List of LoggingIntervalNrMdt_anyOf
const (
	_128 LoggingIntervalNrMdtAnyOf = "128"
	_256 LoggingIntervalNrMdtAnyOf = "256"
	_512 LoggingIntervalNrMdtAnyOf = "512"
	_1024 LoggingIntervalNrMdtAnyOf = "1024"
	_2048 LoggingIntervalNrMdtAnyOf = "2048"
	_3072 LoggingIntervalNrMdtAnyOf = "3072"
	_4096 LoggingIntervalNrMdtAnyOf = "4096"
	_6144 LoggingIntervalNrMdtAnyOf = "6144"
	_320 LoggingIntervalNrMdtAnyOf = "320"
	_640 LoggingIntervalNrMdtAnyOf = "640"
	INFINITY LoggingIntervalNrMdtAnyOf = "infinity"
)

// All allowed values of LoggingIntervalNrMdtAnyOf enum
var AllowedLoggingIntervalNrMdtAnyOfEnumValues = []LoggingIntervalNrMdtAnyOf{
	"128",
	"256",
	"512",
	"1024",
	"2048",
	"3072",
	"4096",
	"6144",
	"320",
	"640",
	"infinity",
}

func (v *LoggingIntervalNrMdtAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoggingIntervalNrMdtAnyOf(value)
	for _, existing := range AllowedLoggingIntervalNrMdtAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoggingIntervalNrMdtAnyOf", value)
}

// NewLoggingIntervalNrMdtAnyOfFromValue returns a pointer to a valid LoggingIntervalNrMdtAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoggingIntervalNrMdtAnyOfFromValue(v string) (*LoggingIntervalNrMdtAnyOf, error) {
	ev := LoggingIntervalNrMdtAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoggingIntervalNrMdtAnyOf: valid values are %v", v, AllowedLoggingIntervalNrMdtAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoggingIntervalNrMdtAnyOf) IsValid() bool {
	for _, existing := range AllowedLoggingIntervalNrMdtAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoggingIntervalNrMdt_anyOf value
func (v LoggingIntervalNrMdtAnyOf) Ptr() *LoggingIntervalNrMdtAnyOf {
	return &v
}

type NullableLoggingIntervalNrMdtAnyOf struct {
	value *LoggingIntervalNrMdtAnyOf
	isSet bool
}

func (v NullableLoggingIntervalNrMdtAnyOf) Get() *LoggingIntervalNrMdtAnyOf {
	return v.value
}

func (v *NullableLoggingIntervalNrMdtAnyOf) Set(val *LoggingIntervalNrMdtAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggingIntervalNrMdtAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggingIntervalNrMdtAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggingIntervalNrMdtAnyOf(val *LoggingIntervalNrMdtAnyOf) *NullableLoggingIntervalNrMdtAnyOf {
	return &NullableLoggingIntervalNrMdtAnyOf{value: val, isSet: true}
}

func (v NullableLoggingIntervalNrMdtAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggingIntervalNrMdtAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

