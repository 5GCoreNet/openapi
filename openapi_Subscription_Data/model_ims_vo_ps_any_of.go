/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
	"fmt"
)

// ImsVoPsAnyOf the model 'ImsVoPsAnyOf'
type ImsVoPsAnyOf string

// List of ImsVoPs_anyOf
const (
	HOMOGENEOUS_SUPPORT ImsVoPsAnyOf = "HOMOGENEOUS_SUPPORT"
	HOMOGENEOUS_NON_SUPPORT ImsVoPsAnyOf = "HOMOGENEOUS_NON_SUPPORT"
	NON_HOMOGENEOUS_OR_UNKNOWN ImsVoPsAnyOf = "NON_HOMOGENEOUS_OR_UNKNOWN"
)

// All allowed values of ImsVoPsAnyOf enum
var AllowedImsVoPsAnyOfEnumValues = []ImsVoPsAnyOf{
	"HOMOGENEOUS_SUPPORT",
	"HOMOGENEOUS_NON_SUPPORT",
	"NON_HOMOGENEOUS_OR_UNKNOWN",
}

func (v *ImsVoPsAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImsVoPsAnyOf(value)
	for _, existing := range AllowedImsVoPsAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImsVoPsAnyOf", value)
}

// NewImsVoPsAnyOfFromValue returns a pointer to a valid ImsVoPsAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImsVoPsAnyOfFromValue(v string) (*ImsVoPsAnyOf, error) {
	ev := ImsVoPsAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImsVoPsAnyOf: valid values are %v", v, AllowedImsVoPsAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImsVoPsAnyOf) IsValid() bool {
	for _, existing := range AllowedImsVoPsAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImsVoPs_anyOf value
func (v ImsVoPsAnyOf) Ptr() *ImsVoPsAnyOf {
	return &v
}

type NullableImsVoPsAnyOf struct {
	value *ImsVoPsAnyOf
	isSet bool
}

func (v NullableImsVoPsAnyOf) Get() *ImsVoPsAnyOf {
	return v.value
}

func (v *NullableImsVoPsAnyOf) Set(val *ImsVoPsAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableImsVoPsAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableImsVoPsAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImsVoPsAnyOf(val *ImsVoPsAnyOf) *NullableImsVoPsAnyOf {
	return &NullableImsVoPsAnyOf{value: val, isSet: true}
}

func (v NullableImsVoPsAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImsVoPsAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

