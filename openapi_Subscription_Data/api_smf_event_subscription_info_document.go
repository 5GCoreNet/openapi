/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SMFEventSubscriptionInfoDocumentApiService SMFEventSubscriptionInfoDocumentApi service
type SMFEventSubscriptionInfoDocumentApiService service

type ApiCreateSMFSubscriptionsRequest struct {
	ctx                 context.Context
	ApiService          *SMFEventSubscriptionInfoDocumentApiService
	ueId                string
	subsId              string
	smfSubscriptionInfo *SmfSubscriptionInfo
}

func (r ApiCreateSMFSubscriptionsRequest) SmfSubscriptionInfo(smfSubscriptionInfo SmfSubscriptionInfo) ApiCreateSMFSubscriptionsRequest {
	r.smfSubscriptionInfo = &smfSubscriptionInfo
	return r
}

func (r ApiCreateSMFSubscriptionsRequest) Execute() (*SmfSubscriptionInfo, *http.Response, error) {
	return r.ApiService.CreateSMFSubscriptionsExecute(r)
}

/*
CreateSMFSubscriptions Create SMF Subscription Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueId
	@param subsId
	@return ApiCreateSMFSubscriptionsRequest
*/
func (a *SMFEventSubscriptionInfoDocumentApiService) CreateSMFSubscriptions(ctx context.Context, ueId string, subsId string) ApiCreateSMFSubscriptionsRequest {
	return ApiCreateSMFSubscriptionsRequest{
		ApiService: a,
		ctx:        ctx,
		ueId:       ueId,
		subsId:     subsId,
	}
}

// Execute executes the request
//
//	@return SmfSubscriptionInfo
func (a *SMFEventSubscriptionInfoDocumentApiService) CreateSMFSubscriptionsExecute(r ApiCreateSMFSubscriptionsRequest) (*SmfSubscriptionInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SmfSubscriptionInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SMFEventSubscriptionInfoDocumentApiService.CreateSMFSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smfSubscriptionInfo == nil {
		return localVarReturnValue, nil, reportError("smfSubscriptionInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smfSubscriptionInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSmfGroupSubscriptionsRequest struct {
	ctx        context.Context
	ApiService *SMFEventSubscriptionInfoDocumentApiService
	ueGroupId  string
	subsId     string
}

func (r ApiGetSmfGroupSubscriptionsRequest) Execute() (*SmfSubscriptionInfo, *http.Response, error) {
	return r.ApiService.GetSmfGroupSubscriptionsExecute(r)
}

/*
GetSmfGroupSubscriptions Retrieve SMF Subscription Info for a group of UEs or any UE

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueGroupId
	@param subsId
	@return ApiGetSmfGroupSubscriptionsRequest
*/
func (a *SMFEventSubscriptionInfoDocumentApiService) GetSmfGroupSubscriptions(ctx context.Context, ueGroupId string, subsId string) ApiGetSmfGroupSubscriptionsRequest {
	return ApiGetSmfGroupSubscriptionsRequest{
		ApiService: a,
		ctx:        ctx,
		ueGroupId:  ueGroupId,
		subsId:     subsId,
	}
}

// Execute executes the request
//
//	@return SmfSubscriptionInfo
func (a *SMFEventSubscriptionInfoDocumentApiService) GetSmfGroupSubscriptionsExecute(r ApiGetSmfGroupSubscriptionsRequest) (*SmfSubscriptionInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SmfSubscriptionInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SMFEventSubscriptionInfoDocumentApiService.GetSmfGroupSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", url.PathEscape(parameterValueToString(r.ueGroupId, "ueGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSmfSubscriptionInfoRequest struct {
	ctx        context.Context
	ApiService *SMFEventSubscriptionInfoDocumentApiService
	ueId       string
	subsId     string
}

func (r ApiGetSmfSubscriptionInfoRequest) Execute() (*SmfSubscriptionInfo, *http.Response, error) {
	return r.ApiService.GetSmfSubscriptionInfoExecute(r)
}

/*
GetSmfSubscriptionInfo Retrieve SMF Subscription Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueId
	@param subsId
	@return ApiGetSmfSubscriptionInfoRequest
*/
func (a *SMFEventSubscriptionInfoDocumentApiService) GetSmfSubscriptionInfo(ctx context.Context, ueId string, subsId string) ApiGetSmfSubscriptionInfoRequest {
	return ApiGetSmfSubscriptionInfoRequest{
		ApiService: a,
		ctx:        ctx,
		ueId:       ueId,
		subsId:     subsId,
	}
}

// Execute executes the request
//
//	@return SmfSubscriptionInfo
func (a *SMFEventSubscriptionInfoDocumentApiService) GetSmfSubscriptionInfoExecute(r ApiGetSmfSubscriptionInfoRequest) (*SmfSubscriptionInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SmfSubscriptionInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SMFEventSubscriptionInfoDocumentApiService.GetSmfSubscriptionInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifySmfGroupSubscriptionsRequest struct {
	ctx               context.Context
	ApiService        *SMFEventSubscriptionInfoDocumentApiService
	ueGroupId         string
	subsId            string
	patchItem         *[]PatchItem
	supportedFeatures *string
}

func (r ApiModifySmfGroupSubscriptionsRequest) PatchItem(patchItem []PatchItem) ApiModifySmfGroupSubscriptionsRequest {
	r.patchItem = &patchItem
	return r
}

// Features required to be supported by the target NF
func (r ApiModifySmfGroupSubscriptionsRequest) SupportedFeatures(supportedFeatures string) ApiModifySmfGroupSubscriptionsRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

func (r ApiModifySmfGroupSubscriptionsRequest) Execute() (*PatchResult, *http.Response, error) {
	return r.ApiService.ModifySmfGroupSubscriptionsExecute(r)
}

/*
ModifySmfGroupSubscriptions Modify SMF Subscription Info for a group of UEs or any UE

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueGroupId
	@param subsId
	@return ApiModifySmfGroupSubscriptionsRequest
*/
func (a *SMFEventSubscriptionInfoDocumentApiService) ModifySmfGroupSubscriptions(ctx context.Context, ueGroupId string, subsId string) ApiModifySmfGroupSubscriptionsRequest {
	return ApiModifySmfGroupSubscriptionsRequest{
		ApiService: a,
		ctx:        ctx,
		ueGroupId:  ueGroupId,
		subsId:     subsId,
	}
}

// Execute executes the request
//
//	@return PatchResult
func (a *SMFEventSubscriptionInfoDocumentApiService) ModifySmfGroupSubscriptionsExecute(r ApiModifySmfGroupSubscriptionsRequest) (*PatchResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PatchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SMFEventSubscriptionInfoDocumentApiService.ModifySmfGroupSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", url.PathEscape(parameterValueToString(r.ueGroupId, "ueGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchItem == nil {
		return localVarReturnValue, nil, reportError("patchItem is required and must be specified")
	}

	if r.supportedFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifySmfSubscriptionInfoRequest struct {
	ctx               context.Context
	ApiService        *SMFEventSubscriptionInfoDocumentApiService
	ueId              string
	subsId            string
	patchItem         *[]PatchItem
	supportedFeatures *string
}

func (r ApiModifySmfSubscriptionInfoRequest) PatchItem(patchItem []PatchItem) ApiModifySmfSubscriptionInfoRequest {
	r.patchItem = &patchItem
	return r
}

// Features required to be supported by the target NF
func (r ApiModifySmfSubscriptionInfoRequest) SupportedFeatures(supportedFeatures string) ApiModifySmfSubscriptionInfoRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

func (r ApiModifySmfSubscriptionInfoRequest) Execute() (*PatchResult, *http.Response, error) {
	return r.ApiService.ModifySmfSubscriptionInfoExecute(r)
}

/*
ModifySmfSubscriptionInfo Modify SMF Subscription Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueId
	@param subsId
	@return ApiModifySmfSubscriptionInfoRequest
*/
func (a *SMFEventSubscriptionInfoDocumentApiService) ModifySmfSubscriptionInfo(ctx context.Context, ueId string, subsId string) ApiModifySmfSubscriptionInfoRequest {
	return ApiModifySmfSubscriptionInfoRequest{
		ApiService: a,
		ctx:        ctx,
		ueId:       ueId,
		subsId:     subsId,
	}
}

// Execute executes the request
//
//	@return PatchResult
func (a *SMFEventSubscriptionInfoDocumentApiService) ModifySmfSubscriptionInfoExecute(r ApiModifySmfSubscriptionInfoRequest) (*PatchResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PatchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SMFEventSubscriptionInfoDocumentApiService.ModifySmfSubscriptionInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchItem == nil {
		return localVarReturnValue, nil, reportError("patchItem is required and must be specified")
	}

	if r.supportedFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveSmfGroupSubscriptionsRequest struct {
	ctx        context.Context
	ApiService *SMFEventSubscriptionInfoDocumentApiService
	ueGroupId  string
	subsId     string
}

func (r ApiRemoveSmfGroupSubscriptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveSmfGroupSubscriptionsExecute(r)
}

/*
RemoveSmfGroupSubscriptions Delete SMF Subscription Info for a group of UEs or any UE

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueGroupId
	@param subsId
	@return ApiRemoveSmfGroupSubscriptionsRequest
*/
func (a *SMFEventSubscriptionInfoDocumentApiService) RemoveSmfGroupSubscriptions(ctx context.Context, ueGroupId string, subsId string) ApiRemoveSmfGroupSubscriptionsRequest {
	return ApiRemoveSmfGroupSubscriptionsRequest{
		ApiService: a,
		ctx:        ctx,
		ueGroupId:  ueGroupId,
		subsId:     subsId,
	}
}

// Execute executes the request
func (a *SMFEventSubscriptionInfoDocumentApiService) RemoveSmfGroupSubscriptionsExecute(r ApiRemoveSmfGroupSubscriptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SMFEventSubscriptionInfoDocumentApiService.RemoveSmfGroupSubscriptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", url.PathEscape(parameterValueToString(r.ueGroupId, "ueGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveSmfSubscriptionsInfoRequest struct {
	ctx        context.Context
	ApiService *SMFEventSubscriptionInfoDocumentApiService
	ueId       string
	subsId     string
}

func (r ApiRemoveSmfSubscriptionsInfoRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveSmfSubscriptionsInfoExecute(r)
}

/*
RemoveSmfSubscriptionsInfo Delete SMF Subscription Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueId
	@param subsId
	@return ApiRemoveSmfSubscriptionsInfoRequest
*/
func (a *SMFEventSubscriptionInfoDocumentApiService) RemoveSmfSubscriptionsInfo(ctx context.Context, ueId string, subsId string) ApiRemoveSmfSubscriptionsInfoRequest {
	return ApiRemoveSmfSubscriptionsInfoRequest{
		ApiService: a,
		ctx:        ctx,
		ueId:       ueId,
		subsId:     subsId,
	}
}

// Execute executes the request
func (a *SMFEventSubscriptionInfoDocumentApiService) RemoveSmfSubscriptionsInfoExecute(r ApiRemoveSmfSubscriptionsInfoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SMFEventSubscriptionInfoDocumentApiService.RemoveSmfSubscriptionsInfo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
