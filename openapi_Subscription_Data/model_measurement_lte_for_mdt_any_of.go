/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
	"fmt"
)

// MeasurementLteForMdtAnyOf the model 'MeasurementLteForMdtAnyOf'
type MeasurementLteForMdtAnyOf string

// List of MeasurementLteForMdt_anyOf
const (
	M1 MeasurementLteForMdtAnyOf = "M1"
	M2 MeasurementLteForMdtAnyOf = "M2"
	M3 MeasurementLteForMdtAnyOf = "M3"
	M4_DL MeasurementLteForMdtAnyOf = "M4_DL"
	M4_UL MeasurementLteForMdtAnyOf = "M4_UL"
	M5_DL MeasurementLteForMdtAnyOf = "M5_DL"
	M5_UL MeasurementLteForMdtAnyOf = "M5_UL"
	M6_DL MeasurementLteForMdtAnyOf = "M6_DL"
	M6_UL MeasurementLteForMdtAnyOf = "M6_UL"
	M7_DL MeasurementLteForMdtAnyOf = "M7_DL"
	M7_UL MeasurementLteForMdtAnyOf = "M7_UL"
	M8 MeasurementLteForMdtAnyOf = "M8"
	M9 MeasurementLteForMdtAnyOf = "M9"
)

// All allowed values of MeasurementLteForMdtAnyOf enum
var AllowedMeasurementLteForMdtAnyOfEnumValues = []MeasurementLteForMdtAnyOf{
	"M1",
	"M2",
	"M3",
	"M4_DL",
	"M4_UL",
	"M5_DL",
	"M5_UL",
	"M6_DL",
	"M6_UL",
	"M7_DL",
	"M7_UL",
	"M8",
	"M9",
}

func (v *MeasurementLteForMdtAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MeasurementLteForMdtAnyOf(value)
	for _, existing := range AllowedMeasurementLteForMdtAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MeasurementLteForMdtAnyOf", value)
}

// NewMeasurementLteForMdtAnyOfFromValue returns a pointer to a valid MeasurementLteForMdtAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMeasurementLteForMdtAnyOfFromValue(v string) (*MeasurementLteForMdtAnyOf, error) {
	ev := MeasurementLteForMdtAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MeasurementLteForMdtAnyOf: valid values are %v", v, AllowedMeasurementLteForMdtAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MeasurementLteForMdtAnyOf) IsValid() bool {
	for _, existing := range AllowedMeasurementLteForMdtAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MeasurementLteForMdt_anyOf value
func (v MeasurementLteForMdtAnyOf) Ptr() *MeasurementLteForMdtAnyOf {
	return &v
}

type NullableMeasurementLteForMdtAnyOf struct {
	value *MeasurementLteForMdtAnyOf
	isSet bool
}

func (v NullableMeasurementLteForMdtAnyOf) Get() *MeasurementLteForMdtAnyOf {
	return v.value
}

func (v *NullableMeasurementLteForMdtAnyOf) Set(val *MeasurementLteForMdtAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurementLteForMdtAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurementLteForMdtAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurementLteForMdtAnyOf(val *MeasurementLteForMdtAnyOf) *NullableMeasurementLteForMdtAnyOf {
	return &NullableMeasurementLteForMdtAnyOf{value: val, isSet: true}
}

func (v NullableMeasurementLteForMdtAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurementLteForMdtAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

