/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
	"fmt"
)

// UeUpdateStatus Status of the procedure.
type UeUpdateStatus string

// List of UeUpdateStatus
const (
	NOT_SENT UeUpdateStatus = "NOT_SENT"
	SENT_NO_ACK_REQUIRED UeUpdateStatus = "SENT_NO_ACK_REQUIRED"
	WAITING_FOR_ACK UeUpdateStatus = "WAITING_FOR_ACK"
	ACK_RECEIVED UeUpdateStatus = "ACK_RECEIVED"
	NEGATIVE_ACK_RECEIVED UeUpdateStatus = "NEGATIVE_ACK_RECEIVED"
)

// All allowed values of UeUpdateStatus enum
var AllowedUeUpdateStatusEnumValues = []UeUpdateStatus{
	"NOT_SENT",
	"SENT_NO_ACK_REQUIRED",
	"WAITING_FOR_ACK",
	"ACK_RECEIVED",
	"NEGATIVE_ACK_RECEIVED",
}

func (v *UeUpdateStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UeUpdateStatus(value)
	for _, existing := range AllowedUeUpdateStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UeUpdateStatus", value)
}

// NewUeUpdateStatusFromValue returns a pointer to a valid UeUpdateStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUeUpdateStatusFromValue(v string) (*UeUpdateStatus, error) {
	ev := UeUpdateStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UeUpdateStatus: valid values are %v", v, AllowedUeUpdateStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UeUpdateStatus) IsValid() bool {
	for _, existing := range AllowedUeUpdateStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UeUpdateStatus value
func (v UeUpdateStatus) Ptr() *UeUpdateStatus {
	return &v
}

type NullableUeUpdateStatus struct {
	value *UeUpdateStatus
	isSet bool
}

func (v NullableUeUpdateStatus) Get() *UeUpdateStatus {
	return v.value
}

func (v *NullableUeUpdateStatus) Set(val *UeUpdateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUeUpdateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUeUpdateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeUpdateStatus(val *UeUpdateStatus) *NullableUeUpdateStatus {
	return &NullableUeUpdateStatus{value: val, isSet: true}
}

func (v NullableUeUpdateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeUpdateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

