/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
	"fmt"
)

// ScheduledCommunicationTimeRm This data type is defined in the same way as the 'ScheduledCommunicationTime' data type, but with the OpenAPI 'nullable: true' property.
type ScheduledCommunicationTimeRm struct {
	NullValue                  *NullValue
	ScheduledCommunicationTime *ScheduledCommunicationTime
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ScheduledCommunicationTimeRm) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into NullValue
	err = json.Unmarshal(data, &dst.NullValue)
	if err == nil {
		jsonNullValue, _ := json.Marshal(dst.NullValue)
		if string(jsonNullValue) == "{}" { // empty struct
			dst.NullValue = nil
		} else {
			return nil // data stored in dst.NullValue, return on the first match
		}
	} else {
		dst.NullValue = nil
	}

	// try to unmarshal JSON data into ScheduledCommunicationTime
	err = json.Unmarshal(data, &dst.ScheduledCommunicationTime)
	if err == nil {
		jsonScheduledCommunicationTime, _ := json.Marshal(dst.ScheduledCommunicationTime)
		if string(jsonScheduledCommunicationTime) == "{}" { // empty struct
			dst.ScheduledCommunicationTime = nil
		} else {
			return nil // data stored in dst.ScheduledCommunicationTime, return on the first match
		}
	} else {
		dst.ScheduledCommunicationTime = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ScheduledCommunicationTimeRm)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ScheduledCommunicationTimeRm) MarshalJSON() ([]byte, error) {
	if src.NullValue != nil {
		return json.Marshal(&src.NullValue)
	}

	if src.ScheduledCommunicationTime != nil {
		return json.Marshal(&src.ScheduledCommunicationTime)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableScheduledCommunicationTimeRm struct {
	value *ScheduledCommunicationTimeRm
	isSet bool
}

func (v NullableScheduledCommunicationTimeRm) Get() *ScheduledCommunicationTimeRm {
	return v.value
}

func (v *NullableScheduledCommunicationTimeRm) Set(val *ScheduledCommunicationTimeRm) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledCommunicationTimeRm) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledCommunicationTimeRm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledCommunicationTimeRm(val *ScheduledCommunicationTimeRm) *NullableScheduledCommunicationTimeRm {
	return &NullableScheduledCommunicationTimeRm{value: val, isSet: true}
}

func (v NullableScheduledCommunicationTimeRm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledCommunicationTimeRm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
