/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// HSSSDMSubscriptionInfoDocumentApiService HSSSDMSubscriptionInfoDocumentApi service
type HSSSDMSubscriptionInfoDocumentApiService service

type ApiCreateHSSSDMSubscriptionsRequest struct {
	ctx                 context.Context
	ApiService          *HSSSDMSubscriptionInfoDocumentApiService
	ueId                string
	subsId              string
	hssSubscriptionInfo *HssSubscriptionInfo
}

func (r ApiCreateHSSSDMSubscriptionsRequest) HssSubscriptionInfo(hssSubscriptionInfo HssSubscriptionInfo) ApiCreateHSSSDMSubscriptionsRequest {
	r.hssSubscriptionInfo = &hssSubscriptionInfo
	return r
}

func (r ApiCreateHSSSDMSubscriptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateHSSSDMSubscriptionsExecute(r)
}

/*
CreateHSSSDMSubscriptions Create HSS SDM Subscription Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueId
	@param subsId
	@return ApiCreateHSSSDMSubscriptionsRequest
*/
func (a *HSSSDMSubscriptionInfoDocumentApiService) CreateHSSSDMSubscriptions(ctx context.Context, ueId string, subsId string) ApiCreateHSSSDMSubscriptionsRequest {
	return ApiCreateHSSSDMSubscriptionsRequest{
		ApiService: a,
		ctx:        ctx,
		ueId:       ueId,
		subsId:     subsId,
	}
}

// Execute executes the request
func (a *HSSSDMSubscriptionInfoDocumentApiService) CreateHSSSDMSubscriptionsExecute(r ApiCreateHSSSDMSubscriptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HSSSDMSubscriptionInfoDocumentApiService.CreateHSSSDMSubscriptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hssSubscriptionInfo == nil {
		return nil, reportError("hssSubscriptionInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hssSubscriptionInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetHssSDMSubscriptionInfoRequest struct {
	ctx        context.Context
	ApiService *HSSSDMSubscriptionInfoDocumentApiService
	ueId       string
	subsId     string
}

func (r ApiGetHssSDMSubscriptionInfoRequest) Execute() (*SmfSubscriptionInfo, *http.Response, error) {
	return r.ApiService.GetHssSDMSubscriptionInfoExecute(r)
}

/*
GetHssSDMSubscriptionInfo Retrieve HSS SDM Subscription Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueId
	@param subsId
	@return ApiGetHssSDMSubscriptionInfoRequest
*/
func (a *HSSSDMSubscriptionInfoDocumentApiService) GetHssSDMSubscriptionInfo(ctx context.Context, ueId string, subsId string) ApiGetHssSDMSubscriptionInfoRequest {
	return ApiGetHssSDMSubscriptionInfoRequest{
		ApiService: a,
		ctx:        ctx,
		ueId:       ueId,
		subsId:     subsId,
	}
}

// Execute executes the request
//
//	@return SmfSubscriptionInfo
func (a *HSSSDMSubscriptionInfoDocumentApiService) GetHssSDMSubscriptionInfoExecute(r ApiGetHssSDMSubscriptionInfoRequest) (*SmfSubscriptionInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SmfSubscriptionInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HSSSDMSubscriptionInfoDocumentApiService.GetHssSDMSubscriptionInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyHssSDMSubscriptionInfoRequest struct {
	ctx               context.Context
	ApiService        *HSSSDMSubscriptionInfoDocumentApiService
	ueId              string
	subsId            string
	patchItem         *[]PatchItem
	supportedFeatures *string
}

func (r ApiModifyHssSDMSubscriptionInfoRequest) PatchItem(patchItem []PatchItem) ApiModifyHssSDMSubscriptionInfoRequest {
	r.patchItem = &patchItem
	return r
}

// Features required to be supported by the target NF
func (r ApiModifyHssSDMSubscriptionInfoRequest) SupportedFeatures(supportedFeatures string) ApiModifyHssSDMSubscriptionInfoRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

func (r ApiModifyHssSDMSubscriptionInfoRequest) Execute() (*PatchResult, *http.Response, error) {
	return r.ApiService.ModifyHssSDMSubscriptionInfoExecute(r)
}

/*
ModifyHssSDMSubscriptionInfo Modify HSS SDM Subscription Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueId
	@param subsId
	@return ApiModifyHssSDMSubscriptionInfoRequest
*/
func (a *HSSSDMSubscriptionInfoDocumentApiService) ModifyHssSDMSubscriptionInfo(ctx context.Context, ueId string, subsId string) ApiModifyHssSDMSubscriptionInfoRequest {
	return ApiModifyHssSDMSubscriptionInfoRequest{
		ApiService: a,
		ctx:        ctx,
		ueId:       ueId,
		subsId:     subsId,
	}
}

// Execute executes the request
//
//	@return PatchResult
func (a *HSSSDMSubscriptionInfoDocumentApiService) ModifyHssSDMSubscriptionInfoExecute(r ApiModifyHssSDMSubscriptionInfoRequest) (*PatchResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PatchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HSSSDMSubscriptionInfoDocumentApiService.ModifyHssSDMSubscriptionInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchItem == nil {
		return localVarReturnValue, nil, reportError("patchItem is required and must be specified")
	}

	if r.supportedFeatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supported-features", r.supportedFeatures, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveHssSDMSubscriptionsInfoRequest struct {
	ctx        context.Context
	ApiService *HSSSDMSubscriptionInfoDocumentApiService
	ueId       string
	subsId     string
}

func (r ApiRemoveHssSDMSubscriptionsInfoRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveHssSDMSubscriptionsInfoExecute(r)
}

/*
RemoveHssSDMSubscriptionsInfo Delete HSS SDM Subscription Info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueId
	@param subsId
	@return ApiRemoveHssSDMSubscriptionsInfoRequest
*/
func (a *HSSSDMSubscriptionInfoDocumentApiService) RemoveHssSDMSubscriptionsInfo(ctx context.Context, ueId string, subsId string) ApiRemoveHssSDMSubscriptionsInfoRequest {
	return ApiRemoveHssSDMSubscriptionsInfoRequest{
		ApiService: a,
		ctx:        ctx,
		ueId:       ueId,
		subsId:     subsId,
	}
}

// Execute executes the request
func (a *HSSSDMSubscriptionInfoDocumentApiService) RemoveHssSDMSubscriptionsInfoExecute(r ApiRemoveHssSDMSubscriptionsInfoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HSSSDMSubscriptionInfoDocumentApiService.RemoveHssSDMSubscriptionsInfo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", url.PathEscape(parameterValueToString(r.ueId, "ueId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", url.PathEscape(parameterValueToString(r.subsId, "subsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
