/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
	"fmt"
)

// ContextDataSetNameAnyOf the model 'ContextDataSetNameAnyOf'
type ContextDataSetNameAnyOf string

// List of ContextDataSetName_anyOf
const (
	AMF_3_GPP ContextDataSetNameAnyOf = "AMF_3GPP"
	AMF_NON_3_GPP ContextDataSetNameAnyOf = "AMF_NON_3GPP"
	SDM_SUBSCRIPTIONS ContextDataSetNameAnyOf = "SDM_SUBSCRIPTIONS"
	EE_SUBSCRIPTIONS ContextDataSetNameAnyOf = "EE_SUBSCRIPTIONS"
	SMSF_3_GPP ContextDataSetNameAnyOf = "SMSF_3GPP"
	SMSF_NON_3_GPP ContextDataSetNameAnyOf = "SMSF_NON_3GPP"
	SUBS_TO_NOTIFY ContextDataSetNameAnyOf = "SUBS_TO_NOTIFY"
	SMF_REG ContextDataSetNameAnyOf = "SMF_REG"
	IP_SM_GW ContextDataSetNameAnyOf = "IP_SM_GW"
	ROAMING_INFO ContextDataSetNameAnyOf = "ROAMING_INFO"
	PEI_INFO ContextDataSetNameAnyOf = "PEI_INFO"
)

// All allowed values of ContextDataSetNameAnyOf enum
var AllowedContextDataSetNameAnyOfEnumValues = []ContextDataSetNameAnyOf{
	"AMF_3GPP",
	"AMF_NON_3GPP",
	"SDM_SUBSCRIPTIONS",
	"EE_SUBSCRIPTIONS",
	"SMSF_3GPP",
	"SMSF_NON_3GPP",
	"SUBS_TO_NOTIFY",
	"SMF_REG",
	"IP_SM_GW",
	"ROAMING_INFO",
	"PEI_INFO",
}

func (v *ContextDataSetNameAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContextDataSetNameAnyOf(value)
	for _, existing := range AllowedContextDataSetNameAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContextDataSetNameAnyOf", value)
}

// NewContextDataSetNameAnyOfFromValue returns a pointer to a valid ContextDataSetNameAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContextDataSetNameAnyOfFromValue(v string) (*ContextDataSetNameAnyOf, error) {
	ev := ContextDataSetNameAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContextDataSetNameAnyOf: valid values are %v", v, AllowedContextDataSetNameAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContextDataSetNameAnyOf) IsValid() bool {
	for _, existing := range AllowedContextDataSetNameAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContextDataSetName_anyOf value
func (v ContextDataSetNameAnyOf) Ptr() *ContextDataSetNameAnyOf {
	return &v
}

type NullableContextDataSetNameAnyOf struct {
	value *ContextDataSetNameAnyOf
	isSet bool
}

func (v NullableContextDataSetNameAnyOf) Get() *ContextDataSetNameAnyOf {
	return v.value
}

func (v *NullableContextDataSetNameAnyOf) Set(val *ContextDataSetNameAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableContextDataSetNameAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableContextDataSetNameAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextDataSetNameAnyOf(val *ContextDataSetNameAnyOf) *NullableContextDataSetNameAnyOf {
	return &NullableContextDataSetNameAnyOf{value: val, isSet: true}
}

func (v NullableContextDataSetNameAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextDataSetNameAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

