/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
)

// checks if the EnhancedCoverageRestrictionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnhancedCoverageRestrictionData{}

// EnhancedCoverageRestrictionData struct for EnhancedCoverageRestrictionData
type EnhancedCoverageRestrictionData struct {
	PlmnEcInfoList []PlmnEcInfo `json:"plmnEcInfoList,omitempty"`
}

// NewEnhancedCoverageRestrictionData instantiates a new EnhancedCoverageRestrictionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnhancedCoverageRestrictionData() *EnhancedCoverageRestrictionData {
	this := EnhancedCoverageRestrictionData{}
	return &this
}

// NewEnhancedCoverageRestrictionDataWithDefaults instantiates a new EnhancedCoverageRestrictionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnhancedCoverageRestrictionDataWithDefaults() *EnhancedCoverageRestrictionData {
	this := EnhancedCoverageRestrictionData{}
	return &this
}

// GetPlmnEcInfoList returns the PlmnEcInfoList field value if set, zero value otherwise.
func (o *EnhancedCoverageRestrictionData) GetPlmnEcInfoList() []PlmnEcInfo {
	if o == nil || IsNil(o.PlmnEcInfoList) {
		var ret []PlmnEcInfo
		return ret
	}
	return o.PlmnEcInfoList
}

// GetPlmnEcInfoListOk returns a tuple with the PlmnEcInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnhancedCoverageRestrictionData) GetPlmnEcInfoListOk() ([]PlmnEcInfo, bool) {
	if o == nil || IsNil(o.PlmnEcInfoList) {
		return nil, false
	}
	return o.PlmnEcInfoList, true
}

// HasPlmnEcInfoList returns a boolean if a field has been set.
func (o *EnhancedCoverageRestrictionData) HasPlmnEcInfoList() bool {
	if o != nil && !IsNil(o.PlmnEcInfoList) {
		return true
	}

	return false
}

// SetPlmnEcInfoList gets a reference to the given []PlmnEcInfo and assigns it to the PlmnEcInfoList field.
func (o *EnhancedCoverageRestrictionData) SetPlmnEcInfoList(v []PlmnEcInfo) {
	o.PlmnEcInfoList = v
}

func (o EnhancedCoverageRestrictionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnhancedCoverageRestrictionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlmnEcInfoList) {
		toSerialize["plmnEcInfoList"] = o.PlmnEcInfoList
	}
	return toSerialize, nil
}

type NullableEnhancedCoverageRestrictionData struct {
	value *EnhancedCoverageRestrictionData
	isSet bool
}

func (v NullableEnhancedCoverageRestrictionData) Get() *EnhancedCoverageRestrictionData {
	return v.value
}

func (v *NullableEnhancedCoverageRestrictionData) Set(val *EnhancedCoverageRestrictionData) {
	v.value = val
	v.isSet = true
}

func (v NullableEnhancedCoverageRestrictionData) IsSet() bool {
	return v.isSet
}

func (v *NullableEnhancedCoverageRestrictionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnhancedCoverageRestrictionData(val *EnhancedCoverageRestrictionData) *NullableEnhancedCoverageRestrictionData {
	return &NullableEnhancedCoverageRestrictionData{value: val, isSet: true}
}

func (v NullableEnhancedCoverageRestrictionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnhancedCoverageRestrictionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


