/*
Unified Data Repository Service API file for subscription data

Unified Data Repository Service (subscription data).   The API version is defined in 3GPP TS 29.504.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Subscription_Data

import (
	"encoding/json"
)

// checks if the PpData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PpData{}

// PpData struct for PpData
type PpData struct {
	CommunicationCharacteristics NullableCommunicationCharacteristics `json:"communicationCharacteristics,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SupportedFeatures             *string                     `json:"supportedFeatures,omitempty"`
	ExpectedUeBehaviourParameters NullableExpectedUeBehaviour `json:"expectedUeBehaviourParameters,omitempty"`
	EcRestriction                 NullableEcRestriction       `json:"ecRestriction,omitempty"`
	AcsInfo                       *AcsInfoRm                  `json:"acsInfo,omitempty"`
	// String representing the STN-SR as defined in clause 18.6 of 3GPP TS 23.003 with the OpenAPI 'nullable: true' property.
	StnSr                    NullableString                     `json:"stnSr,omitempty"`
	LcsPrivacy               NullableLcsPrivacy                 `json:"lcsPrivacy,omitempty"`
	SorInfo                  *SorInfo                           `json:"sorInfo,omitempty"`
	Var5mbsAuthorizationInfo NullableModel5MbsAuthorizationInfo `json:"5mbsAuthorizationInfo,omitempty"`
}

// NewPpData instantiates a new PpData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPpData() *PpData {
	this := PpData{}
	return &this
}

// NewPpDataWithDefaults instantiates a new PpData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPpDataWithDefaults() *PpData {
	this := PpData{}
	return &this
}

// GetCommunicationCharacteristics returns the CommunicationCharacteristics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PpData) GetCommunicationCharacteristics() CommunicationCharacteristics {
	if o == nil || IsNil(o.CommunicationCharacteristics.Get()) {
		var ret CommunicationCharacteristics
		return ret
	}
	return *o.CommunicationCharacteristics.Get()
}

// GetCommunicationCharacteristicsOk returns a tuple with the CommunicationCharacteristics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PpData) GetCommunicationCharacteristicsOk() (*CommunicationCharacteristics, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommunicationCharacteristics.Get(), o.CommunicationCharacteristics.IsSet()
}

// HasCommunicationCharacteristics returns a boolean if a field has been set.
func (o *PpData) HasCommunicationCharacteristics() bool {
	if o != nil && o.CommunicationCharacteristics.IsSet() {
		return true
	}

	return false
}

// SetCommunicationCharacteristics gets a reference to the given NullableCommunicationCharacteristics and assigns it to the CommunicationCharacteristics field.
func (o *PpData) SetCommunicationCharacteristics(v CommunicationCharacteristics) {
	o.CommunicationCharacteristics.Set(&v)
}

// SetCommunicationCharacteristicsNil sets the value for CommunicationCharacteristics to be an explicit nil
func (o *PpData) SetCommunicationCharacteristicsNil() {
	o.CommunicationCharacteristics.Set(nil)
}

// UnsetCommunicationCharacteristics ensures that no value is present for CommunicationCharacteristics, not even an explicit nil
func (o *PpData) UnsetCommunicationCharacteristics() {
	o.CommunicationCharacteristics.Unset()
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *PpData) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PpData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *PpData) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *PpData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetExpectedUeBehaviourParameters returns the ExpectedUeBehaviourParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PpData) GetExpectedUeBehaviourParameters() ExpectedUeBehaviour {
	if o == nil || IsNil(o.ExpectedUeBehaviourParameters.Get()) {
		var ret ExpectedUeBehaviour
		return ret
	}
	return *o.ExpectedUeBehaviourParameters.Get()
}

// GetExpectedUeBehaviourParametersOk returns a tuple with the ExpectedUeBehaviourParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PpData) GetExpectedUeBehaviourParametersOk() (*ExpectedUeBehaviour, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpectedUeBehaviourParameters.Get(), o.ExpectedUeBehaviourParameters.IsSet()
}

// HasExpectedUeBehaviourParameters returns a boolean if a field has been set.
func (o *PpData) HasExpectedUeBehaviourParameters() bool {
	if o != nil && o.ExpectedUeBehaviourParameters.IsSet() {
		return true
	}

	return false
}

// SetExpectedUeBehaviourParameters gets a reference to the given NullableExpectedUeBehaviour and assigns it to the ExpectedUeBehaviourParameters field.
func (o *PpData) SetExpectedUeBehaviourParameters(v ExpectedUeBehaviour) {
	o.ExpectedUeBehaviourParameters.Set(&v)
}

// SetExpectedUeBehaviourParametersNil sets the value for ExpectedUeBehaviourParameters to be an explicit nil
func (o *PpData) SetExpectedUeBehaviourParametersNil() {
	o.ExpectedUeBehaviourParameters.Set(nil)
}

// UnsetExpectedUeBehaviourParameters ensures that no value is present for ExpectedUeBehaviourParameters, not even an explicit nil
func (o *PpData) UnsetExpectedUeBehaviourParameters() {
	o.ExpectedUeBehaviourParameters.Unset()
}

// GetEcRestriction returns the EcRestriction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PpData) GetEcRestriction() EcRestriction {
	if o == nil || IsNil(o.EcRestriction.Get()) {
		var ret EcRestriction
		return ret
	}
	return *o.EcRestriction.Get()
}

// GetEcRestrictionOk returns a tuple with the EcRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PpData) GetEcRestrictionOk() (*EcRestriction, bool) {
	if o == nil {
		return nil, false
	}
	return o.EcRestriction.Get(), o.EcRestriction.IsSet()
}

// HasEcRestriction returns a boolean if a field has been set.
func (o *PpData) HasEcRestriction() bool {
	if o != nil && o.EcRestriction.IsSet() {
		return true
	}

	return false
}

// SetEcRestriction gets a reference to the given NullableEcRestriction and assigns it to the EcRestriction field.
func (o *PpData) SetEcRestriction(v EcRestriction) {
	o.EcRestriction.Set(&v)
}

// SetEcRestrictionNil sets the value for EcRestriction to be an explicit nil
func (o *PpData) SetEcRestrictionNil() {
	o.EcRestriction.Set(nil)
}

// UnsetEcRestriction ensures that no value is present for EcRestriction, not even an explicit nil
func (o *PpData) UnsetEcRestriction() {
	o.EcRestriction.Unset()
}

// GetAcsInfo returns the AcsInfo field value if set, zero value otherwise.
func (o *PpData) GetAcsInfo() AcsInfoRm {
	if o == nil || IsNil(o.AcsInfo) {
		var ret AcsInfoRm
		return ret
	}
	return *o.AcsInfo
}

// GetAcsInfoOk returns a tuple with the AcsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PpData) GetAcsInfoOk() (*AcsInfoRm, bool) {
	if o == nil || IsNil(o.AcsInfo) {
		return nil, false
	}
	return o.AcsInfo, true
}

// HasAcsInfo returns a boolean if a field has been set.
func (o *PpData) HasAcsInfo() bool {
	if o != nil && !IsNil(o.AcsInfo) {
		return true
	}

	return false
}

// SetAcsInfo gets a reference to the given AcsInfoRm and assigns it to the AcsInfo field.
func (o *PpData) SetAcsInfo(v AcsInfoRm) {
	o.AcsInfo = &v
}

// GetStnSr returns the StnSr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PpData) GetStnSr() string {
	if o == nil || IsNil(o.StnSr.Get()) {
		var ret string
		return ret
	}
	return *o.StnSr.Get()
}

// GetStnSrOk returns a tuple with the StnSr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PpData) GetStnSrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StnSr.Get(), o.StnSr.IsSet()
}

// HasStnSr returns a boolean if a field has been set.
func (o *PpData) HasStnSr() bool {
	if o != nil && o.StnSr.IsSet() {
		return true
	}

	return false
}

// SetStnSr gets a reference to the given NullableString and assigns it to the StnSr field.
func (o *PpData) SetStnSr(v string) {
	o.StnSr.Set(&v)
}

// SetStnSrNil sets the value for StnSr to be an explicit nil
func (o *PpData) SetStnSrNil() {
	o.StnSr.Set(nil)
}

// UnsetStnSr ensures that no value is present for StnSr, not even an explicit nil
func (o *PpData) UnsetStnSr() {
	o.StnSr.Unset()
}

// GetLcsPrivacy returns the LcsPrivacy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PpData) GetLcsPrivacy() LcsPrivacy {
	if o == nil || IsNil(o.LcsPrivacy.Get()) {
		var ret LcsPrivacy
		return ret
	}
	return *o.LcsPrivacy.Get()
}

// GetLcsPrivacyOk returns a tuple with the LcsPrivacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PpData) GetLcsPrivacyOk() (*LcsPrivacy, bool) {
	if o == nil {
		return nil, false
	}
	return o.LcsPrivacy.Get(), o.LcsPrivacy.IsSet()
}

// HasLcsPrivacy returns a boolean if a field has been set.
func (o *PpData) HasLcsPrivacy() bool {
	if o != nil && o.LcsPrivacy.IsSet() {
		return true
	}

	return false
}

// SetLcsPrivacy gets a reference to the given NullableLcsPrivacy and assigns it to the LcsPrivacy field.
func (o *PpData) SetLcsPrivacy(v LcsPrivacy) {
	o.LcsPrivacy.Set(&v)
}

// SetLcsPrivacyNil sets the value for LcsPrivacy to be an explicit nil
func (o *PpData) SetLcsPrivacyNil() {
	o.LcsPrivacy.Set(nil)
}

// UnsetLcsPrivacy ensures that no value is present for LcsPrivacy, not even an explicit nil
func (o *PpData) UnsetLcsPrivacy() {
	o.LcsPrivacy.Unset()
}

// GetSorInfo returns the SorInfo field value if set, zero value otherwise.
func (o *PpData) GetSorInfo() SorInfo {
	if o == nil || IsNil(o.SorInfo) {
		var ret SorInfo
		return ret
	}
	return *o.SorInfo
}

// GetSorInfoOk returns a tuple with the SorInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PpData) GetSorInfoOk() (*SorInfo, bool) {
	if o == nil || IsNil(o.SorInfo) {
		return nil, false
	}
	return o.SorInfo, true
}

// HasSorInfo returns a boolean if a field has been set.
func (o *PpData) HasSorInfo() bool {
	if o != nil && !IsNil(o.SorInfo) {
		return true
	}

	return false
}

// SetSorInfo gets a reference to the given SorInfo and assigns it to the SorInfo field.
func (o *PpData) SetSorInfo(v SorInfo) {
	o.SorInfo = &v
}

// GetVar5mbsAuthorizationInfo returns the Var5mbsAuthorizationInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PpData) GetVar5mbsAuthorizationInfo() Model5MbsAuthorizationInfo {
	if o == nil || IsNil(o.Var5mbsAuthorizationInfo.Get()) {
		var ret Model5MbsAuthorizationInfo
		return ret
	}
	return *o.Var5mbsAuthorizationInfo.Get()
}

// GetVar5mbsAuthorizationInfoOk returns a tuple with the Var5mbsAuthorizationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PpData) GetVar5mbsAuthorizationInfoOk() (*Model5MbsAuthorizationInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Var5mbsAuthorizationInfo.Get(), o.Var5mbsAuthorizationInfo.IsSet()
}

// HasVar5mbsAuthorizationInfo returns a boolean if a field has been set.
func (o *PpData) HasVar5mbsAuthorizationInfo() bool {
	if o != nil && o.Var5mbsAuthorizationInfo.IsSet() {
		return true
	}

	return false
}

// SetVar5mbsAuthorizationInfo gets a reference to the given NullableModel5MbsAuthorizationInfo and assigns it to the Var5mbsAuthorizationInfo field.
func (o *PpData) SetVar5mbsAuthorizationInfo(v Model5MbsAuthorizationInfo) {
	o.Var5mbsAuthorizationInfo.Set(&v)
}

// SetVar5mbsAuthorizationInfoNil sets the value for Var5mbsAuthorizationInfo to be an explicit nil
func (o *PpData) SetVar5mbsAuthorizationInfoNil() {
	o.Var5mbsAuthorizationInfo.Set(nil)
}

// UnsetVar5mbsAuthorizationInfo ensures that no value is present for Var5mbsAuthorizationInfo, not even an explicit nil
func (o *PpData) UnsetVar5mbsAuthorizationInfo() {
	o.Var5mbsAuthorizationInfo.Unset()
}

func (o PpData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PpData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CommunicationCharacteristics.IsSet() {
		toSerialize["communicationCharacteristics"] = o.CommunicationCharacteristics.Get()
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if o.ExpectedUeBehaviourParameters.IsSet() {
		toSerialize["expectedUeBehaviourParameters"] = o.ExpectedUeBehaviourParameters.Get()
	}
	if o.EcRestriction.IsSet() {
		toSerialize["ecRestriction"] = o.EcRestriction.Get()
	}
	if !IsNil(o.AcsInfo) {
		toSerialize["acsInfo"] = o.AcsInfo
	}
	if o.StnSr.IsSet() {
		toSerialize["stnSr"] = o.StnSr.Get()
	}
	if o.LcsPrivacy.IsSet() {
		toSerialize["lcsPrivacy"] = o.LcsPrivacy.Get()
	}
	if !IsNil(o.SorInfo) {
		toSerialize["sorInfo"] = o.SorInfo
	}
	if o.Var5mbsAuthorizationInfo.IsSet() {
		toSerialize["5mbsAuthorizationInfo"] = o.Var5mbsAuthorizationInfo.Get()
	}
	return toSerialize, nil
}

type NullablePpData struct {
	value *PpData
	isSet bool
}

func (v NullablePpData) Get() *PpData {
	return v.value
}

func (v *NullablePpData) Set(val *PpData) {
	v.value = val
	v.isSet = true
}

func (v NullablePpData) IsSet() bool {
	return v.isSet
}

func (v *NullablePpData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePpData(val *PpData) *NullablePpData {
	return &NullablePpData{value: val, isSet: true}
}

func (v NullablePpData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePpData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
