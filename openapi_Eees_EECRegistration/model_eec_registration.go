/*
Eees_EECRegistration

API for EEC registration. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EECRegistration

import (
	"encoding/json"
	"time"
)

// checks if the EECRegistration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EECRegistration{}

// EECRegistration Describes the parameters to perform EEC Registration related operations.
type EECRegistration struct {
	// Represents a unique identifier of the EEC.
	EecId string `json:"eecId"`
	// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
	UeId *string `json:"ueId,omitempty"`
	// Profiles of ACs for which the EEC provides edge enabling services.
	AcProfs []ACProfile `json:"acProfs,omitempty"`
	// string with format \"date-time\" as defined in OpenAPI.
	ExpTime *time.Time `json:"expTime,omitempty"`
	// Profiles of ACs for which the EEC provides edge enabling services.
	EecSvcContSupp []ACRScenario `json:"eecSvcContSupp,omitempty"`
	// Identifier of the EEC context obtained from a previous registration.
	EecCntxId *string `json:"eecCntxId,omitempty"`
	// Identifier of the EES that provided EEC context ID.
	SrcEesId *string `json:"srcEesId,omitempty"`
	EndPt *EndPoint `json:"endPt,omitempty"`
	UnfulfilledAcProfs *UnfulfilledAcProfile `json:"unfulfilledAcProfs,omitempty"`
}

// NewEECRegistration instantiates a new EECRegistration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEECRegistration(eecId string) *EECRegistration {
	this := EECRegistration{}
	this.EecId = eecId
	return &this
}

// NewEECRegistrationWithDefaults instantiates a new EECRegistration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEECRegistrationWithDefaults() *EECRegistration {
	this := EECRegistration{}
	return &this
}

// GetEecId returns the EecId field value
func (o *EECRegistration) GetEecId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EecId
}

// GetEecIdOk returns a tuple with the EecId field value
// and a boolean to check if the value has been set.
func (o *EECRegistration) GetEecIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EecId, true
}

// SetEecId sets field value
func (o *EECRegistration) SetEecId(v string) {
	o.EecId = v
}

// GetUeId returns the UeId field value if set, zero value otherwise.
func (o *EECRegistration) GetUeId() string {
	if o == nil || IsNil(o.UeId) {
		var ret string
		return ret
	}
	return *o.UeId
}

// GetUeIdOk returns a tuple with the UeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECRegistration) GetUeIdOk() (*string, bool) {
	if o == nil || IsNil(o.UeId) {
		return nil, false
	}
	return o.UeId, true
}

// HasUeId returns a boolean if a field has been set.
func (o *EECRegistration) HasUeId() bool {
	if o != nil && !IsNil(o.UeId) {
		return true
	}

	return false
}

// SetUeId gets a reference to the given string and assigns it to the UeId field.
func (o *EECRegistration) SetUeId(v string) {
	o.UeId = &v
}

// GetAcProfs returns the AcProfs field value if set, zero value otherwise.
func (o *EECRegistration) GetAcProfs() []ACProfile {
	if o == nil || IsNil(o.AcProfs) {
		var ret []ACProfile
		return ret
	}
	return o.AcProfs
}

// GetAcProfsOk returns a tuple with the AcProfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECRegistration) GetAcProfsOk() ([]ACProfile, bool) {
	if o == nil || IsNil(o.AcProfs) {
		return nil, false
	}
	return o.AcProfs, true
}

// HasAcProfs returns a boolean if a field has been set.
func (o *EECRegistration) HasAcProfs() bool {
	if o != nil && !IsNil(o.AcProfs) {
		return true
	}

	return false
}

// SetAcProfs gets a reference to the given []ACProfile and assigns it to the AcProfs field.
func (o *EECRegistration) SetAcProfs(v []ACProfile) {
	o.AcProfs = v
}

// GetExpTime returns the ExpTime field value if set, zero value otherwise.
func (o *EECRegistration) GetExpTime() time.Time {
	if o == nil || IsNil(o.ExpTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpTime
}

// GetExpTimeOk returns a tuple with the ExpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECRegistration) GetExpTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpTime) {
		return nil, false
	}
	return o.ExpTime, true
}

// HasExpTime returns a boolean if a field has been set.
func (o *EECRegistration) HasExpTime() bool {
	if o != nil && !IsNil(o.ExpTime) {
		return true
	}

	return false
}

// SetExpTime gets a reference to the given time.Time and assigns it to the ExpTime field.
func (o *EECRegistration) SetExpTime(v time.Time) {
	o.ExpTime = &v
}

// GetEecSvcContSupp returns the EecSvcContSupp field value if set, zero value otherwise.
func (o *EECRegistration) GetEecSvcContSupp() []ACRScenario {
	if o == nil || IsNil(o.EecSvcContSupp) {
		var ret []ACRScenario
		return ret
	}
	return o.EecSvcContSupp
}

// GetEecSvcContSuppOk returns a tuple with the EecSvcContSupp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECRegistration) GetEecSvcContSuppOk() ([]ACRScenario, bool) {
	if o == nil || IsNil(o.EecSvcContSupp) {
		return nil, false
	}
	return o.EecSvcContSupp, true
}

// HasEecSvcContSupp returns a boolean if a field has been set.
func (o *EECRegistration) HasEecSvcContSupp() bool {
	if o != nil && !IsNil(o.EecSvcContSupp) {
		return true
	}

	return false
}

// SetEecSvcContSupp gets a reference to the given []ACRScenario and assigns it to the EecSvcContSupp field.
func (o *EECRegistration) SetEecSvcContSupp(v []ACRScenario) {
	o.EecSvcContSupp = v
}

// GetEecCntxId returns the EecCntxId field value if set, zero value otherwise.
func (o *EECRegistration) GetEecCntxId() string {
	if o == nil || IsNil(o.EecCntxId) {
		var ret string
		return ret
	}
	return *o.EecCntxId
}

// GetEecCntxIdOk returns a tuple with the EecCntxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECRegistration) GetEecCntxIdOk() (*string, bool) {
	if o == nil || IsNil(o.EecCntxId) {
		return nil, false
	}
	return o.EecCntxId, true
}

// HasEecCntxId returns a boolean if a field has been set.
func (o *EECRegistration) HasEecCntxId() bool {
	if o != nil && !IsNil(o.EecCntxId) {
		return true
	}

	return false
}

// SetEecCntxId gets a reference to the given string and assigns it to the EecCntxId field.
func (o *EECRegistration) SetEecCntxId(v string) {
	o.EecCntxId = &v
}

// GetSrcEesId returns the SrcEesId field value if set, zero value otherwise.
func (o *EECRegistration) GetSrcEesId() string {
	if o == nil || IsNil(o.SrcEesId) {
		var ret string
		return ret
	}
	return *o.SrcEesId
}

// GetSrcEesIdOk returns a tuple with the SrcEesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECRegistration) GetSrcEesIdOk() (*string, bool) {
	if o == nil || IsNil(o.SrcEesId) {
		return nil, false
	}
	return o.SrcEesId, true
}

// HasSrcEesId returns a boolean if a field has been set.
func (o *EECRegistration) HasSrcEesId() bool {
	if o != nil && !IsNil(o.SrcEesId) {
		return true
	}

	return false
}

// SetSrcEesId gets a reference to the given string and assigns it to the SrcEesId field.
func (o *EECRegistration) SetSrcEesId(v string) {
	o.SrcEesId = &v
}

// GetEndPt returns the EndPt field value if set, zero value otherwise.
func (o *EECRegistration) GetEndPt() EndPoint {
	if o == nil || IsNil(o.EndPt) {
		var ret EndPoint
		return ret
	}
	return *o.EndPt
}

// GetEndPtOk returns a tuple with the EndPt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECRegistration) GetEndPtOk() (*EndPoint, bool) {
	if o == nil || IsNil(o.EndPt) {
		return nil, false
	}
	return o.EndPt, true
}

// HasEndPt returns a boolean if a field has been set.
func (o *EECRegistration) HasEndPt() bool {
	if o != nil && !IsNil(o.EndPt) {
		return true
	}

	return false
}

// SetEndPt gets a reference to the given EndPoint and assigns it to the EndPt field.
func (o *EECRegistration) SetEndPt(v EndPoint) {
	o.EndPt = &v
}

// GetUnfulfilledAcProfs returns the UnfulfilledAcProfs field value if set, zero value otherwise.
func (o *EECRegistration) GetUnfulfilledAcProfs() UnfulfilledAcProfile {
	if o == nil || IsNil(o.UnfulfilledAcProfs) {
		var ret UnfulfilledAcProfile
		return ret
	}
	return *o.UnfulfilledAcProfs
}

// GetUnfulfilledAcProfsOk returns a tuple with the UnfulfilledAcProfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EECRegistration) GetUnfulfilledAcProfsOk() (*UnfulfilledAcProfile, bool) {
	if o == nil || IsNil(o.UnfulfilledAcProfs) {
		return nil, false
	}
	return o.UnfulfilledAcProfs, true
}

// HasUnfulfilledAcProfs returns a boolean if a field has been set.
func (o *EECRegistration) HasUnfulfilledAcProfs() bool {
	if o != nil && !IsNil(o.UnfulfilledAcProfs) {
		return true
	}

	return false
}

// SetUnfulfilledAcProfs gets a reference to the given UnfulfilledAcProfile and assigns it to the UnfulfilledAcProfs field.
func (o *EECRegistration) SetUnfulfilledAcProfs(v UnfulfilledAcProfile) {
	o.UnfulfilledAcProfs = &v
}

func (o EECRegistration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EECRegistration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eecId"] = o.EecId
	if !IsNil(o.UeId) {
		toSerialize["ueId"] = o.UeId
	}
	if !IsNil(o.AcProfs) {
		toSerialize["acProfs"] = o.AcProfs
	}
	if !IsNil(o.ExpTime) {
		toSerialize["expTime"] = o.ExpTime
	}
	if !IsNil(o.EecSvcContSupp) {
		toSerialize["eecSvcContSupp"] = o.EecSvcContSupp
	}
	if !IsNil(o.EecCntxId) {
		toSerialize["eecCntxId"] = o.EecCntxId
	}
	if !IsNil(o.SrcEesId) {
		toSerialize["srcEesId"] = o.SrcEesId
	}
	if !IsNil(o.EndPt) {
		toSerialize["endPt"] = o.EndPt
	}
	if !IsNil(o.UnfulfilledAcProfs) {
		toSerialize["unfulfilledAcProfs"] = o.UnfulfilledAcProfs
	}
	return toSerialize, nil
}

type NullableEECRegistration struct {
	value *EECRegistration
	isSet bool
}

func (v NullableEECRegistration) Get() *EECRegistration {
	return v.value
}

func (v *NullableEECRegistration) Set(val *EECRegistration) {
	v.value = val
	v.isSet = true
}

func (v NullableEECRegistration) IsSet() bool {
	return v.isSet
}

func (v *NullableEECRegistration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEECRegistration(val *EECRegistration) *NullableEECRegistration {
	return &NullableEECRegistration{value: val, isSet: true}
}

func (v NullableEECRegistration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEECRegistration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


