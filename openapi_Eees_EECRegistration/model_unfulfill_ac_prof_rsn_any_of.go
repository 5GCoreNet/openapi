/*
Eees_EECRegistration

API for EEC registration. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_EECRegistration

import (
	"encoding/json"
	"fmt"
)

// UnfulfillACProfRsnAnyOf the model 'UnfulfillACProfRsnAnyOf'
type UnfulfillACProfRsnAnyOf string

// List of UnfulfillACProfRsn_anyOf
const (
	EAS_NOT_AVAILABLE UnfulfillACProfRsnAnyOf = "EAS_NOT_AVAILABLE"
	REQ_UNFULFILLED UnfulfillACProfRsnAnyOf = "REQ_UNFULFILLED"
)

// All allowed values of UnfulfillACProfRsnAnyOf enum
var AllowedUnfulfillACProfRsnAnyOfEnumValues = []UnfulfillACProfRsnAnyOf{
	"EAS_NOT_AVAILABLE",
	"REQ_UNFULFILLED",
}

func (v *UnfulfillACProfRsnAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UnfulfillACProfRsnAnyOf(value)
	for _, existing := range AllowedUnfulfillACProfRsnAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UnfulfillACProfRsnAnyOf", value)
}

// NewUnfulfillACProfRsnAnyOfFromValue returns a pointer to a valid UnfulfillACProfRsnAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUnfulfillACProfRsnAnyOfFromValue(v string) (*UnfulfillACProfRsnAnyOf, error) {
	ev := UnfulfillACProfRsnAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UnfulfillACProfRsnAnyOf: valid values are %v", v, AllowedUnfulfillACProfRsnAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UnfulfillACProfRsnAnyOf) IsValid() bool {
	for _, existing := range AllowedUnfulfillACProfRsnAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UnfulfillACProfRsn_anyOf value
func (v UnfulfillACProfRsnAnyOf) Ptr() *UnfulfillACProfRsnAnyOf {
	return &v
}

type NullableUnfulfillACProfRsnAnyOf struct {
	value *UnfulfillACProfRsnAnyOf
	isSet bool
}

func (v NullableUnfulfillACProfRsnAnyOf) Get() *UnfulfillACProfRsnAnyOf {
	return v.value
}

func (v *NullableUnfulfillACProfRsnAnyOf) Set(val *UnfulfillACProfRsnAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUnfulfillACProfRsnAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUnfulfillACProfRsnAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnfulfillACProfRsnAnyOf(val *UnfulfillACProfRsnAnyOf) *NullableUnfulfillACProfRsnAnyOf {
	return &NullableUnfulfillACProfRsnAnyOf{value: val, isSet: true}
}

func (v NullableUnfulfillACProfRsnAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnfulfillACProfRsnAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

