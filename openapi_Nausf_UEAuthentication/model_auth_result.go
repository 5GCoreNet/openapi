/*
AUSF API

AUSF UE Authentication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nausf_UEAuthentication

import (
	"encoding/json"
	"fmt"
)

// AuthResult Indicates the result of the authentication.
type AuthResult string

// List of AuthResult
const (
	SUCCESS AuthResult = "AUTHENTICATION_SUCCESS"
	FAILURE AuthResult = "AUTHENTICATION_FAILURE"
	ONGOING AuthResult = "AUTHENTICATION_ONGOING"
)

// All allowed values of AuthResult enum
var AllowedAuthResultEnumValues = []AuthResult{
	"AUTHENTICATION_SUCCESS",
	"AUTHENTICATION_FAILURE",
	"AUTHENTICATION_ONGOING",
}

func (v *AuthResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthResult(value)
	for _, existing := range AllowedAuthResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthResult", value)
}

// NewAuthResultFromValue returns a pointer to a valid AuthResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthResultFromValue(v string) (*AuthResult, error) {
	ev := AuthResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthResult: valid values are %v", v, AllowedAuthResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthResult) IsValid() bool {
	for _, existing := range AllowedAuthResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthResult value
func (v AuthResult) Ptr() *AuthResult {
	return &v
}

type NullableAuthResult struct {
	value *AuthResult
	isSet bool
}

func (v NullableAuthResult) Get() *AuthResult {
	return v.value
}

func (v *NullableAuthResult) Set(val *AuthResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthResult(val *AuthResult) *NullableAuthResult {
	return &NullableAuthResult{value: val, isSet: true}
}

func (v NullableAuthResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
