/*
Nsoraf_SOR

Nsoraf Steering Of Roaming Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nsoraf_SOR

import (
	"encoding/json"
	"fmt"
)

// SorAckStatusAnyOf the model 'SorAckStatusAnyOf'
type SorAckStatusAnyOf string

// List of SorAckStatus_anyOf
const (
	SUCCESSFUL SorAckStatusAnyOf = "ACK_SUCCESSFUL"
	NOT_RECEIVED SorAckStatusAnyOf = "ACK_NOT_RECEIVED"
	NOT_SUCCESSFUL SorAckStatusAnyOf = "ACK_NOT_SUCCESSFUL"
)

// All allowed values of SorAckStatusAnyOf enum
var AllowedSorAckStatusAnyOfEnumValues = []SorAckStatusAnyOf{
	"ACK_SUCCESSFUL",
	"ACK_NOT_RECEIVED",
	"ACK_NOT_SUCCESSFUL",
}

func (v *SorAckStatusAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SorAckStatusAnyOf(value)
	for _, existing := range AllowedSorAckStatusAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SorAckStatusAnyOf", value)
}

// NewSorAckStatusAnyOfFromValue returns a pointer to a valid SorAckStatusAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSorAckStatusAnyOfFromValue(v string) (*SorAckStatusAnyOf, error) {
	ev := SorAckStatusAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SorAckStatusAnyOf: valid values are %v", v, AllowedSorAckStatusAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SorAckStatusAnyOf) IsValid() bool {
	for _, existing := range AllowedSorAckStatusAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SorAckStatus_anyOf value
func (v SorAckStatusAnyOf) Ptr() *SorAckStatusAnyOf {
	return &v
}

type NullableSorAckStatusAnyOf struct {
	value *SorAckStatusAnyOf
	isSet bool
}

func (v NullableSorAckStatusAnyOf) Get() *SorAckStatusAnyOf {
	return v.value
}

func (v *NullableSorAckStatusAnyOf) Set(val *SorAckStatusAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSorAckStatusAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSorAckStatusAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSorAckStatusAnyOf(val *SorAckStatusAnyOf) *NullableSorAckStatusAnyOf {
	return &NullableSorAckStatusAnyOf{value: val, isSet: true}
}

func (v NullableSorAckStatusAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSorAckStatusAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

