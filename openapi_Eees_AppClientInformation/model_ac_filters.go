/*
EES Application Client Information_API

API for EES Application Client Information.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_AppClientInformation

import (
	"encoding/json"
)

// checks if the ACFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACFilters{}

// ACFilters Represents the filters information for AC Information Subscription.
type ACFilters struct {
	// List of AC Types or categories.
	AcTypes []string `json:"acTypes,omitempty"`
	// The list of identifiers of ECSPs associated with the EEC.
	EcspIds []string `json:"ecspIds,omitempty"`
	// List of identifiers of ACs to be matched.
	AcIds    []string       `json:"acIds,omitempty"`
	SvcArea  *ServiceArea   `json:"svcArea,omitempty"`
	MaxAcKpi *ACServiceKPIs `json:"maxAcKpi,omitempty"`
	MinAcKpi *ACServiceKPIs `json:"minAcKpi,omitempty"`
	// Operation schedule of EAS to be matched with operation schedule of the AC.
	OpSchds []ScheduledCommunicationTime `json:"opSchds,omitempty"`
	// List of UE identifiers hosting the AC.
	UeIds   []string        `json:"ueIds,omitempty"`
	LocInfs *LocationArea5G `json:"locInfs,omitempty"`
}

// NewACFilters instantiates a new ACFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACFilters() *ACFilters {
	this := ACFilters{}
	return &this
}

// NewACFiltersWithDefaults instantiates a new ACFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACFiltersWithDefaults() *ACFilters {
	this := ACFilters{}
	return &this
}

// GetAcTypes returns the AcTypes field value if set, zero value otherwise.
func (o *ACFilters) GetAcTypes() []string {
	if o == nil || IsNil(o.AcTypes) {
		var ret []string
		return ret
	}
	return o.AcTypes
}

// GetAcTypesOk returns a tuple with the AcTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACFilters) GetAcTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.AcTypes) {
		return nil, false
	}
	return o.AcTypes, true
}

// HasAcTypes returns a boolean if a field has been set.
func (o *ACFilters) HasAcTypes() bool {
	if o != nil && !IsNil(o.AcTypes) {
		return true
	}

	return false
}

// SetAcTypes gets a reference to the given []string and assigns it to the AcTypes field.
func (o *ACFilters) SetAcTypes(v []string) {
	o.AcTypes = v
}

// GetEcspIds returns the EcspIds field value if set, zero value otherwise.
func (o *ACFilters) GetEcspIds() []string {
	if o == nil || IsNil(o.EcspIds) {
		var ret []string
		return ret
	}
	return o.EcspIds
}

// GetEcspIdsOk returns a tuple with the EcspIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACFilters) GetEcspIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.EcspIds) {
		return nil, false
	}
	return o.EcspIds, true
}

// HasEcspIds returns a boolean if a field has been set.
func (o *ACFilters) HasEcspIds() bool {
	if o != nil && !IsNil(o.EcspIds) {
		return true
	}

	return false
}

// SetEcspIds gets a reference to the given []string and assigns it to the EcspIds field.
func (o *ACFilters) SetEcspIds(v []string) {
	o.EcspIds = v
}

// GetAcIds returns the AcIds field value if set, zero value otherwise.
func (o *ACFilters) GetAcIds() []string {
	if o == nil || IsNil(o.AcIds) {
		var ret []string
		return ret
	}
	return o.AcIds
}

// GetAcIdsOk returns a tuple with the AcIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACFilters) GetAcIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AcIds) {
		return nil, false
	}
	return o.AcIds, true
}

// HasAcIds returns a boolean if a field has been set.
func (o *ACFilters) HasAcIds() bool {
	if o != nil && !IsNil(o.AcIds) {
		return true
	}

	return false
}

// SetAcIds gets a reference to the given []string and assigns it to the AcIds field.
func (o *ACFilters) SetAcIds(v []string) {
	o.AcIds = v
}

// GetSvcArea returns the SvcArea field value if set, zero value otherwise.
func (o *ACFilters) GetSvcArea() ServiceArea {
	if o == nil || IsNil(o.SvcArea) {
		var ret ServiceArea
		return ret
	}
	return *o.SvcArea
}

// GetSvcAreaOk returns a tuple with the SvcArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACFilters) GetSvcAreaOk() (*ServiceArea, bool) {
	if o == nil || IsNil(o.SvcArea) {
		return nil, false
	}
	return o.SvcArea, true
}

// HasSvcArea returns a boolean if a field has been set.
func (o *ACFilters) HasSvcArea() bool {
	if o != nil && !IsNil(o.SvcArea) {
		return true
	}

	return false
}

// SetSvcArea gets a reference to the given ServiceArea and assigns it to the SvcArea field.
func (o *ACFilters) SetSvcArea(v ServiceArea) {
	o.SvcArea = &v
}

// GetMaxAcKpi returns the MaxAcKpi field value if set, zero value otherwise.
func (o *ACFilters) GetMaxAcKpi() ACServiceKPIs {
	if o == nil || IsNil(o.MaxAcKpi) {
		var ret ACServiceKPIs
		return ret
	}
	return *o.MaxAcKpi
}

// GetMaxAcKpiOk returns a tuple with the MaxAcKpi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACFilters) GetMaxAcKpiOk() (*ACServiceKPIs, bool) {
	if o == nil || IsNil(o.MaxAcKpi) {
		return nil, false
	}
	return o.MaxAcKpi, true
}

// HasMaxAcKpi returns a boolean if a field has been set.
func (o *ACFilters) HasMaxAcKpi() bool {
	if o != nil && !IsNil(o.MaxAcKpi) {
		return true
	}

	return false
}

// SetMaxAcKpi gets a reference to the given ACServiceKPIs and assigns it to the MaxAcKpi field.
func (o *ACFilters) SetMaxAcKpi(v ACServiceKPIs) {
	o.MaxAcKpi = &v
}

// GetMinAcKpi returns the MinAcKpi field value if set, zero value otherwise.
func (o *ACFilters) GetMinAcKpi() ACServiceKPIs {
	if o == nil || IsNil(o.MinAcKpi) {
		var ret ACServiceKPIs
		return ret
	}
	return *o.MinAcKpi
}

// GetMinAcKpiOk returns a tuple with the MinAcKpi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACFilters) GetMinAcKpiOk() (*ACServiceKPIs, bool) {
	if o == nil || IsNil(o.MinAcKpi) {
		return nil, false
	}
	return o.MinAcKpi, true
}

// HasMinAcKpi returns a boolean if a field has been set.
func (o *ACFilters) HasMinAcKpi() bool {
	if o != nil && !IsNil(o.MinAcKpi) {
		return true
	}

	return false
}

// SetMinAcKpi gets a reference to the given ACServiceKPIs and assigns it to the MinAcKpi field.
func (o *ACFilters) SetMinAcKpi(v ACServiceKPIs) {
	o.MinAcKpi = &v
}

// GetOpSchds returns the OpSchds field value if set, zero value otherwise.
func (o *ACFilters) GetOpSchds() []ScheduledCommunicationTime {
	if o == nil || IsNil(o.OpSchds) {
		var ret []ScheduledCommunicationTime
		return ret
	}
	return o.OpSchds
}

// GetOpSchdsOk returns a tuple with the OpSchds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACFilters) GetOpSchdsOk() ([]ScheduledCommunicationTime, bool) {
	if o == nil || IsNil(o.OpSchds) {
		return nil, false
	}
	return o.OpSchds, true
}

// HasOpSchds returns a boolean if a field has been set.
func (o *ACFilters) HasOpSchds() bool {
	if o != nil && !IsNil(o.OpSchds) {
		return true
	}

	return false
}

// SetOpSchds gets a reference to the given []ScheduledCommunicationTime and assigns it to the OpSchds field.
func (o *ACFilters) SetOpSchds(v []ScheduledCommunicationTime) {
	o.OpSchds = v
}

// GetUeIds returns the UeIds field value if set, zero value otherwise.
func (o *ACFilters) GetUeIds() []string {
	if o == nil || IsNil(o.UeIds) {
		var ret []string
		return ret
	}
	return o.UeIds
}

// GetUeIdsOk returns a tuple with the UeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACFilters) GetUeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UeIds) {
		return nil, false
	}
	return o.UeIds, true
}

// HasUeIds returns a boolean if a field has been set.
func (o *ACFilters) HasUeIds() bool {
	if o != nil && !IsNil(o.UeIds) {
		return true
	}

	return false
}

// SetUeIds gets a reference to the given []string and assigns it to the UeIds field.
func (o *ACFilters) SetUeIds(v []string) {
	o.UeIds = v
}

// GetLocInfs returns the LocInfs field value if set, zero value otherwise.
func (o *ACFilters) GetLocInfs() LocationArea5G {
	if o == nil || IsNil(o.LocInfs) {
		var ret LocationArea5G
		return ret
	}
	return *o.LocInfs
}

// GetLocInfsOk returns a tuple with the LocInfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACFilters) GetLocInfsOk() (*LocationArea5G, bool) {
	if o == nil || IsNil(o.LocInfs) {
		return nil, false
	}
	return o.LocInfs, true
}

// HasLocInfs returns a boolean if a field has been set.
func (o *ACFilters) HasLocInfs() bool {
	if o != nil && !IsNil(o.LocInfs) {
		return true
	}

	return false
}

// SetLocInfs gets a reference to the given LocationArea5G and assigns it to the LocInfs field.
func (o *ACFilters) SetLocInfs(v LocationArea5G) {
	o.LocInfs = &v
}

func (o ACFilters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcTypes) {
		toSerialize["acTypes"] = o.AcTypes
	}
	if !IsNil(o.EcspIds) {
		toSerialize["ecspIds"] = o.EcspIds
	}
	if !IsNil(o.AcIds) {
		toSerialize["acIds"] = o.AcIds
	}
	if !IsNil(o.SvcArea) {
		toSerialize["svcArea"] = o.SvcArea
	}
	if !IsNil(o.MaxAcKpi) {
		toSerialize["maxAcKpi"] = o.MaxAcKpi
	}
	if !IsNil(o.MinAcKpi) {
		toSerialize["minAcKpi"] = o.MinAcKpi
	}
	if !IsNil(o.OpSchds) {
		toSerialize["opSchds"] = o.OpSchds
	}
	if !IsNil(o.UeIds) {
		toSerialize["ueIds"] = o.UeIds
	}
	if !IsNil(o.LocInfs) {
		toSerialize["locInfs"] = o.LocInfs
	}
	return toSerialize, nil
}

type NullableACFilters struct {
	value *ACFilters
	isSet bool
}

func (v NullableACFilters) Get() *ACFilters {
	return v.value
}

func (v *NullableACFilters) Set(val *ACFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableACFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableACFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACFilters(val *ACFilters) *NullableACFilters {
	return &NullableACFilters{value: val, isSet: true}
}

func (v NullableACFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
