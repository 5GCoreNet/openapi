/*
EES Application Client Information_API

API for EES Application Client Information.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Eees_AppClientInformation

import (
	"encoding/json"
	"time"
)

// checks if the ACInfoSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACInfoSubscription{}

// ACInfoSubscription Represents an Individual AC Information Subscription.
type ACInfoSubscription struct {
	// Identifier of the EAS subscribing for AC information report.
	EasId string `json:"easId"`
	// Filters to retrieve the information about specific ACs.
	AcFltrs []ACFilters `json:"acFltrs,omitempty"`
	// string with format \"date-time\" as defined in OpenAPI.
	ExpTime *time.Time `json:"expTime,omitempty"`
	EventReq *ReportingInformation `json:"eventReq,omitempty"`
	// string providing an URI formatted according to IETF RFC 3986.
	NotificationDestination *string `json:"notificationDestination,omitempty"`
	// Set to true by the EAS to request the EES to send a test notification. Set to false or omitted otherwise. 
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewACInfoSubscription instantiates a new ACInfoSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACInfoSubscription(easId string) *ACInfoSubscription {
	this := ACInfoSubscription{}
	this.EasId = easId
	return &this
}

// NewACInfoSubscriptionWithDefaults instantiates a new ACInfoSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACInfoSubscriptionWithDefaults() *ACInfoSubscription {
	this := ACInfoSubscription{}
	return &this
}

// GetEasId returns the EasId field value
func (o *ACInfoSubscription) GetEasId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EasId
}

// GetEasIdOk returns a tuple with the EasId field value
// and a boolean to check if the value has been set.
func (o *ACInfoSubscription) GetEasIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EasId, true
}

// SetEasId sets field value
func (o *ACInfoSubscription) SetEasId(v string) {
	o.EasId = v
}

// GetAcFltrs returns the AcFltrs field value if set, zero value otherwise.
func (o *ACInfoSubscription) GetAcFltrs() []ACFilters {
	if o == nil || IsNil(o.AcFltrs) {
		var ret []ACFilters
		return ret
	}
	return o.AcFltrs
}

// GetAcFltrsOk returns a tuple with the AcFltrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACInfoSubscription) GetAcFltrsOk() ([]ACFilters, bool) {
	if o == nil || IsNil(o.AcFltrs) {
		return nil, false
	}
	return o.AcFltrs, true
}

// HasAcFltrs returns a boolean if a field has been set.
func (o *ACInfoSubscription) HasAcFltrs() bool {
	if o != nil && !IsNil(o.AcFltrs) {
		return true
	}

	return false
}

// SetAcFltrs gets a reference to the given []ACFilters and assigns it to the AcFltrs field.
func (o *ACInfoSubscription) SetAcFltrs(v []ACFilters) {
	o.AcFltrs = v
}

// GetExpTime returns the ExpTime field value if set, zero value otherwise.
func (o *ACInfoSubscription) GetExpTime() time.Time {
	if o == nil || IsNil(o.ExpTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpTime
}

// GetExpTimeOk returns a tuple with the ExpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACInfoSubscription) GetExpTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpTime) {
		return nil, false
	}
	return o.ExpTime, true
}

// HasExpTime returns a boolean if a field has been set.
func (o *ACInfoSubscription) HasExpTime() bool {
	if o != nil && !IsNil(o.ExpTime) {
		return true
	}

	return false
}

// SetExpTime gets a reference to the given time.Time and assigns it to the ExpTime field.
func (o *ACInfoSubscription) SetExpTime(v time.Time) {
	o.ExpTime = &v
}

// GetEventReq returns the EventReq field value if set, zero value otherwise.
func (o *ACInfoSubscription) GetEventReq() ReportingInformation {
	if o == nil || IsNil(o.EventReq) {
		var ret ReportingInformation
		return ret
	}
	return *o.EventReq
}

// GetEventReqOk returns a tuple with the EventReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACInfoSubscription) GetEventReqOk() (*ReportingInformation, bool) {
	if o == nil || IsNil(o.EventReq) {
		return nil, false
	}
	return o.EventReq, true
}

// HasEventReq returns a boolean if a field has been set.
func (o *ACInfoSubscription) HasEventReq() bool {
	if o != nil && !IsNil(o.EventReq) {
		return true
	}

	return false
}

// SetEventReq gets a reference to the given ReportingInformation and assigns it to the EventReq field.
func (o *ACInfoSubscription) SetEventReq(v ReportingInformation) {
	o.EventReq = &v
}

// GetNotificationDestination returns the NotificationDestination field value if set, zero value otherwise.
func (o *ACInfoSubscription) GetNotificationDestination() string {
	if o == nil || IsNil(o.NotificationDestination) {
		var ret string
		return ret
	}
	return *o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACInfoSubscription) GetNotificationDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationDestination) {
		return nil, false
	}
	return o.NotificationDestination, true
}

// HasNotificationDestination returns a boolean if a field has been set.
func (o *ACInfoSubscription) HasNotificationDestination() bool {
	if o != nil && !IsNil(o.NotificationDestination) {
		return true
	}

	return false
}

// SetNotificationDestination gets a reference to the given string and assigns it to the NotificationDestination field.
func (o *ACInfoSubscription) SetNotificationDestination(v string) {
	o.NotificationDestination = &v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *ACInfoSubscription) GetRequestTestNotification() bool {
	if o == nil || IsNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACInfoSubscription) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *ACInfoSubscription) HasRequestTestNotification() bool {
	if o != nil && !IsNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *ACInfoSubscription) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *ACInfoSubscription) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACInfoSubscription) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *ACInfoSubscription) HasWebsockNotifConfig() bool {
	if o != nil && !IsNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *ACInfoSubscription) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *ACInfoSubscription) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACInfoSubscription) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *ACInfoSubscription) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *ACInfoSubscription) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o ACInfoSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACInfoSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["easId"] = o.EasId
	if !IsNil(o.AcFltrs) {
		toSerialize["acFltrs"] = o.AcFltrs
	}
	if !IsNil(o.ExpTime) {
		toSerialize["expTime"] = o.ExpTime
	}
	if !IsNil(o.EventReq) {
		toSerialize["eventReq"] = o.EventReq
	}
	if !IsNil(o.NotificationDestination) {
		toSerialize["notificationDestination"] = o.NotificationDestination
	}
	if !IsNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !IsNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableACInfoSubscription struct {
	value *ACInfoSubscription
	isSet bool
}

func (v NullableACInfoSubscription) Get() *ACInfoSubscription {
	return v.value
}

func (v *NullableACInfoSubscription) Set(val *ACInfoSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableACInfoSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableACInfoSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACInfoSubscription(val *ACInfoSubscription) *NullableACInfoSubscription {
	return &NullableACInfoSubscription{value: val, isSet: true}
}

func (v NullableACInfoSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACInfoSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


