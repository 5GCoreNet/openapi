/*
3gpp-network-status-reporting

API for reporting network status.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ReportingNetworkStatus

import (
	"encoding/json"
)

// checks if the NetworkStatusReportingNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkStatusReportingNotification{}

// NetworkStatusReportingNotification Represents a network status reporting notification.
type NetworkStatusReportingNotification struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Subscription string `json:"subscription"`
	// Unsigned integer with valid values between 0 and 31. The value 0 indicates that there is no congestion. The value 1 is the lowest congestion level and value 31 is the highest congestion level.
	NsiValue *int32 `json:"nsiValue,omitempty"`
	NsiType *CongestionType `json:"nsiType,omitempty"`
}

// NewNetworkStatusReportingNotification instantiates a new NetworkStatusReportingNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkStatusReportingNotification(subscription string) *NetworkStatusReportingNotification {
	this := NetworkStatusReportingNotification{}
	this.Subscription = subscription
	return &this
}

// NewNetworkStatusReportingNotificationWithDefaults instantiates a new NetworkStatusReportingNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkStatusReportingNotificationWithDefaults() *NetworkStatusReportingNotification {
	this := NetworkStatusReportingNotification{}
	return &this
}

// GetSubscription returns the Subscription field value
func (o *NetworkStatusReportingNotification) GetSubscription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
func (o *NetworkStatusReportingNotification) GetSubscriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *NetworkStatusReportingNotification) SetSubscription(v string) {
	o.Subscription = v
}

// GetNsiValue returns the NsiValue field value if set, zero value otherwise.
func (o *NetworkStatusReportingNotification) GetNsiValue() int32 {
	if o == nil || isNil(o.NsiValue) {
		var ret int32
		return ret
	}
	return *o.NsiValue
}

// GetNsiValueOk returns a tuple with the NsiValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkStatusReportingNotification) GetNsiValueOk() (*int32, bool) {
	if o == nil || isNil(o.NsiValue) {
		return nil, false
	}
	return o.NsiValue, true
}

// HasNsiValue returns a boolean if a field has been set.
func (o *NetworkStatusReportingNotification) HasNsiValue() bool {
	if o != nil && !isNil(o.NsiValue) {
		return true
	}

	return false
}

// SetNsiValue gets a reference to the given int32 and assigns it to the NsiValue field.
func (o *NetworkStatusReportingNotification) SetNsiValue(v int32) {
	o.NsiValue = &v
}

// GetNsiType returns the NsiType field value if set, zero value otherwise.
func (o *NetworkStatusReportingNotification) GetNsiType() CongestionType {
	if o == nil || isNil(o.NsiType) {
		var ret CongestionType
		return ret
	}
	return *o.NsiType
}

// GetNsiTypeOk returns a tuple with the NsiType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkStatusReportingNotification) GetNsiTypeOk() (*CongestionType, bool) {
	if o == nil || isNil(o.NsiType) {
		return nil, false
	}
	return o.NsiType, true
}

// HasNsiType returns a boolean if a field has been set.
func (o *NetworkStatusReportingNotification) HasNsiType() bool {
	if o != nil && !isNil(o.NsiType) {
		return true
	}

	return false
}

// SetNsiType gets a reference to the given CongestionType and assigns it to the NsiType field.
func (o *NetworkStatusReportingNotification) SetNsiType(v CongestionType) {
	o.NsiType = &v
}

func (o NetworkStatusReportingNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkStatusReportingNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscription"] = o.Subscription
	if !isNil(o.NsiValue) {
		toSerialize["nsiValue"] = o.NsiValue
	}
	if !isNil(o.NsiType) {
		toSerialize["nsiType"] = o.NsiType
	}
	return toSerialize, nil
}

type NullableNetworkStatusReportingNotification struct {
	value *NetworkStatusReportingNotification
	isSet bool
}

func (v NullableNetworkStatusReportingNotification) Get() *NetworkStatusReportingNotification {
	return v.value
}

func (v *NullableNetworkStatusReportingNotification) Set(val *NetworkStatusReportingNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkStatusReportingNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkStatusReportingNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkStatusReportingNotification(val *NetworkStatusReportingNotification) *NullableNetworkStatusReportingNotification {
	return &NullableNetworkStatusReportingNotification{value: val, isSet: true}
}

func (v NullableNetworkStatusReportingNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkStatusReportingNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


