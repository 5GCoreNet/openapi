/*
M1_ContentPreparationTemplatesProvisioning

5GMS AF M1 Content Preparation Templates Provisioning API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_M1_ContentPreparationTemplatesProvisioning

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiCreateContentPreparationTemplateRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	provisioningSessionId string
	body                  *string
}

// A Content Preparation Template of any type
func (r ApiCreateContentPreparationTemplateRequest) Body(body string) ApiCreateContentPreparationTemplateRequest {
	r.body = &body
	return r
}

func (r ApiCreateContentPreparationTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateContentPreparationTemplateExecute(r)
}

/*
CreateContentPreparationTemplate Create (and optionally upload) a new Content Preparation Template for the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@return ApiCreateContentPreparationTemplateRequest
*/
func (a *DefaultApiService) CreateContentPreparationTemplate(ctx context.Context, provisioningSessionId string) ApiCreateContentPreparationTemplateRequest {
	return ApiCreateContentPreparationTemplateRequest{
		ApiService:            a,
		ctx:                   ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
func (a *DefaultApiService) CreateContentPreparationTemplateExecute(r ApiCreateContentPreparationTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateContentPreparationTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-preparation-templates"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDestroyContentPreparationTemplateRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	provisioningSessionId        string
	contentPreparationTemplateId string
}

func (r ApiDestroyContentPreparationTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.DestroyContentPreparationTemplateExecute(r)
}

/*
DestroyContentPreparationTemplate Destroy the specified Content Preparation Template of the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@param contentPreparationTemplateId The resource identifier of an existing Content Preparation Template.
	@return ApiDestroyContentPreparationTemplateRequest
*/
func (a *DefaultApiService) DestroyContentPreparationTemplate(ctx context.Context, provisioningSessionId string, contentPreparationTemplateId string) ApiDestroyContentPreparationTemplateRequest {
	return ApiDestroyContentPreparationTemplateRequest{
		ApiService:                   a,
		ctx:                          ctx,
		provisioningSessionId:        provisioningSessionId,
		contentPreparationTemplateId: contentPreparationTemplateId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DestroyContentPreparationTemplateExecute(r ApiDestroyContentPreparationTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DestroyContentPreparationTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-preparation-templates/{contentPreparationTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentPreparationTemplateId"+"}", url.PathEscape(parameterValueToString(r.contentPreparationTemplateId, "contentPreparationTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPatchContentPreparationTemplateRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	provisioningSessionId        string
	contentPreparationTemplateId string
	body                         *string
}

// A Content Preparation Template patch of any type
func (r ApiPatchContentPreparationTemplateRequest) Body(body string) ApiPatchContentPreparationTemplateRequest {
	r.body = &body
	return r
}

func (r ApiPatchContentPreparationTemplateRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.PatchContentPreparationTemplateExecute(r)
}

/*
PatchContentPreparationTemplate Patch the specified Content Preparation Template for the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@param contentPreparationTemplateId The resource identifier of an existing Content Preparation Template.
	@return ApiPatchContentPreparationTemplateRequest
*/
func (a *DefaultApiService) PatchContentPreparationTemplate(ctx context.Context, provisioningSessionId string, contentPreparationTemplateId string) ApiPatchContentPreparationTemplateRequest {
	return ApiPatchContentPreparationTemplateRequest{
		ApiService:                   a,
		ctx:                          ctx,
		provisioningSessionId:        provisioningSessionId,
		contentPreparationTemplateId: contentPreparationTemplateId,
	}
}

// Execute executes the request
//
//	@return string
func (a *DefaultApiService) PatchContentPreparationTemplateExecute(r ApiPatchContentPreparationTemplateRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchContentPreparationTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-preparation-templates/{contentPreparationTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentPreparationTemplateId"+"}", url.PathEscape(parameterValueToString(r.contentPreparationTemplateId, "contentPreparationTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json", "application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveContentPreparationTemplateRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	provisioningSessionId        string
	contentPreparationTemplateId string
}

func (r ApiRetrieveContentPreparationTemplateRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.RetrieveContentPreparationTemplateExecute(r)
}

/*
RetrieveContentPreparationTemplate Retrieve the specified Content Preparation Template of the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@param contentPreparationTemplateId The resource identifier of an existing Content Preparation Template.
	@return ApiRetrieveContentPreparationTemplateRequest
*/
func (a *DefaultApiService) RetrieveContentPreparationTemplate(ctx context.Context, provisioningSessionId string, contentPreparationTemplateId string) ApiRetrieveContentPreparationTemplateRequest {
	return ApiRetrieveContentPreparationTemplateRequest{
		ApiService:                   a,
		ctx:                          ctx,
		provisioningSessionId:        provisioningSessionId,
		contentPreparationTemplateId: contentPreparationTemplateId,
	}
}

// Execute executes the request
//
//	@return string
func (a *DefaultApiService) RetrieveContentPreparationTemplateExecute(r ApiRetrieveContentPreparationTemplateRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RetrieveContentPreparationTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-preparation-templates/{contentPreparationTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentPreparationTemplateId"+"}", url.PathEscape(parameterValueToString(r.contentPreparationTemplateId, "contentPreparationTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateContentPreparationTemplateRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	provisioningSessionId        string
	contentPreparationTemplateId string
	body                         *string
}

// A Content Preparation Template of any type
func (r ApiUpdateContentPreparationTemplateRequest) Body(body string) ApiUpdateContentPreparationTemplateRequest {
	r.body = &body
	return r
}

func (r ApiUpdateContentPreparationTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateContentPreparationTemplateExecute(r)
}

/*
UpdateContentPreparationTemplate Update the specified Content Preparation Template for the specified Provisioning Session

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provisioningSessionId The resource identifier of an existing Provisioning Session.
	@param contentPreparationTemplateId The resource identifier of an existing Content Preparation Template.
	@return ApiUpdateContentPreparationTemplateRequest
*/
func (a *DefaultApiService) UpdateContentPreparationTemplate(ctx context.Context, provisioningSessionId string, contentPreparationTemplateId string) ApiUpdateContentPreparationTemplateRequest {
	return ApiUpdateContentPreparationTemplateRequest{
		ApiService:                   a,
		ctx:                          ctx,
		provisioningSessionId:        provisioningSessionId,
		contentPreparationTemplateId: contentPreparationTemplateId,
	}
}

// Execute executes the request
func (a *DefaultApiService) UpdateContentPreparationTemplateExecute(r ApiUpdateContentPreparationTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdateContentPreparationTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/content-preparation-templates/{contentPreparationTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentPreparationTemplateId"+"}", url.PathEscape(parameterValueToString(r.contentPreparationTemplateId, "contentPreparationTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
