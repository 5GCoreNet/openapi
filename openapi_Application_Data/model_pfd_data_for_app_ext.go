/*
Unified Data Repository Service API file for Application Data

The API version is defined in 3GPP TS 29.504   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Application_Data

import (
	"encoding/json"
	"time"
)

// checks if the PfdDataForAppExt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PfdDataForAppExt{}

// PfdDataForAppExt Represents the PFDs and related data for the application.
type PfdDataForAppExt struct {
	// String providing an application identifier.
	ApplicationId string `json:"applicationId"`
	Pfds []PfdContent `json:"pfds"`
	// string with format 'date-time' as defined in OpenAPI.
	CachingTime *time.Time `json:"cachingTime,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SuppFeat *string `json:"suppFeat,omitempty"`
	ResetIds []string `json:"resetIds,omitempty"`
	// indicating a time in seconds.
	AllowedDelay *int32 `json:"allowedDelay,omitempty"`
}

// NewPfdDataForAppExt instantiates a new PfdDataForAppExt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPfdDataForAppExt(applicationId string, pfds []PfdContent) *PfdDataForAppExt {
	this := PfdDataForAppExt{}
	this.ApplicationId = applicationId
	this.Pfds = pfds
	return &this
}

// NewPfdDataForAppExtWithDefaults instantiates a new PfdDataForAppExt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPfdDataForAppExtWithDefaults() *PfdDataForAppExt {
	this := PfdDataForAppExt{}
	return &this
}

// GetApplicationId returns the ApplicationId field value
func (o *PfdDataForAppExt) GetApplicationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *PfdDataForAppExt) GetApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *PfdDataForAppExt) SetApplicationId(v string) {
	o.ApplicationId = v
}

// GetPfds returns the Pfds field value
func (o *PfdDataForAppExt) GetPfds() []PfdContent {
	if o == nil {
		var ret []PfdContent
		return ret
	}

	return o.Pfds
}

// GetPfdsOk returns a tuple with the Pfds field value
// and a boolean to check if the value has been set.
func (o *PfdDataForAppExt) GetPfdsOk() ([]PfdContent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pfds, true
}

// SetPfds sets field value
func (o *PfdDataForAppExt) SetPfds(v []PfdContent) {
	o.Pfds = v
}

// GetCachingTime returns the CachingTime field value if set, zero value otherwise.
func (o *PfdDataForAppExt) GetCachingTime() time.Time {
	if o == nil || IsNil(o.CachingTime) {
		var ret time.Time
		return ret
	}
	return *o.CachingTime
}

// GetCachingTimeOk returns a tuple with the CachingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PfdDataForAppExt) GetCachingTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CachingTime) {
		return nil, false
	}
	return o.CachingTime, true
}

// HasCachingTime returns a boolean if a field has been set.
func (o *PfdDataForAppExt) HasCachingTime() bool {
	if o != nil && !IsNil(o.CachingTime) {
		return true
	}

	return false
}

// SetCachingTime gets a reference to the given time.Time and assigns it to the CachingTime field.
func (o *PfdDataForAppExt) SetCachingTime(v time.Time) {
	o.CachingTime = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *PfdDataForAppExt) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PfdDataForAppExt) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *PfdDataForAppExt) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *PfdDataForAppExt) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

// GetResetIds returns the ResetIds field value if set, zero value otherwise.
func (o *PfdDataForAppExt) GetResetIds() []string {
	if o == nil || IsNil(o.ResetIds) {
		var ret []string
		return ret
	}
	return o.ResetIds
}

// GetResetIdsOk returns a tuple with the ResetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PfdDataForAppExt) GetResetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ResetIds) {
		return nil, false
	}
	return o.ResetIds, true
}

// HasResetIds returns a boolean if a field has been set.
func (o *PfdDataForAppExt) HasResetIds() bool {
	if o != nil && !IsNil(o.ResetIds) {
		return true
	}

	return false
}

// SetResetIds gets a reference to the given []string and assigns it to the ResetIds field.
func (o *PfdDataForAppExt) SetResetIds(v []string) {
	o.ResetIds = v
}

// GetAllowedDelay returns the AllowedDelay field value if set, zero value otherwise.
func (o *PfdDataForAppExt) GetAllowedDelay() int32 {
	if o == nil || IsNil(o.AllowedDelay) {
		var ret int32
		return ret
	}
	return *o.AllowedDelay
}

// GetAllowedDelayOk returns a tuple with the AllowedDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PfdDataForAppExt) GetAllowedDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedDelay) {
		return nil, false
	}
	return o.AllowedDelay, true
}

// HasAllowedDelay returns a boolean if a field has been set.
func (o *PfdDataForAppExt) HasAllowedDelay() bool {
	if o != nil && !IsNil(o.AllowedDelay) {
		return true
	}

	return false
}

// SetAllowedDelay gets a reference to the given int32 and assigns it to the AllowedDelay field.
func (o *PfdDataForAppExt) SetAllowedDelay(v int32) {
	o.AllowedDelay = &v
}

func (o PfdDataForAppExt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PfdDataForAppExt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicationId"] = o.ApplicationId
	toSerialize["pfds"] = o.Pfds
	if !IsNil(o.CachingTime) {
		toSerialize["cachingTime"] = o.CachingTime
	}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	if !IsNil(o.ResetIds) {
		toSerialize["resetIds"] = o.ResetIds
	}
	if !IsNil(o.AllowedDelay) {
		toSerialize["allowedDelay"] = o.AllowedDelay
	}
	return toSerialize, nil
}

type NullablePfdDataForAppExt struct {
	value *PfdDataForAppExt
	isSet bool
}

func (v NullablePfdDataForAppExt) Get() *PfdDataForAppExt {
	return v.value
}

func (v *NullablePfdDataForAppExt) Set(val *PfdDataForAppExt) {
	v.value = val
	v.isSet = true
}

func (v NullablePfdDataForAppExt) IsSet() bool {
	return v.isSet
}

func (v *NullablePfdDataForAppExt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePfdDataForAppExt(val *PfdDataForAppExt) *NullablePfdDataForAppExt {
	return &NullablePfdDataForAppExt{value: val, isSet: true}
}

func (v NullablePfdDataForAppExt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePfdDataForAppExt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


