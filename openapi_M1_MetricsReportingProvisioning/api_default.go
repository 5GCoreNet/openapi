/*
M1_MetricsReportingProvisioning

5GMS AF M1 Metrics Reporting Provisioning API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_M1_MetricsReportingProvisioning

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiActivateMetricsReportingRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	metricsReportingConfiguration *MetricsReportingConfiguration
}

// A JSON representation of a Metrics Reporting Configuration
func (r ApiActivateMetricsReportingRequest) MetricsReportingConfiguration(metricsReportingConfiguration MetricsReportingConfiguration) ApiActivateMetricsReportingRequest {
	r.metricsReportingConfiguration = &metricsReportingConfiguration
	return r
}

func (r ApiActivateMetricsReportingRequest) Execute() (*http.Response, error) {
	return r.ApiService.ActivateMetricsReportingExecute(r)
}

/*
ActivateMetricsReporting Activate the Metrics reporting procedure for the specified Provisioning Session by providing the Metrics Reporting Configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @return ApiActivateMetricsReportingRequest
*/
func (a *DefaultApiService) ActivateMetricsReporting(ctx context.Context, provisioningSessionId string) ApiActivateMetricsReportingRequest {
	return ApiActivateMetricsReportingRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
	}
}

// Execute executes the request
func (a *DefaultApiService) ActivateMetricsReportingExecute(r ApiActivateMetricsReportingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ActivateMetricsReporting")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/metrics-reporting-configurations"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metricsReportingConfiguration == nil {
		return nil, reportError("metricsReportingConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.metricsReportingConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDestroyMetricsReportingConfigurationRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	metricsReportingConfigurationId string
}

func (r ApiDestroyMetricsReportingConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DestroyMetricsReportingConfigurationExecute(r)
}

/*
DestroyMetricsReportingConfiguration Destroy the specified Metrics Reporting Configuration of the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @param metricsReportingConfigurationId The resource identifier of a Metrics Reporting Configuration.
 @return ApiDestroyMetricsReportingConfigurationRequest
*/
func (a *DefaultApiService) DestroyMetricsReportingConfiguration(ctx context.Context, provisioningSessionId string, metricsReportingConfigurationId string) ApiDestroyMetricsReportingConfigurationRequest {
	return ApiDestroyMetricsReportingConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		metricsReportingConfigurationId: metricsReportingConfigurationId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DestroyMetricsReportingConfigurationExecute(r ApiDestroyMetricsReportingConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DestroyMetricsReportingConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/metrics-reporting-configurations/{metricsReportingConfigurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metricsReportingConfigurationId"+"}", url.PathEscape(parameterValueToString(r.metricsReportingConfigurationId, "metricsReportingConfigurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPatchMetricsReportingConfigurationRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	metricsReportingConfigurationId string
	metricsReportingConfiguration *MetricsReportingConfiguration
}

// A JSON representation of a Metrics Reporting Configuration
func (r ApiPatchMetricsReportingConfigurationRequest) MetricsReportingConfiguration(metricsReportingConfiguration MetricsReportingConfiguration) ApiPatchMetricsReportingConfigurationRequest {
	r.metricsReportingConfiguration = &metricsReportingConfiguration
	return r
}

func (r ApiPatchMetricsReportingConfigurationRequest) Execute() (*MetricsReportingConfiguration, *http.Response, error) {
	return r.ApiService.PatchMetricsReportingConfigurationExecute(r)
}

/*
PatchMetricsReportingConfiguration Patch the specified Metrics Reporting Configuration for the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @param metricsReportingConfigurationId The resource identifier of a Metrics Reporting Configuration.
 @return ApiPatchMetricsReportingConfigurationRequest
*/
func (a *DefaultApiService) PatchMetricsReportingConfiguration(ctx context.Context, provisioningSessionId string, metricsReportingConfigurationId string) ApiPatchMetricsReportingConfigurationRequest {
	return ApiPatchMetricsReportingConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		metricsReportingConfigurationId: metricsReportingConfigurationId,
	}
}

// Execute executes the request
//  @return MetricsReportingConfiguration
func (a *DefaultApiService) PatchMetricsReportingConfigurationExecute(r ApiPatchMetricsReportingConfigurationRequest) (*MetricsReportingConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetricsReportingConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchMetricsReportingConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/metrics-reporting-configurations/{metricsReportingConfigurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metricsReportingConfigurationId"+"}", url.PathEscape(parameterValueToString(r.metricsReportingConfigurationId, "metricsReportingConfigurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metricsReportingConfiguration == nil {
		return localVarReturnValue, nil, reportError("metricsReportingConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json", "application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.metricsReportingConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveMetricsReportingConfigurationRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	metricsReportingConfigurationId string
}

func (r ApiRetrieveMetricsReportingConfigurationRequest) Execute() (*MetricsReportingConfiguration, *http.Response, error) {
	return r.ApiService.RetrieveMetricsReportingConfigurationExecute(r)
}

/*
RetrieveMetricsReportingConfiguration Retrieve the specified Metrics Reporting Configuration of the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @param metricsReportingConfigurationId The resource identifier of a Metrics Reporting Configuration.
 @return ApiRetrieveMetricsReportingConfigurationRequest
*/
func (a *DefaultApiService) RetrieveMetricsReportingConfiguration(ctx context.Context, provisioningSessionId string, metricsReportingConfigurationId string) ApiRetrieveMetricsReportingConfigurationRequest {
	return ApiRetrieveMetricsReportingConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		metricsReportingConfigurationId: metricsReportingConfigurationId,
	}
}

// Execute executes the request
//  @return MetricsReportingConfiguration
func (a *DefaultApiService) RetrieveMetricsReportingConfigurationExecute(r ApiRetrieveMetricsReportingConfigurationRequest) (*MetricsReportingConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetricsReportingConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RetrieveMetricsReportingConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/metrics-reporting-configurations/{metricsReportingConfigurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metricsReportingConfigurationId"+"}", url.PathEscape(parameterValueToString(r.metricsReportingConfigurationId, "metricsReportingConfigurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateMetricsReportingConfigurationRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	provisioningSessionId string
	metricsReportingConfigurationId string
	metricsReportingConfiguration *MetricsReportingConfiguration
}

// A JSON representation of a Metrics Reporting Configuration
func (r ApiUpdateMetricsReportingConfigurationRequest) MetricsReportingConfiguration(metricsReportingConfiguration MetricsReportingConfiguration) ApiUpdateMetricsReportingConfigurationRequest {
	r.metricsReportingConfiguration = &metricsReportingConfiguration
	return r
}

func (r ApiUpdateMetricsReportingConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateMetricsReportingConfigurationExecute(r)
}

/*
UpdateMetricsReportingConfiguration Update the specified Metrics Reporting Configuration for the specified Provisioning Session

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningSessionId The resource identifier of an existing Provisioning Session.
 @param metricsReportingConfigurationId The resource identifier of a Metrics Reporting Configuration.
 @return ApiUpdateMetricsReportingConfigurationRequest
*/
func (a *DefaultApiService) UpdateMetricsReportingConfiguration(ctx context.Context, provisioningSessionId string, metricsReportingConfigurationId string) ApiUpdateMetricsReportingConfigurationRequest {
	return ApiUpdateMetricsReportingConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		provisioningSessionId: provisioningSessionId,
		metricsReportingConfigurationId: metricsReportingConfigurationId,
	}
}

// Execute executes the request
func (a *DefaultApiService) UpdateMetricsReportingConfigurationExecute(r ApiUpdateMetricsReportingConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdateMetricsReportingConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-sessions/{provisioningSessionId}/metrics-reporting-configurations/{metricsReportingConfigurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningSessionId"+"}", url.PathEscape(parameterValueToString(r.provisioningSessionId, "provisioningSessionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metricsReportingConfigurationId"+"}", url.PathEscape(parameterValueToString(r.metricsReportingConfigurationId, "metricsReportingConfigurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metricsReportingConfiguration == nil {
		return nil, reportError("metricsReportingConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.metricsReportingConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
