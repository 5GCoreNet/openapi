/*
3gpp-monitoring-event

API for Monitoring Event.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_MonitoringEvent

import (
	"encoding/json"
	"fmt"
)

// LocationFailureCauseAnyOf the model 'LocationFailureCauseAnyOf'
type LocationFailureCauseAnyOf string

// List of LocationFailureCause_anyOf
const (
	POSITIONING_DENIED LocationFailureCauseAnyOf = "POSITIONING_DENIED"
	UNSUPPORTED_BY_UE LocationFailureCauseAnyOf = "UNSUPPORTED_BY_UE"
	NOT_REGISTED_UE LocationFailureCauseAnyOf = "NOT_REGISTED_UE"
	UNSPECIFIED LocationFailureCauseAnyOf = "UNSPECIFIED"
)

// All allowed values of LocationFailureCauseAnyOf enum
var AllowedLocationFailureCauseAnyOfEnumValues = []LocationFailureCauseAnyOf{
	"POSITIONING_DENIED",
	"UNSUPPORTED_BY_UE",
	"NOT_REGISTED_UE",
	"UNSPECIFIED",
}

func (v *LocationFailureCauseAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationFailureCauseAnyOf(value)
	for _, existing := range AllowedLocationFailureCauseAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationFailureCauseAnyOf", value)
}

// NewLocationFailureCauseAnyOfFromValue returns a pointer to a valid LocationFailureCauseAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationFailureCauseAnyOfFromValue(v string) (*LocationFailureCauseAnyOf, error) {
	ev := LocationFailureCauseAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationFailureCauseAnyOf: valid values are %v", v, AllowedLocationFailureCauseAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationFailureCauseAnyOf) IsValid() bool {
	for _, existing := range AllowedLocationFailureCauseAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocationFailureCause_anyOf value
func (v LocationFailureCauseAnyOf) Ptr() *LocationFailureCauseAnyOf {
	return &v
}

type NullableLocationFailureCauseAnyOf struct {
	value *LocationFailureCauseAnyOf
	isSet bool
}

func (v NullableLocationFailureCauseAnyOf) Get() *LocationFailureCauseAnyOf {
	return v.value
}

func (v *NullableLocationFailureCauseAnyOf) Set(val *LocationFailureCauseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationFailureCauseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationFailureCauseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationFailureCauseAnyOf(val *LocationFailureCauseAnyOf) *NullableLocationFailureCauseAnyOf {
	return &NullableLocationFailureCauseAnyOf{value: val, isSet: true}
}

func (v NullableLocationFailureCauseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationFailureCauseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

