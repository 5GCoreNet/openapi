/*
3gpp-monitoring-event

API for Monitoring Event.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_MonitoringEvent

import (
	"encoding/json"
	"fmt"
)

// PdnTypeAnyOf the model 'PdnTypeAnyOf'
type PdnTypeAnyOf string

// List of PdnType_anyOf
const (
	IPV4 PdnTypeAnyOf = "IPV4"
	IPV6 PdnTypeAnyOf = "IPV6"
	IPV4_V6 PdnTypeAnyOf = "IPV4V6"
	NON_IP PdnTypeAnyOf = "NON_IP"
	ETHERNET PdnTypeAnyOf = "ETHERNET"
)

// All allowed values of PdnTypeAnyOf enum
var AllowedPdnTypeAnyOfEnumValues = []PdnTypeAnyOf{
	"IPV4",
	"IPV6",
	"IPV4V6",
	"NON_IP",
	"ETHERNET",
}

func (v *PdnTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PdnTypeAnyOf(value)
	for _, existing := range AllowedPdnTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PdnTypeAnyOf", value)
}

// NewPdnTypeAnyOfFromValue returns a pointer to a valid PdnTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPdnTypeAnyOfFromValue(v string) (*PdnTypeAnyOf, error) {
	ev := PdnTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PdnTypeAnyOf: valid values are %v", v, AllowedPdnTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PdnTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedPdnTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PdnType_anyOf value
func (v PdnTypeAnyOf) Ptr() *PdnTypeAnyOf {
	return &v
}

type NullablePdnTypeAnyOf struct {
	value *PdnTypeAnyOf
	isSet bool
}

func (v NullablePdnTypeAnyOf) Get() *PdnTypeAnyOf {
	return v.value
}

func (v *NullablePdnTypeAnyOf) Set(val *PdnTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePdnTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePdnTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePdnTypeAnyOf(val *PdnTypeAnyOf) *NullablePdnTypeAnyOf {
	return &NullablePdnTypeAnyOf{value: val, isSet: true}
}

func (v NullablePdnTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePdnTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

