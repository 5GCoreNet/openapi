/*
3gpp-monitoring-event

API for Monitoring Event.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_MonitoringEvent

import (
	"encoding/json"
	"fmt"
)

// MonitoringTypeAnyOf the model 'MonitoringTypeAnyOf'
type MonitoringTypeAnyOf string

// List of MonitoringType_anyOf
const (
	LOSS_OF_CONNECTIVITY MonitoringTypeAnyOf = "LOSS_OF_CONNECTIVITY"
	UE_REACHABILITY MonitoringTypeAnyOf = "UE_REACHABILITY"
	LOCATION_REPORTING MonitoringTypeAnyOf = "LOCATION_REPORTING"
	CHANGE_OF_IMSI_IMEI_ASSOCIATION MonitoringTypeAnyOf = "CHANGE_OF_IMSI_IMEI_ASSOCIATION"
	ROAMING_STATUS MonitoringTypeAnyOf = "ROAMING_STATUS"
	COMMUNICATION_FAILURE MonitoringTypeAnyOf = "COMMUNICATION_FAILURE"
	AVAILABILITY_AFTER_DDN_FAILURE MonitoringTypeAnyOf = "AVAILABILITY_AFTER_DDN_FAILURE"
	NUMBER_OF_UES_IN_AN_AREA MonitoringTypeAnyOf = "NUMBER_OF_UES_IN_AN_AREA"
	PDN_CONNECTIVITY_STATUS MonitoringTypeAnyOf = "PDN_CONNECTIVITY_STATUS"
	DOWNLINK_DATA_DELIVERY_STATUS MonitoringTypeAnyOf = "DOWNLINK_DATA_DELIVERY_STATUS"
	API_SUPPORT_CAPABILITY MonitoringTypeAnyOf = "API_SUPPORT_CAPABILITY"
	NUM_OF_REGD_UES MonitoringTypeAnyOf = "NUM_OF_REGD_UES"
	NUM_OF_ESTD_PDU_SESSIONS MonitoringTypeAnyOf = "NUM_OF_ESTD_PDU_SESSIONS"
	AREA_OF_INTEREST MonitoringTypeAnyOf = "AREA_OF_INTEREST"
)

// All allowed values of MonitoringTypeAnyOf enum
var AllowedMonitoringTypeAnyOfEnumValues = []MonitoringTypeAnyOf{
	"LOSS_OF_CONNECTIVITY",
	"UE_REACHABILITY",
	"LOCATION_REPORTING",
	"CHANGE_OF_IMSI_IMEI_ASSOCIATION",
	"ROAMING_STATUS",
	"COMMUNICATION_FAILURE",
	"AVAILABILITY_AFTER_DDN_FAILURE",
	"NUMBER_OF_UES_IN_AN_AREA",
	"PDN_CONNECTIVITY_STATUS",
	"DOWNLINK_DATA_DELIVERY_STATUS",
	"API_SUPPORT_CAPABILITY",
	"NUM_OF_REGD_UES",
	"NUM_OF_ESTD_PDU_SESSIONS",
	"AREA_OF_INTEREST",
}

func (v *MonitoringTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MonitoringTypeAnyOf(value)
	for _, existing := range AllowedMonitoringTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MonitoringTypeAnyOf", value)
}

// NewMonitoringTypeAnyOfFromValue returns a pointer to a valid MonitoringTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMonitoringTypeAnyOfFromValue(v string) (*MonitoringTypeAnyOf, error) {
	ev := MonitoringTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MonitoringTypeAnyOf: valid values are %v", v, AllowedMonitoringTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MonitoringTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedMonitoringTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MonitoringType_anyOf value
func (v MonitoringTypeAnyOf) Ptr() *MonitoringTypeAnyOf {
	return &v
}

type NullableMonitoringTypeAnyOf struct {
	value *MonitoringTypeAnyOf
	isSet bool
}

func (v NullableMonitoringTypeAnyOf) Get() *MonitoringTypeAnyOf {
	return v.value
}

func (v *NullableMonitoringTypeAnyOf) Set(val *MonitoringTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringTypeAnyOf(val *MonitoringTypeAnyOf) *NullableMonitoringTypeAnyOf {
	return &NullableMonitoringTypeAnyOf{value: val, isSet: true}
}

func (v NullableMonitoringTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

