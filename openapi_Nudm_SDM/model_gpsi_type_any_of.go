/*
Nudm_SDM

Nudm Subscriber Data Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudm_SDM

import (
	"encoding/json"
	"fmt"
)

// GpsiTypeAnyOf the model 'GpsiTypeAnyOf'
type GpsiTypeAnyOf string

// List of GpsiType_anyOf
const (
	MSISDN GpsiTypeAnyOf = "MSISDN"
	EXT_ID GpsiTypeAnyOf = "EXT_ID"
	EXT_GROUP_ID GpsiTypeAnyOf = "EXT_GROUP_ID"
)

// All allowed values of GpsiTypeAnyOf enum
var AllowedGpsiTypeAnyOfEnumValues = []GpsiTypeAnyOf{
	"MSISDN",
	"EXT_ID",
	"EXT_GROUP_ID",
}

func (v *GpsiTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GpsiTypeAnyOf(value)
	for _, existing := range AllowedGpsiTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GpsiTypeAnyOf", value)
}

// NewGpsiTypeAnyOfFromValue returns a pointer to a valid GpsiTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGpsiTypeAnyOfFromValue(v string) (*GpsiTypeAnyOf, error) {
	ev := GpsiTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GpsiTypeAnyOf: valid values are %v", v, AllowedGpsiTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GpsiTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedGpsiTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GpsiType_anyOf value
func (v GpsiTypeAnyOf) Ptr() *GpsiTypeAnyOf {
	return &v
}

type NullableGpsiTypeAnyOf struct {
	value *GpsiTypeAnyOf
	isSet bool
}

func (v NullableGpsiTypeAnyOf) Get() *GpsiTypeAnyOf {
	return v.value
}

func (v *NullableGpsiTypeAnyOf) Set(val *GpsiTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGpsiTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGpsiTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGpsiTypeAnyOf(val *GpsiTypeAnyOf) *NullableGpsiTypeAnyOf {
	return &NullableGpsiTypeAnyOf{value: val, isSet: true}
}

func (v NullableGpsiTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGpsiTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

