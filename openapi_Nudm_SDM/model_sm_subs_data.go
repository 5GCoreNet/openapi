/*
Nudm_SDM

Nudm Subscriber Data Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudm_SDM

import (
	"encoding/json"
	"fmt"
)

// SmSubsData - struct for SmSubsData
type SmSubsData struct {
	ExtendedSmSubsData                       *ExtendedSmSubsData
	ArrayOfSessionManagementSubscriptionData *[]SessionManagementSubscriptionData
}

// ExtendedSmSubsDataAsSmSubsData is a convenience function that returns ExtendedSmSubsData wrapped in SmSubsData
func ExtendedSmSubsDataAsSmSubsData(v *ExtendedSmSubsData) SmSubsData {
	return SmSubsData{
		ExtendedSmSubsData: v,
	}
}

// []SessionManagementSubscriptionDataAsSmSubsData is a convenience function that returns []SessionManagementSubscriptionData wrapped in SmSubsData
func ArrayOfSessionManagementSubscriptionDataAsSmSubsData(v *[]SessionManagementSubscriptionData) SmSubsData {
	return SmSubsData{
		ArrayOfSessionManagementSubscriptionData: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SmSubsData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ExtendedSmSubsData
	err = newStrictDecoder(data).Decode(&dst.ExtendedSmSubsData)
	if err == nil {
		jsonExtendedSmSubsData, _ := json.Marshal(dst.ExtendedSmSubsData)
		if string(jsonExtendedSmSubsData) == "{}" { // empty struct
			dst.ExtendedSmSubsData = nil
		} else {
			match++
		}
	} else {
		dst.ExtendedSmSubsData = nil
	}

	// try to unmarshal data into ArrayOfSessionManagementSubscriptionData
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSessionManagementSubscriptionData)
	if err == nil {
		jsonArrayOfSessionManagementSubscriptionData, _ := json.Marshal(dst.ArrayOfSessionManagementSubscriptionData)
		if string(jsonArrayOfSessionManagementSubscriptionData) == "{}" { // empty struct
			dst.ArrayOfSessionManagementSubscriptionData = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSessionManagementSubscriptionData = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ExtendedSmSubsData = nil
		dst.ArrayOfSessionManagementSubscriptionData = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SmSubsData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SmSubsData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SmSubsData) MarshalJSON() ([]byte, error) {
	if src.ExtendedSmSubsData != nil {
		return json.Marshal(&src.ExtendedSmSubsData)
	}

	if src.ArrayOfSessionManagementSubscriptionData != nil {
		return json.Marshal(&src.ArrayOfSessionManagementSubscriptionData)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SmSubsData) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ExtendedSmSubsData != nil {
		return obj.ExtendedSmSubsData
	}

	if obj.ArrayOfSessionManagementSubscriptionData != nil {
		return obj.ArrayOfSessionManagementSubscriptionData
	}

	// all schemas are nil
	return nil
}

type NullableSmSubsData struct {
	value *SmSubsData
	isSet bool
}

func (v NullableSmSubsData) Get() *SmSubsData {
	return v.value
}

func (v *NullableSmSubsData) Set(val *SmSubsData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmSubsData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmSubsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmSubsData(val *SmSubsData) *NullableSmSubsData {
	return &NullableSmSubsData{value: val, isSet: true}
}

func (v NullableSmSubsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmSubsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
