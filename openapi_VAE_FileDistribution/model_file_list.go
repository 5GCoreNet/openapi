/*
VAE_FileDistribution

API for VAE File Distribution Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_VAE_FileDistribution

import (
	"encoding/json"
	"time"
)

// checks if the FileList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileList{}

// FileList Represents a file list.
type FileList struct {
	// String providing an URI formatted according to RFC 3986.
	FileUri string `json:"fileUri"`
	// String providing an URI formatted according to RFC 3986.
	FileDisplayUri string `json:"fileDisplayUri"`
	// string with format 'date-time' as defined in OpenAPI.
	FileEarFetchTime time.Time `json:"fileEarFetchTime"`
	// string with format 'date-time' as defined in OpenAPI.
	FileLatFetchTime time.Time `json:"fileLatFetchTime"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	FileSize *int32 `json:"fileSize,omitempty"`
	FileStatus FileStatus `json:"fileStatus"`
	// string with format 'date-time' as defined in OpenAPI.
	CompletionTime time.Time `json:"completionTime"`
	// indicating a time in seconds.
	KeepUpdateInterval int32 `json:"keepUpdateInterval"`
	UniAvailability *bool `json:"uniAvailability,omitempty"`
	FileRepetition *int32 `json:"fileRepetition,omitempty"`
}

// NewFileList instantiates a new FileList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileList(fileUri string, fileDisplayUri string, fileEarFetchTime time.Time, fileLatFetchTime time.Time, fileStatus FileStatus, completionTime time.Time, keepUpdateInterval int32) *FileList {
	this := FileList{}
	this.FileUri = fileUri
	this.FileDisplayUri = fileDisplayUri
	this.FileEarFetchTime = fileEarFetchTime
	this.FileLatFetchTime = fileLatFetchTime
	this.FileStatus = fileStatus
	this.CompletionTime = completionTime
	this.KeepUpdateInterval = keepUpdateInterval
	return &this
}

// NewFileListWithDefaults instantiates a new FileList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileListWithDefaults() *FileList {
	this := FileList{}
	return &this
}

// GetFileUri returns the FileUri field value
func (o *FileList) GetFileUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileUri
}

// GetFileUriOk returns a tuple with the FileUri field value
// and a boolean to check if the value has been set.
func (o *FileList) GetFileUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileUri, true
}

// SetFileUri sets field value
func (o *FileList) SetFileUri(v string) {
	o.FileUri = v
}

// GetFileDisplayUri returns the FileDisplayUri field value
func (o *FileList) GetFileDisplayUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileDisplayUri
}

// GetFileDisplayUriOk returns a tuple with the FileDisplayUri field value
// and a boolean to check if the value has been set.
func (o *FileList) GetFileDisplayUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileDisplayUri, true
}

// SetFileDisplayUri sets field value
func (o *FileList) SetFileDisplayUri(v string) {
	o.FileDisplayUri = v
}

// GetFileEarFetchTime returns the FileEarFetchTime field value
func (o *FileList) GetFileEarFetchTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FileEarFetchTime
}

// GetFileEarFetchTimeOk returns a tuple with the FileEarFetchTime field value
// and a boolean to check if the value has been set.
func (o *FileList) GetFileEarFetchTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileEarFetchTime, true
}

// SetFileEarFetchTime sets field value
func (o *FileList) SetFileEarFetchTime(v time.Time) {
	o.FileEarFetchTime = v
}

// GetFileLatFetchTime returns the FileLatFetchTime field value
func (o *FileList) GetFileLatFetchTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FileLatFetchTime
}

// GetFileLatFetchTimeOk returns a tuple with the FileLatFetchTime field value
// and a boolean to check if the value has been set.
func (o *FileList) GetFileLatFetchTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileLatFetchTime, true
}

// SetFileLatFetchTime sets field value
func (o *FileList) SetFileLatFetchTime(v time.Time) {
	o.FileLatFetchTime = v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *FileList) GetFileSize() int32 {
	if o == nil || isNil(o.FileSize) {
		var ret int32
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileList) GetFileSizeOk() (*int32, bool) {
	if o == nil || isNil(o.FileSize) {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *FileList) HasFileSize() bool {
	if o != nil && !isNil(o.FileSize) {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int32 and assigns it to the FileSize field.
func (o *FileList) SetFileSize(v int32) {
	o.FileSize = &v
}

// GetFileStatus returns the FileStatus field value
func (o *FileList) GetFileStatus() FileStatus {
	if o == nil {
		var ret FileStatus
		return ret
	}

	return o.FileStatus
}

// GetFileStatusOk returns a tuple with the FileStatus field value
// and a boolean to check if the value has been set.
func (o *FileList) GetFileStatusOk() (*FileStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileStatus, true
}

// SetFileStatus sets field value
func (o *FileList) SetFileStatus(v FileStatus) {
	o.FileStatus = v
}

// GetCompletionTime returns the CompletionTime field value
func (o *FileList) GetCompletionTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CompletionTime
}

// GetCompletionTimeOk returns a tuple with the CompletionTime field value
// and a boolean to check if the value has been set.
func (o *FileList) GetCompletionTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletionTime, true
}

// SetCompletionTime sets field value
func (o *FileList) SetCompletionTime(v time.Time) {
	o.CompletionTime = v
}

// GetKeepUpdateInterval returns the KeepUpdateInterval field value
func (o *FileList) GetKeepUpdateInterval() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeepUpdateInterval
}

// GetKeepUpdateIntervalOk returns a tuple with the KeepUpdateInterval field value
// and a boolean to check if the value has been set.
func (o *FileList) GetKeepUpdateIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeepUpdateInterval, true
}

// SetKeepUpdateInterval sets field value
func (o *FileList) SetKeepUpdateInterval(v int32) {
	o.KeepUpdateInterval = v
}

// GetUniAvailability returns the UniAvailability field value if set, zero value otherwise.
func (o *FileList) GetUniAvailability() bool {
	if o == nil || isNil(o.UniAvailability) {
		var ret bool
		return ret
	}
	return *o.UniAvailability
}

// GetUniAvailabilityOk returns a tuple with the UniAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileList) GetUniAvailabilityOk() (*bool, bool) {
	if o == nil || isNil(o.UniAvailability) {
		return nil, false
	}
	return o.UniAvailability, true
}

// HasUniAvailability returns a boolean if a field has been set.
func (o *FileList) HasUniAvailability() bool {
	if o != nil && !isNil(o.UniAvailability) {
		return true
	}

	return false
}

// SetUniAvailability gets a reference to the given bool and assigns it to the UniAvailability field.
func (o *FileList) SetUniAvailability(v bool) {
	o.UniAvailability = &v
}

// GetFileRepetition returns the FileRepetition field value if set, zero value otherwise.
func (o *FileList) GetFileRepetition() int32 {
	if o == nil || isNil(o.FileRepetition) {
		var ret int32
		return ret
	}
	return *o.FileRepetition
}

// GetFileRepetitionOk returns a tuple with the FileRepetition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileList) GetFileRepetitionOk() (*int32, bool) {
	if o == nil || isNil(o.FileRepetition) {
		return nil, false
	}
	return o.FileRepetition, true
}

// HasFileRepetition returns a boolean if a field has been set.
func (o *FileList) HasFileRepetition() bool {
	if o != nil && !isNil(o.FileRepetition) {
		return true
	}

	return false
}

// SetFileRepetition gets a reference to the given int32 and assigns it to the FileRepetition field.
func (o *FileList) SetFileRepetition(v int32) {
	o.FileRepetition = &v
}

func (o FileList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fileUri"] = o.FileUri
	toSerialize["fileDisplayUri"] = o.FileDisplayUri
	toSerialize["fileEarFetchTime"] = o.FileEarFetchTime
	toSerialize["fileLatFetchTime"] = o.FileLatFetchTime
	if !isNil(o.FileSize) {
		toSerialize["fileSize"] = o.FileSize
	}
	toSerialize["fileStatus"] = o.FileStatus
	toSerialize["completionTime"] = o.CompletionTime
	toSerialize["keepUpdateInterval"] = o.KeepUpdateInterval
	if !isNil(o.UniAvailability) {
		toSerialize["uniAvailability"] = o.UniAvailability
	}
	if !isNil(o.FileRepetition) {
		toSerialize["fileRepetition"] = o.FileRepetition
	}
	return toSerialize, nil
}

type NullableFileList struct {
	value *FileList
	isSet bool
}

func (v NullableFileList) Get() *FileList {
	return v.value
}

func (v *NullableFileList) Set(val *FileList) {
	v.value = val
	v.isSet = true
}

func (v NullableFileList) IsSet() bool {
	return v.isSet
}

func (v *NullableFileList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileList(val *FileList) *NullableFileList {
	return &NullableFileList{value: val, isSet: true}
}

func (v NullableFileList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


