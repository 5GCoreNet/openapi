/*
VAE_FileDistribution

API for VAE File Distribution Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_VAE_FileDistribution

import (
	"encoding/json"
	"fmt"
)

// FileStatus Represents a file status.
type FileStatus struct {
	FileStatusAnyOf *FileStatusAnyOf
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FileStatus) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into FileStatusAnyOf
	err = json.Unmarshal(data, &dst.FileStatusAnyOf);
	if err == nil {
		jsonFileStatusAnyOf, _ := json.Marshal(dst.FileStatusAnyOf)
		if string(jsonFileStatusAnyOf) == "{}" { // empty struct
			dst.FileStatusAnyOf = nil
		} else {
			return nil // data stored in dst.FileStatusAnyOf, return on the first match
		}
	} else {
		dst.FileStatusAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(FileStatus)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *FileStatus) MarshalJSON() ([]byte, error) {
	if src.FileStatusAnyOf != nil {
		return json.Marshal(&src.FileStatusAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableFileStatus struct {
	value *FileStatus
	isSet bool
}

func (v NullableFileStatus) Get() *FileStatus {
	return v.value
}

func (v *NullableFileStatus) Set(val *FileStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStatus(val *FileStatus) *NullableFileStatus {
	return &NullableFileStatus{value: val, isSet: true}
}

func (v NullableFileStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


