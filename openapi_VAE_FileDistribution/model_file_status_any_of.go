/*
VAE_FileDistribution

API for VAE File Distribution Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_VAE_FileDistribution

import (
	"encoding/json"
	"fmt"
)

// FileStatusAnyOf the model 'FileStatusAnyOf'
type FileStatusAnyOf string

// List of FileStatus_anyOf
const (
	PENDING FileStatusAnyOf = "PENDING"
	FETCHED FileStatusAnyOf = "FETCHED"
	PREPARED FileStatusAnyOf = "PREPARED"
	TRANSMITTING FileStatusAnyOf = "TRANSMITTING"
	SENT FileStatusAnyOf = "SENT"
)

// All allowed values of FileStatusAnyOf enum
var AllowedFileStatusAnyOfEnumValues = []FileStatusAnyOf{
	"PENDING",
	"FETCHED",
	"PREPARED",
	"TRANSMITTING",
	"SENT",
}

func (v *FileStatusAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileStatusAnyOf(value)
	for _, existing := range AllowedFileStatusAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileStatusAnyOf", value)
}

// NewFileStatusAnyOfFromValue returns a pointer to a valid FileStatusAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileStatusAnyOfFromValue(v string) (*FileStatusAnyOf, error) {
	ev := FileStatusAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileStatusAnyOf: valid values are %v", v, AllowedFileStatusAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileStatusAnyOf) IsValid() bool {
	for _, existing := range AllowedFileStatusAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileStatus_anyOf value
func (v FileStatusAnyOf) Ptr() *FileStatusAnyOf {
	return &v
}

type NullableFileStatusAnyOf struct {
	value *FileStatusAnyOf
	isSet bool
}

func (v NullableFileStatusAnyOf) Get() *FileStatusAnyOf {
	return v.value
}

func (v *NullableFileStatusAnyOf) Set(val *FileStatusAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStatusAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStatusAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStatusAnyOf(val *FileStatusAnyOf) *NullableFileStatusAnyOf {
	return &NullableFileStatusAnyOf{value: val, isSet: true}
}

func (v NullableFileStatusAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStatusAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

