/*
Nnef_Authentication

NEF Auth Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnef_Authentication

import (
	"encoding/json"
	"fmt"
)

// NotifTypeAnyOf the model 'NotifTypeAnyOf'
type NotifTypeAnyOf string

// List of NotifType_anyOf
const (
	REAUTH NotifTypeAnyOf = "REAUTH"
	UPDATEAUTH NotifTypeAnyOf = "UPDATEAUTH"
	REVOKE NotifTypeAnyOf = "REVOKE"
)

// All allowed values of NotifTypeAnyOf enum
var AllowedNotifTypeAnyOfEnumValues = []NotifTypeAnyOf{
	"REAUTH",
	"UPDATEAUTH",
	"REVOKE",
}

func (v *NotifTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotifTypeAnyOf(value)
	for _, existing := range AllowedNotifTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotifTypeAnyOf", value)
}

// NewNotifTypeAnyOfFromValue returns a pointer to a valid NotifTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotifTypeAnyOfFromValue(v string) (*NotifTypeAnyOf, error) {
	ev := NotifTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotifTypeAnyOf: valid values are %v", v, AllowedNotifTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotifTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedNotifTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotifType_anyOf value
func (v NotifTypeAnyOf) Ptr() *NotifTypeAnyOf {
	return &v
}

type NullableNotifTypeAnyOf struct {
	value *NotifTypeAnyOf
	isSet bool
}

func (v NullableNotifTypeAnyOf) Get() *NotifTypeAnyOf {
	return v.value
}

func (v *NullableNotifTypeAnyOf) Set(val *NotifTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifTypeAnyOf(val *NotifTypeAnyOf) *NullableNotifTypeAnyOf {
	return &NullableNotifTypeAnyOf{value: val, isSet: true}
}

func (v NullableNotifTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

