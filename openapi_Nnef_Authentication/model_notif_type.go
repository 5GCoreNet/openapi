/*
Nnef_Authentication

NEF Auth Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nnef_Authentication

import (
	"encoding/json"
	"fmt"
)

// NotifType Enumeration representing the type of notification.
type NotifType struct {
	NotifTypeAnyOf *NotifTypeAnyOf
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *NotifType) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into NotifTypeAnyOf
	err = json.Unmarshal(data, &dst.NotifTypeAnyOf);
	if err == nil {
		jsonNotifTypeAnyOf, _ := json.Marshal(dst.NotifTypeAnyOf)
		if string(jsonNotifTypeAnyOf) == "{}" { // empty struct
			dst.NotifTypeAnyOf = nil
		} else {
			return nil // data stored in dst.NotifTypeAnyOf, return on the first match
		}
	} else {
		dst.NotifTypeAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(NotifType)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *NotifType) MarshalJSON() ([]byte, error) {
	if src.NotifTypeAnyOf != nil {
		return json.Marshal(&src.NotifTypeAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableNotifType struct {
	value *NotifType
	isSet bool
}

func (v NullableNotifType) Get() *NotifType {
	return v.value
}

func (v *NullableNotifType) Set(val *NotifType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifType(val *NotifType) *NullableNotifType {
	return &NullableNotifType{value: val, isSet: true}
}

func (v NullableNotifType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


