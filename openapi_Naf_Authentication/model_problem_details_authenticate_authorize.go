/*
Naf_Authentication

AF Authentication Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Naf_Authentication

import (
	"encoding/json"
)

// checks if the ProblemDetailsAuthenticateAuthorize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemDetailsAuthenticateAuthorize{}

// ProblemDetailsAuthenticateAuthorize Extends ProblemDetails to indicate more details during Authentication failure
type ProblemDetailsAuthenticateAuthorize struct {
	// string providing an URI formatted according to IETF RFC 3986.
	Type *string `json:"type,omitempty"`
	// A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem.
	Title *string `json:"title,omitempty"`
	// The HTTP status code for this occurrence of the problem.
	Status *int32 `json:"status,omitempty"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`
	// string providing an URI formatted according to IETF RFC 3986.
	Instance *string `json:"instance,omitempty"`
	// A machine-readable application error cause specific to this occurrence of the problem. This IE should be present and provide application-related error information, if available.
	Cause *string `json:"cause,omitempty"`
	// Description of invalid parameters, for a request rejected due to invalid parameters.
	InvalidParams []InvalidParam `json:"invalidParams,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	// Indicates to release the UAV resources during authentication failure, when set to \"true\". Default is set to \"false\". 
	UasResRelInd *bool `json:"uasResRelInd,omitempty"`
}

// NewProblemDetailsAuthenticateAuthorize instantiates a new ProblemDetailsAuthenticateAuthorize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemDetailsAuthenticateAuthorize() *ProblemDetailsAuthenticateAuthorize {
	this := ProblemDetailsAuthenticateAuthorize{}
	return &this
}

// NewProblemDetailsAuthenticateAuthorizeWithDefaults instantiates a new ProblemDetailsAuthenticateAuthorize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemDetailsAuthenticateAuthorizeWithDefaults() *ProblemDetailsAuthenticateAuthorize {
	this := ProblemDetailsAuthenticateAuthorize{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProblemDetailsAuthenticateAuthorize) SetType(v string) {
	o.Type = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ProblemDetailsAuthenticateAuthorize) SetTitle(v string) {
	o.Title = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetStatus() int32 {
	if o == nil || isNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetStatusOk() (*int32, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *ProblemDetailsAuthenticateAuthorize) SetStatus(v int32) {
	o.Status = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetDetail() string {
	if o == nil || isNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetDetailOk() (*string, bool) {
	if o == nil || isNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasDetail() bool {
	if o != nil && !isNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ProblemDetailsAuthenticateAuthorize) SetDetail(v string) {
	o.Detail = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetInstance() string {
	if o == nil || isNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetInstanceOk() (*string, bool) {
	if o == nil || isNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasInstance() bool {
	if o != nil && !isNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *ProblemDetailsAuthenticateAuthorize) SetInstance(v string) {
	o.Instance = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetCause() string {
	if o == nil || isNil(o.Cause) {
		var ret string
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetCauseOk() (*string, bool) {
	if o == nil || isNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasCause() bool {
	if o != nil && !isNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given string and assigns it to the Cause field.
func (o *ProblemDetailsAuthenticateAuthorize) SetCause(v string) {
	o.Cause = &v
}

// GetInvalidParams returns the InvalidParams field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetInvalidParams() []InvalidParam {
	if o == nil || isNil(o.InvalidParams) {
		var ret []InvalidParam
		return ret
	}
	return o.InvalidParams
}

// GetInvalidParamsOk returns a tuple with the InvalidParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetInvalidParamsOk() ([]InvalidParam, bool) {
	if o == nil || isNil(o.InvalidParams) {
		return nil, false
	}
	return o.InvalidParams, true
}

// HasInvalidParams returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasInvalidParams() bool {
	if o != nil && !isNil(o.InvalidParams) {
		return true
	}

	return false
}

// SetInvalidParams gets a reference to the given []InvalidParam and assigns it to the InvalidParams field.
func (o *ProblemDetailsAuthenticateAuthorize) SetInvalidParams(v []InvalidParam) {
	o.InvalidParams = v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetSupportedFeatures() string {
	if o == nil || isNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || isNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasSupportedFeatures() bool {
	if o != nil && !isNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *ProblemDetailsAuthenticateAuthorize) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetUasResRelInd returns the UasResRelInd field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetUasResRelInd() bool {
	if o == nil || isNil(o.UasResRelInd) {
		var ret bool
		return ret
	}
	return *o.UasResRelInd
}

// GetUasResRelIndOk returns a tuple with the UasResRelInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetUasResRelIndOk() (*bool, bool) {
	if o == nil || isNil(o.UasResRelInd) {
		return nil, false
	}
	return o.UasResRelInd, true
}

// HasUasResRelInd returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasUasResRelInd() bool {
	if o != nil && !isNil(o.UasResRelInd) {
		return true
	}

	return false
}

// SetUasResRelInd gets a reference to the given bool and assigns it to the UasResRelInd field.
func (o *ProblemDetailsAuthenticateAuthorize) SetUasResRelInd(v bool) {
	o.UasResRelInd = &v
}

func (o ProblemDetailsAuthenticateAuthorize) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemDetailsAuthenticateAuthorize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !isNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !isNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !isNil(o.InvalidParams) {
		toSerialize["invalidParams"] = o.InvalidParams
	}
	if !isNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !isNil(o.UasResRelInd) {
		toSerialize["uasResRelInd"] = o.UasResRelInd
	}
	return toSerialize, nil
}

type NullableProblemDetailsAuthenticateAuthorize struct {
	value *ProblemDetailsAuthenticateAuthorize
	isSet bool
}

func (v NullableProblemDetailsAuthenticateAuthorize) Get() *ProblemDetailsAuthenticateAuthorize {
	return v.value
}

func (v *NullableProblemDetailsAuthenticateAuthorize) Set(val *ProblemDetailsAuthenticateAuthorize) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemDetailsAuthenticateAuthorize) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemDetailsAuthenticateAuthorize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemDetailsAuthenticateAuthorize(val *ProblemDetailsAuthenticateAuthorize) *NullableProblemDetailsAuthenticateAuthorize {
	return &NullableProblemDetailsAuthenticateAuthorize{value: val, isSet: true}
}

func (v NullableProblemDetailsAuthenticateAuthorize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemDetailsAuthenticateAuthorize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


