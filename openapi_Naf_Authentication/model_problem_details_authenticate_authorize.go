/*
Naf_Authentication

AF Authentication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Naf_Authentication

import (
	"encoding/json"
)

// checks if the ProblemDetailsAuthenticateAuthorize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemDetailsAuthenticateAuthorize{}

// ProblemDetailsAuthenticateAuthorize Extends ProblemDetails to indicate more details during Authentication failure
type ProblemDetailsAuthenticateAuthorize struct {
	ProblemDetails
	// Indicates to release the UAV resources during authentication failure, when set to \"true\". Default is set to \"false\".
	UasResRelInd *bool `json:"uasResRelInd,omitempty"`
}

// NewProblemDetailsAuthenticateAuthorize instantiates a new ProblemDetailsAuthenticateAuthorize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemDetailsAuthenticateAuthorize() *ProblemDetailsAuthenticateAuthorize {
	this := ProblemDetailsAuthenticateAuthorize{}
	return &this
}

// NewProblemDetailsAuthenticateAuthorizeWithDefaults instantiates a new ProblemDetailsAuthenticateAuthorize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemDetailsAuthenticateAuthorizeWithDefaults() *ProblemDetailsAuthenticateAuthorize {
	this := ProblemDetailsAuthenticateAuthorize{}
	return &this
}

// GetUasResRelInd returns the UasResRelInd field value if set, zero value otherwise.
func (o *ProblemDetailsAuthenticateAuthorize) GetUasResRelInd() bool {
	if o == nil || IsNil(o.UasResRelInd) {
		var ret bool
		return ret
	}
	return *o.UasResRelInd
}

// GetUasResRelIndOk returns a tuple with the UasResRelInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetailsAuthenticateAuthorize) GetUasResRelIndOk() (*bool, bool) {
	if o == nil || IsNil(o.UasResRelInd) {
		return nil, false
	}
	return o.UasResRelInd, true
}

// HasUasResRelInd returns a boolean if a field has been set.
func (o *ProblemDetailsAuthenticateAuthorize) HasUasResRelInd() bool {
	if o != nil && !IsNil(o.UasResRelInd) {
		return true
	}

	return false
}

// SetUasResRelInd gets a reference to the given bool and assigns it to the UasResRelInd field.
func (o *ProblemDetailsAuthenticateAuthorize) SetUasResRelInd(v bool) {
	o.UasResRelInd = &v
}

func (o ProblemDetailsAuthenticateAuthorize) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemDetailsAuthenticateAuthorize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedProblemDetails, errProblemDetails := json.Marshal(o.ProblemDetails)
	if errProblemDetails != nil {
		return map[string]interface{}{}, errProblemDetails
	}
	errProblemDetails = json.Unmarshal([]byte(serializedProblemDetails), &toSerialize)
	if errProblemDetails != nil {
		return map[string]interface{}{}, errProblemDetails
	}
	if !IsNil(o.UasResRelInd) {
		toSerialize["uasResRelInd"] = o.UasResRelInd
	}
	return toSerialize, nil
}

type NullableProblemDetailsAuthenticateAuthorize struct {
	value *ProblemDetailsAuthenticateAuthorize
	isSet bool
}

func (v NullableProblemDetailsAuthenticateAuthorize) Get() *ProblemDetailsAuthenticateAuthorize {
	return v.value
}

func (v *NullableProblemDetailsAuthenticateAuthorize) Set(val *ProblemDetailsAuthenticateAuthorize) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemDetailsAuthenticateAuthorize) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemDetailsAuthenticateAuthorize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemDetailsAuthenticateAuthorize(val *ProblemDetailsAuthenticateAuthorize) *NullableProblemDetailsAuthenticateAuthorize {
	return &NullableProblemDetailsAuthenticateAuthorize{value: val, isSet: true}
}

func (v NullableProblemDetailsAuthenticateAuthorize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemDetailsAuthenticateAuthorize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
