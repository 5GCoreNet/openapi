/*
Naf_Authentication

AF Authentication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Naf_Authentication

import (
	"encoding/json"
	"fmt"
)

// NotifyTypeAnyOf the model 'NotifyTypeAnyOf'
type NotifyTypeAnyOf string

// List of NotifyType_anyOf
const (
	REAUTHENTICATE NotifyTypeAnyOf = "REAUTHENTICATE"
	REAUTHORIZE NotifyTypeAnyOf = "REAUTHORIZE"
	REVOKE NotifyTypeAnyOf = "REVOKE"
)

// All allowed values of NotifyTypeAnyOf enum
var AllowedNotifyTypeAnyOfEnumValues = []NotifyTypeAnyOf{
	"REAUTHENTICATE",
	"REAUTHORIZE",
	"REVOKE",
}

func (v *NotifyTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotifyTypeAnyOf(value)
	for _, existing := range AllowedNotifyTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotifyTypeAnyOf", value)
}

// NewNotifyTypeAnyOfFromValue returns a pointer to a valid NotifyTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotifyTypeAnyOfFromValue(v string) (*NotifyTypeAnyOf, error) {
	ev := NotifyTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotifyTypeAnyOf: valid values are %v", v, AllowedNotifyTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotifyTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedNotifyTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotifyType_anyOf value
func (v NotifyTypeAnyOf) Ptr() *NotifyTypeAnyOf {
	return &v
}

type NullableNotifyTypeAnyOf struct {
	value *NotifyTypeAnyOf
	isSet bool
}

func (v NullableNotifyTypeAnyOf) Get() *NotifyTypeAnyOf {
	return v.value
}

func (v *NullableNotifyTypeAnyOf) Set(val *NotifyTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyTypeAnyOf(val *NotifyTypeAnyOf) *NullableNotifyTypeAnyOf {
	return &NullableNotifyTypeAnyOf{value: val, isSet: true}
}

func (v NullableNotifyTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

