/*
Naf_Authentication

AF Authentication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Naf_Authentication

import (
	"encoding/json"
	"fmt"
)

// AuthResultAnyOf the model 'AuthResultAnyOf'
type AuthResultAnyOf string

// List of AuthResult_anyOf
const (
	SUCCESS AuthResultAnyOf = "AUTH_SUCCESS"
	FAIL AuthResultAnyOf = "AUTH_FAIL"
)

// All allowed values of AuthResultAnyOf enum
var AllowedAuthResultAnyOfEnumValues = []AuthResultAnyOf{
	"AUTH_SUCCESS",
	"AUTH_FAIL",
}

func (v *AuthResultAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthResultAnyOf(value)
	for _, existing := range AllowedAuthResultAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthResultAnyOf", value)
}

// NewAuthResultAnyOfFromValue returns a pointer to a valid AuthResultAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthResultAnyOfFromValue(v string) (*AuthResultAnyOf, error) {
	ev := AuthResultAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthResultAnyOf: valid values are %v", v, AllowedAuthResultAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthResultAnyOf) IsValid() bool {
	for _, existing := range AllowedAuthResultAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthResult_anyOf value
func (v AuthResultAnyOf) Ptr() *AuthResultAnyOf {
	return &v
}

type NullableAuthResultAnyOf struct {
	value *AuthResultAnyOf
	isSet bool
}

func (v NullableAuthResultAnyOf) Get() *AuthResultAnyOf {
	return v.value
}

func (v *NullableAuthResultAnyOf) Set(val *AuthResultAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthResultAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthResultAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthResultAnyOf(val *AuthResultAnyOf) *NullableAuthResultAnyOf {
	return &NullableAuthResultAnyOf{value: val, isSet: true}
}

func (v NullableAuthResultAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthResultAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

