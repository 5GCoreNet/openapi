/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the SubscriptionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionData{}

// SubscriptionData Data within an AMF Status Change Subscription request and response
type SubscriptionData struct {
	// String providing an URI formatted according to RFC 3986.
	AmfStatusUri string `json:"amfStatusUri"`
	GuamiList []Guami `json:"guamiList,omitempty"`
}

// NewSubscriptionData instantiates a new SubscriptionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionData(amfStatusUri string) *SubscriptionData {
	this := SubscriptionData{}
	this.AmfStatusUri = amfStatusUri
	return &this
}

// NewSubscriptionDataWithDefaults instantiates a new SubscriptionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionDataWithDefaults() *SubscriptionData {
	this := SubscriptionData{}
	return &this
}

// GetAmfStatusUri returns the AmfStatusUri field value
func (o *SubscriptionData) GetAmfStatusUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmfStatusUri
}

// GetAmfStatusUriOk returns a tuple with the AmfStatusUri field value
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetAmfStatusUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmfStatusUri, true
}

// SetAmfStatusUri sets field value
func (o *SubscriptionData) SetAmfStatusUri(v string) {
	o.AmfStatusUri = v
}

// GetGuamiList returns the GuamiList field value if set, zero value otherwise.
func (o *SubscriptionData) GetGuamiList() []Guami {
	if o == nil || isNil(o.GuamiList) {
		var ret []Guami
		return ret
	}
	return o.GuamiList
}

// GetGuamiListOk returns a tuple with the GuamiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetGuamiListOk() ([]Guami, bool) {
	if o == nil || isNil(o.GuamiList) {
		return nil, false
	}
	return o.GuamiList, true
}

// HasGuamiList returns a boolean if a field has been set.
func (o *SubscriptionData) HasGuamiList() bool {
	if o != nil && !isNil(o.GuamiList) {
		return true
	}

	return false
}

// SetGuamiList gets a reference to the given []Guami and assigns it to the GuamiList field.
func (o *SubscriptionData) SetGuamiList(v []Guami) {
	o.GuamiList = v
}

func (o SubscriptionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amfStatusUri"] = o.AmfStatusUri
	if !isNil(o.GuamiList) {
		toSerialize["guamiList"] = o.GuamiList
	}
	return toSerialize, nil
}

type NullableSubscriptionData struct {
	value *SubscriptionData
	isSet bool
}

func (v NullableSubscriptionData) Get() *SubscriptionData {
	return v.value
}

func (v *NullableSubscriptionData) Set(val *SubscriptionData) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionData) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionData(val *SubscriptionData) *NullableSubscriptionData {
	return &NullableSubscriptionData{value: val, isSet: true}
}

func (v NullableSubscriptionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


