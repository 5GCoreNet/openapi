/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
	"fmt"
)

// PeriodicCommunicationIndicatorAnyOf the model 'PeriodicCommunicationIndicatorAnyOf'
type PeriodicCommunicationIndicatorAnyOf string

// List of PeriodicCommunicationIndicator_anyOf
const (
	PIORIODICALLY PeriodicCommunicationIndicatorAnyOf = "PIORIODICALLY"
	ON_DEMAND PeriodicCommunicationIndicatorAnyOf = "ON_DEMAND"
)

// All allowed values of PeriodicCommunicationIndicatorAnyOf enum
var AllowedPeriodicCommunicationIndicatorAnyOfEnumValues = []PeriodicCommunicationIndicatorAnyOf{
	"PIORIODICALLY",
	"ON_DEMAND",
}

func (v *PeriodicCommunicationIndicatorAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PeriodicCommunicationIndicatorAnyOf(value)
	for _, existing := range AllowedPeriodicCommunicationIndicatorAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PeriodicCommunicationIndicatorAnyOf", value)
}

// NewPeriodicCommunicationIndicatorAnyOfFromValue returns a pointer to a valid PeriodicCommunicationIndicatorAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPeriodicCommunicationIndicatorAnyOfFromValue(v string) (*PeriodicCommunicationIndicatorAnyOf, error) {
	ev := PeriodicCommunicationIndicatorAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PeriodicCommunicationIndicatorAnyOf: valid values are %v", v, AllowedPeriodicCommunicationIndicatorAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PeriodicCommunicationIndicatorAnyOf) IsValid() bool {
	for _, existing := range AllowedPeriodicCommunicationIndicatorAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PeriodicCommunicationIndicator_anyOf value
func (v PeriodicCommunicationIndicatorAnyOf) Ptr() *PeriodicCommunicationIndicatorAnyOf {
	return &v
}

type NullablePeriodicCommunicationIndicatorAnyOf struct {
	value *PeriodicCommunicationIndicatorAnyOf
	isSet bool
}

func (v NullablePeriodicCommunicationIndicatorAnyOf) Get() *PeriodicCommunicationIndicatorAnyOf {
	return v.value
}

func (v *NullablePeriodicCommunicationIndicatorAnyOf) Set(val *PeriodicCommunicationIndicatorAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodicCommunicationIndicatorAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodicCommunicationIndicatorAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodicCommunicationIndicatorAnyOf(val *PeriodicCommunicationIndicatorAnyOf) *NullablePeriodicCommunicationIndicatorAnyOf {
	return &NullablePeriodicCommunicationIndicatorAnyOf{value: val, isSet: true}
}

func (v NullablePeriodicCommunicationIndicatorAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodicCommunicationIndicatorAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

