/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the UeContextCreateError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UeContextCreateError{}

// UeContextCreateError Data within a failure response for creating a UE context
type UeContextCreateError struct {
	Error ProblemDetails `json:"error"`
	NgapCause *NgApCause `json:"ngapCause,omitempty"`
	TargetToSourceFailureData *N2InfoContent `json:"targetToSourceFailureData,omitempty"`
}

// NewUeContextCreateError instantiates a new UeContextCreateError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeContextCreateError(error_ ProblemDetails) *UeContextCreateError {
	this := UeContextCreateError{}
	this.Error = error_
	return &this
}

// NewUeContextCreateErrorWithDefaults instantiates a new UeContextCreateError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeContextCreateErrorWithDefaults() *UeContextCreateError {
	this := UeContextCreateError{}
	return &this
}

// GetError returns the Error field value
func (o *UeContextCreateError) GetError() ProblemDetails {
	if o == nil {
		var ret ProblemDetails
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *UeContextCreateError) GetErrorOk() (*ProblemDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *UeContextCreateError) SetError(v ProblemDetails) {
	o.Error = v
}

// GetNgapCause returns the NgapCause field value if set, zero value otherwise.
func (o *UeContextCreateError) GetNgapCause() NgApCause {
	if o == nil || IsNil(o.NgapCause) {
		var ret NgApCause
		return ret
	}
	return *o.NgapCause
}

// GetNgapCauseOk returns a tuple with the NgapCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextCreateError) GetNgapCauseOk() (*NgApCause, bool) {
	if o == nil || IsNil(o.NgapCause) {
		return nil, false
	}
	return o.NgapCause, true
}

// HasNgapCause returns a boolean if a field has been set.
func (o *UeContextCreateError) HasNgapCause() bool {
	if o != nil && !IsNil(o.NgapCause) {
		return true
	}

	return false
}

// SetNgapCause gets a reference to the given NgApCause and assigns it to the NgapCause field.
func (o *UeContextCreateError) SetNgapCause(v NgApCause) {
	o.NgapCause = &v
}

// GetTargetToSourceFailureData returns the TargetToSourceFailureData field value if set, zero value otherwise.
func (o *UeContextCreateError) GetTargetToSourceFailureData() N2InfoContent {
	if o == nil || IsNil(o.TargetToSourceFailureData) {
		var ret N2InfoContent
		return ret
	}
	return *o.TargetToSourceFailureData
}

// GetTargetToSourceFailureDataOk returns a tuple with the TargetToSourceFailureData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextCreateError) GetTargetToSourceFailureDataOk() (*N2InfoContent, bool) {
	if o == nil || IsNil(o.TargetToSourceFailureData) {
		return nil, false
	}
	return o.TargetToSourceFailureData, true
}

// HasTargetToSourceFailureData returns a boolean if a field has been set.
func (o *UeContextCreateError) HasTargetToSourceFailureData() bool {
	if o != nil && !IsNil(o.TargetToSourceFailureData) {
		return true
	}

	return false
}

// SetTargetToSourceFailureData gets a reference to the given N2InfoContent and assigns it to the TargetToSourceFailureData field.
func (o *UeContextCreateError) SetTargetToSourceFailureData(v N2InfoContent) {
	o.TargetToSourceFailureData = &v
}

func (o UeContextCreateError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UeContextCreateError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error
	if !IsNil(o.NgapCause) {
		toSerialize["ngapCause"] = o.NgapCause
	}
	if !IsNil(o.TargetToSourceFailureData) {
		toSerialize["targetToSourceFailureData"] = o.TargetToSourceFailureData
	}
	return toSerialize, nil
}

type NullableUeContextCreateError struct {
	value *UeContextCreateError
	isSet bool
}

func (v NullableUeContextCreateError) Get() *UeContextCreateError {
	return v.value
}

func (v *NullableUeContextCreateError) Set(val *UeContextCreateError) {
	v.value = val
	v.isSet = true
}

func (v NullableUeContextCreateError) IsSet() bool {
	return v.isSet
}

func (v *NullableUeContextCreateError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeContextCreateError(val *UeContextCreateError) *NullableUeContextCreateError {
	return &NullableUeContextCreateError{value: val, isSet: true}
}

func (v NullableUeContextCreateError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeContextCreateError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


