/*
Namf_Communication

AMF Communication Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the UeContextTransferRspData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UeContextTransferRspData{}

// UeContextTransferRspData Data within a successful response to the UE Context Transfer request
type UeContextTransferRspData struct {
	UeContext UeContext `json:"ueContext"`
	UeRadioCapability *N2InfoContent `json:"ueRadioCapability,omitempty"`
	UeRadioCapabilityForPaging *N2InfoContent `json:"ueRadioCapabilityForPaging,omitempty"`
	UeNbiotRadioCapability *N2InfoContent `json:"ueNbiotRadioCapability,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
}

// NewUeContextTransferRspData instantiates a new UeContextTransferRspData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeContextTransferRspData(ueContext UeContext) *UeContextTransferRspData {
	this := UeContextTransferRspData{}
	this.UeContext = ueContext
	return &this
}

// NewUeContextTransferRspDataWithDefaults instantiates a new UeContextTransferRspData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeContextTransferRspDataWithDefaults() *UeContextTransferRspData {
	this := UeContextTransferRspData{}
	return &this
}

// GetUeContext returns the UeContext field value
func (o *UeContextTransferRspData) GetUeContext() UeContext {
	if o == nil {
		var ret UeContext
		return ret
	}

	return o.UeContext
}

// GetUeContextOk returns a tuple with the UeContext field value
// and a boolean to check if the value has been set.
func (o *UeContextTransferRspData) GetUeContextOk() (*UeContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UeContext, true
}

// SetUeContext sets field value
func (o *UeContextTransferRspData) SetUeContext(v UeContext) {
	o.UeContext = v
}

// GetUeRadioCapability returns the UeRadioCapability field value if set, zero value otherwise.
func (o *UeContextTransferRspData) GetUeRadioCapability() N2InfoContent {
	if o == nil || IsNil(o.UeRadioCapability) {
		var ret N2InfoContent
		return ret
	}
	return *o.UeRadioCapability
}

// GetUeRadioCapabilityOk returns a tuple with the UeRadioCapability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextTransferRspData) GetUeRadioCapabilityOk() (*N2InfoContent, bool) {
	if o == nil || IsNil(o.UeRadioCapability) {
		return nil, false
	}
	return o.UeRadioCapability, true
}

// HasUeRadioCapability returns a boolean if a field has been set.
func (o *UeContextTransferRspData) HasUeRadioCapability() bool {
	if o != nil && !IsNil(o.UeRadioCapability) {
		return true
	}

	return false
}

// SetUeRadioCapability gets a reference to the given N2InfoContent and assigns it to the UeRadioCapability field.
func (o *UeContextTransferRspData) SetUeRadioCapability(v N2InfoContent) {
	o.UeRadioCapability = &v
}

// GetUeRadioCapabilityForPaging returns the UeRadioCapabilityForPaging field value if set, zero value otherwise.
func (o *UeContextTransferRspData) GetUeRadioCapabilityForPaging() N2InfoContent {
	if o == nil || IsNil(o.UeRadioCapabilityForPaging) {
		var ret N2InfoContent
		return ret
	}
	return *o.UeRadioCapabilityForPaging
}

// GetUeRadioCapabilityForPagingOk returns a tuple with the UeRadioCapabilityForPaging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextTransferRspData) GetUeRadioCapabilityForPagingOk() (*N2InfoContent, bool) {
	if o == nil || IsNil(o.UeRadioCapabilityForPaging) {
		return nil, false
	}
	return o.UeRadioCapabilityForPaging, true
}

// HasUeRadioCapabilityForPaging returns a boolean if a field has been set.
func (o *UeContextTransferRspData) HasUeRadioCapabilityForPaging() bool {
	if o != nil && !IsNil(o.UeRadioCapabilityForPaging) {
		return true
	}

	return false
}

// SetUeRadioCapabilityForPaging gets a reference to the given N2InfoContent and assigns it to the UeRadioCapabilityForPaging field.
func (o *UeContextTransferRspData) SetUeRadioCapabilityForPaging(v N2InfoContent) {
	o.UeRadioCapabilityForPaging = &v
}

// GetUeNbiotRadioCapability returns the UeNbiotRadioCapability field value if set, zero value otherwise.
func (o *UeContextTransferRspData) GetUeNbiotRadioCapability() N2InfoContent {
	if o == nil || IsNil(o.UeNbiotRadioCapability) {
		var ret N2InfoContent
		return ret
	}
	return *o.UeNbiotRadioCapability
}

// GetUeNbiotRadioCapabilityOk returns a tuple with the UeNbiotRadioCapability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextTransferRspData) GetUeNbiotRadioCapabilityOk() (*N2InfoContent, bool) {
	if o == nil || IsNil(o.UeNbiotRadioCapability) {
		return nil, false
	}
	return o.UeNbiotRadioCapability, true
}

// HasUeNbiotRadioCapability returns a boolean if a field has been set.
func (o *UeContextTransferRspData) HasUeNbiotRadioCapability() bool {
	if o != nil && !IsNil(o.UeNbiotRadioCapability) {
		return true
	}

	return false
}

// SetUeNbiotRadioCapability gets a reference to the given N2InfoContent and assigns it to the UeNbiotRadioCapability field.
func (o *UeContextTransferRspData) SetUeNbiotRadioCapability(v N2InfoContent) {
	o.UeNbiotRadioCapability = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *UeContextTransferRspData) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextTransferRspData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *UeContextTransferRspData) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *UeContextTransferRspData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

func (o UeContextTransferRspData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UeContextTransferRspData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ueContext"] = o.UeContext
	if !IsNil(o.UeRadioCapability) {
		toSerialize["ueRadioCapability"] = o.UeRadioCapability
	}
	if !IsNil(o.UeRadioCapabilityForPaging) {
		toSerialize["ueRadioCapabilityForPaging"] = o.UeRadioCapabilityForPaging
	}
	if !IsNil(o.UeNbiotRadioCapability) {
		toSerialize["ueNbiotRadioCapability"] = o.UeNbiotRadioCapability
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	return toSerialize, nil
}

type NullableUeContextTransferRspData struct {
	value *UeContextTransferRspData
	isSet bool
}

func (v NullableUeContextTransferRspData) Get() *UeContextTransferRspData {
	return v.value
}

func (v *NullableUeContextTransferRspData) Set(val *UeContextTransferRspData) {
	v.value = val
	v.isSet = true
}

func (v NullableUeContextTransferRspData) IsSet() bool {
	return v.isSet
}

func (v *NullableUeContextTransferRspData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeContextTransferRspData(val *UeContextTransferRspData) *NullableUeContextTransferRspData {
	return &NullableUeContextTransferRspData{value: val, isSet: true}
}

func (v NullableUeContextTransferRspData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeContextTransferRspData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


