/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the EcRestrictionDataWb type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EcRestrictionDataWb{}

// EcRestrictionDataWb Enhanced Coverage Restriction Data for WB-N1 mode
type EcRestrictionDataWb struct {
	EcModeARestricted *bool `json:"ecModeARestricted,omitempty"`
	EcModeBRestricted bool `json:"ecModeBRestricted"`
}

// NewEcRestrictionDataWb instantiates a new EcRestrictionDataWb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEcRestrictionDataWb(ecModeBRestricted bool) *EcRestrictionDataWb {
	this := EcRestrictionDataWb{}
	var ecModeARestricted bool = false
	this.EcModeARestricted = &ecModeARestricted
	this.EcModeBRestricted = ecModeBRestricted
	return &this
}

// NewEcRestrictionDataWbWithDefaults instantiates a new EcRestrictionDataWb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEcRestrictionDataWbWithDefaults() *EcRestrictionDataWb {
	this := EcRestrictionDataWb{}
	var ecModeARestricted bool = false
	this.EcModeARestricted = &ecModeARestricted
	return &this
}

// GetEcModeARestricted returns the EcModeARestricted field value if set, zero value otherwise.
func (o *EcRestrictionDataWb) GetEcModeARestricted() bool {
	if o == nil || isNil(o.EcModeARestricted) {
		var ret bool
		return ret
	}
	return *o.EcModeARestricted
}

// GetEcModeARestrictedOk returns a tuple with the EcModeARestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcRestrictionDataWb) GetEcModeARestrictedOk() (*bool, bool) {
	if o == nil || isNil(o.EcModeARestricted) {
		return nil, false
	}
	return o.EcModeARestricted, true
}

// HasEcModeARestricted returns a boolean if a field has been set.
func (o *EcRestrictionDataWb) HasEcModeARestricted() bool {
	if o != nil && !isNil(o.EcModeARestricted) {
		return true
	}

	return false
}

// SetEcModeARestricted gets a reference to the given bool and assigns it to the EcModeARestricted field.
func (o *EcRestrictionDataWb) SetEcModeARestricted(v bool) {
	o.EcModeARestricted = &v
}

// GetEcModeBRestricted returns the EcModeBRestricted field value
func (o *EcRestrictionDataWb) GetEcModeBRestricted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EcModeBRestricted
}

// GetEcModeBRestrictedOk returns a tuple with the EcModeBRestricted field value
// and a boolean to check if the value has been set.
func (o *EcRestrictionDataWb) GetEcModeBRestrictedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EcModeBRestricted, true
}

// SetEcModeBRestricted sets field value
func (o *EcRestrictionDataWb) SetEcModeBRestricted(v bool) {
	o.EcModeBRestricted = v
}

func (o EcRestrictionDataWb) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EcRestrictionDataWb) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EcModeARestricted) {
		toSerialize["ecModeARestricted"] = o.EcModeARestricted
	}
	toSerialize["ecModeBRestricted"] = o.EcModeBRestricted
	return toSerialize, nil
}

type NullableEcRestrictionDataWb struct {
	value *EcRestrictionDataWb
	isSet bool
}

func (v NullableEcRestrictionDataWb) Get() *EcRestrictionDataWb {
	return v.value
}

func (v *NullableEcRestrictionDataWb) Set(val *EcRestrictionDataWb) {
	v.value = val
	v.isSet = true
}

func (v NullableEcRestrictionDataWb) IsSet() bool {
	return v.isSet
}

func (v *NullableEcRestrictionDataWb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEcRestrictionDataWb(val *EcRestrictionDataWb) *NullableEcRestrictionDataWb {
	return &NullableEcRestrictionDataWb{value: val, isSet: true}
}

func (v NullableEcRestrictionDataWb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEcRestrictionDataWb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


