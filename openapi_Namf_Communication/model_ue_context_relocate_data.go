/*
Namf_Communication

AMF Communication Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the UeContextRelocateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UeContextRelocateData{}

// UeContextRelocateData Data within a Relocate UE Context request
type UeContextRelocateData struct {
	UeContext UeContext `json:"ueContext"`
	TargetId NgRanTargetId `json:"targetId"`
	SourceToTargetData N2InfoContent `json:"sourceToTargetData"`
	ForwardRelocationRequest RefToBinaryData `json:"forwardRelocationRequest"`
	PduSessionList []N2SmInformation `json:"pduSessionList,omitempty"`
	UeRadioCapability *N2InfoContent `json:"ueRadioCapability,omitempty"`
	NgapCause *NgApCause `json:"ngapCause,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
}

// NewUeContextRelocateData instantiates a new UeContextRelocateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeContextRelocateData(ueContext UeContext, targetId NgRanTargetId, sourceToTargetData N2InfoContent, forwardRelocationRequest RefToBinaryData) *UeContextRelocateData {
	this := UeContextRelocateData{}
	this.UeContext = ueContext
	this.TargetId = targetId
	this.SourceToTargetData = sourceToTargetData
	this.ForwardRelocationRequest = forwardRelocationRequest
	return &this
}

// NewUeContextRelocateDataWithDefaults instantiates a new UeContextRelocateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeContextRelocateDataWithDefaults() *UeContextRelocateData {
	this := UeContextRelocateData{}
	return &this
}

// GetUeContext returns the UeContext field value
func (o *UeContextRelocateData) GetUeContext() UeContext {
	if o == nil {
		var ret UeContext
		return ret
	}

	return o.UeContext
}

// GetUeContextOk returns a tuple with the UeContext field value
// and a boolean to check if the value has been set.
func (o *UeContextRelocateData) GetUeContextOk() (*UeContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UeContext, true
}

// SetUeContext sets field value
func (o *UeContextRelocateData) SetUeContext(v UeContext) {
	o.UeContext = v
}

// GetTargetId returns the TargetId field value
func (o *UeContextRelocateData) GetTargetId() NgRanTargetId {
	if o == nil {
		var ret NgRanTargetId
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *UeContextRelocateData) GetTargetIdOk() (*NgRanTargetId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *UeContextRelocateData) SetTargetId(v NgRanTargetId) {
	o.TargetId = v
}

// GetSourceToTargetData returns the SourceToTargetData field value
func (o *UeContextRelocateData) GetSourceToTargetData() N2InfoContent {
	if o == nil {
		var ret N2InfoContent
		return ret
	}

	return o.SourceToTargetData
}

// GetSourceToTargetDataOk returns a tuple with the SourceToTargetData field value
// and a boolean to check if the value has been set.
func (o *UeContextRelocateData) GetSourceToTargetDataOk() (*N2InfoContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceToTargetData, true
}

// SetSourceToTargetData sets field value
func (o *UeContextRelocateData) SetSourceToTargetData(v N2InfoContent) {
	o.SourceToTargetData = v
}

// GetForwardRelocationRequest returns the ForwardRelocationRequest field value
func (o *UeContextRelocateData) GetForwardRelocationRequest() RefToBinaryData {
	if o == nil {
		var ret RefToBinaryData
		return ret
	}

	return o.ForwardRelocationRequest
}

// GetForwardRelocationRequestOk returns a tuple with the ForwardRelocationRequest field value
// and a boolean to check if the value has been set.
func (o *UeContextRelocateData) GetForwardRelocationRequestOk() (*RefToBinaryData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForwardRelocationRequest, true
}

// SetForwardRelocationRequest sets field value
func (o *UeContextRelocateData) SetForwardRelocationRequest(v RefToBinaryData) {
	o.ForwardRelocationRequest = v
}

// GetPduSessionList returns the PduSessionList field value if set, zero value otherwise.
func (o *UeContextRelocateData) GetPduSessionList() []N2SmInformation {
	if o == nil || IsNil(o.PduSessionList) {
		var ret []N2SmInformation
		return ret
	}
	return o.PduSessionList
}

// GetPduSessionListOk returns a tuple with the PduSessionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextRelocateData) GetPduSessionListOk() ([]N2SmInformation, bool) {
	if o == nil || IsNil(o.PduSessionList) {
		return nil, false
	}
	return o.PduSessionList, true
}

// HasPduSessionList returns a boolean if a field has been set.
func (o *UeContextRelocateData) HasPduSessionList() bool {
	if o != nil && !IsNil(o.PduSessionList) {
		return true
	}

	return false
}

// SetPduSessionList gets a reference to the given []N2SmInformation and assigns it to the PduSessionList field.
func (o *UeContextRelocateData) SetPduSessionList(v []N2SmInformation) {
	o.PduSessionList = v
}

// GetUeRadioCapability returns the UeRadioCapability field value if set, zero value otherwise.
func (o *UeContextRelocateData) GetUeRadioCapability() N2InfoContent {
	if o == nil || IsNil(o.UeRadioCapability) {
		var ret N2InfoContent
		return ret
	}
	return *o.UeRadioCapability
}

// GetUeRadioCapabilityOk returns a tuple with the UeRadioCapability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextRelocateData) GetUeRadioCapabilityOk() (*N2InfoContent, bool) {
	if o == nil || IsNil(o.UeRadioCapability) {
		return nil, false
	}
	return o.UeRadioCapability, true
}

// HasUeRadioCapability returns a boolean if a field has been set.
func (o *UeContextRelocateData) HasUeRadioCapability() bool {
	if o != nil && !IsNil(o.UeRadioCapability) {
		return true
	}

	return false
}

// SetUeRadioCapability gets a reference to the given N2InfoContent and assigns it to the UeRadioCapability field.
func (o *UeContextRelocateData) SetUeRadioCapability(v N2InfoContent) {
	o.UeRadioCapability = &v
}

// GetNgapCause returns the NgapCause field value if set, zero value otherwise.
func (o *UeContextRelocateData) GetNgapCause() NgApCause {
	if o == nil || IsNil(o.NgapCause) {
		var ret NgApCause
		return ret
	}
	return *o.NgapCause
}

// GetNgapCauseOk returns a tuple with the NgapCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextRelocateData) GetNgapCauseOk() (*NgApCause, bool) {
	if o == nil || IsNil(o.NgapCause) {
		return nil, false
	}
	return o.NgapCause, true
}

// HasNgapCause returns a boolean if a field has been set.
func (o *UeContextRelocateData) HasNgapCause() bool {
	if o != nil && !IsNil(o.NgapCause) {
		return true
	}

	return false
}

// SetNgapCause gets a reference to the given NgApCause and assigns it to the NgapCause field.
func (o *UeContextRelocateData) SetNgapCause(v NgApCause) {
	o.NgapCause = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *UeContextRelocateData) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextRelocateData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *UeContextRelocateData) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *UeContextRelocateData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

func (o UeContextRelocateData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UeContextRelocateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ueContext"] = o.UeContext
	toSerialize["targetId"] = o.TargetId
	toSerialize["sourceToTargetData"] = o.SourceToTargetData
	toSerialize["forwardRelocationRequest"] = o.ForwardRelocationRequest
	if !IsNil(o.PduSessionList) {
		toSerialize["pduSessionList"] = o.PduSessionList
	}
	if !IsNil(o.UeRadioCapability) {
		toSerialize["ueRadioCapability"] = o.UeRadioCapability
	}
	if !IsNil(o.NgapCause) {
		toSerialize["ngapCause"] = o.NgapCause
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	return toSerialize, nil
}

type NullableUeContextRelocateData struct {
	value *UeContextRelocateData
	isSet bool
}

func (v NullableUeContextRelocateData) Get() *UeContextRelocateData {
	return v.value
}

func (v *NullableUeContextRelocateData) Set(val *UeContextRelocateData) {
	v.value = val
	v.isSet = true
}

func (v NullableUeContextRelocateData) IsSet() bool {
	return v.isSet
}

func (v *NullableUeContextRelocateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeContextRelocateData(val *UeContextRelocateData) *NullableUeContextRelocateData {
	return &NullableUeContextRelocateData{value: val, isSet: true}
}

func (v NullableUeContextRelocateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeContextRelocateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


