/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the N2InformationNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &N2InformationNotification{}

// N2InformationNotification Data within a N2 information notification request
type N2InformationNotification struct {
	N2NotifySubscriptionId string `json:"n2NotifySubscriptionId"`
	N2InfoContainer *N2InfoContainer `json:"n2InfoContainer,omitempty"`
	ToReleaseSessionList []int32 `json:"toReleaseSessionList,omitempty"`
	// LCS Correlation ID.
	LcsCorrelationId *string `json:"lcsCorrelationId,omitempty"`
	NotifyReason *N2InfoNotifyReason `json:"notifyReason,omitempty"`
	SmfChangeInfoList []SmfChangeInfo `json:"smfChangeInfoList,omitempty"`
	RanNodeId *GlobalRanNodeId `json:"ranNodeId,omitempty"`
	// Fully Qualified Domain Name
	InitialAmfName *string `json:"initialAmfName,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166. 
	AnN2IPv4Addr *string `json:"anN2IPv4Addr,omitempty"`
	AnN2IPv6Addr *Ipv6Addr `json:"anN2IPv6Addr,omitempty"`
	Guami *Guami `json:"guami,omitempty"`
	NotifySourceNgRan *bool `json:"notifySourceNgRan,omitempty"`
}

// NewN2InformationNotification instantiates a new N2InformationNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewN2InformationNotification(n2NotifySubscriptionId string) *N2InformationNotification {
	this := N2InformationNotification{}
	this.N2NotifySubscriptionId = n2NotifySubscriptionId
	var notifySourceNgRan bool = false
	this.NotifySourceNgRan = &notifySourceNgRan
	return &this
}

// NewN2InformationNotificationWithDefaults instantiates a new N2InformationNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewN2InformationNotificationWithDefaults() *N2InformationNotification {
	this := N2InformationNotification{}
	var notifySourceNgRan bool = false
	this.NotifySourceNgRan = &notifySourceNgRan
	return &this
}

// GetN2NotifySubscriptionId returns the N2NotifySubscriptionId field value
func (o *N2InformationNotification) GetN2NotifySubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.N2NotifySubscriptionId
}

// GetN2NotifySubscriptionIdOk returns a tuple with the N2NotifySubscriptionId field value
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetN2NotifySubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.N2NotifySubscriptionId, true
}

// SetN2NotifySubscriptionId sets field value
func (o *N2InformationNotification) SetN2NotifySubscriptionId(v string) {
	o.N2NotifySubscriptionId = v
}

// GetN2InfoContainer returns the N2InfoContainer field value if set, zero value otherwise.
func (o *N2InformationNotification) GetN2InfoContainer() N2InfoContainer {
	if o == nil || isNil(o.N2InfoContainer) {
		var ret N2InfoContainer
		return ret
	}
	return *o.N2InfoContainer
}

// GetN2InfoContainerOk returns a tuple with the N2InfoContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetN2InfoContainerOk() (*N2InfoContainer, bool) {
	if o == nil || isNil(o.N2InfoContainer) {
		return nil, false
	}
	return o.N2InfoContainer, true
}

// HasN2InfoContainer returns a boolean if a field has been set.
func (o *N2InformationNotification) HasN2InfoContainer() bool {
	if o != nil && !isNil(o.N2InfoContainer) {
		return true
	}

	return false
}

// SetN2InfoContainer gets a reference to the given N2InfoContainer and assigns it to the N2InfoContainer field.
func (o *N2InformationNotification) SetN2InfoContainer(v N2InfoContainer) {
	o.N2InfoContainer = &v
}

// GetToReleaseSessionList returns the ToReleaseSessionList field value if set, zero value otherwise.
func (o *N2InformationNotification) GetToReleaseSessionList() []int32 {
	if o == nil || isNil(o.ToReleaseSessionList) {
		var ret []int32
		return ret
	}
	return o.ToReleaseSessionList
}

// GetToReleaseSessionListOk returns a tuple with the ToReleaseSessionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetToReleaseSessionListOk() ([]int32, bool) {
	if o == nil || isNil(o.ToReleaseSessionList) {
		return nil, false
	}
	return o.ToReleaseSessionList, true
}

// HasToReleaseSessionList returns a boolean if a field has been set.
func (o *N2InformationNotification) HasToReleaseSessionList() bool {
	if o != nil && !isNil(o.ToReleaseSessionList) {
		return true
	}

	return false
}

// SetToReleaseSessionList gets a reference to the given []int32 and assigns it to the ToReleaseSessionList field.
func (o *N2InformationNotification) SetToReleaseSessionList(v []int32) {
	o.ToReleaseSessionList = v
}

// GetLcsCorrelationId returns the LcsCorrelationId field value if set, zero value otherwise.
func (o *N2InformationNotification) GetLcsCorrelationId() string {
	if o == nil || isNil(o.LcsCorrelationId) {
		var ret string
		return ret
	}
	return *o.LcsCorrelationId
}

// GetLcsCorrelationIdOk returns a tuple with the LcsCorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetLcsCorrelationIdOk() (*string, bool) {
	if o == nil || isNil(o.LcsCorrelationId) {
		return nil, false
	}
	return o.LcsCorrelationId, true
}

// HasLcsCorrelationId returns a boolean if a field has been set.
func (o *N2InformationNotification) HasLcsCorrelationId() bool {
	if o != nil && !isNil(o.LcsCorrelationId) {
		return true
	}

	return false
}

// SetLcsCorrelationId gets a reference to the given string and assigns it to the LcsCorrelationId field.
func (o *N2InformationNotification) SetLcsCorrelationId(v string) {
	o.LcsCorrelationId = &v
}

// GetNotifyReason returns the NotifyReason field value if set, zero value otherwise.
func (o *N2InformationNotification) GetNotifyReason() N2InfoNotifyReason {
	if o == nil || isNil(o.NotifyReason) {
		var ret N2InfoNotifyReason
		return ret
	}
	return *o.NotifyReason
}

// GetNotifyReasonOk returns a tuple with the NotifyReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetNotifyReasonOk() (*N2InfoNotifyReason, bool) {
	if o == nil || isNil(o.NotifyReason) {
		return nil, false
	}
	return o.NotifyReason, true
}

// HasNotifyReason returns a boolean if a field has been set.
func (o *N2InformationNotification) HasNotifyReason() bool {
	if o != nil && !isNil(o.NotifyReason) {
		return true
	}

	return false
}

// SetNotifyReason gets a reference to the given N2InfoNotifyReason and assigns it to the NotifyReason field.
func (o *N2InformationNotification) SetNotifyReason(v N2InfoNotifyReason) {
	o.NotifyReason = &v
}

// GetSmfChangeInfoList returns the SmfChangeInfoList field value if set, zero value otherwise.
func (o *N2InformationNotification) GetSmfChangeInfoList() []SmfChangeInfo {
	if o == nil || isNil(o.SmfChangeInfoList) {
		var ret []SmfChangeInfo
		return ret
	}
	return o.SmfChangeInfoList
}

// GetSmfChangeInfoListOk returns a tuple with the SmfChangeInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetSmfChangeInfoListOk() ([]SmfChangeInfo, bool) {
	if o == nil || isNil(o.SmfChangeInfoList) {
		return nil, false
	}
	return o.SmfChangeInfoList, true
}

// HasSmfChangeInfoList returns a boolean if a field has been set.
func (o *N2InformationNotification) HasSmfChangeInfoList() bool {
	if o != nil && !isNil(o.SmfChangeInfoList) {
		return true
	}

	return false
}

// SetSmfChangeInfoList gets a reference to the given []SmfChangeInfo and assigns it to the SmfChangeInfoList field.
func (o *N2InformationNotification) SetSmfChangeInfoList(v []SmfChangeInfo) {
	o.SmfChangeInfoList = v
}

// GetRanNodeId returns the RanNodeId field value if set, zero value otherwise.
func (o *N2InformationNotification) GetRanNodeId() GlobalRanNodeId {
	if o == nil || isNil(o.RanNodeId) {
		var ret GlobalRanNodeId
		return ret
	}
	return *o.RanNodeId
}

// GetRanNodeIdOk returns a tuple with the RanNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetRanNodeIdOk() (*GlobalRanNodeId, bool) {
	if o == nil || isNil(o.RanNodeId) {
		return nil, false
	}
	return o.RanNodeId, true
}

// HasRanNodeId returns a boolean if a field has been set.
func (o *N2InformationNotification) HasRanNodeId() bool {
	if o != nil && !isNil(o.RanNodeId) {
		return true
	}

	return false
}

// SetRanNodeId gets a reference to the given GlobalRanNodeId and assigns it to the RanNodeId field.
func (o *N2InformationNotification) SetRanNodeId(v GlobalRanNodeId) {
	o.RanNodeId = &v
}

// GetInitialAmfName returns the InitialAmfName field value if set, zero value otherwise.
func (o *N2InformationNotification) GetInitialAmfName() string {
	if o == nil || isNil(o.InitialAmfName) {
		var ret string
		return ret
	}
	return *o.InitialAmfName
}

// GetInitialAmfNameOk returns a tuple with the InitialAmfName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetInitialAmfNameOk() (*string, bool) {
	if o == nil || isNil(o.InitialAmfName) {
		return nil, false
	}
	return o.InitialAmfName, true
}

// HasInitialAmfName returns a boolean if a field has been set.
func (o *N2InformationNotification) HasInitialAmfName() bool {
	if o != nil && !isNil(o.InitialAmfName) {
		return true
	}

	return false
}

// SetInitialAmfName gets a reference to the given string and assigns it to the InitialAmfName field.
func (o *N2InformationNotification) SetInitialAmfName(v string) {
	o.InitialAmfName = &v
}

// GetAnN2IPv4Addr returns the AnN2IPv4Addr field value if set, zero value otherwise.
func (o *N2InformationNotification) GetAnN2IPv4Addr() string {
	if o == nil || isNil(o.AnN2IPv4Addr) {
		var ret string
		return ret
	}
	return *o.AnN2IPv4Addr
}

// GetAnN2IPv4AddrOk returns a tuple with the AnN2IPv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetAnN2IPv4AddrOk() (*string, bool) {
	if o == nil || isNil(o.AnN2IPv4Addr) {
		return nil, false
	}
	return o.AnN2IPv4Addr, true
}

// HasAnN2IPv4Addr returns a boolean if a field has been set.
func (o *N2InformationNotification) HasAnN2IPv4Addr() bool {
	if o != nil && !isNil(o.AnN2IPv4Addr) {
		return true
	}

	return false
}

// SetAnN2IPv4Addr gets a reference to the given string and assigns it to the AnN2IPv4Addr field.
func (o *N2InformationNotification) SetAnN2IPv4Addr(v string) {
	o.AnN2IPv4Addr = &v
}

// GetAnN2IPv6Addr returns the AnN2IPv6Addr field value if set, zero value otherwise.
func (o *N2InformationNotification) GetAnN2IPv6Addr() Ipv6Addr {
	if o == nil || isNil(o.AnN2IPv6Addr) {
		var ret Ipv6Addr
		return ret
	}
	return *o.AnN2IPv6Addr
}

// GetAnN2IPv6AddrOk returns a tuple with the AnN2IPv6Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetAnN2IPv6AddrOk() (*Ipv6Addr, bool) {
	if o == nil || isNil(o.AnN2IPv6Addr) {
		return nil, false
	}
	return o.AnN2IPv6Addr, true
}

// HasAnN2IPv6Addr returns a boolean if a field has been set.
func (o *N2InformationNotification) HasAnN2IPv6Addr() bool {
	if o != nil && !isNil(o.AnN2IPv6Addr) {
		return true
	}

	return false
}

// SetAnN2IPv6Addr gets a reference to the given Ipv6Addr and assigns it to the AnN2IPv6Addr field.
func (o *N2InformationNotification) SetAnN2IPv6Addr(v Ipv6Addr) {
	o.AnN2IPv6Addr = &v
}

// GetGuami returns the Guami field value if set, zero value otherwise.
func (o *N2InformationNotification) GetGuami() Guami {
	if o == nil || isNil(o.Guami) {
		var ret Guami
		return ret
	}
	return *o.Guami
}

// GetGuamiOk returns a tuple with the Guami field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetGuamiOk() (*Guami, bool) {
	if o == nil || isNil(o.Guami) {
		return nil, false
	}
	return o.Guami, true
}

// HasGuami returns a boolean if a field has been set.
func (o *N2InformationNotification) HasGuami() bool {
	if o != nil && !isNil(o.Guami) {
		return true
	}

	return false
}

// SetGuami gets a reference to the given Guami and assigns it to the Guami field.
func (o *N2InformationNotification) SetGuami(v Guami) {
	o.Guami = &v
}

// GetNotifySourceNgRan returns the NotifySourceNgRan field value if set, zero value otherwise.
func (o *N2InformationNotification) GetNotifySourceNgRan() bool {
	if o == nil || isNil(o.NotifySourceNgRan) {
		var ret bool
		return ret
	}
	return *o.NotifySourceNgRan
}

// GetNotifySourceNgRanOk returns a tuple with the NotifySourceNgRan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationNotification) GetNotifySourceNgRanOk() (*bool, bool) {
	if o == nil || isNil(o.NotifySourceNgRan) {
		return nil, false
	}
	return o.NotifySourceNgRan, true
}

// HasNotifySourceNgRan returns a boolean if a field has been set.
func (o *N2InformationNotification) HasNotifySourceNgRan() bool {
	if o != nil && !isNil(o.NotifySourceNgRan) {
		return true
	}

	return false
}

// SetNotifySourceNgRan gets a reference to the given bool and assigns it to the NotifySourceNgRan field.
func (o *N2InformationNotification) SetNotifySourceNgRan(v bool) {
	o.NotifySourceNgRan = &v
}

func (o N2InformationNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o N2InformationNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["n2NotifySubscriptionId"] = o.N2NotifySubscriptionId
	if !isNil(o.N2InfoContainer) {
		toSerialize["n2InfoContainer"] = o.N2InfoContainer
	}
	if !isNil(o.ToReleaseSessionList) {
		toSerialize["toReleaseSessionList"] = o.ToReleaseSessionList
	}
	if !isNil(o.LcsCorrelationId) {
		toSerialize["lcsCorrelationId"] = o.LcsCorrelationId
	}
	if !isNil(o.NotifyReason) {
		toSerialize["notifyReason"] = o.NotifyReason
	}
	if !isNil(o.SmfChangeInfoList) {
		toSerialize["smfChangeInfoList"] = o.SmfChangeInfoList
	}
	if !isNil(o.RanNodeId) {
		toSerialize["ranNodeId"] = o.RanNodeId
	}
	if !isNil(o.InitialAmfName) {
		toSerialize["initialAmfName"] = o.InitialAmfName
	}
	if !isNil(o.AnN2IPv4Addr) {
		toSerialize["anN2IPv4Addr"] = o.AnN2IPv4Addr
	}
	if !isNil(o.AnN2IPv6Addr) {
		toSerialize["anN2IPv6Addr"] = o.AnN2IPv6Addr
	}
	if !isNil(o.Guami) {
		toSerialize["guami"] = o.Guami
	}
	if !isNil(o.NotifySourceNgRan) {
		toSerialize["notifySourceNgRan"] = o.NotifySourceNgRan
	}
	return toSerialize, nil
}

type NullableN2InformationNotification struct {
	value *N2InformationNotification
	isSet bool
}

func (v NullableN2InformationNotification) Get() *N2InformationNotification {
	return v.value
}

func (v *NullableN2InformationNotification) Set(val *N2InformationNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableN2InformationNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableN2InformationNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableN2InformationNotification(val *N2InformationNotification) *NullableN2InformationNotification {
	return &NullableN2InformationNotification{value: val, isSet: true}
}

func (v NullableN2InformationNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableN2InformationNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


