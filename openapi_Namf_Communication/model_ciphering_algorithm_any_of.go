/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
	"fmt"
)

// CipheringAlgorithmAnyOf the model 'CipheringAlgorithmAnyOf'
type CipheringAlgorithmAnyOf string

// List of CipheringAlgorithm_anyOf
const (
	NEA0 CipheringAlgorithmAnyOf = "NEA0"
	NEA1 CipheringAlgorithmAnyOf = "NEA1"
	NEA2 CipheringAlgorithmAnyOf = "NEA2"
	NEA3 CipheringAlgorithmAnyOf = "NEA3"
)

// All allowed values of CipheringAlgorithmAnyOf enum
var AllowedCipheringAlgorithmAnyOfEnumValues = []CipheringAlgorithmAnyOf{
	"NEA0",
	"NEA1",
	"NEA2",
	"NEA3",
}

func (v *CipheringAlgorithmAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CipheringAlgorithmAnyOf(value)
	for _, existing := range AllowedCipheringAlgorithmAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CipheringAlgorithmAnyOf", value)
}

// NewCipheringAlgorithmAnyOfFromValue returns a pointer to a valid CipheringAlgorithmAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCipheringAlgorithmAnyOfFromValue(v string) (*CipheringAlgorithmAnyOf, error) {
	ev := CipheringAlgorithmAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CipheringAlgorithmAnyOf: valid values are %v", v, AllowedCipheringAlgorithmAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CipheringAlgorithmAnyOf) IsValid() bool {
	for _, existing := range AllowedCipheringAlgorithmAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CipheringAlgorithm_anyOf value
func (v CipheringAlgorithmAnyOf) Ptr() *CipheringAlgorithmAnyOf {
	return &v
}

type NullableCipheringAlgorithmAnyOf struct {
	value *CipheringAlgorithmAnyOf
	isSet bool
}

func (v NullableCipheringAlgorithmAnyOf) Get() *CipheringAlgorithmAnyOf {
	return v.value
}

func (v *NullableCipheringAlgorithmAnyOf) Set(val *CipheringAlgorithmAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCipheringAlgorithmAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCipheringAlgorithmAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCipheringAlgorithmAnyOf(val *CipheringAlgorithmAnyOf) *NullableCipheringAlgorithmAnyOf {
	return &NullableCipheringAlgorithmAnyOf{value: val, isSet: true}
}

func (v NullableCipheringAlgorithmAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCipheringAlgorithmAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

