/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
	"time"
)

// checks if the UeDifferentiationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UeDifferentiationInfo{}

// UeDifferentiationInfo Represents the UE Differentiation Information and its validity time
type UeDifferentiationInfo struct {
	PeriodicComInd *PeriodicCommunicationIndicator `json:"periodicComInd,omitempty"`
	// indicating a time in seconds.
	PeriodicTime *int32 `json:"periodicTime,omitempty"`
	ScheduledComTime *ScheduledCommunicationTime `json:"scheduledComTime,omitempty"`
	StationaryInd *StationaryIndication `json:"stationaryInd,omitempty"`
	TrafficProfile *TrafficProfile `json:"trafficProfile,omitempty"`
	BatteryInd *BatteryIndication `json:"batteryInd,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	ValidityTime *time.Time `json:"validityTime,omitempty"`
}

// NewUeDifferentiationInfo instantiates a new UeDifferentiationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeDifferentiationInfo() *UeDifferentiationInfo {
	this := UeDifferentiationInfo{}
	return &this
}

// NewUeDifferentiationInfoWithDefaults instantiates a new UeDifferentiationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeDifferentiationInfoWithDefaults() *UeDifferentiationInfo {
	this := UeDifferentiationInfo{}
	return &this
}

// GetPeriodicComInd returns the PeriodicComInd field value if set, zero value otherwise.
func (o *UeDifferentiationInfo) GetPeriodicComInd() PeriodicCommunicationIndicator {
	if o == nil || isNil(o.PeriodicComInd) {
		var ret PeriodicCommunicationIndicator
		return ret
	}
	return *o.PeriodicComInd
}

// GetPeriodicComIndOk returns a tuple with the PeriodicComInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeDifferentiationInfo) GetPeriodicComIndOk() (*PeriodicCommunicationIndicator, bool) {
	if o == nil || isNil(o.PeriodicComInd) {
		return nil, false
	}
	return o.PeriodicComInd, true
}

// HasPeriodicComInd returns a boolean if a field has been set.
func (o *UeDifferentiationInfo) HasPeriodicComInd() bool {
	if o != nil && !isNil(o.PeriodicComInd) {
		return true
	}

	return false
}

// SetPeriodicComInd gets a reference to the given PeriodicCommunicationIndicator and assigns it to the PeriodicComInd field.
func (o *UeDifferentiationInfo) SetPeriodicComInd(v PeriodicCommunicationIndicator) {
	o.PeriodicComInd = &v
}

// GetPeriodicTime returns the PeriodicTime field value if set, zero value otherwise.
func (o *UeDifferentiationInfo) GetPeriodicTime() int32 {
	if o == nil || isNil(o.PeriodicTime) {
		var ret int32
		return ret
	}
	return *o.PeriodicTime
}

// GetPeriodicTimeOk returns a tuple with the PeriodicTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeDifferentiationInfo) GetPeriodicTimeOk() (*int32, bool) {
	if o == nil || isNil(o.PeriodicTime) {
		return nil, false
	}
	return o.PeriodicTime, true
}

// HasPeriodicTime returns a boolean if a field has been set.
func (o *UeDifferentiationInfo) HasPeriodicTime() bool {
	if o != nil && !isNil(o.PeriodicTime) {
		return true
	}

	return false
}

// SetPeriodicTime gets a reference to the given int32 and assigns it to the PeriodicTime field.
func (o *UeDifferentiationInfo) SetPeriodicTime(v int32) {
	o.PeriodicTime = &v
}

// GetScheduledComTime returns the ScheduledComTime field value if set, zero value otherwise.
func (o *UeDifferentiationInfo) GetScheduledComTime() ScheduledCommunicationTime {
	if o == nil || isNil(o.ScheduledComTime) {
		var ret ScheduledCommunicationTime
		return ret
	}
	return *o.ScheduledComTime
}

// GetScheduledComTimeOk returns a tuple with the ScheduledComTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeDifferentiationInfo) GetScheduledComTimeOk() (*ScheduledCommunicationTime, bool) {
	if o == nil || isNil(o.ScheduledComTime) {
		return nil, false
	}
	return o.ScheduledComTime, true
}

// HasScheduledComTime returns a boolean if a field has been set.
func (o *UeDifferentiationInfo) HasScheduledComTime() bool {
	if o != nil && !isNil(o.ScheduledComTime) {
		return true
	}

	return false
}

// SetScheduledComTime gets a reference to the given ScheduledCommunicationTime and assigns it to the ScheduledComTime field.
func (o *UeDifferentiationInfo) SetScheduledComTime(v ScheduledCommunicationTime) {
	o.ScheduledComTime = &v
}

// GetStationaryInd returns the StationaryInd field value if set, zero value otherwise.
func (o *UeDifferentiationInfo) GetStationaryInd() StationaryIndication {
	if o == nil || isNil(o.StationaryInd) {
		var ret StationaryIndication
		return ret
	}
	return *o.StationaryInd
}

// GetStationaryIndOk returns a tuple with the StationaryInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeDifferentiationInfo) GetStationaryIndOk() (*StationaryIndication, bool) {
	if o == nil || isNil(o.StationaryInd) {
		return nil, false
	}
	return o.StationaryInd, true
}

// HasStationaryInd returns a boolean if a field has been set.
func (o *UeDifferentiationInfo) HasStationaryInd() bool {
	if o != nil && !isNil(o.StationaryInd) {
		return true
	}

	return false
}

// SetStationaryInd gets a reference to the given StationaryIndication and assigns it to the StationaryInd field.
func (o *UeDifferentiationInfo) SetStationaryInd(v StationaryIndication) {
	o.StationaryInd = &v
}

// GetTrafficProfile returns the TrafficProfile field value if set, zero value otherwise.
func (o *UeDifferentiationInfo) GetTrafficProfile() TrafficProfile {
	if o == nil || isNil(o.TrafficProfile) {
		var ret TrafficProfile
		return ret
	}
	return *o.TrafficProfile
}

// GetTrafficProfileOk returns a tuple with the TrafficProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeDifferentiationInfo) GetTrafficProfileOk() (*TrafficProfile, bool) {
	if o == nil || isNil(o.TrafficProfile) {
		return nil, false
	}
	return o.TrafficProfile, true
}

// HasTrafficProfile returns a boolean if a field has been set.
func (o *UeDifferentiationInfo) HasTrafficProfile() bool {
	if o != nil && !isNil(o.TrafficProfile) {
		return true
	}

	return false
}

// SetTrafficProfile gets a reference to the given TrafficProfile and assigns it to the TrafficProfile field.
func (o *UeDifferentiationInfo) SetTrafficProfile(v TrafficProfile) {
	o.TrafficProfile = &v
}

// GetBatteryInd returns the BatteryInd field value if set, zero value otherwise.
func (o *UeDifferentiationInfo) GetBatteryInd() BatteryIndication {
	if o == nil || isNil(o.BatteryInd) {
		var ret BatteryIndication
		return ret
	}
	return *o.BatteryInd
}

// GetBatteryIndOk returns a tuple with the BatteryInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeDifferentiationInfo) GetBatteryIndOk() (*BatteryIndication, bool) {
	if o == nil || isNil(o.BatteryInd) {
		return nil, false
	}
	return o.BatteryInd, true
}

// HasBatteryInd returns a boolean if a field has been set.
func (o *UeDifferentiationInfo) HasBatteryInd() bool {
	if o != nil && !isNil(o.BatteryInd) {
		return true
	}

	return false
}

// SetBatteryInd gets a reference to the given BatteryIndication and assigns it to the BatteryInd field.
func (o *UeDifferentiationInfo) SetBatteryInd(v BatteryIndication) {
	o.BatteryInd = &v
}

// GetValidityTime returns the ValidityTime field value if set, zero value otherwise.
func (o *UeDifferentiationInfo) GetValidityTime() time.Time {
	if o == nil || isNil(o.ValidityTime) {
		var ret time.Time
		return ret
	}
	return *o.ValidityTime
}

// GetValidityTimeOk returns a tuple with the ValidityTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeDifferentiationInfo) GetValidityTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.ValidityTime) {
		return nil, false
	}
	return o.ValidityTime, true
}

// HasValidityTime returns a boolean if a field has been set.
func (o *UeDifferentiationInfo) HasValidityTime() bool {
	if o != nil && !isNil(o.ValidityTime) {
		return true
	}

	return false
}

// SetValidityTime gets a reference to the given time.Time and assigns it to the ValidityTime field.
func (o *UeDifferentiationInfo) SetValidityTime(v time.Time) {
	o.ValidityTime = &v
}

func (o UeDifferentiationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UeDifferentiationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PeriodicComInd) {
		toSerialize["periodicComInd"] = o.PeriodicComInd
	}
	if !isNil(o.PeriodicTime) {
		toSerialize["periodicTime"] = o.PeriodicTime
	}
	if !isNil(o.ScheduledComTime) {
		toSerialize["scheduledComTime"] = o.ScheduledComTime
	}
	if !isNil(o.StationaryInd) {
		toSerialize["stationaryInd"] = o.StationaryInd
	}
	if !isNil(o.TrafficProfile) {
		toSerialize["trafficProfile"] = o.TrafficProfile
	}
	if !isNil(o.BatteryInd) {
		toSerialize["batteryInd"] = o.BatteryInd
	}
	if !isNil(o.ValidityTime) {
		toSerialize["validityTime"] = o.ValidityTime
	}
	return toSerialize, nil
}

type NullableUeDifferentiationInfo struct {
	value *UeDifferentiationInfo
	isSet bool
}

func (v NullableUeDifferentiationInfo) Get() *UeDifferentiationInfo {
	return v.value
}

func (v *NullableUeDifferentiationInfo) Set(val *UeDifferentiationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUeDifferentiationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUeDifferentiationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeDifferentiationInfo(val *UeDifferentiationInfo) *NullableUeDifferentiationInfo {
	return &NullableUeDifferentiationInfo{value: val, isSet: true}
}

func (v NullableUeDifferentiationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeDifferentiationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


