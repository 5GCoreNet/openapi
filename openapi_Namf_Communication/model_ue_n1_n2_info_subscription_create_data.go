/*
Namf_Communication

AMF Communication Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the UeN1N2InfoSubscriptionCreateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UeN1N2InfoSubscriptionCreateData{}

// UeN1N2InfoSubscriptionCreateData Data within a create subscription request for UE specific N1 and/or N2 information notification
type UeN1N2InfoSubscriptionCreateData struct {
	N2InformationClass *N2InformationClass `json:"n2InformationClass,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	N2NotifyCallbackUri *string         `json:"n2NotifyCallbackUri,omitempty"`
	N1MessageClass      *N1MessageClass `json:"n1MessageClass,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	N1NotifyCallbackUri *string `json:"n1NotifyCallbackUri,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	NfId *string `json:"nfId,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	OldGuami          *Guami  `json:"oldGuami,omitempty"`
}

// NewUeN1N2InfoSubscriptionCreateData instantiates a new UeN1N2InfoSubscriptionCreateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeN1N2InfoSubscriptionCreateData() *UeN1N2InfoSubscriptionCreateData {
	this := UeN1N2InfoSubscriptionCreateData{}
	return &this
}

// NewUeN1N2InfoSubscriptionCreateDataWithDefaults instantiates a new UeN1N2InfoSubscriptionCreateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeN1N2InfoSubscriptionCreateDataWithDefaults() *UeN1N2InfoSubscriptionCreateData {
	this := UeN1N2InfoSubscriptionCreateData{}
	return &this
}

// GetN2InformationClass returns the N2InformationClass field value if set, zero value otherwise.
func (o *UeN1N2InfoSubscriptionCreateData) GetN2InformationClass() N2InformationClass {
	if o == nil || IsNil(o.N2InformationClass) {
		var ret N2InformationClass
		return ret
	}
	return *o.N2InformationClass
}

// GetN2InformationClassOk returns a tuple with the N2InformationClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeN1N2InfoSubscriptionCreateData) GetN2InformationClassOk() (*N2InformationClass, bool) {
	if o == nil || IsNil(o.N2InformationClass) {
		return nil, false
	}
	return o.N2InformationClass, true
}

// HasN2InformationClass returns a boolean if a field has been set.
func (o *UeN1N2InfoSubscriptionCreateData) HasN2InformationClass() bool {
	if o != nil && !IsNil(o.N2InformationClass) {
		return true
	}

	return false
}

// SetN2InformationClass gets a reference to the given N2InformationClass and assigns it to the N2InformationClass field.
func (o *UeN1N2InfoSubscriptionCreateData) SetN2InformationClass(v N2InformationClass) {
	o.N2InformationClass = &v
}

// GetN2NotifyCallbackUri returns the N2NotifyCallbackUri field value if set, zero value otherwise.
func (o *UeN1N2InfoSubscriptionCreateData) GetN2NotifyCallbackUri() string {
	if o == nil || IsNil(o.N2NotifyCallbackUri) {
		var ret string
		return ret
	}
	return *o.N2NotifyCallbackUri
}

// GetN2NotifyCallbackUriOk returns a tuple with the N2NotifyCallbackUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeN1N2InfoSubscriptionCreateData) GetN2NotifyCallbackUriOk() (*string, bool) {
	if o == nil || IsNil(o.N2NotifyCallbackUri) {
		return nil, false
	}
	return o.N2NotifyCallbackUri, true
}

// HasN2NotifyCallbackUri returns a boolean if a field has been set.
func (o *UeN1N2InfoSubscriptionCreateData) HasN2NotifyCallbackUri() bool {
	if o != nil && !IsNil(o.N2NotifyCallbackUri) {
		return true
	}

	return false
}

// SetN2NotifyCallbackUri gets a reference to the given string and assigns it to the N2NotifyCallbackUri field.
func (o *UeN1N2InfoSubscriptionCreateData) SetN2NotifyCallbackUri(v string) {
	o.N2NotifyCallbackUri = &v
}

// GetN1MessageClass returns the N1MessageClass field value if set, zero value otherwise.
func (o *UeN1N2InfoSubscriptionCreateData) GetN1MessageClass() N1MessageClass {
	if o == nil || IsNil(o.N1MessageClass) {
		var ret N1MessageClass
		return ret
	}
	return *o.N1MessageClass
}

// GetN1MessageClassOk returns a tuple with the N1MessageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeN1N2InfoSubscriptionCreateData) GetN1MessageClassOk() (*N1MessageClass, bool) {
	if o == nil || IsNil(o.N1MessageClass) {
		return nil, false
	}
	return o.N1MessageClass, true
}

// HasN1MessageClass returns a boolean if a field has been set.
func (o *UeN1N2InfoSubscriptionCreateData) HasN1MessageClass() bool {
	if o != nil && !IsNil(o.N1MessageClass) {
		return true
	}

	return false
}

// SetN1MessageClass gets a reference to the given N1MessageClass and assigns it to the N1MessageClass field.
func (o *UeN1N2InfoSubscriptionCreateData) SetN1MessageClass(v N1MessageClass) {
	o.N1MessageClass = &v
}

// GetN1NotifyCallbackUri returns the N1NotifyCallbackUri field value if set, zero value otherwise.
func (o *UeN1N2InfoSubscriptionCreateData) GetN1NotifyCallbackUri() string {
	if o == nil || IsNil(o.N1NotifyCallbackUri) {
		var ret string
		return ret
	}
	return *o.N1NotifyCallbackUri
}

// GetN1NotifyCallbackUriOk returns a tuple with the N1NotifyCallbackUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeN1N2InfoSubscriptionCreateData) GetN1NotifyCallbackUriOk() (*string, bool) {
	if o == nil || IsNil(o.N1NotifyCallbackUri) {
		return nil, false
	}
	return o.N1NotifyCallbackUri, true
}

// HasN1NotifyCallbackUri returns a boolean if a field has been set.
func (o *UeN1N2InfoSubscriptionCreateData) HasN1NotifyCallbackUri() bool {
	if o != nil && !IsNil(o.N1NotifyCallbackUri) {
		return true
	}

	return false
}

// SetN1NotifyCallbackUri gets a reference to the given string and assigns it to the N1NotifyCallbackUri field.
func (o *UeN1N2InfoSubscriptionCreateData) SetN1NotifyCallbackUri(v string) {
	o.N1NotifyCallbackUri = &v
}

// GetNfId returns the NfId field value if set, zero value otherwise.
func (o *UeN1N2InfoSubscriptionCreateData) GetNfId() string {
	if o == nil || IsNil(o.NfId) {
		var ret string
		return ret
	}
	return *o.NfId
}

// GetNfIdOk returns a tuple with the NfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeN1N2InfoSubscriptionCreateData) GetNfIdOk() (*string, bool) {
	if o == nil || IsNil(o.NfId) {
		return nil, false
	}
	return o.NfId, true
}

// HasNfId returns a boolean if a field has been set.
func (o *UeN1N2InfoSubscriptionCreateData) HasNfId() bool {
	if o != nil && !IsNil(o.NfId) {
		return true
	}

	return false
}

// SetNfId gets a reference to the given string and assigns it to the NfId field.
func (o *UeN1N2InfoSubscriptionCreateData) SetNfId(v string) {
	o.NfId = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *UeN1N2InfoSubscriptionCreateData) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeN1N2InfoSubscriptionCreateData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *UeN1N2InfoSubscriptionCreateData) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *UeN1N2InfoSubscriptionCreateData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetOldGuami returns the OldGuami field value if set, zero value otherwise.
func (o *UeN1N2InfoSubscriptionCreateData) GetOldGuami() Guami {
	if o == nil || IsNil(o.OldGuami) {
		var ret Guami
		return ret
	}
	return *o.OldGuami
}

// GetOldGuamiOk returns a tuple with the OldGuami field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeN1N2InfoSubscriptionCreateData) GetOldGuamiOk() (*Guami, bool) {
	if o == nil || IsNil(o.OldGuami) {
		return nil, false
	}
	return o.OldGuami, true
}

// HasOldGuami returns a boolean if a field has been set.
func (o *UeN1N2InfoSubscriptionCreateData) HasOldGuami() bool {
	if o != nil && !IsNil(o.OldGuami) {
		return true
	}

	return false
}

// SetOldGuami gets a reference to the given Guami and assigns it to the OldGuami field.
func (o *UeN1N2InfoSubscriptionCreateData) SetOldGuami(v Guami) {
	o.OldGuami = &v
}

func (o UeN1N2InfoSubscriptionCreateData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UeN1N2InfoSubscriptionCreateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.N2InformationClass) {
		toSerialize["n2InformationClass"] = o.N2InformationClass
	}
	if !IsNil(o.N2NotifyCallbackUri) {
		toSerialize["n2NotifyCallbackUri"] = o.N2NotifyCallbackUri
	}
	if !IsNil(o.N1MessageClass) {
		toSerialize["n1MessageClass"] = o.N1MessageClass
	}
	if !IsNil(o.N1NotifyCallbackUri) {
		toSerialize["n1NotifyCallbackUri"] = o.N1NotifyCallbackUri
	}
	if !IsNil(o.NfId) {
		toSerialize["nfId"] = o.NfId
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !IsNil(o.OldGuami) {
		toSerialize["oldGuami"] = o.OldGuami
	}
	return toSerialize, nil
}

type NullableUeN1N2InfoSubscriptionCreateData struct {
	value *UeN1N2InfoSubscriptionCreateData
	isSet bool
}

func (v NullableUeN1N2InfoSubscriptionCreateData) Get() *UeN1N2InfoSubscriptionCreateData {
	return v.value
}

func (v *NullableUeN1N2InfoSubscriptionCreateData) Set(val *UeN1N2InfoSubscriptionCreateData) {
	v.value = val
	v.isSet = true
}

func (v NullableUeN1N2InfoSubscriptionCreateData) IsSet() bool {
	return v.isSet
}

func (v *NullableUeN1N2InfoSubscriptionCreateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeN1N2InfoSubscriptionCreateData(val *UeN1N2InfoSubscriptionCreateData) *NullableUeN1N2InfoSubscriptionCreateData {
	return &NullableUeN1N2InfoSubscriptionCreateData{value: val, isSet: true}
}

func (v NullableUeN1N2InfoSubscriptionCreateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeN1N2InfoSubscriptionCreateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
