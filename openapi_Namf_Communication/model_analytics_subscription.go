/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the AnalyticsSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsSubscription{}

// AnalyticsSubscription Analytics subscriptions created in the NWDAF.
type AnalyticsSubscription struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NwdafId *string `json:"nwdafId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	NwdafSetId *string `json:"nwdafSetId,omitempty"`
	NwdafSubscriptionList []NwdafSubscription `json:"nwdafSubscriptionList"`
}

// NewAnalyticsSubscription instantiates a new AnalyticsSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsSubscription(nwdafSubscriptionList []NwdafSubscription) *AnalyticsSubscription {
	this := AnalyticsSubscription{}
	this.NwdafSubscriptionList = nwdafSubscriptionList
	return &this
}

// NewAnalyticsSubscriptionWithDefaults instantiates a new AnalyticsSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsSubscriptionWithDefaults() *AnalyticsSubscription {
	this := AnalyticsSubscription{}
	return &this
}

// GetNwdafId returns the NwdafId field value if set, zero value otherwise.
func (o *AnalyticsSubscription) GetNwdafId() string {
	if o == nil || IsNil(o.NwdafId) {
		var ret string
		return ret
	}
	return *o.NwdafId
}

// GetNwdafIdOk returns a tuple with the NwdafId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsSubscription) GetNwdafIdOk() (*string, bool) {
	if o == nil || IsNil(o.NwdafId) {
		return nil, false
	}
	return o.NwdafId, true
}

// HasNwdafId returns a boolean if a field has been set.
func (o *AnalyticsSubscription) HasNwdafId() bool {
	if o != nil && !IsNil(o.NwdafId) {
		return true
	}

	return false
}

// SetNwdafId gets a reference to the given string and assigns it to the NwdafId field.
func (o *AnalyticsSubscription) SetNwdafId(v string) {
	o.NwdafId = &v
}

// GetNwdafSetId returns the NwdafSetId field value if set, zero value otherwise.
func (o *AnalyticsSubscription) GetNwdafSetId() string {
	if o == nil || IsNil(o.NwdafSetId) {
		var ret string
		return ret
	}
	return *o.NwdafSetId
}

// GetNwdafSetIdOk returns a tuple with the NwdafSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsSubscription) GetNwdafSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.NwdafSetId) {
		return nil, false
	}
	return o.NwdafSetId, true
}

// HasNwdafSetId returns a boolean if a field has been set.
func (o *AnalyticsSubscription) HasNwdafSetId() bool {
	if o != nil && !IsNil(o.NwdafSetId) {
		return true
	}

	return false
}

// SetNwdafSetId gets a reference to the given string and assigns it to the NwdafSetId field.
func (o *AnalyticsSubscription) SetNwdafSetId(v string) {
	o.NwdafSetId = &v
}

// GetNwdafSubscriptionList returns the NwdafSubscriptionList field value
func (o *AnalyticsSubscription) GetNwdafSubscriptionList() []NwdafSubscription {
	if o == nil {
		var ret []NwdafSubscription
		return ret
	}

	return o.NwdafSubscriptionList
}

// GetNwdafSubscriptionListOk returns a tuple with the NwdafSubscriptionList field value
// and a boolean to check if the value has been set.
func (o *AnalyticsSubscription) GetNwdafSubscriptionListOk() ([]NwdafSubscription, bool) {
	if o == nil {
		return nil, false
	}
	return o.NwdafSubscriptionList, true
}

// SetNwdafSubscriptionList sets field value
func (o *AnalyticsSubscription) SetNwdafSubscriptionList(v []NwdafSubscription) {
	o.NwdafSubscriptionList = v
}

func (o AnalyticsSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NwdafId) {
		toSerialize["nwdafId"] = o.NwdafId
	}
	if !IsNil(o.NwdafSetId) {
		toSerialize["nwdafSetId"] = o.NwdafSetId
	}
	toSerialize["nwdafSubscriptionList"] = o.NwdafSubscriptionList
	return toSerialize, nil
}

type NullableAnalyticsSubscription struct {
	value *AnalyticsSubscription
	isSet bool
}

func (v NullableAnalyticsSubscription) Get() *AnalyticsSubscription {
	return v.value
}

func (v *NullableAnalyticsSubscription) Set(val *AnalyticsSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsSubscription(val *AnalyticsSubscription) *NullableAnalyticsSubscription {
	return &NullableAnalyticsSubscription{value: val, isSet: true}
}

func (v NullableAnalyticsSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


