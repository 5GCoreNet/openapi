/*
Namf_Communication

AMF Communication Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
	"time"
)

// checks if the UeContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UeContext{}

// UeContext Represents an individual ueContext resource
type UeContext struct {
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi *string `json:"supi,omitempty"`
	SupiUnauthInd *bool `json:"supiUnauthInd,omitempty"`
	GpsiList []string `json:"gpsiList,omitempty"`
	// String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.  
	Pei *string `json:"pei,omitempty"`
	// Identifier of a group of NFs.
	UdmGroupId *string `json:"udmGroupId,omitempty"`
	// Identifier of a group of NFs.
	AusfGroupId *string `json:"ausfGroupId,omitempty"`
	// Identifier of a group of NFs.
	PcfGroupId *string `json:"pcfGroupId,omitempty"`
	RoutingIndicator *string `json:"routingIndicator,omitempty"`
	HNwPubKeyId *int32 `json:"hNwPubKeyId,omitempty"`
	GroupList []string `json:"groupList,omitempty"`
	// string with format 'bytes' as defined in OpenAPI
	DrxParameter *string `json:"drxParameter,omitempty"`
	// Unsigned integer representing the \"Subscriber Profile ID for RAT/Frequency Priority\"  as specified in 3GPP TS 36.413. 
	SubRfsp *int32 `json:"subRfsp,omitempty"`
	// Unsigned integer representing the \"Subscriber Profile ID for RAT/Frequency Priority\"  as specified in 3GPP TS 36.413. 
	UsedRfsp *int32 `json:"usedRfsp,omitempty"`
	SubUeAmbr *Ambr `json:"subUeAmbr,omitempty"`
	// A map(list of key-value pairs) where Snssai serves as key.
	SubUeSliceMbrList *map[string]SliceMbr `json:"subUeSliceMbrList,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	SmsfId *string `json:"smsfId,omitempty"`
	SeafData *SeafData `json:"seafData,omitempty"`
	// string with format 'bytes' as defined in OpenAPI
	Var5gMmCapability *string `json:"5gMmCapability,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	PcfId *string `json:"pcfId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	PcfSetId *string `json:"pcfSetId,omitempty"`
	// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string \"set<Set ID>.sn<Service Name>.nfi<NF Instance ID>.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)   <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NID> encoded as defined in clause 5.4.2 (\"Nid\" data type definition)  <NFInstanceId> encoded as defined in clause 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510  <Set ID> encoded as a string of characters consisting of alphabetic    characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end    with either an alphabetic character or a digit. 
	PcfAmpServiceSetId *string `json:"pcfAmpServiceSetId,omitempty"`
	// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string \"set<Set ID>.sn<Service Name>.nfi<NF Instance ID>.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)   <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NID> encoded as defined in clause 5.4.2 (\"Nid\" data type definition)  <NFInstanceId> encoded as defined in clause 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510  <Set ID> encoded as a string of characters consisting of alphabetic    characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end    with either an alphabetic character or a digit. 
	PcfUepServiceSetId *string `json:"pcfUepServiceSetId,omitempty"`
	PcfBinding *SbiBindingLevel `json:"pcfBinding,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	PcfAmPolicyUri *string `json:"pcfAmPolicyUri,omitempty"`
	AmPolicyReqTriggerList []PolicyReqTrigger `json:"amPolicyReqTriggerList,omitempty"`
	// String providing an URI formatted according to RFC 3986.
	PcfUePolicyUri *string `json:"pcfUePolicyUri,omitempty"`
	UePolicyReqTriggerList []PolicyReqTrigger `json:"uePolicyReqTriggerList,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	HpcfId *string `json:"hpcfId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	HpcfSetId *string `json:"hpcfSetId,omitempty"`
	RestrictedRatList []RatType `json:"restrictedRatList,omitempty"`
	ForbiddenAreaList []Area `json:"forbiddenAreaList,omitempty"`
	ServiceAreaRestriction *ServiceAreaRestriction `json:"serviceAreaRestriction,omitempty"`
	RestrictedCoreNwTypeList []CoreNetworkType `json:"restrictedCoreNwTypeList,omitempty"`
	EventSubscriptionList []ExtAmfEventSubscription `json:"eventSubscriptionList,omitempty"`
	MmContextList []MmContext `json:"mmContextList,omitempty"`
	SessionContextList []PduSessionContext `json:"sessionContextList,omitempty"`
	EpsInterworkingInfo *EpsInterworkingInfo `json:"epsInterworkingInfo,omitempty"`
	TraceData NullableTraceData `json:"traceData,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	ServiceGapExpiryTime *time.Time `json:"serviceGapExpiryTime,omitempty"`
	// String representing the STN-SR as defined in clause 18.6 of 3GPP TS 23.003.
	StnSr *string `json:"stnSr,omitempty"`
	// String representing the C-MSISDN as defined in clause 18.7 of 3GPP TS 23.003.
	CMsisdn *string `json:"cMsisdn,omitempty"`
	// string with format 'bytes' as defined in OpenAPI
	MsClassmark2 *string `json:"msClassmark2,omitempty"`
	SupportedCodecList []string `json:"supportedCodecList,omitempty"`
	SmallDataRateStatusInfos []SmallDataRateStatusInfo `json:"smallDataRateStatusInfos,omitempty"`
	RestrictedPrimaryRatList []RatType `json:"restrictedPrimaryRatList,omitempty"`
	RestrictedSecondaryRatList []RatType `json:"restrictedSecondaryRatList,omitempty"`
	V2xContext *V2xContext `json:"v2xContext,omitempty"`
	LteCatMInd *bool `json:"lteCatMInd,omitempty"`
	RedCapInd *bool `json:"redCapInd,omitempty"`
	MoExpDataCounter *MoExpDataCounter `json:"moExpDataCounter,omitempty"`
	CagData *CagData `json:"cagData,omitempty"`
	ManagementMdtInd *bool `json:"managementMdtInd,omitempty"`
	ImmediateMdtConf *ImmediateMdtConf `json:"immediateMdtConf,omitempty"`
	EcRestrictionDataWb *EcRestrictionDataWb `json:"ecRestrictionDataWb,omitempty"`
	EcRestrictionDataNb *bool `json:"ecRestrictionDataNb,omitempty"`
	IabOperationAllowed *bool `json:"iabOperationAllowed,omitempty"`
	ProseContext *ProseContext `json:"proseContext,omitempty"`
	AnalyticsSubscriptionList []AnalyticsSubscription `json:"analyticsSubscriptionList,omitempty"`
	PcfAmpBindingInfo *string `json:"pcfAmpBindingInfo,omitempty"`
	PcfUepBindingInfo *string `json:"pcfUepBindingInfo,omitempty"`
	UsedServiceAreaRestriction *ServiceAreaRestriction `json:"usedServiceAreaRestriction,omitempty"`
	// A map(list of key-value pairs) where praId serves as key.
	PraInAmPolicy *map[string]PresenceInfo `json:"praInAmPolicy,omitempty"`
	// A map(list of key-value pairs) where praId serves as key.
	PraInUePolicy *map[string]PresenceInfo `json:"praInUePolicy,omitempty"`
	UpdpSubscriptionData *UpdpSubscriptionData `json:"updpSubscriptionData,omitempty"`
	SmPolicyNotifyPduList []PduSessionInfo `json:"smPolicyNotifyPduList,omitempty"`
	PcfUeCallbackInfo NullablePcfUeCallbackInfo `json:"pcfUeCallbackInfo,omitempty"`
	// Positioning capabilities supported by the UE. A string encoding the \"ProvideCapabilities-r9-IEs\" IE as specified in clause 6.3 of 3GPP TS 37.355 (start from octet 1).
	UePositioningCap *string `json:"uePositioningCap,omitempty"`
	AstiDistributionIndication *bool `json:"astiDistributionIndication,omitempty"`
	TsErrorBudget *int32 `json:"tsErrorBudget,omitempty"`
	SnpnOnboardInd *bool `json:"snpnOnboardInd,omitempty"`
	SmfSelInfo NullableSmfSelectionData `json:"smfSelInfo,omitempty"`
	// A map(list of key-value pairs) where Snssai serves as key.
	PcfUeSliceMbrList *map[string]SliceMbr `json:"pcfUeSliceMbrList,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	SmsfSetId *string `json:"smsfSetId,omitempty"`
	// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string \"set<Set ID>.sn<Service Name>.nfi<NF Instance ID>.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)   <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NID> encoded as defined in clause 5.4.2 (\"Nid\" data type definition)  <NFInstanceId> encoded as defined in clause 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510  <Set ID> encoded as a string of characters consisting of alphabetic    characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end    with either an alphabetic character or a digit. 
	SmsfServiceSetId *string `json:"smsfServiceSetId,omitempty"`
	SmsfBindingInfo *string `json:"smsfBindingInfo,omitempty"`
	DisasterRoamingInd *bool `json:"disasterRoamingInd,omitempty"`
	DisasterPlmn *PlmnId `json:"disasterPlmn,omitempty"`
}

// NewUeContext instantiates a new UeContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeContext() *UeContext {
	this := UeContext{}
	var lteCatMInd bool = false
	this.LteCatMInd = &lteCatMInd
	var redCapInd bool = false
	this.RedCapInd = &redCapInd
	var managementMdtInd bool = false
	this.ManagementMdtInd = &managementMdtInd
	var ecRestrictionDataNb bool = false
	this.EcRestrictionDataNb = &ecRestrictionDataNb
	var astiDistributionIndication bool = false
	this.AstiDistributionIndication = &astiDistributionIndication
	var snpnOnboardInd bool = false
	this.SnpnOnboardInd = &snpnOnboardInd
	var disasterRoamingInd bool = false
	this.DisasterRoamingInd = &disasterRoamingInd
	return &this
}

// NewUeContextWithDefaults instantiates a new UeContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeContextWithDefaults() *UeContext {
	this := UeContext{}
	var lteCatMInd bool = false
	this.LteCatMInd = &lteCatMInd
	var redCapInd bool = false
	this.RedCapInd = &redCapInd
	var managementMdtInd bool = false
	this.ManagementMdtInd = &managementMdtInd
	var ecRestrictionDataNb bool = false
	this.EcRestrictionDataNb = &ecRestrictionDataNb
	var astiDistributionIndication bool = false
	this.AstiDistributionIndication = &astiDistributionIndication
	var snpnOnboardInd bool = false
	this.SnpnOnboardInd = &snpnOnboardInd
	var disasterRoamingInd bool = false
	this.DisasterRoamingInd = &disasterRoamingInd
	return &this
}

// GetSupi returns the Supi field value if set, zero value otherwise.
func (o *UeContext) GetSupi() string {
	if o == nil || IsNil(o.Supi) {
		var ret string
		return ret
	}
	return *o.Supi
}

// GetSupiOk returns a tuple with the Supi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSupiOk() (*string, bool) {
	if o == nil || IsNil(o.Supi) {
		return nil, false
	}
	return o.Supi, true
}

// HasSupi returns a boolean if a field has been set.
func (o *UeContext) HasSupi() bool {
	if o != nil && !IsNil(o.Supi) {
		return true
	}

	return false
}

// SetSupi gets a reference to the given string and assigns it to the Supi field.
func (o *UeContext) SetSupi(v string) {
	o.Supi = &v
}

// GetSupiUnauthInd returns the SupiUnauthInd field value if set, zero value otherwise.
func (o *UeContext) GetSupiUnauthInd() bool {
	if o == nil || IsNil(o.SupiUnauthInd) {
		var ret bool
		return ret
	}
	return *o.SupiUnauthInd
}

// GetSupiUnauthIndOk returns a tuple with the SupiUnauthInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSupiUnauthIndOk() (*bool, bool) {
	if o == nil || IsNil(o.SupiUnauthInd) {
		return nil, false
	}
	return o.SupiUnauthInd, true
}

// HasSupiUnauthInd returns a boolean if a field has been set.
func (o *UeContext) HasSupiUnauthInd() bool {
	if o != nil && !IsNil(o.SupiUnauthInd) {
		return true
	}

	return false
}

// SetSupiUnauthInd gets a reference to the given bool and assigns it to the SupiUnauthInd field.
func (o *UeContext) SetSupiUnauthInd(v bool) {
	o.SupiUnauthInd = &v
}

// GetGpsiList returns the GpsiList field value if set, zero value otherwise.
func (o *UeContext) GetGpsiList() []string {
	if o == nil || IsNil(o.GpsiList) {
		var ret []string
		return ret
	}
	return o.GpsiList
}

// GetGpsiListOk returns a tuple with the GpsiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetGpsiListOk() ([]string, bool) {
	if o == nil || IsNil(o.GpsiList) {
		return nil, false
	}
	return o.GpsiList, true
}

// HasGpsiList returns a boolean if a field has been set.
func (o *UeContext) HasGpsiList() bool {
	if o != nil && !IsNil(o.GpsiList) {
		return true
	}

	return false
}

// SetGpsiList gets a reference to the given []string and assigns it to the GpsiList field.
func (o *UeContext) SetGpsiList(v []string) {
	o.GpsiList = v
}

// GetPei returns the Pei field value if set, zero value otherwise.
func (o *UeContext) GetPei() string {
	if o == nil || IsNil(o.Pei) {
		var ret string
		return ret
	}
	return *o.Pei
}

// GetPeiOk returns a tuple with the Pei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPeiOk() (*string, bool) {
	if o == nil || IsNil(o.Pei) {
		return nil, false
	}
	return o.Pei, true
}

// HasPei returns a boolean if a field has been set.
func (o *UeContext) HasPei() bool {
	if o != nil && !IsNil(o.Pei) {
		return true
	}

	return false
}

// SetPei gets a reference to the given string and assigns it to the Pei field.
func (o *UeContext) SetPei(v string) {
	o.Pei = &v
}

// GetUdmGroupId returns the UdmGroupId field value if set, zero value otherwise.
func (o *UeContext) GetUdmGroupId() string {
	if o == nil || IsNil(o.UdmGroupId) {
		var ret string
		return ret
	}
	return *o.UdmGroupId
}

// GetUdmGroupIdOk returns a tuple with the UdmGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetUdmGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.UdmGroupId) {
		return nil, false
	}
	return o.UdmGroupId, true
}

// HasUdmGroupId returns a boolean if a field has been set.
func (o *UeContext) HasUdmGroupId() bool {
	if o != nil && !IsNil(o.UdmGroupId) {
		return true
	}

	return false
}

// SetUdmGroupId gets a reference to the given string and assigns it to the UdmGroupId field.
func (o *UeContext) SetUdmGroupId(v string) {
	o.UdmGroupId = &v
}

// GetAusfGroupId returns the AusfGroupId field value if set, zero value otherwise.
func (o *UeContext) GetAusfGroupId() string {
	if o == nil || IsNil(o.AusfGroupId) {
		var ret string
		return ret
	}
	return *o.AusfGroupId
}

// GetAusfGroupIdOk returns a tuple with the AusfGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetAusfGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.AusfGroupId) {
		return nil, false
	}
	return o.AusfGroupId, true
}

// HasAusfGroupId returns a boolean if a field has been set.
func (o *UeContext) HasAusfGroupId() bool {
	if o != nil && !IsNil(o.AusfGroupId) {
		return true
	}

	return false
}

// SetAusfGroupId gets a reference to the given string and assigns it to the AusfGroupId field.
func (o *UeContext) SetAusfGroupId(v string) {
	o.AusfGroupId = &v
}

// GetPcfGroupId returns the PcfGroupId field value if set, zero value otherwise.
func (o *UeContext) GetPcfGroupId() string {
	if o == nil || IsNil(o.PcfGroupId) {
		var ret string
		return ret
	}
	return *o.PcfGroupId
}

// GetPcfGroupIdOk returns a tuple with the PcfGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.PcfGroupId) {
		return nil, false
	}
	return o.PcfGroupId, true
}

// HasPcfGroupId returns a boolean if a field has been set.
func (o *UeContext) HasPcfGroupId() bool {
	if o != nil && !IsNil(o.PcfGroupId) {
		return true
	}

	return false
}

// SetPcfGroupId gets a reference to the given string and assigns it to the PcfGroupId field.
func (o *UeContext) SetPcfGroupId(v string) {
	o.PcfGroupId = &v
}

// GetRoutingIndicator returns the RoutingIndicator field value if set, zero value otherwise.
func (o *UeContext) GetRoutingIndicator() string {
	if o == nil || IsNil(o.RoutingIndicator) {
		var ret string
		return ret
	}
	return *o.RoutingIndicator
}

// GetRoutingIndicatorOk returns a tuple with the RoutingIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetRoutingIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.RoutingIndicator) {
		return nil, false
	}
	return o.RoutingIndicator, true
}

// HasRoutingIndicator returns a boolean if a field has been set.
func (o *UeContext) HasRoutingIndicator() bool {
	if o != nil && !IsNil(o.RoutingIndicator) {
		return true
	}

	return false
}

// SetRoutingIndicator gets a reference to the given string and assigns it to the RoutingIndicator field.
func (o *UeContext) SetRoutingIndicator(v string) {
	o.RoutingIndicator = &v
}

// GetHNwPubKeyId returns the HNwPubKeyId field value if set, zero value otherwise.
func (o *UeContext) GetHNwPubKeyId() int32 {
	if o == nil || IsNil(o.HNwPubKeyId) {
		var ret int32
		return ret
	}
	return *o.HNwPubKeyId
}

// GetHNwPubKeyIdOk returns a tuple with the HNwPubKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetHNwPubKeyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.HNwPubKeyId) {
		return nil, false
	}
	return o.HNwPubKeyId, true
}

// HasHNwPubKeyId returns a boolean if a field has been set.
func (o *UeContext) HasHNwPubKeyId() bool {
	if o != nil && !IsNil(o.HNwPubKeyId) {
		return true
	}

	return false
}

// SetHNwPubKeyId gets a reference to the given int32 and assigns it to the HNwPubKeyId field.
func (o *UeContext) SetHNwPubKeyId(v int32) {
	o.HNwPubKeyId = &v
}

// GetGroupList returns the GroupList field value if set, zero value otherwise.
func (o *UeContext) GetGroupList() []string {
	if o == nil || IsNil(o.GroupList) {
		var ret []string
		return ret
	}
	return o.GroupList
}

// GetGroupListOk returns a tuple with the GroupList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetGroupListOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupList) {
		return nil, false
	}
	return o.GroupList, true
}

// HasGroupList returns a boolean if a field has been set.
func (o *UeContext) HasGroupList() bool {
	if o != nil && !IsNil(o.GroupList) {
		return true
	}

	return false
}

// SetGroupList gets a reference to the given []string and assigns it to the GroupList field.
func (o *UeContext) SetGroupList(v []string) {
	o.GroupList = v
}

// GetDrxParameter returns the DrxParameter field value if set, zero value otherwise.
func (o *UeContext) GetDrxParameter() string {
	if o == nil || IsNil(o.DrxParameter) {
		var ret string
		return ret
	}
	return *o.DrxParameter
}

// GetDrxParameterOk returns a tuple with the DrxParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetDrxParameterOk() (*string, bool) {
	if o == nil || IsNil(o.DrxParameter) {
		return nil, false
	}
	return o.DrxParameter, true
}

// HasDrxParameter returns a boolean if a field has been set.
func (o *UeContext) HasDrxParameter() bool {
	if o != nil && !IsNil(o.DrxParameter) {
		return true
	}

	return false
}

// SetDrxParameter gets a reference to the given string and assigns it to the DrxParameter field.
func (o *UeContext) SetDrxParameter(v string) {
	o.DrxParameter = &v
}

// GetSubRfsp returns the SubRfsp field value if set, zero value otherwise.
func (o *UeContext) GetSubRfsp() int32 {
	if o == nil || IsNil(o.SubRfsp) {
		var ret int32
		return ret
	}
	return *o.SubRfsp
}

// GetSubRfspOk returns a tuple with the SubRfsp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSubRfspOk() (*int32, bool) {
	if o == nil || IsNil(o.SubRfsp) {
		return nil, false
	}
	return o.SubRfsp, true
}

// HasSubRfsp returns a boolean if a field has been set.
func (o *UeContext) HasSubRfsp() bool {
	if o != nil && !IsNil(o.SubRfsp) {
		return true
	}

	return false
}

// SetSubRfsp gets a reference to the given int32 and assigns it to the SubRfsp field.
func (o *UeContext) SetSubRfsp(v int32) {
	o.SubRfsp = &v
}

// GetUsedRfsp returns the UsedRfsp field value if set, zero value otherwise.
func (o *UeContext) GetUsedRfsp() int32 {
	if o == nil || IsNil(o.UsedRfsp) {
		var ret int32
		return ret
	}
	return *o.UsedRfsp
}

// GetUsedRfspOk returns a tuple with the UsedRfsp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetUsedRfspOk() (*int32, bool) {
	if o == nil || IsNil(o.UsedRfsp) {
		return nil, false
	}
	return o.UsedRfsp, true
}

// HasUsedRfsp returns a boolean if a field has been set.
func (o *UeContext) HasUsedRfsp() bool {
	if o != nil && !IsNil(o.UsedRfsp) {
		return true
	}

	return false
}

// SetUsedRfsp gets a reference to the given int32 and assigns it to the UsedRfsp field.
func (o *UeContext) SetUsedRfsp(v int32) {
	o.UsedRfsp = &v
}

// GetSubUeAmbr returns the SubUeAmbr field value if set, zero value otherwise.
func (o *UeContext) GetSubUeAmbr() Ambr {
	if o == nil || IsNil(o.SubUeAmbr) {
		var ret Ambr
		return ret
	}
	return *o.SubUeAmbr
}

// GetSubUeAmbrOk returns a tuple with the SubUeAmbr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSubUeAmbrOk() (*Ambr, bool) {
	if o == nil || IsNil(o.SubUeAmbr) {
		return nil, false
	}
	return o.SubUeAmbr, true
}

// HasSubUeAmbr returns a boolean if a field has been set.
func (o *UeContext) HasSubUeAmbr() bool {
	if o != nil && !IsNil(o.SubUeAmbr) {
		return true
	}

	return false
}

// SetSubUeAmbr gets a reference to the given Ambr and assigns it to the SubUeAmbr field.
func (o *UeContext) SetSubUeAmbr(v Ambr) {
	o.SubUeAmbr = &v
}

// GetSubUeSliceMbrList returns the SubUeSliceMbrList field value if set, zero value otherwise.
func (o *UeContext) GetSubUeSliceMbrList() map[string]SliceMbr {
	if o == nil || IsNil(o.SubUeSliceMbrList) {
		var ret map[string]SliceMbr
		return ret
	}
	return *o.SubUeSliceMbrList
}

// GetSubUeSliceMbrListOk returns a tuple with the SubUeSliceMbrList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSubUeSliceMbrListOk() (*map[string]SliceMbr, bool) {
	if o == nil || IsNil(o.SubUeSliceMbrList) {
		return nil, false
	}
	return o.SubUeSliceMbrList, true
}

// HasSubUeSliceMbrList returns a boolean if a field has been set.
func (o *UeContext) HasSubUeSliceMbrList() bool {
	if o != nil && !IsNil(o.SubUeSliceMbrList) {
		return true
	}

	return false
}

// SetSubUeSliceMbrList gets a reference to the given map[string]SliceMbr and assigns it to the SubUeSliceMbrList field.
func (o *UeContext) SetSubUeSliceMbrList(v map[string]SliceMbr) {
	o.SubUeSliceMbrList = &v
}

// GetSmsfId returns the SmsfId field value if set, zero value otherwise.
func (o *UeContext) GetSmsfId() string {
	if o == nil || IsNil(o.SmsfId) {
		var ret string
		return ret
	}
	return *o.SmsfId
}

// GetSmsfIdOk returns a tuple with the SmsfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSmsfIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmsfId) {
		return nil, false
	}
	return o.SmsfId, true
}

// HasSmsfId returns a boolean if a field has been set.
func (o *UeContext) HasSmsfId() bool {
	if o != nil && !IsNil(o.SmsfId) {
		return true
	}

	return false
}

// SetSmsfId gets a reference to the given string and assigns it to the SmsfId field.
func (o *UeContext) SetSmsfId(v string) {
	o.SmsfId = &v
}

// GetSeafData returns the SeafData field value if set, zero value otherwise.
func (o *UeContext) GetSeafData() SeafData {
	if o == nil || IsNil(o.SeafData) {
		var ret SeafData
		return ret
	}
	return *o.SeafData
}

// GetSeafDataOk returns a tuple with the SeafData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSeafDataOk() (*SeafData, bool) {
	if o == nil || IsNil(o.SeafData) {
		return nil, false
	}
	return o.SeafData, true
}

// HasSeafData returns a boolean if a field has been set.
func (o *UeContext) HasSeafData() bool {
	if o != nil && !IsNil(o.SeafData) {
		return true
	}

	return false
}

// SetSeafData gets a reference to the given SeafData and assigns it to the SeafData field.
func (o *UeContext) SetSeafData(v SeafData) {
	o.SeafData = &v
}

// GetVar5gMmCapability returns the Var5gMmCapability field value if set, zero value otherwise.
func (o *UeContext) GetVar5gMmCapability() string {
	if o == nil || IsNil(o.Var5gMmCapability) {
		var ret string
		return ret
	}
	return *o.Var5gMmCapability
}

// GetVar5gMmCapabilityOk returns a tuple with the Var5gMmCapability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetVar5gMmCapabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Var5gMmCapability) {
		return nil, false
	}
	return o.Var5gMmCapability, true
}

// HasVar5gMmCapability returns a boolean if a field has been set.
func (o *UeContext) HasVar5gMmCapability() bool {
	if o != nil && !IsNil(o.Var5gMmCapability) {
		return true
	}

	return false
}

// SetVar5gMmCapability gets a reference to the given string and assigns it to the Var5gMmCapability field.
func (o *UeContext) SetVar5gMmCapability(v string) {
	o.Var5gMmCapability = &v
}

// GetPcfId returns the PcfId field value if set, zero value otherwise.
func (o *UeContext) GetPcfId() string {
	if o == nil || IsNil(o.PcfId) {
		var ret string
		return ret
	}
	return *o.PcfId
}

// GetPcfIdOk returns a tuple with the PcfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfIdOk() (*string, bool) {
	if o == nil || IsNil(o.PcfId) {
		return nil, false
	}
	return o.PcfId, true
}

// HasPcfId returns a boolean if a field has been set.
func (o *UeContext) HasPcfId() bool {
	if o != nil && !IsNil(o.PcfId) {
		return true
	}

	return false
}

// SetPcfId gets a reference to the given string and assigns it to the PcfId field.
func (o *UeContext) SetPcfId(v string) {
	o.PcfId = &v
}

// GetPcfSetId returns the PcfSetId field value if set, zero value otherwise.
func (o *UeContext) GetPcfSetId() string {
	if o == nil || IsNil(o.PcfSetId) {
		var ret string
		return ret
	}
	return *o.PcfSetId
}

// GetPcfSetIdOk returns a tuple with the PcfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.PcfSetId) {
		return nil, false
	}
	return o.PcfSetId, true
}

// HasPcfSetId returns a boolean if a field has been set.
func (o *UeContext) HasPcfSetId() bool {
	if o != nil && !IsNil(o.PcfSetId) {
		return true
	}

	return false
}

// SetPcfSetId gets a reference to the given string and assigns it to the PcfSetId field.
func (o *UeContext) SetPcfSetId(v string) {
	o.PcfSetId = &v
}

// GetPcfAmpServiceSetId returns the PcfAmpServiceSetId field value if set, zero value otherwise.
func (o *UeContext) GetPcfAmpServiceSetId() string {
	if o == nil || IsNil(o.PcfAmpServiceSetId) {
		var ret string
		return ret
	}
	return *o.PcfAmpServiceSetId
}

// GetPcfAmpServiceSetIdOk returns a tuple with the PcfAmpServiceSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfAmpServiceSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.PcfAmpServiceSetId) {
		return nil, false
	}
	return o.PcfAmpServiceSetId, true
}

// HasPcfAmpServiceSetId returns a boolean if a field has been set.
func (o *UeContext) HasPcfAmpServiceSetId() bool {
	if o != nil && !IsNil(o.PcfAmpServiceSetId) {
		return true
	}

	return false
}

// SetPcfAmpServiceSetId gets a reference to the given string and assigns it to the PcfAmpServiceSetId field.
func (o *UeContext) SetPcfAmpServiceSetId(v string) {
	o.PcfAmpServiceSetId = &v
}

// GetPcfUepServiceSetId returns the PcfUepServiceSetId field value if set, zero value otherwise.
func (o *UeContext) GetPcfUepServiceSetId() string {
	if o == nil || IsNil(o.PcfUepServiceSetId) {
		var ret string
		return ret
	}
	return *o.PcfUepServiceSetId
}

// GetPcfUepServiceSetIdOk returns a tuple with the PcfUepServiceSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfUepServiceSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.PcfUepServiceSetId) {
		return nil, false
	}
	return o.PcfUepServiceSetId, true
}

// HasPcfUepServiceSetId returns a boolean if a field has been set.
func (o *UeContext) HasPcfUepServiceSetId() bool {
	if o != nil && !IsNil(o.PcfUepServiceSetId) {
		return true
	}

	return false
}

// SetPcfUepServiceSetId gets a reference to the given string and assigns it to the PcfUepServiceSetId field.
func (o *UeContext) SetPcfUepServiceSetId(v string) {
	o.PcfUepServiceSetId = &v
}

// GetPcfBinding returns the PcfBinding field value if set, zero value otherwise.
func (o *UeContext) GetPcfBinding() SbiBindingLevel {
	if o == nil || IsNil(o.PcfBinding) {
		var ret SbiBindingLevel
		return ret
	}
	return *o.PcfBinding
}

// GetPcfBindingOk returns a tuple with the PcfBinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfBindingOk() (*SbiBindingLevel, bool) {
	if o == nil || IsNil(o.PcfBinding) {
		return nil, false
	}
	return o.PcfBinding, true
}

// HasPcfBinding returns a boolean if a field has been set.
func (o *UeContext) HasPcfBinding() bool {
	if o != nil && !IsNil(o.PcfBinding) {
		return true
	}

	return false
}

// SetPcfBinding gets a reference to the given SbiBindingLevel and assigns it to the PcfBinding field.
func (o *UeContext) SetPcfBinding(v SbiBindingLevel) {
	o.PcfBinding = &v
}

// GetPcfAmPolicyUri returns the PcfAmPolicyUri field value if set, zero value otherwise.
func (o *UeContext) GetPcfAmPolicyUri() string {
	if o == nil || IsNil(o.PcfAmPolicyUri) {
		var ret string
		return ret
	}
	return *o.PcfAmPolicyUri
}

// GetPcfAmPolicyUriOk returns a tuple with the PcfAmPolicyUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfAmPolicyUriOk() (*string, bool) {
	if o == nil || IsNil(o.PcfAmPolicyUri) {
		return nil, false
	}
	return o.PcfAmPolicyUri, true
}

// HasPcfAmPolicyUri returns a boolean if a field has been set.
func (o *UeContext) HasPcfAmPolicyUri() bool {
	if o != nil && !IsNil(o.PcfAmPolicyUri) {
		return true
	}

	return false
}

// SetPcfAmPolicyUri gets a reference to the given string and assigns it to the PcfAmPolicyUri field.
func (o *UeContext) SetPcfAmPolicyUri(v string) {
	o.PcfAmPolicyUri = &v
}

// GetAmPolicyReqTriggerList returns the AmPolicyReqTriggerList field value if set, zero value otherwise.
func (o *UeContext) GetAmPolicyReqTriggerList() []PolicyReqTrigger {
	if o == nil || IsNil(o.AmPolicyReqTriggerList) {
		var ret []PolicyReqTrigger
		return ret
	}
	return o.AmPolicyReqTriggerList
}

// GetAmPolicyReqTriggerListOk returns a tuple with the AmPolicyReqTriggerList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetAmPolicyReqTriggerListOk() ([]PolicyReqTrigger, bool) {
	if o == nil || IsNil(o.AmPolicyReqTriggerList) {
		return nil, false
	}
	return o.AmPolicyReqTriggerList, true
}

// HasAmPolicyReqTriggerList returns a boolean if a field has been set.
func (o *UeContext) HasAmPolicyReqTriggerList() bool {
	if o != nil && !IsNil(o.AmPolicyReqTriggerList) {
		return true
	}

	return false
}

// SetAmPolicyReqTriggerList gets a reference to the given []PolicyReqTrigger and assigns it to the AmPolicyReqTriggerList field.
func (o *UeContext) SetAmPolicyReqTriggerList(v []PolicyReqTrigger) {
	o.AmPolicyReqTriggerList = v
}

// GetPcfUePolicyUri returns the PcfUePolicyUri field value if set, zero value otherwise.
func (o *UeContext) GetPcfUePolicyUri() string {
	if o == nil || IsNil(o.PcfUePolicyUri) {
		var ret string
		return ret
	}
	return *o.PcfUePolicyUri
}

// GetPcfUePolicyUriOk returns a tuple with the PcfUePolicyUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfUePolicyUriOk() (*string, bool) {
	if o == nil || IsNil(o.PcfUePolicyUri) {
		return nil, false
	}
	return o.PcfUePolicyUri, true
}

// HasPcfUePolicyUri returns a boolean if a field has been set.
func (o *UeContext) HasPcfUePolicyUri() bool {
	if o != nil && !IsNil(o.PcfUePolicyUri) {
		return true
	}

	return false
}

// SetPcfUePolicyUri gets a reference to the given string and assigns it to the PcfUePolicyUri field.
func (o *UeContext) SetPcfUePolicyUri(v string) {
	o.PcfUePolicyUri = &v
}

// GetUePolicyReqTriggerList returns the UePolicyReqTriggerList field value if set, zero value otherwise.
func (o *UeContext) GetUePolicyReqTriggerList() []PolicyReqTrigger {
	if o == nil || IsNil(o.UePolicyReqTriggerList) {
		var ret []PolicyReqTrigger
		return ret
	}
	return o.UePolicyReqTriggerList
}

// GetUePolicyReqTriggerListOk returns a tuple with the UePolicyReqTriggerList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetUePolicyReqTriggerListOk() ([]PolicyReqTrigger, bool) {
	if o == nil || IsNil(o.UePolicyReqTriggerList) {
		return nil, false
	}
	return o.UePolicyReqTriggerList, true
}

// HasUePolicyReqTriggerList returns a boolean if a field has been set.
func (o *UeContext) HasUePolicyReqTriggerList() bool {
	if o != nil && !IsNil(o.UePolicyReqTriggerList) {
		return true
	}

	return false
}

// SetUePolicyReqTriggerList gets a reference to the given []PolicyReqTrigger and assigns it to the UePolicyReqTriggerList field.
func (o *UeContext) SetUePolicyReqTriggerList(v []PolicyReqTrigger) {
	o.UePolicyReqTriggerList = v
}

// GetHpcfId returns the HpcfId field value if set, zero value otherwise.
func (o *UeContext) GetHpcfId() string {
	if o == nil || IsNil(o.HpcfId) {
		var ret string
		return ret
	}
	return *o.HpcfId
}

// GetHpcfIdOk returns a tuple with the HpcfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetHpcfIdOk() (*string, bool) {
	if o == nil || IsNil(o.HpcfId) {
		return nil, false
	}
	return o.HpcfId, true
}

// HasHpcfId returns a boolean if a field has been set.
func (o *UeContext) HasHpcfId() bool {
	if o != nil && !IsNil(o.HpcfId) {
		return true
	}

	return false
}

// SetHpcfId gets a reference to the given string and assigns it to the HpcfId field.
func (o *UeContext) SetHpcfId(v string) {
	o.HpcfId = &v
}

// GetHpcfSetId returns the HpcfSetId field value if set, zero value otherwise.
func (o *UeContext) GetHpcfSetId() string {
	if o == nil || IsNil(o.HpcfSetId) {
		var ret string
		return ret
	}
	return *o.HpcfSetId
}

// GetHpcfSetIdOk returns a tuple with the HpcfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetHpcfSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.HpcfSetId) {
		return nil, false
	}
	return o.HpcfSetId, true
}

// HasHpcfSetId returns a boolean if a field has been set.
func (o *UeContext) HasHpcfSetId() bool {
	if o != nil && !IsNil(o.HpcfSetId) {
		return true
	}

	return false
}

// SetHpcfSetId gets a reference to the given string and assigns it to the HpcfSetId field.
func (o *UeContext) SetHpcfSetId(v string) {
	o.HpcfSetId = &v
}

// GetRestrictedRatList returns the RestrictedRatList field value if set, zero value otherwise.
func (o *UeContext) GetRestrictedRatList() []RatType {
	if o == nil || IsNil(o.RestrictedRatList) {
		var ret []RatType
		return ret
	}
	return o.RestrictedRatList
}

// GetRestrictedRatListOk returns a tuple with the RestrictedRatList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetRestrictedRatListOk() ([]RatType, bool) {
	if o == nil || IsNil(o.RestrictedRatList) {
		return nil, false
	}
	return o.RestrictedRatList, true
}

// HasRestrictedRatList returns a boolean if a field has been set.
func (o *UeContext) HasRestrictedRatList() bool {
	if o != nil && !IsNil(o.RestrictedRatList) {
		return true
	}

	return false
}

// SetRestrictedRatList gets a reference to the given []RatType and assigns it to the RestrictedRatList field.
func (o *UeContext) SetRestrictedRatList(v []RatType) {
	o.RestrictedRatList = v
}

// GetForbiddenAreaList returns the ForbiddenAreaList field value if set, zero value otherwise.
func (o *UeContext) GetForbiddenAreaList() []Area {
	if o == nil || IsNil(o.ForbiddenAreaList) {
		var ret []Area
		return ret
	}
	return o.ForbiddenAreaList
}

// GetForbiddenAreaListOk returns a tuple with the ForbiddenAreaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetForbiddenAreaListOk() ([]Area, bool) {
	if o == nil || IsNil(o.ForbiddenAreaList) {
		return nil, false
	}
	return o.ForbiddenAreaList, true
}

// HasForbiddenAreaList returns a boolean if a field has been set.
func (o *UeContext) HasForbiddenAreaList() bool {
	if o != nil && !IsNil(o.ForbiddenAreaList) {
		return true
	}

	return false
}

// SetForbiddenAreaList gets a reference to the given []Area and assigns it to the ForbiddenAreaList field.
func (o *UeContext) SetForbiddenAreaList(v []Area) {
	o.ForbiddenAreaList = v
}

// GetServiceAreaRestriction returns the ServiceAreaRestriction field value if set, zero value otherwise.
func (o *UeContext) GetServiceAreaRestriction() ServiceAreaRestriction {
	if o == nil || IsNil(o.ServiceAreaRestriction) {
		var ret ServiceAreaRestriction
		return ret
	}
	return *o.ServiceAreaRestriction
}

// GetServiceAreaRestrictionOk returns a tuple with the ServiceAreaRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetServiceAreaRestrictionOk() (*ServiceAreaRestriction, bool) {
	if o == nil || IsNil(o.ServiceAreaRestriction) {
		return nil, false
	}
	return o.ServiceAreaRestriction, true
}

// HasServiceAreaRestriction returns a boolean if a field has been set.
func (o *UeContext) HasServiceAreaRestriction() bool {
	if o != nil && !IsNil(o.ServiceAreaRestriction) {
		return true
	}

	return false
}

// SetServiceAreaRestriction gets a reference to the given ServiceAreaRestriction and assigns it to the ServiceAreaRestriction field.
func (o *UeContext) SetServiceAreaRestriction(v ServiceAreaRestriction) {
	o.ServiceAreaRestriction = &v
}

// GetRestrictedCoreNwTypeList returns the RestrictedCoreNwTypeList field value if set, zero value otherwise.
func (o *UeContext) GetRestrictedCoreNwTypeList() []CoreNetworkType {
	if o == nil || IsNil(o.RestrictedCoreNwTypeList) {
		var ret []CoreNetworkType
		return ret
	}
	return o.RestrictedCoreNwTypeList
}

// GetRestrictedCoreNwTypeListOk returns a tuple with the RestrictedCoreNwTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetRestrictedCoreNwTypeListOk() ([]CoreNetworkType, bool) {
	if o == nil || IsNil(o.RestrictedCoreNwTypeList) {
		return nil, false
	}
	return o.RestrictedCoreNwTypeList, true
}

// HasRestrictedCoreNwTypeList returns a boolean if a field has been set.
func (o *UeContext) HasRestrictedCoreNwTypeList() bool {
	if o != nil && !IsNil(o.RestrictedCoreNwTypeList) {
		return true
	}

	return false
}

// SetRestrictedCoreNwTypeList gets a reference to the given []CoreNetworkType and assigns it to the RestrictedCoreNwTypeList field.
func (o *UeContext) SetRestrictedCoreNwTypeList(v []CoreNetworkType) {
	o.RestrictedCoreNwTypeList = v
}

// GetEventSubscriptionList returns the EventSubscriptionList field value if set, zero value otherwise.
func (o *UeContext) GetEventSubscriptionList() []ExtAmfEventSubscription {
	if o == nil || IsNil(o.EventSubscriptionList) {
		var ret []ExtAmfEventSubscription
		return ret
	}
	return o.EventSubscriptionList
}

// GetEventSubscriptionListOk returns a tuple with the EventSubscriptionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetEventSubscriptionListOk() ([]ExtAmfEventSubscription, bool) {
	if o == nil || IsNil(o.EventSubscriptionList) {
		return nil, false
	}
	return o.EventSubscriptionList, true
}

// HasEventSubscriptionList returns a boolean if a field has been set.
func (o *UeContext) HasEventSubscriptionList() bool {
	if o != nil && !IsNil(o.EventSubscriptionList) {
		return true
	}

	return false
}

// SetEventSubscriptionList gets a reference to the given []ExtAmfEventSubscription and assigns it to the EventSubscriptionList field.
func (o *UeContext) SetEventSubscriptionList(v []ExtAmfEventSubscription) {
	o.EventSubscriptionList = v
}

// GetMmContextList returns the MmContextList field value if set, zero value otherwise.
func (o *UeContext) GetMmContextList() []MmContext {
	if o == nil || IsNil(o.MmContextList) {
		var ret []MmContext
		return ret
	}
	return o.MmContextList
}

// GetMmContextListOk returns a tuple with the MmContextList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetMmContextListOk() ([]MmContext, bool) {
	if o == nil || IsNil(o.MmContextList) {
		return nil, false
	}
	return o.MmContextList, true
}

// HasMmContextList returns a boolean if a field has been set.
func (o *UeContext) HasMmContextList() bool {
	if o != nil && !IsNil(o.MmContextList) {
		return true
	}

	return false
}

// SetMmContextList gets a reference to the given []MmContext and assigns it to the MmContextList field.
func (o *UeContext) SetMmContextList(v []MmContext) {
	o.MmContextList = v
}

// GetSessionContextList returns the SessionContextList field value if set, zero value otherwise.
func (o *UeContext) GetSessionContextList() []PduSessionContext {
	if o == nil || IsNil(o.SessionContextList) {
		var ret []PduSessionContext
		return ret
	}
	return o.SessionContextList
}

// GetSessionContextListOk returns a tuple with the SessionContextList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSessionContextListOk() ([]PduSessionContext, bool) {
	if o == nil || IsNil(o.SessionContextList) {
		return nil, false
	}
	return o.SessionContextList, true
}

// HasSessionContextList returns a boolean if a field has been set.
func (o *UeContext) HasSessionContextList() bool {
	if o != nil && !IsNil(o.SessionContextList) {
		return true
	}

	return false
}

// SetSessionContextList gets a reference to the given []PduSessionContext and assigns it to the SessionContextList field.
func (o *UeContext) SetSessionContextList(v []PduSessionContext) {
	o.SessionContextList = v
}

// GetEpsInterworkingInfo returns the EpsInterworkingInfo field value if set, zero value otherwise.
func (o *UeContext) GetEpsInterworkingInfo() EpsInterworkingInfo {
	if o == nil || IsNil(o.EpsInterworkingInfo) {
		var ret EpsInterworkingInfo
		return ret
	}
	return *o.EpsInterworkingInfo
}

// GetEpsInterworkingInfoOk returns a tuple with the EpsInterworkingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetEpsInterworkingInfoOk() (*EpsInterworkingInfo, bool) {
	if o == nil || IsNil(o.EpsInterworkingInfo) {
		return nil, false
	}
	return o.EpsInterworkingInfo, true
}

// HasEpsInterworkingInfo returns a boolean if a field has been set.
func (o *UeContext) HasEpsInterworkingInfo() bool {
	if o != nil && !IsNil(o.EpsInterworkingInfo) {
		return true
	}

	return false
}

// SetEpsInterworkingInfo gets a reference to the given EpsInterworkingInfo and assigns it to the EpsInterworkingInfo field.
func (o *UeContext) SetEpsInterworkingInfo(v EpsInterworkingInfo) {
	o.EpsInterworkingInfo = &v
}

// GetTraceData returns the TraceData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UeContext) GetTraceData() TraceData {
	if o == nil || IsNil(o.TraceData.Get()) {
		var ret TraceData
		return ret
	}
	return *o.TraceData.Get()
}

// GetTraceDataOk returns a tuple with the TraceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UeContext) GetTraceDataOk() (*TraceData, bool) {
	if o == nil {
		return nil, false
	}
	return o.TraceData.Get(), o.TraceData.IsSet()
}

// HasTraceData returns a boolean if a field has been set.
func (o *UeContext) HasTraceData() bool {
	if o != nil && o.TraceData.IsSet() {
		return true
	}

	return false
}

// SetTraceData gets a reference to the given NullableTraceData and assigns it to the TraceData field.
func (o *UeContext) SetTraceData(v TraceData) {
	o.TraceData.Set(&v)
}
// SetTraceDataNil sets the value for TraceData to be an explicit nil
func (o *UeContext) SetTraceDataNil() {
	o.TraceData.Set(nil)
}

// UnsetTraceData ensures that no value is present for TraceData, not even an explicit nil
func (o *UeContext) UnsetTraceData() {
	o.TraceData.Unset()
}

// GetServiceGapExpiryTime returns the ServiceGapExpiryTime field value if set, zero value otherwise.
func (o *UeContext) GetServiceGapExpiryTime() time.Time {
	if o == nil || IsNil(o.ServiceGapExpiryTime) {
		var ret time.Time
		return ret
	}
	return *o.ServiceGapExpiryTime
}

// GetServiceGapExpiryTimeOk returns a tuple with the ServiceGapExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetServiceGapExpiryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ServiceGapExpiryTime) {
		return nil, false
	}
	return o.ServiceGapExpiryTime, true
}

// HasServiceGapExpiryTime returns a boolean if a field has been set.
func (o *UeContext) HasServiceGapExpiryTime() bool {
	if o != nil && !IsNil(o.ServiceGapExpiryTime) {
		return true
	}

	return false
}

// SetServiceGapExpiryTime gets a reference to the given time.Time and assigns it to the ServiceGapExpiryTime field.
func (o *UeContext) SetServiceGapExpiryTime(v time.Time) {
	o.ServiceGapExpiryTime = &v
}

// GetStnSr returns the StnSr field value if set, zero value otherwise.
func (o *UeContext) GetStnSr() string {
	if o == nil || IsNil(o.StnSr) {
		var ret string
		return ret
	}
	return *o.StnSr
}

// GetStnSrOk returns a tuple with the StnSr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetStnSrOk() (*string, bool) {
	if o == nil || IsNil(o.StnSr) {
		return nil, false
	}
	return o.StnSr, true
}

// HasStnSr returns a boolean if a field has been set.
func (o *UeContext) HasStnSr() bool {
	if o != nil && !IsNil(o.StnSr) {
		return true
	}

	return false
}

// SetStnSr gets a reference to the given string and assigns it to the StnSr field.
func (o *UeContext) SetStnSr(v string) {
	o.StnSr = &v
}

// GetCMsisdn returns the CMsisdn field value if set, zero value otherwise.
func (o *UeContext) GetCMsisdn() string {
	if o == nil || IsNil(o.CMsisdn) {
		var ret string
		return ret
	}
	return *o.CMsisdn
}

// GetCMsisdnOk returns a tuple with the CMsisdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetCMsisdnOk() (*string, bool) {
	if o == nil || IsNil(o.CMsisdn) {
		return nil, false
	}
	return o.CMsisdn, true
}

// HasCMsisdn returns a boolean if a field has been set.
func (o *UeContext) HasCMsisdn() bool {
	if o != nil && !IsNil(o.CMsisdn) {
		return true
	}

	return false
}

// SetCMsisdn gets a reference to the given string and assigns it to the CMsisdn field.
func (o *UeContext) SetCMsisdn(v string) {
	o.CMsisdn = &v
}

// GetMsClassmark2 returns the MsClassmark2 field value if set, zero value otherwise.
func (o *UeContext) GetMsClassmark2() string {
	if o == nil || IsNil(o.MsClassmark2) {
		var ret string
		return ret
	}
	return *o.MsClassmark2
}

// GetMsClassmark2Ok returns a tuple with the MsClassmark2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetMsClassmark2Ok() (*string, bool) {
	if o == nil || IsNil(o.MsClassmark2) {
		return nil, false
	}
	return o.MsClassmark2, true
}

// HasMsClassmark2 returns a boolean if a field has been set.
func (o *UeContext) HasMsClassmark2() bool {
	if o != nil && !IsNil(o.MsClassmark2) {
		return true
	}

	return false
}

// SetMsClassmark2 gets a reference to the given string and assigns it to the MsClassmark2 field.
func (o *UeContext) SetMsClassmark2(v string) {
	o.MsClassmark2 = &v
}

// GetSupportedCodecList returns the SupportedCodecList field value if set, zero value otherwise.
func (o *UeContext) GetSupportedCodecList() []string {
	if o == nil || IsNil(o.SupportedCodecList) {
		var ret []string
		return ret
	}
	return o.SupportedCodecList
}

// GetSupportedCodecListOk returns a tuple with the SupportedCodecList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSupportedCodecListOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedCodecList) {
		return nil, false
	}
	return o.SupportedCodecList, true
}

// HasSupportedCodecList returns a boolean if a field has been set.
func (o *UeContext) HasSupportedCodecList() bool {
	if o != nil && !IsNil(o.SupportedCodecList) {
		return true
	}

	return false
}

// SetSupportedCodecList gets a reference to the given []string and assigns it to the SupportedCodecList field.
func (o *UeContext) SetSupportedCodecList(v []string) {
	o.SupportedCodecList = v
}

// GetSmallDataRateStatusInfos returns the SmallDataRateStatusInfos field value if set, zero value otherwise.
func (o *UeContext) GetSmallDataRateStatusInfos() []SmallDataRateStatusInfo {
	if o == nil || IsNil(o.SmallDataRateStatusInfos) {
		var ret []SmallDataRateStatusInfo
		return ret
	}
	return o.SmallDataRateStatusInfos
}

// GetSmallDataRateStatusInfosOk returns a tuple with the SmallDataRateStatusInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSmallDataRateStatusInfosOk() ([]SmallDataRateStatusInfo, bool) {
	if o == nil || IsNil(o.SmallDataRateStatusInfos) {
		return nil, false
	}
	return o.SmallDataRateStatusInfos, true
}

// HasSmallDataRateStatusInfos returns a boolean if a field has been set.
func (o *UeContext) HasSmallDataRateStatusInfos() bool {
	if o != nil && !IsNil(o.SmallDataRateStatusInfos) {
		return true
	}

	return false
}

// SetSmallDataRateStatusInfos gets a reference to the given []SmallDataRateStatusInfo and assigns it to the SmallDataRateStatusInfos field.
func (o *UeContext) SetSmallDataRateStatusInfos(v []SmallDataRateStatusInfo) {
	o.SmallDataRateStatusInfos = v
}

// GetRestrictedPrimaryRatList returns the RestrictedPrimaryRatList field value if set, zero value otherwise.
func (o *UeContext) GetRestrictedPrimaryRatList() []RatType {
	if o == nil || IsNil(o.RestrictedPrimaryRatList) {
		var ret []RatType
		return ret
	}
	return o.RestrictedPrimaryRatList
}

// GetRestrictedPrimaryRatListOk returns a tuple with the RestrictedPrimaryRatList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetRestrictedPrimaryRatListOk() ([]RatType, bool) {
	if o == nil || IsNil(o.RestrictedPrimaryRatList) {
		return nil, false
	}
	return o.RestrictedPrimaryRatList, true
}

// HasRestrictedPrimaryRatList returns a boolean if a field has been set.
func (o *UeContext) HasRestrictedPrimaryRatList() bool {
	if o != nil && !IsNil(o.RestrictedPrimaryRatList) {
		return true
	}

	return false
}

// SetRestrictedPrimaryRatList gets a reference to the given []RatType and assigns it to the RestrictedPrimaryRatList field.
func (o *UeContext) SetRestrictedPrimaryRatList(v []RatType) {
	o.RestrictedPrimaryRatList = v
}

// GetRestrictedSecondaryRatList returns the RestrictedSecondaryRatList field value if set, zero value otherwise.
func (o *UeContext) GetRestrictedSecondaryRatList() []RatType {
	if o == nil || IsNil(o.RestrictedSecondaryRatList) {
		var ret []RatType
		return ret
	}
	return o.RestrictedSecondaryRatList
}

// GetRestrictedSecondaryRatListOk returns a tuple with the RestrictedSecondaryRatList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetRestrictedSecondaryRatListOk() ([]RatType, bool) {
	if o == nil || IsNil(o.RestrictedSecondaryRatList) {
		return nil, false
	}
	return o.RestrictedSecondaryRatList, true
}

// HasRestrictedSecondaryRatList returns a boolean if a field has been set.
func (o *UeContext) HasRestrictedSecondaryRatList() bool {
	if o != nil && !IsNil(o.RestrictedSecondaryRatList) {
		return true
	}

	return false
}

// SetRestrictedSecondaryRatList gets a reference to the given []RatType and assigns it to the RestrictedSecondaryRatList field.
func (o *UeContext) SetRestrictedSecondaryRatList(v []RatType) {
	o.RestrictedSecondaryRatList = v
}

// GetV2xContext returns the V2xContext field value if set, zero value otherwise.
func (o *UeContext) GetV2xContext() V2xContext {
	if o == nil || IsNil(o.V2xContext) {
		var ret V2xContext
		return ret
	}
	return *o.V2xContext
}

// GetV2xContextOk returns a tuple with the V2xContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetV2xContextOk() (*V2xContext, bool) {
	if o == nil || IsNil(o.V2xContext) {
		return nil, false
	}
	return o.V2xContext, true
}

// HasV2xContext returns a boolean if a field has been set.
func (o *UeContext) HasV2xContext() bool {
	if o != nil && !IsNil(o.V2xContext) {
		return true
	}

	return false
}

// SetV2xContext gets a reference to the given V2xContext and assigns it to the V2xContext field.
func (o *UeContext) SetV2xContext(v V2xContext) {
	o.V2xContext = &v
}

// GetLteCatMInd returns the LteCatMInd field value if set, zero value otherwise.
func (o *UeContext) GetLteCatMInd() bool {
	if o == nil || IsNil(o.LteCatMInd) {
		var ret bool
		return ret
	}
	return *o.LteCatMInd
}

// GetLteCatMIndOk returns a tuple with the LteCatMInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetLteCatMIndOk() (*bool, bool) {
	if o == nil || IsNil(o.LteCatMInd) {
		return nil, false
	}
	return o.LteCatMInd, true
}

// HasLteCatMInd returns a boolean if a field has been set.
func (o *UeContext) HasLteCatMInd() bool {
	if o != nil && !IsNil(o.LteCatMInd) {
		return true
	}

	return false
}

// SetLteCatMInd gets a reference to the given bool and assigns it to the LteCatMInd field.
func (o *UeContext) SetLteCatMInd(v bool) {
	o.LteCatMInd = &v
}

// GetRedCapInd returns the RedCapInd field value if set, zero value otherwise.
func (o *UeContext) GetRedCapInd() bool {
	if o == nil || IsNil(o.RedCapInd) {
		var ret bool
		return ret
	}
	return *o.RedCapInd
}

// GetRedCapIndOk returns a tuple with the RedCapInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetRedCapIndOk() (*bool, bool) {
	if o == nil || IsNil(o.RedCapInd) {
		return nil, false
	}
	return o.RedCapInd, true
}

// HasRedCapInd returns a boolean if a field has been set.
func (o *UeContext) HasRedCapInd() bool {
	if o != nil && !IsNil(o.RedCapInd) {
		return true
	}

	return false
}

// SetRedCapInd gets a reference to the given bool and assigns it to the RedCapInd field.
func (o *UeContext) SetRedCapInd(v bool) {
	o.RedCapInd = &v
}

// GetMoExpDataCounter returns the MoExpDataCounter field value if set, zero value otherwise.
func (o *UeContext) GetMoExpDataCounter() MoExpDataCounter {
	if o == nil || IsNil(o.MoExpDataCounter) {
		var ret MoExpDataCounter
		return ret
	}
	return *o.MoExpDataCounter
}

// GetMoExpDataCounterOk returns a tuple with the MoExpDataCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetMoExpDataCounterOk() (*MoExpDataCounter, bool) {
	if o == nil || IsNil(o.MoExpDataCounter) {
		return nil, false
	}
	return o.MoExpDataCounter, true
}

// HasMoExpDataCounter returns a boolean if a field has been set.
func (o *UeContext) HasMoExpDataCounter() bool {
	if o != nil && !IsNil(o.MoExpDataCounter) {
		return true
	}

	return false
}

// SetMoExpDataCounter gets a reference to the given MoExpDataCounter and assigns it to the MoExpDataCounter field.
func (o *UeContext) SetMoExpDataCounter(v MoExpDataCounter) {
	o.MoExpDataCounter = &v
}

// GetCagData returns the CagData field value if set, zero value otherwise.
func (o *UeContext) GetCagData() CagData {
	if o == nil || IsNil(o.CagData) {
		var ret CagData
		return ret
	}
	return *o.CagData
}

// GetCagDataOk returns a tuple with the CagData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetCagDataOk() (*CagData, bool) {
	if o == nil || IsNil(o.CagData) {
		return nil, false
	}
	return o.CagData, true
}

// HasCagData returns a boolean if a field has been set.
func (o *UeContext) HasCagData() bool {
	if o != nil && !IsNil(o.CagData) {
		return true
	}

	return false
}

// SetCagData gets a reference to the given CagData and assigns it to the CagData field.
func (o *UeContext) SetCagData(v CagData) {
	o.CagData = &v
}

// GetManagementMdtInd returns the ManagementMdtInd field value if set, zero value otherwise.
func (o *UeContext) GetManagementMdtInd() bool {
	if o == nil || IsNil(o.ManagementMdtInd) {
		var ret bool
		return ret
	}
	return *o.ManagementMdtInd
}

// GetManagementMdtIndOk returns a tuple with the ManagementMdtInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetManagementMdtIndOk() (*bool, bool) {
	if o == nil || IsNil(o.ManagementMdtInd) {
		return nil, false
	}
	return o.ManagementMdtInd, true
}

// HasManagementMdtInd returns a boolean if a field has been set.
func (o *UeContext) HasManagementMdtInd() bool {
	if o != nil && !IsNil(o.ManagementMdtInd) {
		return true
	}

	return false
}

// SetManagementMdtInd gets a reference to the given bool and assigns it to the ManagementMdtInd field.
func (o *UeContext) SetManagementMdtInd(v bool) {
	o.ManagementMdtInd = &v
}

// GetImmediateMdtConf returns the ImmediateMdtConf field value if set, zero value otherwise.
func (o *UeContext) GetImmediateMdtConf() ImmediateMdtConf {
	if o == nil || IsNil(o.ImmediateMdtConf) {
		var ret ImmediateMdtConf
		return ret
	}
	return *o.ImmediateMdtConf
}

// GetImmediateMdtConfOk returns a tuple with the ImmediateMdtConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetImmediateMdtConfOk() (*ImmediateMdtConf, bool) {
	if o == nil || IsNil(o.ImmediateMdtConf) {
		return nil, false
	}
	return o.ImmediateMdtConf, true
}

// HasImmediateMdtConf returns a boolean if a field has been set.
func (o *UeContext) HasImmediateMdtConf() bool {
	if o != nil && !IsNil(o.ImmediateMdtConf) {
		return true
	}

	return false
}

// SetImmediateMdtConf gets a reference to the given ImmediateMdtConf and assigns it to the ImmediateMdtConf field.
func (o *UeContext) SetImmediateMdtConf(v ImmediateMdtConf) {
	o.ImmediateMdtConf = &v
}

// GetEcRestrictionDataWb returns the EcRestrictionDataWb field value if set, zero value otherwise.
func (o *UeContext) GetEcRestrictionDataWb() EcRestrictionDataWb {
	if o == nil || IsNil(o.EcRestrictionDataWb) {
		var ret EcRestrictionDataWb
		return ret
	}
	return *o.EcRestrictionDataWb
}

// GetEcRestrictionDataWbOk returns a tuple with the EcRestrictionDataWb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetEcRestrictionDataWbOk() (*EcRestrictionDataWb, bool) {
	if o == nil || IsNil(o.EcRestrictionDataWb) {
		return nil, false
	}
	return o.EcRestrictionDataWb, true
}

// HasEcRestrictionDataWb returns a boolean if a field has been set.
func (o *UeContext) HasEcRestrictionDataWb() bool {
	if o != nil && !IsNil(o.EcRestrictionDataWb) {
		return true
	}

	return false
}

// SetEcRestrictionDataWb gets a reference to the given EcRestrictionDataWb and assigns it to the EcRestrictionDataWb field.
func (o *UeContext) SetEcRestrictionDataWb(v EcRestrictionDataWb) {
	o.EcRestrictionDataWb = &v
}

// GetEcRestrictionDataNb returns the EcRestrictionDataNb field value if set, zero value otherwise.
func (o *UeContext) GetEcRestrictionDataNb() bool {
	if o == nil || IsNil(o.EcRestrictionDataNb) {
		var ret bool
		return ret
	}
	return *o.EcRestrictionDataNb
}

// GetEcRestrictionDataNbOk returns a tuple with the EcRestrictionDataNb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetEcRestrictionDataNbOk() (*bool, bool) {
	if o == nil || IsNil(o.EcRestrictionDataNb) {
		return nil, false
	}
	return o.EcRestrictionDataNb, true
}

// HasEcRestrictionDataNb returns a boolean if a field has been set.
func (o *UeContext) HasEcRestrictionDataNb() bool {
	if o != nil && !IsNil(o.EcRestrictionDataNb) {
		return true
	}

	return false
}

// SetEcRestrictionDataNb gets a reference to the given bool and assigns it to the EcRestrictionDataNb field.
func (o *UeContext) SetEcRestrictionDataNb(v bool) {
	o.EcRestrictionDataNb = &v
}

// GetIabOperationAllowed returns the IabOperationAllowed field value if set, zero value otherwise.
func (o *UeContext) GetIabOperationAllowed() bool {
	if o == nil || IsNil(o.IabOperationAllowed) {
		var ret bool
		return ret
	}
	return *o.IabOperationAllowed
}

// GetIabOperationAllowedOk returns a tuple with the IabOperationAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetIabOperationAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.IabOperationAllowed) {
		return nil, false
	}
	return o.IabOperationAllowed, true
}

// HasIabOperationAllowed returns a boolean if a field has been set.
func (o *UeContext) HasIabOperationAllowed() bool {
	if o != nil && !IsNil(o.IabOperationAllowed) {
		return true
	}

	return false
}

// SetIabOperationAllowed gets a reference to the given bool and assigns it to the IabOperationAllowed field.
func (o *UeContext) SetIabOperationAllowed(v bool) {
	o.IabOperationAllowed = &v
}

// GetProseContext returns the ProseContext field value if set, zero value otherwise.
func (o *UeContext) GetProseContext() ProseContext {
	if o == nil || IsNil(o.ProseContext) {
		var ret ProseContext
		return ret
	}
	return *o.ProseContext
}

// GetProseContextOk returns a tuple with the ProseContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetProseContextOk() (*ProseContext, bool) {
	if o == nil || IsNil(o.ProseContext) {
		return nil, false
	}
	return o.ProseContext, true
}

// HasProseContext returns a boolean if a field has been set.
func (o *UeContext) HasProseContext() bool {
	if o != nil && !IsNil(o.ProseContext) {
		return true
	}

	return false
}

// SetProseContext gets a reference to the given ProseContext and assigns it to the ProseContext field.
func (o *UeContext) SetProseContext(v ProseContext) {
	o.ProseContext = &v
}

// GetAnalyticsSubscriptionList returns the AnalyticsSubscriptionList field value if set, zero value otherwise.
func (o *UeContext) GetAnalyticsSubscriptionList() []AnalyticsSubscription {
	if o == nil || IsNil(o.AnalyticsSubscriptionList) {
		var ret []AnalyticsSubscription
		return ret
	}
	return o.AnalyticsSubscriptionList
}

// GetAnalyticsSubscriptionListOk returns a tuple with the AnalyticsSubscriptionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetAnalyticsSubscriptionListOk() ([]AnalyticsSubscription, bool) {
	if o == nil || IsNil(o.AnalyticsSubscriptionList) {
		return nil, false
	}
	return o.AnalyticsSubscriptionList, true
}

// HasAnalyticsSubscriptionList returns a boolean if a field has been set.
func (o *UeContext) HasAnalyticsSubscriptionList() bool {
	if o != nil && !IsNil(o.AnalyticsSubscriptionList) {
		return true
	}

	return false
}

// SetAnalyticsSubscriptionList gets a reference to the given []AnalyticsSubscription and assigns it to the AnalyticsSubscriptionList field.
func (o *UeContext) SetAnalyticsSubscriptionList(v []AnalyticsSubscription) {
	o.AnalyticsSubscriptionList = v
}

// GetPcfAmpBindingInfo returns the PcfAmpBindingInfo field value if set, zero value otherwise.
func (o *UeContext) GetPcfAmpBindingInfo() string {
	if o == nil || IsNil(o.PcfAmpBindingInfo) {
		var ret string
		return ret
	}
	return *o.PcfAmpBindingInfo
}

// GetPcfAmpBindingInfoOk returns a tuple with the PcfAmpBindingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfAmpBindingInfoOk() (*string, bool) {
	if o == nil || IsNil(o.PcfAmpBindingInfo) {
		return nil, false
	}
	return o.PcfAmpBindingInfo, true
}

// HasPcfAmpBindingInfo returns a boolean if a field has been set.
func (o *UeContext) HasPcfAmpBindingInfo() bool {
	if o != nil && !IsNil(o.PcfAmpBindingInfo) {
		return true
	}

	return false
}

// SetPcfAmpBindingInfo gets a reference to the given string and assigns it to the PcfAmpBindingInfo field.
func (o *UeContext) SetPcfAmpBindingInfo(v string) {
	o.PcfAmpBindingInfo = &v
}

// GetPcfUepBindingInfo returns the PcfUepBindingInfo field value if set, zero value otherwise.
func (o *UeContext) GetPcfUepBindingInfo() string {
	if o == nil || IsNil(o.PcfUepBindingInfo) {
		var ret string
		return ret
	}
	return *o.PcfUepBindingInfo
}

// GetPcfUepBindingInfoOk returns a tuple with the PcfUepBindingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfUepBindingInfoOk() (*string, bool) {
	if o == nil || IsNil(o.PcfUepBindingInfo) {
		return nil, false
	}
	return o.PcfUepBindingInfo, true
}

// HasPcfUepBindingInfo returns a boolean if a field has been set.
func (o *UeContext) HasPcfUepBindingInfo() bool {
	if o != nil && !IsNil(o.PcfUepBindingInfo) {
		return true
	}

	return false
}

// SetPcfUepBindingInfo gets a reference to the given string and assigns it to the PcfUepBindingInfo field.
func (o *UeContext) SetPcfUepBindingInfo(v string) {
	o.PcfUepBindingInfo = &v
}

// GetUsedServiceAreaRestriction returns the UsedServiceAreaRestriction field value if set, zero value otherwise.
func (o *UeContext) GetUsedServiceAreaRestriction() ServiceAreaRestriction {
	if o == nil || IsNil(o.UsedServiceAreaRestriction) {
		var ret ServiceAreaRestriction
		return ret
	}
	return *o.UsedServiceAreaRestriction
}

// GetUsedServiceAreaRestrictionOk returns a tuple with the UsedServiceAreaRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetUsedServiceAreaRestrictionOk() (*ServiceAreaRestriction, bool) {
	if o == nil || IsNil(o.UsedServiceAreaRestriction) {
		return nil, false
	}
	return o.UsedServiceAreaRestriction, true
}

// HasUsedServiceAreaRestriction returns a boolean if a field has been set.
func (o *UeContext) HasUsedServiceAreaRestriction() bool {
	if o != nil && !IsNil(o.UsedServiceAreaRestriction) {
		return true
	}

	return false
}

// SetUsedServiceAreaRestriction gets a reference to the given ServiceAreaRestriction and assigns it to the UsedServiceAreaRestriction field.
func (o *UeContext) SetUsedServiceAreaRestriction(v ServiceAreaRestriction) {
	o.UsedServiceAreaRestriction = &v
}

// GetPraInAmPolicy returns the PraInAmPolicy field value if set, zero value otherwise.
func (o *UeContext) GetPraInAmPolicy() map[string]PresenceInfo {
	if o == nil || IsNil(o.PraInAmPolicy) {
		var ret map[string]PresenceInfo
		return ret
	}
	return *o.PraInAmPolicy
}

// GetPraInAmPolicyOk returns a tuple with the PraInAmPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPraInAmPolicyOk() (*map[string]PresenceInfo, bool) {
	if o == nil || IsNil(o.PraInAmPolicy) {
		return nil, false
	}
	return o.PraInAmPolicy, true
}

// HasPraInAmPolicy returns a boolean if a field has been set.
func (o *UeContext) HasPraInAmPolicy() bool {
	if o != nil && !IsNil(o.PraInAmPolicy) {
		return true
	}

	return false
}

// SetPraInAmPolicy gets a reference to the given map[string]PresenceInfo and assigns it to the PraInAmPolicy field.
func (o *UeContext) SetPraInAmPolicy(v map[string]PresenceInfo) {
	o.PraInAmPolicy = &v
}

// GetPraInUePolicy returns the PraInUePolicy field value if set, zero value otherwise.
func (o *UeContext) GetPraInUePolicy() map[string]PresenceInfo {
	if o == nil || IsNil(o.PraInUePolicy) {
		var ret map[string]PresenceInfo
		return ret
	}
	return *o.PraInUePolicy
}

// GetPraInUePolicyOk returns a tuple with the PraInUePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPraInUePolicyOk() (*map[string]PresenceInfo, bool) {
	if o == nil || IsNil(o.PraInUePolicy) {
		return nil, false
	}
	return o.PraInUePolicy, true
}

// HasPraInUePolicy returns a boolean if a field has been set.
func (o *UeContext) HasPraInUePolicy() bool {
	if o != nil && !IsNil(o.PraInUePolicy) {
		return true
	}

	return false
}

// SetPraInUePolicy gets a reference to the given map[string]PresenceInfo and assigns it to the PraInUePolicy field.
func (o *UeContext) SetPraInUePolicy(v map[string]PresenceInfo) {
	o.PraInUePolicy = &v
}

// GetUpdpSubscriptionData returns the UpdpSubscriptionData field value if set, zero value otherwise.
func (o *UeContext) GetUpdpSubscriptionData() UpdpSubscriptionData {
	if o == nil || IsNil(o.UpdpSubscriptionData) {
		var ret UpdpSubscriptionData
		return ret
	}
	return *o.UpdpSubscriptionData
}

// GetUpdpSubscriptionDataOk returns a tuple with the UpdpSubscriptionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetUpdpSubscriptionDataOk() (*UpdpSubscriptionData, bool) {
	if o == nil || IsNil(o.UpdpSubscriptionData) {
		return nil, false
	}
	return o.UpdpSubscriptionData, true
}

// HasUpdpSubscriptionData returns a boolean if a field has been set.
func (o *UeContext) HasUpdpSubscriptionData() bool {
	if o != nil && !IsNil(o.UpdpSubscriptionData) {
		return true
	}

	return false
}

// SetUpdpSubscriptionData gets a reference to the given UpdpSubscriptionData and assigns it to the UpdpSubscriptionData field.
func (o *UeContext) SetUpdpSubscriptionData(v UpdpSubscriptionData) {
	o.UpdpSubscriptionData = &v
}

// GetSmPolicyNotifyPduList returns the SmPolicyNotifyPduList field value if set, zero value otherwise.
func (o *UeContext) GetSmPolicyNotifyPduList() []PduSessionInfo {
	if o == nil || IsNil(o.SmPolicyNotifyPduList) {
		var ret []PduSessionInfo
		return ret
	}
	return o.SmPolicyNotifyPduList
}

// GetSmPolicyNotifyPduListOk returns a tuple with the SmPolicyNotifyPduList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSmPolicyNotifyPduListOk() ([]PduSessionInfo, bool) {
	if o == nil || IsNil(o.SmPolicyNotifyPduList) {
		return nil, false
	}
	return o.SmPolicyNotifyPduList, true
}

// HasSmPolicyNotifyPduList returns a boolean if a field has been set.
func (o *UeContext) HasSmPolicyNotifyPduList() bool {
	if o != nil && !IsNil(o.SmPolicyNotifyPduList) {
		return true
	}

	return false
}

// SetSmPolicyNotifyPduList gets a reference to the given []PduSessionInfo and assigns it to the SmPolicyNotifyPduList field.
func (o *UeContext) SetSmPolicyNotifyPduList(v []PduSessionInfo) {
	o.SmPolicyNotifyPduList = v
}

// GetPcfUeCallbackInfo returns the PcfUeCallbackInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UeContext) GetPcfUeCallbackInfo() PcfUeCallbackInfo {
	if o == nil || IsNil(o.PcfUeCallbackInfo.Get()) {
		var ret PcfUeCallbackInfo
		return ret
	}
	return *o.PcfUeCallbackInfo.Get()
}

// GetPcfUeCallbackInfoOk returns a tuple with the PcfUeCallbackInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UeContext) GetPcfUeCallbackInfoOk() (*PcfUeCallbackInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.PcfUeCallbackInfo.Get(), o.PcfUeCallbackInfo.IsSet()
}

// HasPcfUeCallbackInfo returns a boolean if a field has been set.
func (o *UeContext) HasPcfUeCallbackInfo() bool {
	if o != nil && o.PcfUeCallbackInfo.IsSet() {
		return true
	}

	return false
}

// SetPcfUeCallbackInfo gets a reference to the given NullablePcfUeCallbackInfo and assigns it to the PcfUeCallbackInfo field.
func (o *UeContext) SetPcfUeCallbackInfo(v PcfUeCallbackInfo) {
	o.PcfUeCallbackInfo.Set(&v)
}
// SetPcfUeCallbackInfoNil sets the value for PcfUeCallbackInfo to be an explicit nil
func (o *UeContext) SetPcfUeCallbackInfoNil() {
	o.PcfUeCallbackInfo.Set(nil)
}

// UnsetPcfUeCallbackInfo ensures that no value is present for PcfUeCallbackInfo, not even an explicit nil
func (o *UeContext) UnsetPcfUeCallbackInfo() {
	o.PcfUeCallbackInfo.Unset()
}

// GetUePositioningCap returns the UePositioningCap field value if set, zero value otherwise.
func (o *UeContext) GetUePositioningCap() string {
	if o == nil || IsNil(o.UePositioningCap) {
		var ret string
		return ret
	}
	return *o.UePositioningCap
}

// GetUePositioningCapOk returns a tuple with the UePositioningCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetUePositioningCapOk() (*string, bool) {
	if o == nil || IsNil(o.UePositioningCap) {
		return nil, false
	}
	return o.UePositioningCap, true
}

// HasUePositioningCap returns a boolean if a field has been set.
func (o *UeContext) HasUePositioningCap() bool {
	if o != nil && !IsNil(o.UePositioningCap) {
		return true
	}

	return false
}

// SetUePositioningCap gets a reference to the given string and assigns it to the UePositioningCap field.
func (o *UeContext) SetUePositioningCap(v string) {
	o.UePositioningCap = &v
}

// GetAstiDistributionIndication returns the AstiDistributionIndication field value if set, zero value otherwise.
func (o *UeContext) GetAstiDistributionIndication() bool {
	if o == nil || IsNil(o.AstiDistributionIndication) {
		var ret bool
		return ret
	}
	return *o.AstiDistributionIndication
}

// GetAstiDistributionIndicationOk returns a tuple with the AstiDistributionIndication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetAstiDistributionIndicationOk() (*bool, bool) {
	if o == nil || IsNil(o.AstiDistributionIndication) {
		return nil, false
	}
	return o.AstiDistributionIndication, true
}

// HasAstiDistributionIndication returns a boolean if a field has been set.
func (o *UeContext) HasAstiDistributionIndication() bool {
	if o != nil && !IsNil(o.AstiDistributionIndication) {
		return true
	}

	return false
}

// SetAstiDistributionIndication gets a reference to the given bool and assigns it to the AstiDistributionIndication field.
func (o *UeContext) SetAstiDistributionIndication(v bool) {
	o.AstiDistributionIndication = &v
}

// GetTsErrorBudget returns the TsErrorBudget field value if set, zero value otherwise.
func (o *UeContext) GetTsErrorBudget() int32 {
	if o == nil || IsNil(o.TsErrorBudget) {
		var ret int32
		return ret
	}
	return *o.TsErrorBudget
}

// GetTsErrorBudgetOk returns a tuple with the TsErrorBudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetTsErrorBudgetOk() (*int32, bool) {
	if o == nil || IsNil(o.TsErrorBudget) {
		return nil, false
	}
	return o.TsErrorBudget, true
}

// HasTsErrorBudget returns a boolean if a field has been set.
func (o *UeContext) HasTsErrorBudget() bool {
	if o != nil && !IsNil(o.TsErrorBudget) {
		return true
	}

	return false
}

// SetTsErrorBudget gets a reference to the given int32 and assigns it to the TsErrorBudget field.
func (o *UeContext) SetTsErrorBudget(v int32) {
	o.TsErrorBudget = &v
}

// GetSnpnOnboardInd returns the SnpnOnboardInd field value if set, zero value otherwise.
func (o *UeContext) GetSnpnOnboardInd() bool {
	if o == nil || IsNil(o.SnpnOnboardInd) {
		var ret bool
		return ret
	}
	return *o.SnpnOnboardInd
}

// GetSnpnOnboardIndOk returns a tuple with the SnpnOnboardInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSnpnOnboardIndOk() (*bool, bool) {
	if o == nil || IsNil(o.SnpnOnboardInd) {
		return nil, false
	}
	return o.SnpnOnboardInd, true
}

// HasSnpnOnboardInd returns a boolean if a field has been set.
func (o *UeContext) HasSnpnOnboardInd() bool {
	if o != nil && !IsNil(o.SnpnOnboardInd) {
		return true
	}

	return false
}

// SetSnpnOnboardInd gets a reference to the given bool and assigns it to the SnpnOnboardInd field.
func (o *UeContext) SetSnpnOnboardInd(v bool) {
	o.SnpnOnboardInd = &v
}

// GetSmfSelInfo returns the SmfSelInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UeContext) GetSmfSelInfo() SmfSelectionData {
	if o == nil || IsNil(o.SmfSelInfo.Get()) {
		var ret SmfSelectionData
		return ret
	}
	return *o.SmfSelInfo.Get()
}

// GetSmfSelInfoOk returns a tuple with the SmfSelInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UeContext) GetSmfSelInfoOk() (*SmfSelectionData, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmfSelInfo.Get(), o.SmfSelInfo.IsSet()
}

// HasSmfSelInfo returns a boolean if a field has been set.
func (o *UeContext) HasSmfSelInfo() bool {
	if o != nil && o.SmfSelInfo.IsSet() {
		return true
	}

	return false
}

// SetSmfSelInfo gets a reference to the given NullableSmfSelectionData and assigns it to the SmfSelInfo field.
func (o *UeContext) SetSmfSelInfo(v SmfSelectionData) {
	o.SmfSelInfo.Set(&v)
}
// SetSmfSelInfoNil sets the value for SmfSelInfo to be an explicit nil
func (o *UeContext) SetSmfSelInfoNil() {
	o.SmfSelInfo.Set(nil)
}

// UnsetSmfSelInfo ensures that no value is present for SmfSelInfo, not even an explicit nil
func (o *UeContext) UnsetSmfSelInfo() {
	o.SmfSelInfo.Unset()
}

// GetPcfUeSliceMbrList returns the PcfUeSliceMbrList field value if set, zero value otherwise.
func (o *UeContext) GetPcfUeSliceMbrList() map[string]SliceMbr {
	if o == nil || IsNil(o.PcfUeSliceMbrList) {
		var ret map[string]SliceMbr
		return ret
	}
	return *o.PcfUeSliceMbrList
}

// GetPcfUeSliceMbrListOk returns a tuple with the PcfUeSliceMbrList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetPcfUeSliceMbrListOk() (*map[string]SliceMbr, bool) {
	if o == nil || IsNil(o.PcfUeSliceMbrList) {
		return nil, false
	}
	return o.PcfUeSliceMbrList, true
}

// HasPcfUeSliceMbrList returns a boolean if a field has been set.
func (o *UeContext) HasPcfUeSliceMbrList() bool {
	if o != nil && !IsNil(o.PcfUeSliceMbrList) {
		return true
	}

	return false
}

// SetPcfUeSliceMbrList gets a reference to the given map[string]SliceMbr and assigns it to the PcfUeSliceMbrList field.
func (o *UeContext) SetPcfUeSliceMbrList(v map[string]SliceMbr) {
	o.PcfUeSliceMbrList = &v
}

// GetSmsfSetId returns the SmsfSetId field value if set, zero value otherwise.
func (o *UeContext) GetSmsfSetId() string {
	if o == nil || IsNil(o.SmsfSetId) {
		var ret string
		return ret
	}
	return *o.SmsfSetId
}

// GetSmsfSetIdOk returns a tuple with the SmsfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSmsfSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmsfSetId) {
		return nil, false
	}
	return o.SmsfSetId, true
}

// HasSmsfSetId returns a boolean if a field has been set.
func (o *UeContext) HasSmsfSetId() bool {
	if o != nil && !IsNil(o.SmsfSetId) {
		return true
	}

	return false
}

// SetSmsfSetId gets a reference to the given string and assigns it to the SmsfSetId field.
func (o *UeContext) SetSmsfSetId(v string) {
	o.SmsfSetId = &v
}

// GetSmsfServiceSetId returns the SmsfServiceSetId field value if set, zero value otherwise.
func (o *UeContext) GetSmsfServiceSetId() string {
	if o == nil || IsNil(o.SmsfServiceSetId) {
		var ret string
		return ret
	}
	return *o.SmsfServiceSetId
}

// GetSmsfServiceSetIdOk returns a tuple with the SmsfServiceSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSmsfServiceSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmsfServiceSetId) {
		return nil, false
	}
	return o.SmsfServiceSetId, true
}

// HasSmsfServiceSetId returns a boolean if a field has been set.
func (o *UeContext) HasSmsfServiceSetId() bool {
	if o != nil && !IsNil(o.SmsfServiceSetId) {
		return true
	}

	return false
}

// SetSmsfServiceSetId gets a reference to the given string and assigns it to the SmsfServiceSetId field.
func (o *UeContext) SetSmsfServiceSetId(v string) {
	o.SmsfServiceSetId = &v
}

// GetSmsfBindingInfo returns the SmsfBindingInfo field value if set, zero value otherwise.
func (o *UeContext) GetSmsfBindingInfo() string {
	if o == nil || IsNil(o.SmsfBindingInfo) {
		var ret string
		return ret
	}
	return *o.SmsfBindingInfo
}

// GetSmsfBindingInfoOk returns a tuple with the SmsfBindingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetSmsfBindingInfoOk() (*string, bool) {
	if o == nil || IsNil(o.SmsfBindingInfo) {
		return nil, false
	}
	return o.SmsfBindingInfo, true
}

// HasSmsfBindingInfo returns a boolean if a field has been set.
func (o *UeContext) HasSmsfBindingInfo() bool {
	if o != nil && !IsNil(o.SmsfBindingInfo) {
		return true
	}

	return false
}

// SetSmsfBindingInfo gets a reference to the given string and assigns it to the SmsfBindingInfo field.
func (o *UeContext) SetSmsfBindingInfo(v string) {
	o.SmsfBindingInfo = &v
}

// GetDisasterRoamingInd returns the DisasterRoamingInd field value if set, zero value otherwise.
func (o *UeContext) GetDisasterRoamingInd() bool {
	if o == nil || IsNil(o.DisasterRoamingInd) {
		var ret bool
		return ret
	}
	return *o.DisasterRoamingInd
}

// GetDisasterRoamingIndOk returns a tuple with the DisasterRoamingInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetDisasterRoamingIndOk() (*bool, bool) {
	if o == nil || IsNil(o.DisasterRoamingInd) {
		return nil, false
	}
	return o.DisasterRoamingInd, true
}

// HasDisasterRoamingInd returns a boolean if a field has been set.
func (o *UeContext) HasDisasterRoamingInd() bool {
	if o != nil && !IsNil(o.DisasterRoamingInd) {
		return true
	}

	return false
}

// SetDisasterRoamingInd gets a reference to the given bool and assigns it to the DisasterRoamingInd field.
func (o *UeContext) SetDisasterRoamingInd(v bool) {
	o.DisasterRoamingInd = &v
}

// GetDisasterPlmn returns the DisasterPlmn field value if set, zero value otherwise.
func (o *UeContext) GetDisasterPlmn() PlmnId {
	if o == nil || IsNil(o.DisasterPlmn) {
		var ret PlmnId
		return ret
	}
	return *o.DisasterPlmn
}

// GetDisasterPlmnOk returns a tuple with the DisasterPlmn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContext) GetDisasterPlmnOk() (*PlmnId, bool) {
	if o == nil || IsNil(o.DisasterPlmn) {
		return nil, false
	}
	return o.DisasterPlmn, true
}

// HasDisasterPlmn returns a boolean if a field has been set.
func (o *UeContext) HasDisasterPlmn() bool {
	if o != nil && !IsNil(o.DisasterPlmn) {
		return true
	}

	return false
}

// SetDisasterPlmn gets a reference to the given PlmnId and assigns it to the DisasterPlmn field.
func (o *UeContext) SetDisasterPlmn(v PlmnId) {
	o.DisasterPlmn = &v
}

func (o UeContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UeContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Supi) {
		toSerialize["supi"] = o.Supi
	}
	if !IsNil(o.SupiUnauthInd) {
		toSerialize["supiUnauthInd"] = o.SupiUnauthInd
	}
	if !IsNil(o.GpsiList) {
		toSerialize["gpsiList"] = o.GpsiList
	}
	if !IsNil(o.Pei) {
		toSerialize["pei"] = o.Pei
	}
	if !IsNil(o.UdmGroupId) {
		toSerialize["udmGroupId"] = o.UdmGroupId
	}
	if !IsNil(o.AusfGroupId) {
		toSerialize["ausfGroupId"] = o.AusfGroupId
	}
	if !IsNil(o.PcfGroupId) {
		toSerialize["pcfGroupId"] = o.PcfGroupId
	}
	if !IsNil(o.RoutingIndicator) {
		toSerialize["routingIndicator"] = o.RoutingIndicator
	}
	if !IsNil(o.HNwPubKeyId) {
		toSerialize["hNwPubKeyId"] = o.HNwPubKeyId
	}
	if !IsNil(o.GroupList) {
		toSerialize["groupList"] = o.GroupList
	}
	if !IsNil(o.DrxParameter) {
		toSerialize["drxParameter"] = o.DrxParameter
	}
	if !IsNil(o.SubRfsp) {
		toSerialize["subRfsp"] = o.SubRfsp
	}
	if !IsNil(o.UsedRfsp) {
		toSerialize["usedRfsp"] = o.UsedRfsp
	}
	if !IsNil(o.SubUeAmbr) {
		toSerialize["subUeAmbr"] = o.SubUeAmbr
	}
	if !IsNil(o.SubUeSliceMbrList) {
		toSerialize["subUeSliceMbrList"] = o.SubUeSliceMbrList
	}
	if !IsNil(o.SmsfId) {
		toSerialize["smsfId"] = o.SmsfId
	}
	if !IsNil(o.SeafData) {
		toSerialize["seafData"] = o.SeafData
	}
	if !IsNil(o.Var5gMmCapability) {
		toSerialize["5gMmCapability"] = o.Var5gMmCapability
	}
	if !IsNil(o.PcfId) {
		toSerialize["pcfId"] = o.PcfId
	}
	if !IsNil(o.PcfSetId) {
		toSerialize["pcfSetId"] = o.PcfSetId
	}
	if !IsNil(o.PcfAmpServiceSetId) {
		toSerialize["pcfAmpServiceSetId"] = o.PcfAmpServiceSetId
	}
	if !IsNil(o.PcfUepServiceSetId) {
		toSerialize["pcfUepServiceSetId"] = o.PcfUepServiceSetId
	}
	if !IsNil(o.PcfBinding) {
		toSerialize["pcfBinding"] = o.PcfBinding
	}
	if !IsNil(o.PcfAmPolicyUri) {
		toSerialize["pcfAmPolicyUri"] = o.PcfAmPolicyUri
	}
	if !IsNil(o.AmPolicyReqTriggerList) {
		toSerialize["amPolicyReqTriggerList"] = o.AmPolicyReqTriggerList
	}
	if !IsNil(o.PcfUePolicyUri) {
		toSerialize["pcfUePolicyUri"] = o.PcfUePolicyUri
	}
	if !IsNil(o.UePolicyReqTriggerList) {
		toSerialize["uePolicyReqTriggerList"] = o.UePolicyReqTriggerList
	}
	if !IsNil(o.HpcfId) {
		toSerialize["hpcfId"] = o.HpcfId
	}
	if !IsNil(o.HpcfSetId) {
		toSerialize["hpcfSetId"] = o.HpcfSetId
	}
	if !IsNil(o.RestrictedRatList) {
		toSerialize["restrictedRatList"] = o.RestrictedRatList
	}
	if !IsNil(o.ForbiddenAreaList) {
		toSerialize["forbiddenAreaList"] = o.ForbiddenAreaList
	}
	if !IsNil(o.ServiceAreaRestriction) {
		toSerialize["serviceAreaRestriction"] = o.ServiceAreaRestriction
	}
	if !IsNil(o.RestrictedCoreNwTypeList) {
		toSerialize["restrictedCoreNwTypeList"] = o.RestrictedCoreNwTypeList
	}
	if !IsNil(o.EventSubscriptionList) {
		toSerialize["eventSubscriptionList"] = o.EventSubscriptionList
	}
	if !IsNil(o.MmContextList) {
		toSerialize["mmContextList"] = o.MmContextList
	}
	if !IsNil(o.SessionContextList) {
		toSerialize["sessionContextList"] = o.SessionContextList
	}
	if !IsNil(o.EpsInterworkingInfo) {
		toSerialize["epsInterworkingInfo"] = o.EpsInterworkingInfo
	}
	if o.TraceData.IsSet() {
		toSerialize["traceData"] = o.TraceData.Get()
	}
	if !IsNil(o.ServiceGapExpiryTime) {
		toSerialize["serviceGapExpiryTime"] = o.ServiceGapExpiryTime
	}
	if !IsNil(o.StnSr) {
		toSerialize["stnSr"] = o.StnSr
	}
	if !IsNil(o.CMsisdn) {
		toSerialize["cMsisdn"] = o.CMsisdn
	}
	if !IsNil(o.MsClassmark2) {
		toSerialize["msClassmark2"] = o.MsClassmark2
	}
	if !IsNil(o.SupportedCodecList) {
		toSerialize["supportedCodecList"] = o.SupportedCodecList
	}
	if !IsNil(o.SmallDataRateStatusInfos) {
		toSerialize["smallDataRateStatusInfos"] = o.SmallDataRateStatusInfos
	}
	if !IsNil(o.RestrictedPrimaryRatList) {
		toSerialize["restrictedPrimaryRatList"] = o.RestrictedPrimaryRatList
	}
	if !IsNil(o.RestrictedSecondaryRatList) {
		toSerialize["restrictedSecondaryRatList"] = o.RestrictedSecondaryRatList
	}
	if !IsNil(o.V2xContext) {
		toSerialize["v2xContext"] = o.V2xContext
	}
	if !IsNil(o.LteCatMInd) {
		toSerialize["lteCatMInd"] = o.LteCatMInd
	}
	if !IsNil(o.RedCapInd) {
		toSerialize["redCapInd"] = o.RedCapInd
	}
	if !IsNil(o.MoExpDataCounter) {
		toSerialize["moExpDataCounter"] = o.MoExpDataCounter
	}
	if !IsNil(o.CagData) {
		toSerialize["cagData"] = o.CagData
	}
	if !IsNil(o.ManagementMdtInd) {
		toSerialize["managementMdtInd"] = o.ManagementMdtInd
	}
	if !IsNil(o.ImmediateMdtConf) {
		toSerialize["immediateMdtConf"] = o.ImmediateMdtConf
	}
	if !IsNil(o.EcRestrictionDataWb) {
		toSerialize["ecRestrictionDataWb"] = o.EcRestrictionDataWb
	}
	if !IsNil(o.EcRestrictionDataNb) {
		toSerialize["ecRestrictionDataNb"] = o.EcRestrictionDataNb
	}
	if !IsNil(o.IabOperationAllowed) {
		toSerialize["iabOperationAllowed"] = o.IabOperationAllowed
	}
	if !IsNil(o.ProseContext) {
		toSerialize["proseContext"] = o.ProseContext
	}
	if !IsNil(o.AnalyticsSubscriptionList) {
		toSerialize["analyticsSubscriptionList"] = o.AnalyticsSubscriptionList
	}
	if !IsNil(o.PcfAmpBindingInfo) {
		toSerialize["pcfAmpBindingInfo"] = o.PcfAmpBindingInfo
	}
	if !IsNil(o.PcfUepBindingInfo) {
		toSerialize["pcfUepBindingInfo"] = o.PcfUepBindingInfo
	}
	if !IsNil(o.UsedServiceAreaRestriction) {
		toSerialize["usedServiceAreaRestriction"] = o.UsedServiceAreaRestriction
	}
	if !IsNil(o.PraInAmPolicy) {
		toSerialize["praInAmPolicy"] = o.PraInAmPolicy
	}
	if !IsNil(o.PraInUePolicy) {
		toSerialize["praInUePolicy"] = o.PraInUePolicy
	}
	if !IsNil(o.UpdpSubscriptionData) {
		toSerialize["updpSubscriptionData"] = o.UpdpSubscriptionData
	}
	if !IsNil(o.SmPolicyNotifyPduList) {
		toSerialize["smPolicyNotifyPduList"] = o.SmPolicyNotifyPduList
	}
	if o.PcfUeCallbackInfo.IsSet() {
		toSerialize["pcfUeCallbackInfo"] = o.PcfUeCallbackInfo.Get()
	}
	if !IsNil(o.UePositioningCap) {
		toSerialize["uePositioningCap"] = o.UePositioningCap
	}
	if !IsNil(o.AstiDistributionIndication) {
		toSerialize["astiDistributionIndication"] = o.AstiDistributionIndication
	}
	if !IsNil(o.TsErrorBudget) {
		toSerialize["tsErrorBudget"] = o.TsErrorBudget
	}
	if !IsNil(o.SnpnOnboardInd) {
		toSerialize["snpnOnboardInd"] = o.SnpnOnboardInd
	}
	if o.SmfSelInfo.IsSet() {
		toSerialize["smfSelInfo"] = o.SmfSelInfo.Get()
	}
	if !IsNil(o.PcfUeSliceMbrList) {
		toSerialize["pcfUeSliceMbrList"] = o.PcfUeSliceMbrList
	}
	if !IsNil(o.SmsfSetId) {
		toSerialize["smsfSetId"] = o.SmsfSetId
	}
	if !IsNil(o.SmsfServiceSetId) {
		toSerialize["smsfServiceSetId"] = o.SmsfServiceSetId
	}
	if !IsNil(o.SmsfBindingInfo) {
		toSerialize["smsfBindingInfo"] = o.SmsfBindingInfo
	}
	if !IsNil(o.DisasterRoamingInd) {
		toSerialize["disasterRoamingInd"] = o.DisasterRoamingInd
	}
	if !IsNil(o.DisasterPlmn) {
		toSerialize["disasterPlmn"] = o.DisasterPlmn
	}
	return toSerialize, nil
}

type NullableUeContext struct {
	value *UeContext
	isSet bool
}

func (v NullableUeContext) Get() *UeContext {
	return v.value
}

func (v *NullableUeContext) Set(val *UeContext) {
	v.value = val
	v.isSet = true
}

func (v NullableUeContext) IsSet() bool {
	return v.isSet
}

func (v *NullableUeContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeContext(val *UeContext) *NullableUeContext {
	return &NullableUeContext{value: val, isSet: true}
}

func (v NullableUeContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


