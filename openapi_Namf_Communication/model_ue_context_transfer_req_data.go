/*
Namf_Communication

AMF Communication Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the UeContextTransferReqData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UeContextTransferReqData{}

// UeContextTransferReqData Data within a UE Context Transfer Request to start transferring of an individual ueContext resource from old AMF to new AMF
type UeContextTransferReqData struct {
	Reason TransferReason `json:"reason"`
	AccessType AccessType `json:"accessType"`
	PlmnId *PlmnIdNid `json:"plmnId,omitempty"`
	RegRequest *N1MessageContainer `json:"regRequest,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
}

// NewUeContextTransferReqData instantiates a new UeContextTransferReqData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeContextTransferReqData(reason TransferReason, accessType AccessType) *UeContextTransferReqData {
	this := UeContextTransferReqData{}
	this.Reason = reason
	this.AccessType = accessType
	return &this
}

// NewUeContextTransferReqDataWithDefaults instantiates a new UeContextTransferReqData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeContextTransferReqDataWithDefaults() *UeContextTransferReqData {
	this := UeContextTransferReqData{}
	return &this
}

// GetReason returns the Reason field value
func (o *UeContextTransferReqData) GetReason() TransferReason {
	if o == nil {
		var ret TransferReason
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *UeContextTransferReqData) GetReasonOk() (*TransferReason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *UeContextTransferReqData) SetReason(v TransferReason) {
	o.Reason = v
}

// GetAccessType returns the AccessType field value
func (o *UeContextTransferReqData) GetAccessType() AccessType {
	if o == nil {
		var ret AccessType
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *UeContextTransferReqData) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *UeContextTransferReqData) SetAccessType(v AccessType) {
	o.AccessType = v
}

// GetPlmnId returns the PlmnId field value if set, zero value otherwise.
func (o *UeContextTransferReqData) GetPlmnId() PlmnIdNid {
	if o == nil || isNil(o.PlmnId) {
		var ret PlmnIdNid
		return ret
	}
	return *o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextTransferReqData) GetPlmnIdOk() (*PlmnIdNid, bool) {
	if o == nil || isNil(o.PlmnId) {
		return nil, false
	}
	return o.PlmnId, true
}

// HasPlmnId returns a boolean if a field has been set.
func (o *UeContextTransferReqData) HasPlmnId() bool {
	if o != nil && !isNil(o.PlmnId) {
		return true
	}

	return false
}

// SetPlmnId gets a reference to the given PlmnIdNid and assigns it to the PlmnId field.
func (o *UeContextTransferReqData) SetPlmnId(v PlmnIdNid) {
	o.PlmnId = &v
}

// GetRegRequest returns the RegRequest field value if set, zero value otherwise.
func (o *UeContextTransferReqData) GetRegRequest() N1MessageContainer {
	if o == nil || isNil(o.RegRequest) {
		var ret N1MessageContainer
		return ret
	}
	return *o.RegRequest
}

// GetRegRequestOk returns a tuple with the RegRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextTransferReqData) GetRegRequestOk() (*N1MessageContainer, bool) {
	if o == nil || isNil(o.RegRequest) {
		return nil, false
	}
	return o.RegRequest, true
}

// HasRegRequest returns a boolean if a field has been set.
func (o *UeContextTransferReqData) HasRegRequest() bool {
	if o != nil && !isNil(o.RegRequest) {
		return true
	}

	return false
}

// SetRegRequest gets a reference to the given N1MessageContainer and assigns it to the RegRequest field.
func (o *UeContextTransferReqData) SetRegRequest(v N1MessageContainer) {
	o.RegRequest = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *UeContextTransferReqData) GetSupportedFeatures() string {
	if o == nil || isNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeContextTransferReqData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || isNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *UeContextTransferReqData) HasSupportedFeatures() bool {
	if o != nil && !isNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *UeContextTransferReqData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

func (o UeContextTransferReqData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UeContextTransferReqData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	toSerialize["accessType"] = o.AccessType
	if !isNil(o.PlmnId) {
		toSerialize["plmnId"] = o.PlmnId
	}
	if !isNil(o.RegRequest) {
		toSerialize["regRequest"] = o.RegRequest
	}
	if !isNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	return toSerialize, nil
}

type NullableUeContextTransferReqData struct {
	value *UeContextTransferReqData
	isSet bool
}

func (v NullableUeContextTransferReqData) Get() *UeContextTransferReqData {
	return v.value
}

func (v *NullableUeContextTransferReqData) Set(val *UeContextTransferReqData) {
	v.value = val
	v.isSet = true
}

func (v NullableUeContextTransferReqData) IsSet() bool {
	return v.isSet
}

func (v *NullableUeContextTransferReqData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeContextTransferReqData(val *UeContextTransferReqData) *NullableUeContextTransferReqData {
	return &NullableUeContextTransferReqData{value: val, isSet: true}
}

func (v NullableUeContextTransferReqData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeContextTransferReqData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


