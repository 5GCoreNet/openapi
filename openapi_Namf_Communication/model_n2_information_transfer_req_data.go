/*
Namf_Communication

AMF Communication Service.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the N2InformationTransferReqData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &N2InformationTransferReqData{}

// N2InformationTransferReqData Data within a N2 Information Transfer request containing the N2 information requested to be transferred to 5G AN
type N2InformationTransferReqData struct {
	TaiList           []Tai             `json:"taiList,omitempty"`
	RatSelector       *RatSelector      `json:"ratSelector,omitempty"`
	GlobalRanNodeList []GlobalRanNodeId `json:"globalRanNodeList,omitempty"`
	N2Information     N2InfoContainer   `json:"n2Information"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
}

// NewN2InformationTransferReqData instantiates a new N2InformationTransferReqData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewN2InformationTransferReqData(n2Information N2InfoContainer) *N2InformationTransferReqData {
	this := N2InformationTransferReqData{}
	this.N2Information = n2Information
	return &this
}

// NewN2InformationTransferReqDataWithDefaults instantiates a new N2InformationTransferReqData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewN2InformationTransferReqDataWithDefaults() *N2InformationTransferReqData {
	this := N2InformationTransferReqData{}
	return &this
}

// GetTaiList returns the TaiList field value if set, zero value otherwise.
func (o *N2InformationTransferReqData) GetTaiList() []Tai {
	if o == nil || IsNil(o.TaiList) {
		var ret []Tai
		return ret
	}
	return o.TaiList
}

// GetTaiListOk returns a tuple with the TaiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationTransferReqData) GetTaiListOk() ([]Tai, bool) {
	if o == nil || IsNil(o.TaiList) {
		return nil, false
	}
	return o.TaiList, true
}

// HasTaiList returns a boolean if a field has been set.
func (o *N2InformationTransferReqData) HasTaiList() bool {
	if o != nil && !IsNil(o.TaiList) {
		return true
	}

	return false
}

// SetTaiList gets a reference to the given []Tai and assigns it to the TaiList field.
func (o *N2InformationTransferReqData) SetTaiList(v []Tai) {
	o.TaiList = v
}

// GetRatSelector returns the RatSelector field value if set, zero value otherwise.
func (o *N2InformationTransferReqData) GetRatSelector() RatSelector {
	if o == nil || IsNil(o.RatSelector) {
		var ret RatSelector
		return ret
	}
	return *o.RatSelector
}

// GetRatSelectorOk returns a tuple with the RatSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationTransferReqData) GetRatSelectorOk() (*RatSelector, bool) {
	if o == nil || IsNil(o.RatSelector) {
		return nil, false
	}
	return o.RatSelector, true
}

// HasRatSelector returns a boolean if a field has been set.
func (o *N2InformationTransferReqData) HasRatSelector() bool {
	if o != nil && !IsNil(o.RatSelector) {
		return true
	}

	return false
}

// SetRatSelector gets a reference to the given RatSelector and assigns it to the RatSelector field.
func (o *N2InformationTransferReqData) SetRatSelector(v RatSelector) {
	o.RatSelector = &v
}

// GetGlobalRanNodeList returns the GlobalRanNodeList field value if set, zero value otherwise.
func (o *N2InformationTransferReqData) GetGlobalRanNodeList() []GlobalRanNodeId {
	if o == nil || IsNil(o.GlobalRanNodeList) {
		var ret []GlobalRanNodeId
		return ret
	}
	return o.GlobalRanNodeList
}

// GetGlobalRanNodeListOk returns a tuple with the GlobalRanNodeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationTransferReqData) GetGlobalRanNodeListOk() ([]GlobalRanNodeId, bool) {
	if o == nil || IsNil(o.GlobalRanNodeList) {
		return nil, false
	}
	return o.GlobalRanNodeList, true
}

// HasGlobalRanNodeList returns a boolean if a field has been set.
func (o *N2InformationTransferReqData) HasGlobalRanNodeList() bool {
	if o != nil && !IsNil(o.GlobalRanNodeList) {
		return true
	}

	return false
}

// SetGlobalRanNodeList gets a reference to the given []GlobalRanNodeId and assigns it to the GlobalRanNodeList field.
func (o *N2InformationTransferReqData) SetGlobalRanNodeList(v []GlobalRanNodeId) {
	o.GlobalRanNodeList = v
}

// GetN2Information returns the N2Information field value
func (o *N2InformationTransferReqData) GetN2Information() N2InfoContainer {
	if o == nil {
		var ret N2InfoContainer
		return ret
	}

	return o.N2Information
}

// GetN2InformationOk returns a tuple with the N2Information field value
// and a boolean to check if the value has been set.
func (o *N2InformationTransferReqData) GetN2InformationOk() (*N2InfoContainer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.N2Information, true
}

// SetN2Information sets field value
func (o *N2InformationTransferReqData) SetN2Information(v N2InfoContainer) {
	o.N2Information = v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *N2InformationTransferReqData) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N2InformationTransferReqData) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *N2InformationTransferReqData) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *N2InformationTransferReqData) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

func (o N2InformationTransferReqData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o N2InformationTransferReqData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaiList) {
		toSerialize["taiList"] = o.TaiList
	}
	if !IsNil(o.RatSelector) {
		toSerialize["ratSelector"] = o.RatSelector
	}
	if !IsNil(o.GlobalRanNodeList) {
		toSerialize["globalRanNodeList"] = o.GlobalRanNodeList
	}
	toSerialize["n2Information"] = o.N2Information
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	return toSerialize, nil
}

type NullableN2InformationTransferReqData struct {
	value *N2InformationTransferReqData
	isSet bool
}

func (v NullableN2InformationTransferReqData) Get() *N2InformationTransferReqData {
	return v.value
}

func (v *NullableN2InformationTransferReqData) Set(val *N2InformationTransferReqData) {
	v.value = val
	v.isSet = true
}

func (v NullableN2InformationTransferReqData) IsSet() bool {
	return v.isSet
}

func (v *NullableN2InformationTransferReqData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableN2InformationTransferReqData(val *N2InformationTransferReqData) *NullableN2InformationTransferReqData {
	return &NullableN2InformationTransferReqData{value: val, isSet: true}
}

func (v NullableN2InformationTransferReqData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableN2InformationTransferReqData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
