/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
	"fmt"
)

// ScTypeAnyOf the model 'ScTypeAnyOf'
type ScTypeAnyOf string

// List of ScType_anyOf
const (
	NATIVE ScTypeAnyOf = "NATIVE"
	MAPPED ScTypeAnyOf = "MAPPED"
)

// All allowed values of ScTypeAnyOf enum
var AllowedScTypeAnyOfEnumValues = []ScTypeAnyOf{
	"NATIVE",
	"MAPPED",
}

func (v *ScTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScTypeAnyOf(value)
	for _, existing := range AllowedScTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScTypeAnyOf", value)
}

// NewScTypeAnyOfFromValue returns a pointer to a valid ScTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScTypeAnyOfFromValue(v string) (*ScTypeAnyOf, error) {
	ev := ScTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScTypeAnyOf: valid values are %v", v, AllowedScTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedScTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScType_anyOf value
func (v ScTypeAnyOf) Ptr() *ScTypeAnyOf {
	return &v
}

type NullableScTypeAnyOf struct {
	value *ScTypeAnyOf
	isSet bool
}

func (v NullableScTypeAnyOf) Get() *ScTypeAnyOf {
	return v.value
}

func (v *NullableScTypeAnyOf) Set(val *ScTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableScTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableScTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScTypeAnyOf(val *ScTypeAnyOf) *NullableScTypeAnyOf {
	return &NullableScTypeAnyOf{value: val, isSet: true}
}

func (v NullableScTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

