/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
	"fmt"
)

// ReportingTriggerAnyOf the model 'ReportingTriggerAnyOf'
type ReportingTriggerAnyOf string

// List of ReportingTrigger_anyOf
const (
	PERIODICAL ReportingTriggerAnyOf = "PERIODICAL"
	EVENT_A2 ReportingTriggerAnyOf = "EVENT_A2"
	EVENT_A2_PERIODIC ReportingTriggerAnyOf = "EVENT_A2_PERIODIC"
	ALL_RRM_EVENT_TRIGGERS ReportingTriggerAnyOf = "ALL_RRM_EVENT_TRIGGERS"
)

// All allowed values of ReportingTriggerAnyOf enum
var AllowedReportingTriggerAnyOfEnumValues = []ReportingTriggerAnyOf{
	"PERIODICAL",
	"EVENT_A2",
	"EVENT_A2_PERIODIC",
	"ALL_RRM_EVENT_TRIGGERS",
}

func (v *ReportingTriggerAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportingTriggerAnyOf(value)
	for _, existing := range AllowedReportingTriggerAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportingTriggerAnyOf", value)
}

// NewReportingTriggerAnyOfFromValue returns a pointer to a valid ReportingTriggerAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportingTriggerAnyOfFromValue(v string) (*ReportingTriggerAnyOf, error) {
	ev := ReportingTriggerAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportingTriggerAnyOf: valid values are %v", v, AllowedReportingTriggerAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportingTriggerAnyOf) IsValid() bool {
	for _, existing := range AllowedReportingTriggerAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReportingTrigger_anyOf value
func (v ReportingTriggerAnyOf) Ptr() *ReportingTriggerAnyOf {
	return &v
}

type NullableReportingTriggerAnyOf struct {
	value *ReportingTriggerAnyOf
	isSet bool
}

func (v NullableReportingTriggerAnyOf) Get() *ReportingTriggerAnyOf {
	return v.value
}

func (v *NullableReportingTriggerAnyOf) Set(val *ReportingTriggerAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingTriggerAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingTriggerAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingTriggerAnyOf(val *ReportingTriggerAnyOf) *NullableReportingTriggerAnyOf {
	return &NullableReportingTriggerAnyOf{value: val, isSet: true}
}

func (v NullableReportingTriggerAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingTriggerAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

