/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// IndividualUeContextDocumentApiService IndividualUeContextDocumentApi service
type IndividualUeContextDocumentApiService service

type ApiCancelRelocateUEContextRequest struct {
	ctx                   context.Context
	ApiService            *IndividualUeContextDocumentApiService
	ueContextId           string
	jsonData              *UeContextCancelRelocateData
	binaryDataGtpcMessage *os.File
}

func (r ApiCancelRelocateUEContextRequest) JsonData(jsonData UeContextCancelRelocateData) ApiCancelRelocateUEContextRequest {
	r.jsonData = &jsonData
	return r
}

func (r ApiCancelRelocateUEContextRequest) BinaryDataGtpcMessage(binaryDataGtpcMessage *os.File) ApiCancelRelocateUEContextRequest {
	r.binaryDataGtpcMessage = binaryDataGtpcMessage
	return r
}

func (r ApiCancelRelocateUEContextRequest) Execute() (*http.Response, error) {
	return r.ApiService.CancelRelocateUEContextExecute(r)
}

/*
CancelRelocateUEContext Namf_Communication CancelRelocateUEContext service Operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueContextId UE Context Identifier
	@return ApiCancelRelocateUEContextRequest
*/
func (a *IndividualUeContextDocumentApiService) CancelRelocateUEContext(ctx context.Context, ueContextId string) ApiCancelRelocateUEContextRequest {
	return ApiCancelRelocateUEContextRequest{
		ApiService:  a,
		ctx:         ctx,
		ueContextId: ueContextId,
	}
}

// Execute executes the request
func (a *IndividualUeContextDocumentApiService) CancelRelocateUEContextExecute(r ApiCancelRelocateUEContextRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualUeContextDocumentApiService.CancelRelocateUEContext")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ue-contexts/{ueContextId}/cancel-relocate"
	localVarPath = strings.Replace(localVarPath, "{"+"ueContextId"+"}", url.PathEscape(parameterValueToString(r.ueContextId, "ueContextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/related"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.jsonData != nil {
		paramJson, err := parameterToJson(*r.jsonData)
		if err != nil {
			return nil, err
		}
		localVarFormParams.Add("jsonData", paramJson)
	}
	var binaryDataGtpcMessageLocalVarFormFileName string
	var binaryDataGtpcMessageLocalVarFileName string
	var binaryDataGtpcMessageLocalVarFileBytes []byte

	binaryDataGtpcMessageLocalVarFormFileName = "binaryDataGtpcMessage"

	binaryDataGtpcMessageLocalVarFile := r.binaryDataGtpcMessage

	if binaryDataGtpcMessageLocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataGtpcMessageLocalVarFile)

		binaryDataGtpcMessageLocalVarFileBytes = fbs
		binaryDataGtpcMessageLocalVarFileName = binaryDataGtpcMessageLocalVarFile.Name()
		binaryDataGtpcMessageLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataGtpcMessageLocalVarFileBytes, fileName: binaryDataGtpcMessageLocalVarFileName, formFileName: binaryDataGtpcMessageLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateUEContextRequest struct {
	ctx                          context.Context
	ApiService                   *IndividualUeContextDocumentApiService
	ueContextId                  string
	jsonData                     *UeContextCreateData
	binaryDataN2Information      *os.File
	binaryDataN2InformationExt1  *os.File
	binaryDataN2InformationExt2  *os.File
	binaryDataN2InformationExt3  *os.File
	binaryDataN2InformationExt4  *os.File
	binaryDataN2InformationExt5  *os.File
	binaryDataN2InformationExt6  *os.File
	binaryDataN2InformationExt7  *os.File
	binaryDataN2InformationExt8  *os.File
	binaryDataN2InformationExt9  *os.File
	binaryDataN2InformationExt10 *os.File
	binaryDataN2InformationExt11 *os.File
	binaryDataN2InformationExt12 *os.File
	binaryDataN2InformationExt13 *os.File
	binaryDataN2InformationExt14 *os.File
	binaryDataN2InformationExt15 *os.File
	binaryDataN2InformationExt16 *os.File
	binaryDataN2InformationExt17 *os.File
}

func (r ApiCreateUEContextRequest) JsonData(jsonData UeContextCreateData) ApiCreateUEContextRequest {
	r.jsonData = &jsonData
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2Information(binaryDataN2Information *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2Information = binaryDataN2Information
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt1(binaryDataN2InformationExt1 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt1 = binaryDataN2InformationExt1
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt2(binaryDataN2InformationExt2 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt2 = binaryDataN2InformationExt2
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt3(binaryDataN2InformationExt3 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt3 = binaryDataN2InformationExt3
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt4(binaryDataN2InformationExt4 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt4 = binaryDataN2InformationExt4
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt5(binaryDataN2InformationExt5 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt5 = binaryDataN2InformationExt5
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt6(binaryDataN2InformationExt6 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt6 = binaryDataN2InformationExt6
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt7(binaryDataN2InformationExt7 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt7 = binaryDataN2InformationExt7
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt8(binaryDataN2InformationExt8 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt8 = binaryDataN2InformationExt8
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt9(binaryDataN2InformationExt9 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt9 = binaryDataN2InformationExt9
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt10(binaryDataN2InformationExt10 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt10 = binaryDataN2InformationExt10
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt11(binaryDataN2InformationExt11 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt11 = binaryDataN2InformationExt11
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt12(binaryDataN2InformationExt12 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt12 = binaryDataN2InformationExt12
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt13(binaryDataN2InformationExt13 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt13 = binaryDataN2InformationExt13
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt14(binaryDataN2InformationExt14 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt14 = binaryDataN2InformationExt14
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt15(binaryDataN2InformationExt15 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt15 = binaryDataN2InformationExt15
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt16(binaryDataN2InformationExt16 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt16 = binaryDataN2InformationExt16
	return r
}

func (r ApiCreateUEContextRequest) BinaryDataN2InformationExt17(binaryDataN2InformationExt17 *os.File) ApiCreateUEContextRequest {
	r.binaryDataN2InformationExt17 = binaryDataN2InformationExt17
	return r
}

func (r ApiCreateUEContextRequest) Execute() (*UeContextCreatedData, *http.Response, error) {
	return r.ApiService.CreateUEContextExecute(r)
}

/*
CreateUEContext Namf_Communication CreateUEContext service Operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueContextId UE Context Identifier
	@return ApiCreateUEContextRequest
*/
func (a *IndividualUeContextDocumentApiService) CreateUEContext(ctx context.Context, ueContextId string) ApiCreateUEContextRequest {
	return ApiCreateUEContextRequest{
		ApiService:  a,
		ctx:         ctx,
		ueContextId: ueContextId,
	}
}

// Execute executes the request
//
//	@return UeContextCreatedData
func (a *IndividualUeContextDocumentApiService) CreateUEContextExecute(r ApiCreateUEContextRequest) (*UeContextCreatedData, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UeContextCreatedData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualUeContextDocumentApiService.CreateUEContext")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ue-contexts/{ueContextId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ueContextId"+"}", url.PathEscape(parameterValueToString(r.ueContextId, "ueContextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/related"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "multipart/related", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.jsonData != nil {
		paramJson, err := parameterToJson(*r.jsonData)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("jsonData", paramJson)
	}
	var binaryDataN2InformationLocalVarFormFileName string
	var binaryDataN2InformationLocalVarFileName string
	var binaryDataN2InformationLocalVarFileBytes []byte

	binaryDataN2InformationLocalVarFormFileName = "binaryDataN2Information"

	binaryDataN2InformationLocalVarFile := r.binaryDataN2Information

	if binaryDataN2InformationLocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationLocalVarFile)

		binaryDataN2InformationLocalVarFileBytes = fbs
		binaryDataN2InformationLocalVarFileName = binaryDataN2InformationLocalVarFile.Name()
		binaryDataN2InformationLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationLocalVarFileBytes, fileName: binaryDataN2InformationLocalVarFileName, formFileName: binaryDataN2InformationLocalVarFormFileName})
	}
	var binaryDataN2InformationExt1LocalVarFormFileName string
	var binaryDataN2InformationExt1LocalVarFileName string
	var binaryDataN2InformationExt1LocalVarFileBytes []byte

	binaryDataN2InformationExt1LocalVarFormFileName = "binaryDataN2InformationExt1"

	binaryDataN2InformationExt1LocalVarFile := r.binaryDataN2InformationExt1

	if binaryDataN2InformationExt1LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt1LocalVarFile)

		binaryDataN2InformationExt1LocalVarFileBytes = fbs
		binaryDataN2InformationExt1LocalVarFileName = binaryDataN2InformationExt1LocalVarFile.Name()
		binaryDataN2InformationExt1LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt1LocalVarFileBytes, fileName: binaryDataN2InformationExt1LocalVarFileName, formFileName: binaryDataN2InformationExt1LocalVarFormFileName})
	}
	var binaryDataN2InformationExt2LocalVarFormFileName string
	var binaryDataN2InformationExt2LocalVarFileName string
	var binaryDataN2InformationExt2LocalVarFileBytes []byte

	binaryDataN2InformationExt2LocalVarFormFileName = "binaryDataN2InformationExt2"

	binaryDataN2InformationExt2LocalVarFile := r.binaryDataN2InformationExt2

	if binaryDataN2InformationExt2LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt2LocalVarFile)

		binaryDataN2InformationExt2LocalVarFileBytes = fbs
		binaryDataN2InformationExt2LocalVarFileName = binaryDataN2InformationExt2LocalVarFile.Name()
		binaryDataN2InformationExt2LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt2LocalVarFileBytes, fileName: binaryDataN2InformationExt2LocalVarFileName, formFileName: binaryDataN2InformationExt2LocalVarFormFileName})
	}
	var binaryDataN2InformationExt3LocalVarFormFileName string
	var binaryDataN2InformationExt3LocalVarFileName string
	var binaryDataN2InformationExt3LocalVarFileBytes []byte

	binaryDataN2InformationExt3LocalVarFormFileName = "binaryDataN2InformationExt3"

	binaryDataN2InformationExt3LocalVarFile := r.binaryDataN2InformationExt3

	if binaryDataN2InformationExt3LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt3LocalVarFile)

		binaryDataN2InformationExt3LocalVarFileBytes = fbs
		binaryDataN2InformationExt3LocalVarFileName = binaryDataN2InformationExt3LocalVarFile.Name()
		binaryDataN2InformationExt3LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt3LocalVarFileBytes, fileName: binaryDataN2InformationExt3LocalVarFileName, formFileName: binaryDataN2InformationExt3LocalVarFormFileName})
	}
	var binaryDataN2InformationExt4LocalVarFormFileName string
	var binaryDataN2InformationExt4LocalVarFileName string
	var binaryDataN2InformationExt4LocalVarFileBytes []byte

	binaryDataN2InformationExt4LocalVarFormFileName = "binaryDataN2InformationExt4"

	binaryDataN2InformationExt4LocalVarFile := r.binaryDataN2InformationExt4

	if binaryDataN2InformationExt4LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt4LocalVarFile)

		binaryDataN2InformationExt4LocalVarFileBytes = fbs
		binaryDataN2InformationExt4LocalVarFileName = binaryDataN2InformationExt4LocalVarFile.Name()
		binaryDataN2InformationExt4LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt4LocalVarFileBytes, fileName: binaryDataN2InformationExt4LocalVarFileName, formFileName: binaryDataN2InformationExt4LocalVarFormFileName})
	}
	var binaryDataN2InformationExt5LocalVarFormFileName string
	var binaryDataN2InformationExt5LocalVarFileName string
	var binaryDataN2InformationExt5LocalVarFileBytes []byte

	binaryDataN2InformationExt5LocalVarFormFileName = "binaryDataN2InformationExt5"

	binaryDataN2InformationExt5LocalVarFile := r.binaryDataN2InformationExt5

	if binaryDataN2InformationExt5LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt5LocalVarFile)

		binaryDataN2InformationExt5LocalVarFileBytes = fbs
		binaryDataN2InformationExt5LocalVarFileName = binaryDataN2InformationExt5LocalVarFile.Name()
		binaryDataN2InformationExt5LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt5LocalVarFileBytes, fileName: binaryDataN2InformationExt5LocalVarFileName, formFileName: binaryDataN2InformationExt5LocalVarFormFileName})
	}
	var binaryDataN2InformationExt6LocalVarFormFileName string
	var binaryDataN2InformationExt6LocalVarFileName string
	var binaryDataN2InformationExt6LocalVarFileBytes []byte

	binaryDataN2InformationExt6LocalVarFormFileName = "binaryDataN2InformationExt6"

	binaryDataN2InformationExt6LocalVarFile := r.binaryDataN2InformationExt6

	if binaryDataN2InformationExt6LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt6LocalVarFile)

		binaryDataN2InformationExt6LocalVarFileBytes = fbs
		binaryDataN2InformationExt6LocalVarFileName = binaryDataN2InformationExt6LocalVarFile.Name()
		binaryDataN2InformationExt6LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt6LocalVarFileBytes, fileName: binaryDataN2InformationExt6LocalVarFileName, formFileName: binaryDataN2InformationExt6LocalVarFormFileName})
	}
	var binaryDataN2InformationExt7LocalVarFormFileName string
	var binaryDataN2InformationExt7LocalVarFileName string
	var binaryDataN2InformationExt7LocalVarFileBytes []byte

	binaryDataN2InformationExt7LocalVarFormFileName = "binaryDataN2InformationExt7"

	binaryDataN2InformationExt7LocalVarFile := r.binaryDataN2InformationExt7

	if binaryDataN2InformationExt7LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt7LocalVarFile)

		binaryDataN2InformationExt7LocalVarFileBytes = fbs
		binaryDataN2InformationExt7LocalVarFileName = binaryDataN2InformationExt7LocalVarFile.Name()
		binaryDataN2InformationExt7LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt7LocalVarFileBytes, fileName: binaryDataN2InformationExt7LocalVarFileName, formFileName: binaryDataN2InformationExt7LocalVarFormFileName})
	}
	var binaryDataN2InformationExt8LocalVarFormFileName string
	var binaryDataN2InformationExt8LocalVarFileName string
	var binaryDataN2InformationExt8LocalVarFileBytes []byte

	binaryDataN2InformationExt8LocalVarFormFileName = "binaryDataN2InformationExt8"

	binaryDataN2InformationExt8LocalVarFile := r.binaryDataN2InformationExt8

	if binaryDataN2InformationExt8LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt8LocalVarFile)

		binaryDataN2InformationExt8LocalVarFileBytes = fbs
		binaryDataN2InformationExt8LocalVarFileName = binaryDataN2InformationExt8LocalVarFile.Name()
		binaryDataN2InformationExt8LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt8LocalVarFileBytes, fileName: binaryDataN2InformationExt8LocalVarFileName, formFileName: binaryDataN2InformationExt8LocalVarFormFileName})
	}
	var binaryDataN2InformationExt9LocalVarFormFileName string
	var binaryDataN2InformationExt9LocalVarFileName string
	var binaryDataN2InformationExt9LocalVarFileBytes []byte

	binaryDataN2InformationExt9LocalVarFormFileName = "binaryDataN2InformationExt9"

	binaryDataN2InformationExt9LocalVarFile := r.binaryDataN2InformationExt9

	if binaryDataN2InformationExt9LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt9LocalVarFile)

		binaryDataN2InformationExt9LocalVarFileBytes = fbs
		binaryDataN2InformationExt9LocalVarFileName = binaryDataN2InformationExt9LocalVarFile.Name()
		binaryDataN2InformationExt9LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt9LocalVarFileBytes, fileName: binaryDataN2InformationExt9LocalVarFileName, formFileName: binaryDataN2InformationExt9LocalVarFormFileName})
	}
	var binaryDataN2InformationExt10LocalVarFormFileName string
	var binaryDataN2InformationExt10LocalVarFileName string
	var binaryDataN2InformationExt10LocalVarFileBytes []byte

	binaryDataN2InformationExt10LocalVarFormFileName = "binaryDataN2InformationExt10"

	binaryDataN2InformationExt10LocalVarFile := r.binaryDataN2InformationExt10

	if binaryDataN2InformationExt10LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt10LocalVarFile)

		binaryDataN2InformationExt10LocalVarFileBytes = fbs
		binaryDataN2InformationExt10LocalVarFileName = binaryDataN2InformationExt10LocalVarFile.Name()
		binaryDataN2InformationExt10LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt10LocalVarFileBytes, fileName: binaryDataN2InformationExt10LocalVarFileName, formFileName: binaryDataN2InformationExt10LocalVarFormFileName})
	}
	var binaryDataN2InformationExt11LocalVarFormFileName string
	var binaryDataN2InformationExt11LocalVarFileName string
	var binaryDataN2InformationExt11LocalVarFileBytes []byte

	binaryDataN2InformationExt11LocalVarFormFileName = "binaryDataN2InformationExt11"

	binaryDataN2InformationExt11LocalVarFile := r.binaryDataN2InformationExt11

	if binaryDataN2InformationExt11LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt11LocalVarFile)

		binaryDataN2InformationExt11LocalVarFileBytes = fbs
		binaryDataN2InformationExt11LocalVarFileName = binaryDataN2InformationExt11LocalVarFile.Name()
		binaryDataN2InformationExt11LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt11LocalVarFileBytes, fileName: binaryDataN2InformationExt11LocalVarFileName, formFileName: binaryDataN2InformationExt11LocalVarFormFileName})
	}
	var binaryDataN2InformationExt12LocalVarFormFileName string
	var binaryDataN2InformationExt12LocalVarFileName string
	var binaryDataN2InformationExt12LocalVarFileBytes []byte

	binaryDataN2InformationExt12LocalVarFormFileName = "binaryDataN2InformationExt12"

	binaryDataN2InformationExt12LocalVarFile := r.binaryDataN2InformationExt12

	if binaryDataN2InformationExt12LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt12LocalVarFile)

		binaryDataN2InformationExt12LocalVarFileBytes = fbs
		binaryDataN2InformationExt12LocalVarFileName = binaryDataN2InformationExt12LocalVarFile.Name()
		binaryDataN2InformationExt12LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt12LocalVarFileBytes, fileName: binaryDataN2InformationExt12LocalVarFileName, formFileName: binaryDataN2InformationExt12LocalVarFormFileName})
	}
	var binaryDataN2InformationExt13LocalVarFormFileName string
	var binaryDataN2InformationExt13LocalVarFileName string
	var binaryDataN2InformationExt13LocalVarFileBytes []byte

	binaryDataN2InformationExt13LocalVarFormFileName = "binaryDataN2InformationExt13"

	binaryDataN2InformationExt13LocalVarFile := r.binaryDataN2InformationExt13

	if binaryDataN2InformationExt13LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt13LocalVarFile)

		binaryDataN2InformationExt13LocalVarFileBytes = fbs
		binaryDataN2InformationExt13LocalVarFileName = binaryDataN2InformationExt13LocalVarFile.Name()
		binaryDataN2InformationExt13LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt13LocalVarFileBytes, fileName: binaryDataN2InformationExt13LocalVarFileName, formFileName: binaryDataN2InformationExt13LocalVarFormFileName})
	}
	var binaryDataN2InformationExt14LocalVarFormFileName string
	var binaryDataN2InformationExt14LocalVarFileName string
	var binaryDataN2InformationExt14LocalVarFileBytes []byte

	binaryDataN2InformationExt14LocalVarFormFileName = "binaryDataN2InformationExt14"

	binaryDataN2InformationExt14LocalVarFile := r.binaryDataN2InformationExt14

	if binaryDataN2InformationExt14LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt14LocalVarFile)

		binaryDataN2InformationExt14LocalVarFileBytes = fbs
		binaryDataN2InformationExt14LocalVarFileName = binaryDataN2InformationExt14LocalVarFile.Name()
		binaryDataN2InformationExt14LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt14LocalVarFileBytes, fileName: binaryDataN2InformationExt14LocalVarFileName, formFileName: binaryDataN2InformationExt14LocalVarFormFileName})
	}
	var binaryDataN2InformationExt15LocalVarFormFileName string
	var binaryDataN2InformationExt15LocalVarFileName string
	var binaryDataN2InformationExt15LocalVarFileBytes []byte

	binaryDataN2InformationExt15LocalVarFormFileName = "binaryDataN2InformationExt15"

	binaryDataN2InformationExt15LocalVarFile := r.binaryDataN2InformationExt15

	if binaryDataN2InformationExt15LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt15LocalVarFile)

		binaryDataN2InformationExt15LocalVarFileBytes = fbs
		binaryDataN2InformationExt15LocalVarFileName = binaryDataN2InformationExt15LocalVarFile.Name()
		binaryDataN2InformationExt15LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt15LocalVarFileBytes, fileName: binaryDataN2InformationExt15LocalVarFileName, formFileName: binaryDataN2InformationExt15LocalVarFormFileName})
	}
	var binaryDataN2InformationExt16LocalVarFormFileName string
	var binaryDataN2InformationExt16LocalVarFileName string
	var binaryDataN2InformationExt16LocalVarFileBytes []byte

	binaryDataN2InformationExt16LocalVarFormFileName = "binaryDataN2InformationExt16"

	binaryDataN2InformationExt16LocalVarFile := r.binaryDataN2InformationExt16

	if binaryDataN2InformationExt16LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt16LocalVarFile)

		binaryDataN2InformationExt16LocalVarFileBytes = fbs
		binaryDataN2InformationExt16LocalVarFileName = binaryDataN2InformationExt16LocalVarFile.Name()
		binaryDataN2InformationExt16LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt16LocalVarFileBytes, fileName: binaryDataN2InformationExt16LocalVarFileName, formFileName: binaryDataN2InformationExt16LocalVarFormFileName})
	}
	var binaryDataN2InformationExt17LocalVarFormFileName string
	var binaryDataN2InformationExt17LocalVarFileName string
	var binaryDataN2InformationExt17LocalVarFileBytes []byte

	binaryDataN2InformationExt17LocalVarFormFileName = "binaryDataN2InformationExt17"

	binaryDataN2InformationExt17LocalVarFile := r.binaryDataN2InformationExt17

	if binaryDataN2InformationExt17LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt17LocalVarFile)

		binaryDataN2InformationExt17LocalVarFileBytes = fbs
		binaryDataN2InformationExt17LocalVarFileName = binaryDataN2InformationExt17LocalVarFile.Name()
		binaryDataN2InformationExt17LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt17LocalVarFileBytes, fileName: binaryDataN2InformationExt17LocalVarFileName, formFileName: binaryDataN2InformationExt17LocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v UeContextCreateError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v UeContextCreateError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v UeContextCreateError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEBIAssignmentRequest struct {
	ctx           context.Context
	ApiService    *IndividualUeContextDocumentApiService
	ueContextId   string
	assignEbiData *AssignEbiData
}

func (r ApiEBIAssignmentRequest) AssignEbiData(assignEbiData AssignEbiData) ApiEBIAssignmentRequest {
	r.assignEbiData = &assignEbiData
	return r
}

func (r ApiEBIAssignmentRequest) Execute() (*AssignedEbiData, *http.Response, error) {
	return r.ApiService.EBIAssignmentExecute(r)
}

/*
EBIAssignment Namf_Communication EBI Assignment service Operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueContextId UE Context Identifier
	@return ApiEBIAssignmentRequest
*/
func (a *IndividualUeContextDocumentApiService) EBIAssignment(ctx context.Context, ueContextId string) ApiEBIAssignmentRequest {
	return ApiEBIAssignmentRequest{
		ApiService:  a,
		ctx:         ctx,
		ueContextId: ueContextId,
	}
}

// Execute executes the request
//
//	@return AssignedEbiData
func (a *IndividualUeContextDocumentApiService) EBIAssignmentExecute(r ApiEBIAssignmentRequest) (*AssignedEbiData, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AssignedEbiData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualUeContextDocumentApiService.EBIAssignment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ue-contexts/{ueContextId}/assign-ebi"
	localVarPath = strings.Replace(localVarPath, "{"+"ueContextId"+"}", url.PathEscape(parameterValueToString(r.ueContextId, "ueContextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assignEbiData == nil {
		return localVarReturnValue, nil, reportError("assignEbiData is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assignEbiData
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v AssignEbiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v AssignEbiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v AssignEbiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v AssignEbiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegistrationStatusUpdateRequest struct {
	ctx                      context.Context
	ApiService               *IndividualUeContextDocumentApiService
	ueContextId              string
	ueRegStatusUpdateReqData *UeRegStatusUpdateReqData
}

func (r ApiRegistrationStatusUpdateRequest) UeRegStatusUpdateReqData(ueRegStatusUpdateReqData UeRegStatusUpdateReqData) ApiRegistrationStatusUpdateRequest {
	r.ueRegStatusUpdateReqData = &ueRegStatusUpdateReqData
	return r
}

func (r ApiRegistrationStatusUpdateRequest) Execute() (*UeRegStatusUpdateRspData, *http.Response, error) {
	return r.ApiService.RegistrationStatusUpdateExecute(r)
}

/*
RegistrationStatusUpdate Namf_Communication RegistrationStatusUpdate service Operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueContextId UE Context Identifier
	@return ApiRegistrationStatusUpdateRequest
*/
func (a *IndividualUeContextDocumentApiService) RegistrationStatusUpdate(ctx context.Context, ueContextId string) ApiRegistrationStatusUpdateRequest {
	return ApiRegistrationStatusUpdateRequest{
		ApiService:  a,
		ctx:         ctx,
		ueContextId: ueContextId,
	}
}

// Execute executes the request
//
//	@return UeRegStatusUpdateRspData
func (a *IndividualUeContextDocumentApiService) RegistrationStatusUpdateExecute(r ApiRegistrationStatusUpdateRequest) (*UeRegStatusUpdateRspData, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UeRegStatusUpdateRspData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualUeContextDocumentApiService.RegistrationStatusUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ue-contexts/{ueContextId}/transfer-update"
	localVarPath = strings.Replace(localVarPath, "{"+"ueContextId"+"}", url.PathEscape(parameterValueToString(r.ueContextId, "ueContextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ueRegStatusUpdateReqData == nil {
		return localVarReturnValue, nil, reportError("ueRegStatusUpdateReqData is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ueRegStatusUpdateReqData
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReleaseUEContextRequest struct {
	ctx              context.Context
	ApiService       *IndividualUeContextDocumentApiService
	ueContextId      string
	uEContextRelease *UEContextRelease
}

func (r ApiReleaseUEContextRequest) UEContextRelease(uEContextRelease UEContextRelease) ApiReleaseUEContextRequest {
	r.uEContextRelease = &uEContextRelease
	return r
}

func (r ApiReleaseUEContextRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReleaseUEContextExecute(r)
}

/*
ReleaseUEContext Namf_Communication ReleaseUEContext service Operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueContextId UE Context Identifier
	@return ApiReleaseUEContextRequest
*/
func (a *IndividualUeContextDocumentApiService) ReleaseUEContext(ctx context.Context, ueContextId string) ApiReleaseUEContextRequest {
	return ApiReleaseUEContextRequest{
		ApiService:  a,
		ctx:         ctx,
		ueContextId: ueContextId,
	}
}

// Execute executes the request
func (a *IndividualUeContextDocumentApiService) ReleaseUEContextExecute(r ApiReleaseUEContextRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualUeContextDocumentApiService.ReleaseUEContext")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ue-contexts/{ueContextId}/release"
	localVarPath = strings.Replace(localVarPath, "{"+"ueContextId"+"}", url.PathEscape(parameterValueToString(r.ueContextId, "ueContextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uEContextRelease == nil {
		return nil, reportError("uEContextRelease is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.uEContextRelease
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRelocateUEContextRequest struct {
	ctx                                context.Context
	ApiService                         *IndividualUeContextDocumentApiService
	ueContextId                        string
	jsonData                           *UeContextRelocateData
	binaryDataForwardRelocationRequest *os.File
	binaryDataN2Information            *os.File
	binaryDataN2InformationExt1        *os.File
	binaryDataN2InformationExt2        *os.File
	binaryDataN2InformationExt3        *os.File
	binaryDataN2InformationExt4        *os.File
	binaryDataN2InformationExt5        *os.File
	binaryDataN2InformationExt6        *os.File
	binaryDataN2InformationExt7        *os.File
	binaryDataN2InformationExt8        *os.File
	binaryDataN2InformationExt9        *os.File
	binaryDataN2InformationExt10       *os.File
	binaryDataN2InformationExt11       *os.File
	binaryDataN2InformationExt12       *os.File
	binaryDataN2InformationExt13       *os.File
	binaryDataN2InformationExt14       *os.File
	binaryDataN2InformationExt15       *os.File
	binaryDataN2InformationExt16       *os.File
}

func (r ApiRelocateUEContextRequest) JsonData(jsonData UeContextRelocateData) ApiRelocateUEContextRequest {
	r.jsonData = &jsonData
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataForwardRelocationRequest(binaryDataForwardRelocationRequest *os.File) ApiRelocateUEContextRequest {
	r.binaryDataForwardRelocationRequest = binaryDataForwardRelocationRequest
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2Information(binaryDataN2Information *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2Information = binaryDataN2Information
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt1(binaryDataN2InformationExt1 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt1 = binaryDataN2InformationExt1
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt2(binaryDataN2InformationExt2 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt2 = binaryDataN2InformationExt2
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt3(binaryDataN2InformationExt3 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt3 = binaryDataN2InformationExt3
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt4(binaryDataN2InformationExt4 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt4 = binaryDataN2InformationExt4
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt5(binaryDataN2InformationExt5 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt5 = binaryDataN2InformationExt5
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt6(binaryDataN2InformationExt6 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt6 = binaryDataN2InformationExt6
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt7(binaryDataN2InformationExt7 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt7 = binaryDataN2InformationExt7
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt8(binaryDataN2InformationExt8 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt8 = binaryDataN2InformationExt8
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt9(binaryDataN2InformationExt9 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt9 = binaryDataN2InformationExt9
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt10(binaryDataN2InformationExt10 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt10 = binaryDataN2InformationExt10
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt11(binaryDataN2InformationExt11 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt11 = binaryDataN2InformationExt11
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt12(binaryDataN2InformationExt12 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt12 = binaryDataN2InformationExt12
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt13(binaryDataN2InformationExt13 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt13 = binaryDataN2InformationExt13
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt14(binaryDataN2InformationExt14 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt14 = binaryDataN2InformationExt14
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt15(binaryDataN2InformationExt15 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt15 = binaryDataN2InformationExt15
	return r
}

func (r ApiRelocateUEContextRequest) BinaryDataN2InformationExt16(binaryDataN2InformationExt16 *os.File) ApiRelocateUEContextRequest {
	r.binaryDataN2InformationExt16 = binaryDataN2InformationExt16
	return r
}

func (r ApiRelocateUEContextRequest) Execute() (*UeContextRelocatedData, *http.Response, error) {
	return r.ApiService.RelocateUEContextExecute(r)
}

/*
RelocateUEContext Namf_Communication RelocateUEContext service Operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueContextId UE Context Identifier
	@return ApiRelocateUEContextRequest
*/
func (a *IndividualUeContextDocumentApiService) RelocateUEContext(ctx context.Context, ueContextId string) ApiRelocateUEContextRequest {
	return ApiRelocateUEContextRequest{
		ApiService:  a,
		ctx:         ctx,
		ueContextId: ueContextId,
	}
}

// Execute executes the request
//
//	@return UeContextRelocatedData
func (a *IndividualUeContextDocumentApiService) RelocateUEContextExecute(r ApiRelocateUEContextRequest) (*UeContextRelocatedData, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UeContextRelocatedData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualUeContextDocumentApiService.RelocateUEContext")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ue-contexts/{ueContextId}/relocate"
	localVarPath = strings.Replace(localVarPath, "{"+"ueContextId"+"}", url.PathEscape(parameterValueToString(r.ueContextId, "ueContextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/related"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.jsonData != nil {
		paramJson, err := parameterToJson(*r.jsonData)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("jsonData", paramJson)
	}
	var binaryDataForwardRelocationRequestLocalVarFormFileName string
	var binaryDataForwardRelocationRequestLocalVarFileName string
	var binaryDataForwardRelocationRequestLocalVarFileBytes []byte

	binaryDataForwardRelocationRequestLocalVarFormFileName = "binaryDataForwardRelocationRequest"

	binaryDataForwardRelocationRequestLocalVarFile := r.binaryDataForwardRelocationRequest

	if binaryDataForwardRelocationRequestLocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataForwardRelocationRequestLocalVarFile)

		binaryDataForwardRelocationRequestLocalVarFileBytes = fbs
		binaryDataForwardRelocationRequestLocalVarFileName = binaryDataForwardRelocationRequestLocalVarFile.Name()
		binaryDataForwardRelocationRequestLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataForwardRelocationRequestLocalVarFileBytes, fileName: binaryDataForwardRelocationRequestLocalVarFileName, formFileName: binaryDataForwardRelocationRequestLocalVarFormFileName})
	}
	var binaryDataN2InformationLocalVarFormFileName string
	var binaryDataN2InformationLocalVarFileName string
	var binaryDataN2InformationLocalVarFileBytes []byte

	binaryDataN2InformationLocalVarFormFileName = "binaryDataN2Information"

	binaryDataN2InformationLocalVarFile := r.binaryDataN2Information

	if binaryDataN2InformationLocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationLocalVarFile)

		binaryDataN2InformationLocalVarFileBytes = fbs
		binaryDataN2InformationLocalVarFileName = binaryDataN2InformationLocalVarFile.Name()
		binaryDataN2InformationLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationLocalVarFileBytes, fileName: binaryDataN2InformationLocalVarFileName, formFileName: binaryDataN2InformationLocalVarFormFileName})
	}
	var binaryDataN2InformationExt1LocalVarFormFileName string
	var binaryDataN2InformationExt1LocalVarFileName string
	var binaryDataN2InformationExt1LocalVarFileBytes []byte

	binaryDataN2InformationExt1LocalVarFormFileName = "binaryDataN2InformationExt1"

	binaryDataN2InformationExt1LocalVarFile := r.binaryDataN2InformationExt1

	if binaryDataN2InformationExt1LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt1LocalVarFile)

		binaryDataN2InformationExt1LocalVarFileBytes = fbs
		binaryDataN2InformationExt1LocalVarFileName = binaryDataN2InformationExt1LocalVarFile.Name()
		binaryDataN2InformationExt1LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt1LocalVarFileBytes, fileName: binaryDataN2InformationExt1LocalVarFileName, formFileName: binaryDataN2InformationExt1LocalVarFormFileName})
	}
	var binaryDataN2InformationExt2LocalVarFormFileName string
	var binaryDataN2InformationExt2LocalVarFileName string
	var binaryDataN2InformationExt2LocalVarFileBytes []byte

	binaryDataN2InformationExt2LocalVarFormFileName = "binaryDataN2InformationExt2"

	binaryDataN2InformationExt2LocalVarFile := r.binaryDataN2InformationExt2

	if binaryDataN2InformationExt2LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt2LocalVarFile)

		binaryDataN2InformationExt2LocalVarFileBytes = fbs
		binaryDataN2InformationExt2LocalVarFileName = binaryDataN2InformationExt2LocalVarFile.Name()
		binaryDataN2InformationExt2LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt2LocalVarFileBytes, fileName: binaryDataN2InformationExt2LocalVarFileName, formFileName: binaryDataN2InformationExt2LocalVarFormFileName})
	}
	var binaryDataN2InformationExt3LocalVarFormFileName string
	var binaryDataN2InformationExt3LocalVarFileName string
	var binaryDataN2InformationExt3LocalVarFileBytes []byte

	binaryDataN2InformationExt3LocalVarFormFileName = "binaryDataN2InformationExt3"

	binaryDataN2InformationExt3LocalVarFile := r.binaryDataN2InformationExt3

	if binaryDataN2InformationExt3LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt3LocalVarFile)

		binaryDataN2InformationExt3LocalVarFileBytes = fbs
		binaryDataN2InformationExt3LocalVarFileName = binaryDataN2InformationExt3LocalVarFile.Name()
		binaryDataN2InformationExt3LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt3LocalVarFileBytes, fileName: binaryDataN2InformationExt3LocalVarFileName, formFileName: binaryDataN2InformationExt3LocalVarFormFileName})
	}
	var binaryDataN2InformationExt4LocalVarFormFileName string
	var binaryDataN2InformationExt4LocalVarFileName string
	var binaryDataN2InformationExt4LocalVarFileBytes []byte

	binaryDataN2InformationExt4LocalVarFormFileName = "binaryDataN2InformationExt4"

	binaryDataN2InformationExt4LocalVarFile := r.binaryDataN2InformationExt4

	if binaryDataN2InformationExt4LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt4LocalVarFile)

		binaryDataN2InformationExt4LocalVarFileBytes = fbs
		binaryDataN2InformationExt4LocalVarFileName = binaryDataN2InformationExt4LocalVarFile.Name()
		binaryDataN2InformationExt4LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt4LocalVarFileBytes, fileName: binaryDataN2InformationExt4LocalVarFileName, formFileName: binaryDataN2InformationExt4LocalVarFormFileName})
	}
	var binaryDataN2InformationExt5LocalVarFormFileName string
	var binaryDataN2InformationExt5LocalVarFileName string
	var binaryDataN2InformationExt5LocalVarFileBytes []byte

	binaryDataN2InformationExt5LocalVarFormFileName = "binaryDataN2InformationExt5"

	binaryDataN2InformationExt5LocalVarFile := r.binaryDataN2InformationExt5

	if binaryDataN2InformationExt5LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt5LocalVarFile)

		binaryDataN2InformationExt5LocalVarFileBytes = fbs
		binaryDataN2InformationExt5LocalVarFileName = binaryDataN2InformationExt5LocalVarFile.Name()
		binaryDataN2InformationExt5LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt5LocalVarFileBytes, fileName: binaryDataN2InformationExt5LocalVarFileName, formFileName: binaryDataN2InformationExt5LocalVarFormFileName})
	}
	var binaryDataN2InformationExt6LocalVarFormFileName string
	var binaryDataN2InformationExt6LocalVarFileName string
	var binaryDataN2InformationExt6LocalVarFileBytes []byte

	binaryDataN2InformationExt6LocalVarFormFileName = "binaryDataN2InformationExt6"

	binaryDataN2InformationExt6LocalVarFile := r.binaryDataN2InformationExt6

	if binaryDataN2InformationExt6LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt6LocalVarFile)

		binaryDataN2InformationExt6LocalVarFileBytes = fbs
		binaryDataN2InformationExt6LocalVarFileName = binaryDataN2InformationExt6LocalVarFile.Name()
		binaryDataN2InformationExt6LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt6LocalVarFileBytes, fileName: binaryDataN2InformationExt6LocalVarFileName, formFileName: binaryDataN2InformationExt6LocalVarFormFileName})
	}
	var binaryDataN2InformationExt7LocalVarFormFileName string
	var binaryDataN2InformationExt7LocalVarFileName string
	var binaryDataN2InformationExt7LocalVarFileBytes []byte

	binaryDataN2InformationExt7LocalVarFormFileName = "binaryDataN2InformationExt7"

	binaryDataN2InformationExt7LocalVarFile := r.binaryDataN2InformationExt7

	if binaryDataN2InformationExt7LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt7LocalVarFile)

		binaryDataN2InformationExt7LocalVarFileBytes = fbs
		binaryDataN2InformationExt7LocalVarFileName = binaryDataN2InformationExt7LocalVarFile.Name()
		binaryDataN2InformationExt7LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt7LocalVarFileBytes, fileName: binaryDataN2InformationExt7LocalVarFileName, formFileName: binaryDataN2InformationExt7LocalVarFormFileName})
	}
	var binaryDataN2InformationExt8LocalVarFormFileName string
	var binaryDataN2InformationExt8LocalVarFileName string
	var binaryDataN2InformationExt8LocalVarFileBytes []byte

	binaryDataN2InformationExt8LocalVarFormFileName = "binaryDataN2InformationExt8"

	binaryDataN2InformationExt8LocalVarFile := r.binaryDataN2InformationExt8

	if binaryDataN2InformationExt8LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt8LocalVarFile)

		binaryDataN2InformationExt8LocalVarFileBytes = fbs
		binaryDataN2InformationExt8LocalVarFileName = binaryDataN2InformationExt8LocalVarFile.Name()
		binaryDataN2InformationExt8LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt8LocalVarFileBytes, fileName: binaryDataN2InformationExt8LocalVarFileName, formFileName: binaryDataN2InformationExt8LocalVarFormFileName})
	}
	var binaryDataN2InformationExt9LocalVarFormFileName string
	var binaryDataN2InformationExt9LocalVarFileName string
	var binaryDataN2InformationExt9LocalVarFileBytes []byte

	binaryDataN2InformationExt9LocalVarFormFileName = "binaryDataN2InformationExt9"

	binaryDataN2InformationExt9LocalVarFile := r.binaryDataN2InformationExt9

	if binaryDataN2InformationExt9LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt9LocalVarFile)

		binaryDataN2InformationExt9LocalVarFileBytes = fbs
		binaryDataN2InformationExt9LocalVarFileName = binaryDataN2InformationExt9LocalVarFile.Name()
		binaryDataN2InformationExt9LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt9LocalVarFileBytes, fileName: binaryDataN2InformationExt9LocalVarFileName, formFileName: binaryDataN2InformationExt9LocalVarFormFileName})
	}
	var binaryDataN2InformationExt10LocalVarFormFileName string
	var binaryDataN2InformationExt10LocalVarFileName string
	var binaryDataN2InformationExt10LocalVarFileBytes []byte

	binaryDataN2InformationExt10LocalVarFormFileName = "binaryDataN2InformationExt10"

	binaryDataN2InformationExt10LocalVarFile := r.binaryDataN2InformationExt10

	if binaryDataN2InformationExt10LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt10LocalVarFile)

		binaryDataN2InformationExt10LocalVarFileBytes = fbs
		binaryDataN2InformationExt10LocalVarFileName = binaryDataN2InformationExt10LocalVarFile.Name()
		binaryDataN2InformationExt10LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt10LocalVarFileBytes, fileName: binaryDataN2InformationExt10LocalVarFileName, formFileName: binaryDataN2InformationExt10LocalVarFormFileName})
	}
	var binaryDataN2InformationExt11LocalVarFormFileName string
	var binaryDataN2InformationExt11LocalVarFileName string
	var binaryDataN2InformationExt11LocalVarFileBytes []byte

	binaryDataN2InformationExt11LocalVarFormFileName = "binaryDataN2InformationExt11"

	binaryDataN2InformationExt11LocalVarFile := r.binaryDataN2InformationExt11

	if binaryDataN2InformationExt11LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt11LocalVarFile)

		binaryDataN2InformationExt11LocalVarFileBytes = fbs
		binaryDataN2InformationExt11LocalVarFileName = binaryDataN2InformationExt11LocalVarFile.Name()
		binaryDataN2InformationExt11LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt11LocalVarFileBytes, fileName: binaryDataN2InformationExt11LocalVarFileName, formFileName: binaryDataN2InformationExt11LocalVarFormFileName})
	}
	var binaryDataN2InformationExt12LocalVarFormFileName string
	var binaryDataN2InformationExt12LocalVarFileName string
	var binaryDataN2InformationExt12LocalVarFileBytes []byte

	binaryDataN2InformationExt12LocalVarFormFileName = "binaryDataN2InformationExt12"

	binaryDataN2InformationExt12LocalVarFile := r.binaryDataN2InformationExt12

	if binaryDataN2InformationExt12LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt12LocalVarFile)

		binaryDataN2InformationExt12LocalVarFileBytes = fbs
		binaryDataN2InformationExt12LocalVarFileName = binaryDataN2InformationExt12LocalVarFile.Name()
		binaryDataN2InformationExt12LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt12LocalVarFileBytes, fileName: binaryDataN2InformationExt12LocalVarFileName, formFileName: binaryDataN2InformationExt12LocalVarFormFileName})
	}
	var binaryDataN2InformationExt13LocalVarFormFileName string
	var binaryDataN2InformationExt13LocalVarFileName string
	var binaryDataN2InformationExt13LocalVarFileBytes []byte

	binaryDataN2InformationExt13LocalVarFormFileName = "binaryDataN2InformationExt13"

	binaryDataN2InformationExt13LocalVarFile := r.binaryDataN2InformationExt13

	if binaryDataN2InformationExt13LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt13LocalVarFile)

		binaryDataN2InformationExt13LocalVarFileBytes = fbs
		binaryDataN2InformationExt13LocalVarFileName = binaryDataN2InformationExt13LocalVarFile.Name()
		binaryDataN2InformationExt13LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt13LocalVarFileBytes, fileName: binaryDataN2InformationExt13LocalVarFileName, formFileName: binaryDataN2InformationExt13LocalVarFormFileName})
	}
	var binaryDataN2InformationExt14LocalVarFormFileName string
	var binaryDataN2InformationExt14LocalVarFileName string
	var binaryDataN2InformationExt14LocalVarFileBytes []byte

	binaryDataN2InformationExt14LocalVarFormFileName = "binaryDataN2InformationExt14"

	binaryDataN2InformationExt14LocalVarFile := r.binaryDataN2InformationExt14

	if binaryDataN2InformationExt14LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt14LocalVarFile)

		binaryDataN2InformationExt14LocalVarFileBytes = fbs
		binaryDataN2InformationExt14LocalVarFileName = binaryDataN2InformationExt14LocalVarFile.Name()
		binaryDataN2InformationExt14LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt14LocalVarFileBytes, fileName: binaryDataN2InformationExt14LocalVarFileName, formFileName: binaryDataN2InformationExt14LocalVarFormFileName})
	}
	var binaryDataN2InformationExt15LocalVarFormFileName string
	var binaryDataN2InformationExt15LocalVarFileName string
	var binaryDataN2InformationExt15LocalVarFileBytes []byte

	binaryDataN2InformationExt15LocalVarFormFileName = "binaryDataN2InformationExt15"

	binaryDataN2InformationExt15LocalVarFile := r.binaryDataN2InformationExt15

	if binaryDataN2InformationExt15LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt15LocalVarFile)

		binaryDataN2InformationExt15LocalVarFileBytes = fbs
		binaryDataN2InformationExt15LocalVarFileName = binaryDataN2InformationExt15LocalVarFile.Name()
		binaryDataN2InformationExt15LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt15LocalVarFileBytes, fileName: binaryDataN2InformationExt15LocalVarFileName, formFileName: binaryDataN2InformationExt15LocalVarFormFileName})
	}
	var binaryDataN2InformationExt16LocalVarFormFileName string
	var binaryDataN2InformationExt16LocalVarFileName string
	var binaryDataN2InformationExt16LocalVarFileBytes []byte

	binaryDataN2InformationExt16LocalVarFormFileName = "binaryDataN2InformationExt16"

	binaryDataN2InformationExt16LocalVarFile := r.binaryDataN2InformationExt16

	if binaryDataN2InformationExt16LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2InformationExt16LocalVarFile)

		binaryDataN2InformationExt16LocalVarFileBytes = fbs
		binaryDataN2InformationExt16LocalVarFileName = binaryDataN2InformationExt16LocalVarFile.Name()
		binaryDataN2InformationExt16LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2InformationExt16LocalVarFileBytes, fileName: binaryDataN2InformationExt16LocalVarFileName, formFileName: binaryDataN2InformationExt16LocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUEContextTransferRequest struct {
	ctx                      context.Context
	ApiService               *IndividualUeContextDocumentApiService
	ueContextId              string
	ueContextTransferReqData *UeContextTransferReqData
}

func (r ApiUEContextTransferRequest) UeContextTransferReqData(ueContextTransferReqData UeContextTransferReqData) ApiUEContextTransferRequest {
	r.ueContextTransferReqData = &ueContextTransferReqData
	return r
}

func (r ApiUEContextTransferRequest) Execute() (*UeContextTransferRspData, *http.Response, error) {
	return r.ApiService.UEContextTransferExecute(r)
}

/*
UEContextTransfer Namf_Communication UEContextTransfer service Operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueContextId UE Context Identifier
	@return ApiUEContextTransferRequest
*/
func (a *IndividualUeContextDocumentApiService) UEContextTransfer(ctx context.Context, ueContextId string) ApiUEContextTransferRequest {
	return ApiUEContextTransferRequest{
		ApiService:  a,
		ctx:         ctx,
		ueContextId: ueContextId,
	}
}

// Execute executes the request
//
//	@return UeContextTransferRspData
func (a *IndividualUeContextDocumentApiService) UEContextTransferExecute(r ApiUEContextTransferRequest) (*UeContextTransferRspData, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UeContextTransferRspData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualUeContextDocumentApiService.UEContextTransfer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ue-contexts/{ueContextId}/transfer"
	localVarPath = strings.Replace(localVarPath, "{"+"ueContextId"+"}", url.PathEscape(parameterValueToString(r.ueContextId, "ueContextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ueContextTransferReqData == nil {
		return localVarReturnValue, nil, reportError("ueContextTransferReqData is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/related"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "multipart/related", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ueContextTransferReqData
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
