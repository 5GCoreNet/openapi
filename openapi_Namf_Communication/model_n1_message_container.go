/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the N1MessageContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &N1MessageContainer{}

// N1MessageContainer N1 Message container
type N1MessageContainer struct {
	N1MessageClass N1MessageClass `json:"n1MessageClass"`
	N1MessageContent RefToBinaryData `json:"n1MessageContent"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NfId *string `json:"nfId,omitempty"`
	ServiceInstanceId *string `json:"serviceInstanceId,omitempty"`
}

// NewN1MessageContainer instantiates a new N1MessageContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewN1MessageContainer(n1MessageClass N1MessageClass, n1MessageContent RefToBinaryData) *N1MessageContainer {
	this := N1MessageContainer{}
	this.N1MessageClass = n1MessageClass
	this.N1MessageContent = n1MessageContent
	return &this
}

// NewN1MessageContainerWithDefaults instantiates a new N1MessageContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewN1MessageContainerWithDefaults() *N1MessageContainer {
	this := N1MessageContainer{}
	return &this
}

// GetN1MessageClass returns the N1MessageClass field value
func (o *N1MessageContainer) GetN1MessageClass() N1MessageClass {
	if o == nil {
		var ret N1MessageClass
		return ret
	}

	return o.N1MessageClass
}

// GetN1MessageClassOk returns a tuple with the N1MessageClass field value
// and a boolean to check if the value has been set.
func (o *N1MessageContainer) GetN1MessageClassOk() (*N1MessageClass, bool) {
	if o == nil {
		return nil, false
	}
	return &o.N1MessageClass, true
}

// SetN1MessageClass sets field value
func (o *N1MessageContainer) SetN1MessageClass(v N1MessageClass) {
	o.N1MessageClass = v
}

// GetN1MessageContent returns the N1MessageContent field value
func (o *N1MessageContainer) GetN1MessageContent() RefToBinaryData {
	if o == nil {
		var ret RefToBinaryData
		return ret
	}

	return o.N1MessageContent
}

// GetN1MessageContentOk returns a tuple with the N1MessageContent field value
// and a boolean to check if the value has been set.
func (o *N1MessageContainer) GetN1MessageContentOk() (*RefToBinaryData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.N1MessageContent, true
}

// SetN1MessageContent sets field value
func (o *N1MessageContainer) SetN1MessageContent(v RefToBinaryData) {
	o.N1MessageContent = v
}

// GetNfId returns the NfId field value if set, zero value otherwise.
func (o *N1MessageContainer) GetNfId() string {
	if o == nil || isNil(o.NfId) {
		var ret string
		return ret
	}
	return *o.NfId
}

// GetNfIdOk returns a tuple with the NfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N1MessageContainer) GetNfIdOk() (*string, bool) {
	if o == nil || isNil(o.NfId) {
		return nil, false
	}
	return o.NfId, true
}

// HasNfId returns a boolean if a field has been set.
func (o *N1MessageContainer) HasNfId() bool {
	if o != nil && !isNil(o.NfId) {
		return true
	}

	return false
}

// SetNfId gets a reference to the given string and assigns it to the NfId field.
func (o *N1MessageContainer) SetNfId(v string) {
	o.NfId = &v
}

// GetServiceInstanceId returns the ServiceInstanceId field value if set, zero value otherwise.
func (o *N1MessageContainer) GetServiceInstanceId() string {
	if o == nil || isNil(o.ServiceInstanceId) {
		var ret string
		return ret
	}
	return *o.ServiceInstanceId
}

// GetServiceInstanceIdOk returns a tuple with the ServiceInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *N1MessageContainer) GetServiceInstanceIdOk() (*string, bool) {
	if o == nil || isNil(o.ServiceInstanceId) {
		return nil, false
	}
	return o.ServiceInstanceId, true
}

// HasServiceInstanceId returns a boolean if a field has been set.
func (o *N1MessageContainer) HasServiceInstanceId() bool {
	if o != nil && !isNil(o.ServiceInstanceId) {
		return true
	}

	return false
}

// SetServiceInstanceId gets a reference to the given string and assigns it to the ServiceInstanceId field.
func (o *N1MessageContainer) SetServiceInstanceId(v string) {
	o.ServiceInstanceId = &v
}

func (o N1MessageContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o N1MessageContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["n1MessageClass"] = o.N1MessageClass
	toSerialize["n1MessageContent"] = o.N1MessageContent
	if !isNil(o.NfId) {
		toSerialize["nfId"] = o.NfId
	}
	if !isNil(o.ServiceInstanceId) {
		toSerialize["serviceInstanceId"] = o.ServiceInstanceId
	}
	return toSerialize, nil
}

type NullableN1MessageContainer struct {
	value *N1MessageContainer
	isSet bool
}

func (v NullableN1MessageContainer) Get() *N1MessageContainer {
	return v.value
}

func (v *NullableN1MessageContainer) Set(val *N1MessageContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableN1MessageContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableN1MessageContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableN1MessageContainer(val *N1MessageContainer) *NullableN1MessageContainer {
	return &NullableN1MessageContainer{value: val, isSet: true}
}

func (v NullableN1MessageContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableN1MessageContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


