/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
)

// checks if the ImmediateMdtConf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImmediateMdtConf{}

// ImmediateMdtConf Immediate MDT Configuration
type ImmediateMdtConf struct {
	JobType JobType `json:"jobType"`
	MeasurementLteList []MeasurementLteForMdt `json:"measurementLteList,omitempty"`
	MeasurementNrList []MeasurementNrForMdt `json:"measurementNrList,omitempty"`
	ReportingTriggerList []ReportingTrigger `json:"reportingTriggerList,omitempty"`
	ReportInterval *ReportIntervalMdt `json:"reportInterval,omitempty"`
	ReportIntervalNr *ReportIntervalNrMdt `json:"reportIntervalNr,omitempty"`
	ReportAmount *ReportAmountMdt `json:"reportAmount,omitempty"`
	EventThresholdRsrp *int32 `json:"eventThresholdRsrp,omitempty"`
	EventThresholdRsrq *int32 `json:"eventThresholdRsrq,omitempty"`
	EventThresholdRsrpNr *int32 `json:"eventThresholdRsrpNr,omitempty"`
	EventThresholdRsrqNr *int32 `json:"eventThresholdRsrqNr,omitempty"`
	CollectionPeriodRmmLte *CollectionPeriodRmmLteMdt `json:"collectionPeriodRmmLte,omitempty"`
	CollectionPeriodRmmNr *CollectionPeriodRmmNrMdt `json:"collectionPeriodRmmNr,omitempty"`
	MeasurementPeriodLte *MeasurementPeriodLteMdt `json:"measurementPeriodLte,omitempty"`
	AreaScope *AreaScope `json:"areaScope,omitempty"`
	PositioningMethod *PositioningMethodMdt `json:"positioningMethod,omitempty"`
	AddPositioningMethodList []PositioningMethodMdt `json:"addPositioningMethodList,omitempty"`
	MdtAllowedPlmnIdList []PlmnId `json:"mdtAllowedPlmnIdList,omitempty"`
	SensorMeasurementList []SensorMeasurement `json:"sensorMeasurementList,omitempty"`
}

// NewImmediateMdtConf instantiates a new ImmediateMdtConf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImmediateMdtConf(jobType JobType) *ImmediateMdtConf {
	this := ImmediateMdtConf{}
	this.JobType = jobType
	return &this
}

// NewImmediateMdtConfWithDefaults instantiates a new ImmediateMdtConf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImmediateMdtConfWithDefaults() *ImmediateMdtConf {
	this := ImmediateMdtConf{}
	return &this
}

// GetJobType returns the JobType field value
func (o *ImmediateMdtConf) GetJobType() JobType {
	if o == nil {
		var ret JobType
		return ret
	}

	return o.JobType
}

// GetJobTypeOk returns a tuple with the JobType field value
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetJobTypeOk() (*JobType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobType, true
}

// SetJobType sets field value
func (o *ImmediateMdtConf) SetJobType(v JobType) {
	o.JobType = v
}

// GetMeasurementLteList returns the MeasurementLteList field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetMeasurementLteList() []MeasurementLteForMdt {
	if o == nil || isNil(o.MeasurementLteList) {
		var ret []MeasurementLteForMdt
		return ret
	}
	return o.MeasurementLteList
}

// GetMeasurementLteListOk returns a tuple with the MeasurementLteList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetMeasurementLteListOk() ([]MeasurementLteForMdt, bool) {
	if o == nil || isNil(o.MeasurementLteList) {
		return nil, false
	}
	return o.MeasurementLteList, true
}

// HasMeasurementLteList returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasMeasurementLteList() bool {
	if o != nil && !isNil(o.MeasurementLteList) {
		return true
	}

	return false
}

// SetMeasurementLteList gets a reference to the given []MeasurementLteForMdt and assigns it to the MeasurementLteList field.
func (o *ImmediateMdtConf) SetMeasurementLteList(v []MeasurementLteForMdt) {
	o.MeasurementLteList = v
}

// GetMeasurementNrList returns the MeasurementNrList field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetMeasurementNrList() []MeasurementNrForMdt {
	if o == nil || isNil(o.MeasurementNrList) {
		var ret []MeasurementNrForMdt
		return ret
	}
	return o.MeasurementNrList
}

// GetMeasurementNrListOk returns a tuple with the MeasurementNrList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetMeasurementNrListOk() ([]MeasurementNrForMdt, bool) {
	if o == nil || isNil(o.MeasurementNrList) {
		return nil, false
	}
	return o.MeasurementNrList, true
}

// HasMeasurementNrList returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasMeasurementNrList() bool {
	if o != nil && !isNil(o.MeasurementNrList) {
		return true
	}

	return false
}

// SetMeasurementNrList gets a reference to the given []MeasurementNrForMdt and assigns it to the MeasurementNrList field.
func (o *ImmediateMdtConf) SetMeasurementNrList(v []MeasurementNrForMdt) {
	o.MeasurementNrList = v
}

// GetReportingTriggerList returns the ReportingTriggerList field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetReportingTriggerList() []ReportingTrigger {
	if o == nil || isNil(o.ReportingTriggerList) {
		var ret []ReportingTrigger
		return ret
	}
	return o.ReportingTriggerList
}

// GetReportingTriggerListOk returns a tuple with the ReportingTriggerList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetReportingTriggerListOk() ([]ReportingTrigger, bool) {
	if o == nil || isNil(o.ReportingTriggerList) {
		return nil, false
	}
	return o.ReportingTriggerList, true
}

// HasReportingTriggerList returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasReportingTriggerList() bool {
	if o != nil && !isNil(o.ReportingTriggerList) {
		return true
	}

	return false
}

// SetReportingTriggerList gets a reference to the given []ReportingTrigger and assigns it to the ReportingTriggerList field.
func (o *ImmediateMdtConf) SetReportingTriggerList(v []ReportingTrigger) {
	o.ReportingTriggerList = v
}

// GetReportInterval returns the ReportInterval field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetReportInterval() ReportIntervalMdt {
	if o == nil || isNil(o.ReportInterval) {
		var ret ReportIntervalMdt
		return ret
	}
	return *o.ReportInterval
}

// GetReportIntervalOk returns a tuple with the ReportInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetReportIntervalOk() (*ReportIntervalMdt, bool) {
	if o == nil || isNil(o.ReportInterval) {
		return nil, false
	}
	return o.ReportInterval, true
}

// HasReportInterval returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasReportInterval() bool {
	if o != nil && !isNil(o.ReportInterval) {
		return true
	}

	return false
}

// SetReportInterval gets a reference to the given ReportIntervalMdt and assigns it to the ReportInterval field.
func (o *ImmediateMdtConf) SetReportInterval(v ReportIntervalMdt) {
	o.ReportInterval = &v
}

// GetReportIntervalNr returns the ReportIntervalNr field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetReportIntervalNr() ReportIntervalNrMdt {
	if o == nil || isNil(o.ReportIntervalNr) {
		var ret ReportIntervalNrMdt
		return ret
	}
	return *o.ReportIntervalNr
}

// GetReportIntervalNrOk returns a tuple with the ReportIntervalNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetReportIntervalNrOk() (*ReportIntervalNrMdt, bool) {
	if o == nil || isNil(o.ReportIntervalNr) {
		return nil, false
	}
	return o.ReportIntervalNr, true
}

// HasReportIntervalNr returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasReportIntervalNr() bool {
	if o != nil && !isNil(o.ReportIntervalNr) {
		return true
	}

	return false
}

// SetReportIntervalNr gets a reference to the given ReportIntervalNrMdt and assigns it to the ReportIntervalNr field.
func (o *ImmediateMdtConf) SetReportIntervalNr(v ReportIntervalNrMdt) {
	o.ReportIntervalNr = &v
}

// GetReportAmount returns the ReportAmount field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetReportAmount() ReportAmountMdt {
	if o == nil || isNil(o.ReportAmount) {
		var ret ReportAmountMdt
		return ret
	}
	return *o.ReportAmount
}

// GetReportAmountOk returns a tuple with the ReportAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetReportAmountOk() (*ReportAmountMdt, bool) {
	if o == nil || isNil(o.ReportAmount) {
		return nil, false
	}
	return o.ReportAmount, true
}

// HasReportAmount returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasReportAmount() bool {
	if o != nil && !isNil(o.ReportAmount) {
		return true
	}

	return false
}

// SetReportAmount gets a reference to the given ReportAmountMdt and assigns it to the ReportAmount field.
func (o *ImmediateMdtConf) SetReportAmount(v ReportAmountMdt) {
	o.ReportAmount = &v
}

// GetEventThresholdRsrp returns the EventThresholdRsrp field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetEventThresholdRsrp() int32 {
	if o == nil || isNil(o.EventThresholdRsrp) {
		var ret int32
		return ret
	}
	return *o.EventThresholdRsrp
}

// GetEventThresholdRsrpOk returns a tuple with the EventThresholdRsrp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetEventThresholdRsrpOk() (*int32, bool) {
	if o == nil || isNil(o.EventThresholdRsrp) {
		return nil, false
	}
	return o.EventThresholdRsrp, true
}

// HasEventThresholdRsrp returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasEventThresholdRsrp() bool {
	if o != nil && !isNil(o.EventThresholdRsrp) {
		return true
	}

	return false
}

// SetEventThresholdRsrp gets a reference to the given int32 and assigns it to the EventThresholdRsrp field.
func (o *ImmediateMdtConf) SetEventThresholdRsrp(v int32) {
	o.EventThresholdRsrp = &v
}

// GetEventThresholdRsrq returns the EventThresholdRsrq field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetEventThresholdRsrq() int32 {
	if o == nil || isNil(o.EventThresholdRsrq) {
		var ret int32
		return ret
	}
	return *o.EventThresholdRsrq
}

// GetEventThresholdRsrqOk returns a tuple with the EventThresholdRsrq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetEventThresholdRsrqOk() (*int32, bool) {
	if o == nil || isNil(o.EventThresholdRsrq) {
		return nil, false
	}
	return o.EventThresholdRsrq, true
}

// HasEventThresholdRsrq returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasEventThresholdRsrq() bool {
	if o != nil && !isNil(o.EventThresholdRsrq) {
		return true
	}

	return false
}

// SetEventThresholdRsrq gets a reference to the given int32 and assigns it to the EventThresholdRsrq field.
func (o *ImmediateMdtConf) SetEventThresholdRsrq(v int32) {
	o.EventThresholdRsrq = &v
}

// GetEventThresholdRsrpNr returns the EventThresholdRsrpNr field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetEventThresholdRsrpNr() int32 {
	if o == nil || isNil(o.EventThresholdRsrpNr) {
		var ret int32
		return ret
	}
	return *o.EventThresholdRsrpNr
}

// GetEventThresholdRsrpNrOk returns a tuple with the EventThresholdRsrpNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetEventThresholdRsrpNrOk() (*int32, bool) {
	if o == nil || isNil(o.EventThresholdRsrpNr) {
		return nil, false
	}
	return o.EventThresholdRsrpNr, true
}

// HasEventThresholdRsrpNr returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasEventThresholdRsrpNr() bool {
	if o != nil && !isNil(o.EventThresholdRsrpNr) {
		return true
	}

	return false
}

// SetEventThresholdRsrpNr gets a reference to the given int32 and assigns it to the EventThresholdRsrpNr field.
func (o *ImmediateMdtConf) SetEventThresholdRsrpNr(v int32) {
	o.EventThresholdRsrpNr = &v
}

// GetEventThresholdRsrqNr returns the EventThresholdRsrqNr field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetEventThresholdRsrqNr() int32 {
	if o == nil || isNil(o.EventThresholdRsrqNr) {
		var ret int32
		return ret
	}
	return *o.EventThresholdRsrqNr
}

// GetEventThresholdRsrqNrOk returns a tuple with the EventThresholdRsrqNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetEventThresholdRsrqNrOk() (*int32, bool) {
	if o == nil || isNil(o.EventThresholdRsrqNr) {
		return nil, false
	}
	return o.EventThresholdRsrqNr, true
}

// HasEventThresholdRsrqNr returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasEventThresholdRsrqNr() bool {
	if o != nil && !isNil(o.EventThresholdRsrqNr) {
		return true
	}

	return false
}

// SetEventThresholdRsrqNr gets a reference to the given int32 and assigns it to the EventThresholdRsrqNr field.
func (o *ImmediateMdtConf) SetEventThresholdRsrqNr(v int32) {
	o.EventThresholdRsrqNr = &v
}

// GetCollectionPeriodRmmLte returns the CollectionPeriodRmmLte field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetCollectionPeriodRmmLte() CollectionPeriodRmmLteMdt {
	if o == nil || isNil(o.CollectionPeriodRmmLte) {
		var ret CollectionPeriodRmmLteMdt
		return ret
	}
	return *o.CollectionPeriodRmmLte
}

// GetCollectionPeriodRmmLteOk returns a tuple with the CollectionPeriodRmmLte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetCollectionPeriodRmmLteOk() (*CollectionPeriodRmmLteMdt, bool) {
	if o == nil || isNil(o.CollectionPeriodRmmLte) {
		return nil, false
	}
	return o.CollectionPeriodRmmLte, true
}

// HasCollectionPeriodRmmLte returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasCollectionPeriodRmmLte() bool {
	if o != nil && !isNil(o.CollectionPeriodRmmLte) {
		return true
	}

	return false
}

// SetCollectionPeriodRmmLte gets a reference to the given CollectionPeriodRmmLteMdt and assigns it to the CollectionPeriodRmmLte field.
func (o *ImmediateMdtConf) SetCollectionPeriodRmmLte(v CollectionPeriodRmmLteMdt) {
	o.CollectionPeriodRmmLte = &v
}

// GetCollectionPeriodRmmNr returns the CollectionPeriodRmmNr field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetCollectionPeriodRmmNr() CollectionPeriodRmmNrMdt {
	if o == nil || isNil(o.CollectionPeriodRmmNr) {
		var ret CollectionPeriodRmmNrMdt
		return ret
	}
	return *o.CollectionPeriodRmmNr
}

// GetCollectionPeriodRmmNrOk returns a tuple with the CollectionPeriodRmmNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetCollectionPeriodRmmNrOk() (*CollectionPeriodRmmNrMdt, bool) {
	if o == nil || isNil(o.CollectionPeriodRmmNr) {
		return nil, false
	}
	return o.CollectionPeriodRmmNr, true
}

// HasCollectionPeriodRmmNr returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasCollectionPeriodRmmNr() bool {
	if o != nil && !isNil(o.CollectionPeriodRmmNr) {
		return true
	}

	return false
}

// SetCollectionPeriodRmmNr gets a reference to the given CollectionPeriodRmmNrMdt and assigns it to the CollectionPeriodRmmNr field.
func (o *ImmediateMdtConf) SetCollectionPeriodRmmNr(v CollectionPeriodRmmNrMdt) {
	o.CollectionPeriodRmmNr = &v
}

// GetMeasurementPeriodLte returns the MeasurementPeriodLte field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetMeasurementPeriodLte() MeasurementPeriodLteMdt {
	if o == nil || isNil(o.MeasurementPeriodLte) {
		var ret MeasurementPeriodLteMdt
		return ret
	}
	return *o.MeasurementPeriodLte
}

// GetMeasurementPeriodLteOk returns a tuple with the MeasurementPeriodLte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetMeasurementPeriodLteOk() (*MeasurementPeriodLteMdt, bool) {
	if o == nil || isNil(o.MeasurementPeriodLte) {
		return nil, false
	}
	return o.MeasurementPeriodLte, true
}

// HasMeasurementPeriodLte returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasMeasurementPeriodLte() bool {
	if o != nil && !isNil(o.MeasurementPeriodLte) {
		return true
	}

	return false
}

// SetMeasurementPeriodLte gets a reference to the given MeasurementPeriodLteMdt and assigns it to the MeasurementPeriodLte field.
func (o *ImmediateMdtConf) SetMeasurementPeriodLte(v MeasurementPeriodLteMdt) {
	o.MeasurementPeriodLte = &v
}

// GetAreaScope returns the AreaScope field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetAreaScope() AreaScope {
	if o == nil || isNil(o.AreaScope) {
		var ret AreaScope
		return ret
	}
	return *o.AreaScope
}

// GetAreaScopeOk returns a tuple with the AreaScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetAreaScopeOk() (*AreaScope, bool) {
	if o == nil || isNil(o.AreaScope) {
		return nil, false
	}
	return o.AreaScope, true
}

// HasAreaScope returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasAreaScope() bool {
	if o != nil && !isNil(o.AreaScope) {
		return true
	}

	return false
}

// SetAreaScope gets a reference to the given AreaScope and assigns it to the AreaScope field.
func (o *ImmediateMdtConf) SetAreaScope(v AreaScope) {
	o.AreaScope = &v
}

// GetPositioningMethod returns the PositioningMethod field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetPositioningMethod() PositioningMethodMdt {
	if o == nil || isNil(o.PositioningMethod) {
		var ret PositioningMethodMdt
		return ret
	}
	return *o.PositioningMethod
}

// GetPositioningMethodOk returns a tuple with the PositioningMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetPositioningMethodOk() (*PositioningMethodMdt, bool) {
	if o == nil || isNil(o.PositioningMethod) {
		return nil, false
	}
	return o.PositioningMethod, true
}

// HasPositioningMethod returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasPositioningMethod() bool {
	if o != nil && !isNil(o.PositioningMethod) {
		return true
	}

	return false
}

// SetPositioningMethod gets a reference to the given PositioningMethodMdt and assigns it to the PositioningMethod field.
func (o *ImmediateMdtConf) SetPositioningMethod(v PositioningMethodMdt) {
	o.PositioningMethod = &v
}

// GetAddPositioningMethodList returns the AddPositioningMethodList field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetAddPositioningMethodList() []PositioningMethodMdt {
	if o == nil || isNil(o.AddPositioningMethodList) {
		var ret []PositioningMethodMdt
		return ret
	}
	return o.AddPositioningMethodList
}

// GetAddPositioningMethodListOk returns a tuple with the AddPositioningMethodList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetAddPositioningMethodListOk() ([]PositioningMethodMdt, bool) {
	if o == nil || isNil(o.AddPositioningMethodList) {
		return nil, false
	}
	return o.AddPositioningMethodList, true
}

// HasAddPositioningMethodList returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasAddPositioningMethodList() bool {
	if o != nil && !isNil(o.AddPositioningMethodList) {
		return true
	}

	return false
}

// SetAddPositioningMethodList gets a reference to the given []PositioningMethodMdt and assigns it to the AddPositioningMethodList field.
func (o *ImmediateMdtConf) SetAddPositioningMethodList(v []PositioningMethodMdt) {
	o.AddPositioningMethodList = v
}

// GetMdtAllowedPlmnIdList returns the MdtAllowedPlmnIdList field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetMdtAllowedPlmnIdList() []PlmnId {
	if o == nil || isNil(o.MdtAllowedPlmnIdList) {
		var ret []PlmnId
		return ret
	}
	return o.MdtAllowedPlmnIdList
}

// GetMdtAllowedPlmnIdListOk returns a tuple with the MdtAllowedPlmnIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetMdtAllowedPlmnIdListOk() ([]PlmnId, bool) {
	if o == nil || isNil(o.MdtAllowedPlmnIdList) {
		return nil, false
	}
	return o.MdtAllowedPlmnIdList, true
}

// HasMdtAllowedPlmnIdList returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasMdtAllowedPlmnIdList() bool {
	if o != nil && !isNil(o.MdtAllowedPlmnIdList) {
		return true
	}

	return false
}

// SetMdtAllowedPlmnIdList gets a reference to the given []PlmnId and assigns it to the MdtAllowedPlmnIdList field.
func (o *ImmediateMdtConf) SetMdtAllowedPlmnIdList(v []PlmnId) {
	o.MdtAllowedPlmnIdList = v
}

// GetSensorMeasurementList returns the SensorMeasurementList field value if set, zero value otherwise.
func (o *ImmediateMdtConf) GetSensorMeasurementList() []SensorMeasurement {
	if o == nil || isNil(o.SensorMeasurementList) {
		var ret []SensorMeasurement
		return ret
	}
	return o.SensorMeasurementList
}

// GetSensorMeasurementListOk returns a tuple with the SensorMeasurementList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmediateMdtConf) GetSensorMeasurementListOk() ([]SensorMeasurement, bool) {
	if o == nil || isNil(o.SensorMeasurementList) {
		return nil, false
	}
	return o.SensorMeasurementList, true
}

// HasSensorMeasurementList returns a boolean if a field has been set.
func (o *ImmediateMdtConf) HasSensorMeasurementList() bool {
	if o != nil && !isNil(o.SensorMeasurementList) {
		return true
	}

	return false
}

// SetSensorMeasurementList gets a reference to the given []SensorMeasurement and assigns it to the SensorMeasurementList field.
func (o *ImmediateMdtConf) SetSensorMeasurementList(v []SensorMeasurement) {
	o.SensorMeasurementList = v
}

func (o ImmediateMdtConf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImmediateMdtConf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jobType"] = o.JobType
	if !isNil(o.MeasurementLteList) {
		toSerialize["measurementLteList"] = o.MeasurementLteList
	}
	if !isNil(o.MeasurementNrList) {
		toSerialize["measurementNrList"] = o.MeasurementNrList
	}
	if !isNil(o.ReportingTriggerList) {
		toSerialize["reportingTriggerList"] = o.ReportingTriggerList
	}
	if !isNil(o.ReportInterval) {
		toSerialize["reportInterval"] = o.ReportInterval
	}
	if !isNil(o.ReportIntervalNr) {
		toSerialize["reportIntervalNr"] = o.ReportIntervalNr
	}
	if !isNil(o.ReportAmount) {
		toSerialize["reportAmount"] = o.ReportAmount
	}
	if !isNil(o.EventThresholdRsrp) {
		toSerialize["eventThresholdRsrp"] = o.EventThresholdRsrp
	}
	if !isNil(o.EventThresholdRsrq) {
		toSerialize["eventThresholdRsrq"] = o.EventThresholdRsrq
	}
	if !isNil(o.EventThresholdRsrpNr) {
		toSerialize["eventThresholdRsrpNr"] = o.EventThresholdRsrpNr
	}
	if !isNil(o.EventThresholdRsrqNr) {
		toSerialize["eventThresholdRsrqNr"] = o.EventThresholdRsrqNr
	}
	if !isNil(o.CollectionPeriodRmmLte) {
		toSerialize["collectionPeriodRmmLte"] = o.CollectionPeriodRmmLte
	}
	if !isNil(o.CollectionPeriodRmmNr) {
		toSerialize["collectionPeriodRmmNr"] = o.CollectionPeriodRmmNr
	}
	if !isNil(o.MeasurementPeriodLte) {
		toSerialize["measurementPeriodLte"] = o.MeasurementPeriodLte
	}
	if !isNil(o.AreaScope) {
		toSerialize["areaScope"] = o.AreaScope
	}
	if !isNil(o.PositioningMethod) {
		toSerialize["positioningMethod"] = o.PositioningMethod
	}
	if !isNil(o.AddPositioningMethodList) {
		toSerialize["addPositioningMethodList"] = o.AddPositioningMethodList
	}
	if !isNil(o.MdtAllowedPlmnIdList) {
		toSerialize["mdtAllowedPlmnIdList"] = o.MdtAllowedPlmnIdList
	}
	if !isNil(o.SensorMeasurementList) {
		toSerialize["sensorMeasurementList"] = o.SensorMeasurementList
	}
	return toSerialize, nil
}

type NullableImmediateMdtConf struct {
	value *ImmediateMdtConf
	isSet bool
}

func (v NullableImmediateMdtConf) Get() *ImmediateMdtConf {
	return v.value
}

func (v *NullableImmediateMdtConf) Set(val *ImmediateMdtConf) {
	v.value = val
	v.isSet = true
}

func (v NullableImmediateMdtConf) IsSet() bool {
	return v.isSet
}

func (v *NullableImmediateMdtConf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImmediateMdtConf(val *ImmediateMdtConf) *NullableImmediateMdtConf {
	return &NullableImmediateMdtConf{value: val, isSet: true}
}

func (v NullableImmediateMdtConf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImmediateMdtConf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


