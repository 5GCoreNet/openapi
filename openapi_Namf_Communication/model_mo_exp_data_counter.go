/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
	"time"
)

// checks if the MoExpDataCounter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoExpDataCounter{}

// MoExpDataCounter Contain the MO Exception Data Counter.
type MoExpDataCounter struct {
	// Unsigned integer identifying the MO Exception Data Counter, as specified in clause 5.31.14.3 of 3GPP TS 23.501. 
	Counter int32 `json:"counter"`
	// string with format 'date-time' as defined in OpenAPI.
	TimeStamp *time.Time `json:"timeStamp,omitempty"`
}

// NewMoExpDataCounter instantiates a new MoExpDataCounter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoExpDataCounter(counter int32) *MoExpDataCounter {
	this := MoExpDataCounter{}
	this.Counter = counter
	return &this
}

// NewMoExpDataCounterWithDefaults instantiates a new MoExpDataCounter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoExpDataCounterWithDefaults() *MoExpDataCounter {
	this := MoExpDataCounter{}
	return &this
}

// GetCounter returns the Counter field value
func (o *MoExpDataCounter) GetCounter() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Counter
}

// GetCounterOk returns a tuple with the Counter field value
// and a boolean to check if the value has been set.
func (o *MoExpDataCounter) GetCounterOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Counter, true
}

// SetCounter sets field value
func (o *MoExpDataCounter) SetCounter(v int32) {
	o.Counter = v
}

// GetTimeStamp returns the TimeStamp field value if set, zero value otherwise.
func (o *MoExpDataCounter) GetTimeStamp() time.Time {
	if o == nil || IsNil(o.TimeStamp) {
		var ret time.Time
		return ret
	}
	return *o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoExpDataCounter) GetTimeStampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeStamp) {
		return nil, false
	}
	return o.TimeStamp, true
}

// HasTimeStamp returns a boolean if a field has been set.
func (o *MoExpDataCounter) HasTimeStamp() bool {
	if o != nil && !IsNil(o.TimeStamp) {
		return true
	}

	return false
}

// SetTimeStamp gets a reference to the given time.Time and assigns it to the TimeStamp field.
func (o *MoExpDataCounter) SetTimeStamp(v time.Time) {
	o.TimeStamp = &v
}

func (o MoExpDataCounter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoExpDataCounter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["counter"] = o.Counter
	if !IsNil(o.TimeStamp) {
		toSerialize["timeStamp"] = o.TimeStamp
	}
	return toSerialize, nil
}

type NullableMoExpDataCounter struct {
	value *MoExpDataCounter
	isSet bool
}

func (v NullableMoExpDataCounter) Get() *MoExpDataCounter {
	return v.value
}

func (v *NullableMoExpDataCounter) Set(val *MoExpDataCounter) {
	v.value = val
	v.isSet = true
}

func (v NullableMoExpDataCounter) IsSet() bool {
	return v.isSet
}

func (v *NullableMoExpDataCounter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoExpDataCounter(val *MoExpDataCounter) *NullableMoExpDataCounter {
	return &NullableMoExpDataCounter{value: val, isSet: true}
}

func (v NullableMoExpDataCounter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoExpDataCounter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


