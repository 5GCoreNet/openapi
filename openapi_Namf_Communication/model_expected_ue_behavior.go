/*
Namf_Communication

AMF Communication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Namf_Communication

import (
	"encoding/json"
	"time"
)

// checks if the ExpectedUeBehavior type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpectedUeBehavior{}

// ExpectedUeBehavior Represents the expected UE behavior (e.g. UE moving trajectory) and its validity period
type ExpectedUeBehavior struct {
	ExpMoveTrajectory []UserLocation `json:"expMoveTrajectory"`
	// string with format 'date-time' as defined in OpenAPI.
	ValidityTime time.Time `json:"validityTime"`
}

// NewExpectedUeBehavior instantiates a new ExpectedUeBehavior object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpectedUeBehavior(expMoveTrajectory []UserLocation, validityTime time.Time) *ExpectedUeBehavior {
	this := ExpectedUeBehavior{}
	this.ExpMoveTrajectory = expMoveTrajectory
	this.ValidityTime = validityTime
	return &this
}

// NewExpectedUeBehaviorWithDefaults instantiates a new ExpectedUeBehavior object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpectedUeBehaviorWithDefaults() *ExpectedUeBehavior {
	this := ExpectedUeBehavior{}
	return &this
}

// GetExpMoveTrajectory returns the ExpMoveTrajectory field value
func (o *ExpectedUeBehavior) GetExpMoveTrajectory() []UserLocation {
	if o == nil {
		var ret []UserLocation
		return ret
	}

	return o.ExpMoveTrajectory
}

// GetExpMoveTrajectoryOk returns a tuple with the ExpMoveTrajectory field value
// and a boolean to check if the value has been set.
func (o *ExpectedUeBehavior) GetExpMoveTrajectoryOk() ([]UserLocation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpMoveTrajectory, true
}

// SetExpMoveTrajectory sets field value
func (o *ExpectedUeBehavior) SetExpMoveTrajectory(v []UserLocation) {
	o.ExpMoveTrajectory = v
}

// GetValidityTime returns the ValidityTime field value
func (o *ExpectedUeBehavior) GetValidityTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ValidityTime
}

// GetValidityTimeOk returns a tuple with the ValidityTime field value
// and a boolean to check if the value has been set.
func (o *ExpectedUeBehavior) GetValidityTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidityTime, true
}

// SetValidityTime sets field value
func (o *ExpectedUeBehavior) SetValidityTime(v time.Time) {
	o.ValidityTime = v
}

func (o ExpectedUeBehavior) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpectedUeBehavior) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expMoveTrajectory"] = o.ExpMoveTrajectory
	toSerialize["validityTime"] = o.ValidityTime
	return toSerialize, nil
}

type NullableExpectedUeBehavior struct {
	value *ExpectedUeBehavior
	isSet bool
}

func (v NullableExpectedUeBehavior) Get() *ExpectedUeBehavior {
	return v.value
}

func (v *NullableExpectedUeBehavior) Set(val *ExpectedUeBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableExpectedUeBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableExpectedUeBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpectedUeBehavior(val *ExpectedUeBehavior) *NullableExpectedUeBehavior {
	return &NullableExpectedUeBehavior{value: val, isSet: true}
}

func (v NullableExpectedUeBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpectedUeBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


