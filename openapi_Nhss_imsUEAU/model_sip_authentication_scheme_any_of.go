/*
Nhss_imsUEAU

Nhss UE Authentication Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsUEAU

import (
	"encoding/json"
	"fmt"
)

// SipAuthenticationSchemeAnyOf the model 'SipAuthenticationSchemeAnyOf'
type SipAuthenticationSchemeAnyOf string

// List of SipAuthenticationScheme_anyOf
const (
	DIGEST_AKAV1_MD5 SipAuthenticationSchemeAnyOf = "DIGEST-AKAV1-MD5"
	DIGEST_HTTP SipAuthenticationSchemeAnyOf = "DIGEST-HTTP"
	NBA SipAuthenticationSchemeAnyOf = "NBA"
	GIBA SipAuthenticationSchemeAnyOf = "GIBA"
	UNKNOWN SipAuthenticationSchemeAnyOf = "UNKNOWN"
)

// All allowed values of SipAuthenticationSchemeAnyOf enum
var AllowedSipAuthenticationSchemeAnyOfEnumValues = []SipAuthenticationSchemeAnyOf{
	"DIGEST-AKAV1-MD5",
	"DIGEST-HTTP",
	"NBA",
	"GIBA",
	"UNKNOWN",
}

func (v *SipAuthenticationSchemeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SipAuthenticationSchemeAnyOf(value)
	for _, existing := range AllowedSipAuthenticationSchemeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SipAuthenticationSchemeAnyOf", value)
}

// NewSipAuthenticationSchemeAnyOfFromValue returns a pointer to a valid SipAuthenticationSchemeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSipAuthenticationSchemeAnyOfFromValue(v string) (*SipAuthenticationSchemeAnyOf, error) {
	ev := SipAuthenticationSchemeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SipAuthenticationSchemeAnyOf: valid values are %v", v, AllowedSipAuthenticationSchemeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SipAuthenticationSchemeAnyOf) IsValid() bool {
	for _, existing := range AllowedSipAuthenticationSchemeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SipAuthenticationScheme_anyOf value
func (v SipAuthenticationSchemeAnyOf) Ptr() *SipAuthenticationSchemeAnyOf {
	return &v
}

type NullableSipAuthenticationSchemeAnyOf struct {
	value *SipAuthenticationSchemeAnyOf
	isSet bool
}

func (v NullableSipAuthenticationSchemeAnyOf) Get() *SipAuthenticationSchemeAnyOf {
	return v.value
}

func (v *NullableSipAuthenticationSchemeAnyOf) Set(val *SipAuthenticationSchemeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSipAuthenticationSchemeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSipAuthenticationSchemeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSipAuthenticationSchemeAnyOf(val *SipAuthenticationSchemeAnyOf) *NullableSipAuthenticationSchemeAnyOf {
	return &NullableSipAuthenticationSchemeAnyOf{value: val, isSet: true}
}

func (v NullableSipAuthenticationSchemeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSipAuthenticationSchemeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

