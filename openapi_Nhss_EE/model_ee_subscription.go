/*
Nhss_EE

HSS Event Exposure.   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_EE

import (
	"encoding/json"
)

// checks if the EeSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EeSubscription{}

// EeSubscription It represents the request body of the subscription request sent to HSS, containing data related to the subscription to be created, such as the SCEF, Monitoring Configurations and reporting options
type EeSubscription struct {
	// String providing an URI formatted according to RFC 3986.
	CallbackReference string `json:"callbackReference"`
	// Fully Qualified Domain Name
	ScefId *string `json:"scefId,omitempty"`
	// Fully Qualified Domain Name
	ScefDiamRealm *string `json:"scefDiamRealm,omitempty"`
	// A map (list of key-value pairs where ReferenceId serves as key) of MonitoringConfigurations
	MonitoringConfigurations *map[string]MonitoringConfiguration `json:"monitoringConfigurations,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SupportedFeatures *string           `json:"supportedFeatures,omitempty"`
	ReportingOptions  *ReportingOptions `json:"reportingOptions,omitempty"`
	// String uniquely identifying MTC provider information.
	MtcProviderInformation *string `json:"mtcProviderInformation,omitempty"`
	ExternalIdentifier     *string `json:"externalIdentifier,omitempty"`
}

// NewEeSubscription instantiates a new EeSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEeSubscription(callbackReference string) *EeSubscription {
	this := EeSubscription{}
	this.CallbackReference = callbackReference
	return &this
}

// NewEeSubscriptionWithDefaults instantiates a new EeSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEeSubscriptionWithDefaults() *EeSubscription {
	this := EeSubscription{}
	return &this
}

// GetCallbackReference returns the CallbackReference field value
func (o *EeSubscription) GetCallbackReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallbackReference
}

// GetCallbackReferenceOk returns a tuple with the CallbackReference field value
// and a boolean to check if the value has been set.
func (o *EeSubscription) GetCallbackReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallbackReference, true
}

// SetCallbackReference sets field value
func (o *EeSubscription) SetCallbackReference(v string) {
	o.CallbackReference = v
}

// GetScefId returns the ScefId field value if set, zero value otherwise.
func (o *EeSubscription) GetScefId() string {
	if o == nil || IsNil(o.ScefId) {
		var ret string
		return ret
	}
	return *o.ScefId
}

// GetScefIdOk returns a tuple with the ScefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscription) GetScefIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScefId) {
		return nil, false
	}
	return o.ScefId, true
}

// HasScefId returns a boolean if a field has been set.
func (o *EeSubscription) HasScefId() bool {
	if o != nil && !IsNil(o.ScefId) {
		return true
	}

	return false
}

// SetScefId gets a reference to the given string and assigns it to the ScefId field.
func (o *EeSubscription) SetScefId(v string) {
	o.ScefId = &v
}

// GetScefDiamRealm returns the ScefDiamRealm field value if set, zero value otherwise.
func (o *EeSubscription) GetScefDiamRealm() string {
	if o == nil || IsNil(o.ScefDiamRealm) {
		var ret string
		return ret
	}
	return *o.ScefDiamRealm
}

// GetScefDiamRealmOk returns a tuple with the ScefDiamRealm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscription) GetScefDiamRealmOk() (*string, bool) {
	if o == nil || IsNil(o.ScefDiamRealm) {
		return nil, false
	}
	return o.ScefDiamRealm, true
}

// HasScefDiamRealm returns a boolean if a field has been set.
func (o *EeSubscription) HasScefDiamRealm() bool {
	if o != nil && !IsNil(o.ScefDiamRealm) {
		return true
	}

	return false
}

// SetScefDiamRealm gets a reference to the given string and assigns it to the ScefDiamRealm field.
func (o *EeSubscription) SetScefDiamRealm(v string) {
	o.ScefDiamRealm = &v
}

// GetMonitoringConfigurations returns the MonitoringConfigurations field value if set, zero value otherwise.
func (o *EeSubscription) GetMonitoringConfigurations() map[string]MonitoringConfiguration {
	if o == nil || IsNil(o.MonitoringConfigurations) {
		var ret map[string]MonitoringConfiguration
		return ret
	}
	return *o.MonitoringConfigurations
}

// GetMonitoringConfigurationsOk returns a tuple with the MonitoringConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscription) GetMonitoringConfigurationsOk() (*map[string]MonitoringConfiguration, bool) {
	if o == nil || IsNil(o.MonitoringConfigurations) {
		return nil, false
	}
	return o.MonitoringConfigurations, true
}

// HasMonitoringConfigurations returns a boolean if a field has been set.
func (o *EeSubscription) HasMonitoringConfigurations() bool {
	if o != nil && !IsNil(o.MonitoringConfigurations) {
		return true
	}

	return false
}

// SetMonitoringConfigurations gets a reference to the given map[string]MonitoringConfiguration and assigns it to the MonitoringConfigurations field.
func (o *EeSubscription) SetMonitoringConfigurations(v map[string]MonitoringConfiguration) {
	o.MonitoringConfigurations = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *EeSubscription) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscription) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *EeSubscription) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *EeSubscription) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetReportingOptions returns the ReportingOptions field value if set, zero value otherwise.
func (o *EeSubscription) GetReportingOptions() ReportingOptions {
	if o == nil || IsNil(o.ReportingOptions) {
		var ret ReportingOptions
		return ret
	}
	return *o.ReportingOptions
}

// GetReportingOptionsOk returns a tuple with the ReportingOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscription) GetReportingOptionsOk() (*ReportingOptions, bool) {
	if o == nil || IsNil(o.ReportingOptions) {
		return nil, false
	}
	return o.ReportingOptions, true
}

// HasReportingOptions returns a boolean if a field has been set.
func (o *EeSubscription) HasReportingOptions() bool {
	if o != nil && !IsNil(o.ReportingOptions) {
		return true
	}

	return false
}

// SetReportingOptions gets a reference to the given ReportingOptions and assigns it to the ReportingOptions field.
func (o *EeSubscription) SetReportingOptions(v ReportingOptions) {
	o.ReportingOptions = &v
}

// GetMtcProviderInformation returns the MtcProviderInformation field value if set, zero value otherwise.
func (o *EeSubscription) GetMtcProviderInformation() string {
	if o == nil || IsNil(o.MtcProviderInformation) {
		var ret string
		return ret
	}
	return *o.MtcProviderInformation
}

// GetMtcProviderInformationOk returns a tuple with the MtcProviderInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscription) GetMtcProviderInformationOk() (*string, bool) {
	if o == nil || IsNil(o.MtcProviderInformation) {
		return nil, false
	}
	return o.MtcProviderInformation, true
}

// HasMtcProviderInformation returns a boolean if a field has been set.
func (o *EeSubscription) HasMtcProviderInformation() bool {
	if o != nil && !IsNil(o.MtcProviderInformation) {
		return true
	}

	return false
}

// SetMtcProviderInformation gets a reference to the given string and assigns it to the MtcProviderInformation field.
func (o *EeSubscription) SetMtcProviderInformation(v string) {
	o.MtcProviderInformation = &v
}

// GetExternalIdentifier returns the ExternalIdentifier field value if set, zero value otherwise.
func (o *EeSubscription) GetExternalIdentifier() string {
	if o == nil || IsNil(o.ExternalIdentifier) {
		var ret string
		return ret
	}
	return *o.ExternalIdentifier
}

// GetExternalIdentifierOk returns a tuple with the ExternalIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscription) GetExternalIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalIdentifier) {
		return nil, false
	}
	return o.ExternalIdentifier, true
}

// HasExternalIdentifier returns a boolean if a field has been set.
func (o *EeSubscription) HasExternalIdentifier() bool {
	if o != nil && !IsNil(o.ExternalIdentifier) {
		return true
	}

	return false
}

// SetExternalIdentifier gets a reference to the given string and assigns it to the ExternalIdentifier field.
func (o *EeSubscription) SetExternalIdentifier(v string) {
	o.ExternalIdentifier = &v
}

func (o EeSubscription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EeSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["callbackReference"] = o.CallbackReference
	if !IsNil(o.ScefId) {
		toSerialize["scefId"] = o.ScefId
	}
	if !IsNil(o.ScefDiamRealm) {
		toSerialize["scefDiamRealm"] = o.ScefDiamRealm
	}
	if !IsNil(o.MonitoringConfigurations) {
		toSerialize["monitoringConfigurations"] = o.MonitoringConfigurations
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !IsNil(o.ReportingOptions) {
		toSerialize["reportingOptions"] = o.ReportingOptions
	}
	if !IsNil(o.MtcProviderInformation) {
		toSerialize["mtcProviderInformation"] = o.MtcProviderInformation
	}
	if !IsNil(o.ExternalIdentifier) {
		toSerialize["externalIdentifier"] = o.ExternalIdentifier
	}
	return toSerialize, nil
}

type NullableEeSubscription struct {
	value *EeSubscription
	isSet bool
}

func (v NullableEeSubscription) Get() *EeSubscription {
	return v.value
}

func (v *NullableEeSubscription) Set(val *EeSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableEeSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableEeSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEeSubscription(val *EeSubscription) *NullableEeSubscription {
	return &NullableEeSubscription{value: val, isSet: true}
}

func (v NullableEeSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEeSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
