/*
Nhss_EE

HSS Event Exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_EE

import (
	"encoding/json"
	"time"
)

// checks if the ReachabilityForDataReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReachabilityForDataReport{}

// ReachabilityForDataReport Contains data for a Monitoring Event Report, specific to the 'Reachability For Data' event type
type ReachabilityForDataReport struct {
	ReachabilityDataStatus bool `json:"reachabilityDataStatus"`
	// string with format 'date-time' as defined in OpenAPI.
	MaxAvailabilityTime *time.Time `json:"maxAvailabilityTime,omitempty"`
}

// NewReachabilityForDataReport instantiates a new ReachabilityForDataReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReachabilityForDataReport(reachabilityDataStatus bool) *ReachabilityForDataReport {
	this := ReachabilityForDataReport{}
	this.ReachabilityDataStatus = reachabilityDataStatus
	return &this
}

// NewReachabilityForDataReportWithDefaults instantiates a new ReachabilityForDataReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReachabilityForDataReportWithDefaults() *ReachabilityForDataReport {
	this := ReachabilityForDataReport{}
	return &this
}

// GetReachabilityDataStatus returns the ReachabilityDataStatus field value
func (o *ReachabilityForDataReport) GetReachabilityDataStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReachabilityDataStatus
}

// GetReachabilityDataStatusOk returns a tuple with the ReachabilityDataStatus field value
// and a boolean to check if the value has been set.
func (o *ReachabilityForDataReport) GetReachabilityDataStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReachabilityDataStatus, true
}

// SetReachabilityDataStatus sets field value
func (o *ReachabilityForDataReport) SetReachabilityDataStatus(v bool) {
	o.ReachabilityDataStatus = v
}

// GetMaxAvailabilityTime returns the MaxAvailabilityTime field value if set, zero value otherwise.
func (o *ReachabilityForDataReport) GetMaxAvailabilityTime() time.Time {
	if o == nil || IsNil(o.MaxAvailabilityTime) {
		var ret time.Time
		return ret
	}
	return *o.MaxAvailabilityTime
}

// GetMaxAvailabilityTimeOk returns a tuple with the MaxAvailabilityTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachabilityForDataReport) GetMaxAvailabilityTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MaxAvailabilityTime) {
		return nil, false
	}
	return o.MaxAvailabilityTime, true
}

// HasMaxAvailabilityTime returns a boolean if a field has been set.
func (o *ReachabilityForDataReport) HasMaxAvailabilityTime() bool {
	if o != nil && !IsNil(o.MaxAvailabilityTime) {
		return true
	}

	return false
}

// SetMaxAvailabilityTime gets a reference to the given time.Time and assigns it to the MaxAvailabilityTime field.
func (o *ReachabilityForDataReport) SetMaxAvailabilityTime(v time.Time) {
	o.MaxAvailabilityTime = &v
}

func (o ReachabilityForDataReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReachabilityForDataReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reachabilityDataStatus"] = o.ReachabilityDataStatus
	if !IsNil(o.MaxAvailabilityTime) {
		toSerialize["maxAvailabilityTime"] = o.MaxAvailabilityTime
	}
	return toSerialize, nil
}

type NullableReachabilityForDataReport struct {
	value *ReachabilityForDataReport
	isSet bool
}

func (v NullableReachabilityForDataReport) Get() *ReachabilityForDataReport {
	return v.value
}

func (v *NullableReachabilityForDataReport) Set(val *ReachabilityForDataReport) {
	v.value = val
	v.isSet = true
}

func (v NullableReachabilityForDataReport) IsSet() bool {
	return v.isSet
}

func (v *NullableReachabilityForDataReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReachabilityForDataReport(val *ReachabilityForDataReport) *NullableReachabilityForDataReport {
	return &NullableReachabilityForDataReport{value: val, isSet: true}
}

func (v NullableReachabilityForDataReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReachabilityForDataReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
