/*
Nhss_EE

HSS Event Exposure.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_EE

import (
	"encoding/json"
	"time"
)

// checks if the MonitoringReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitoringReport{}

// MonitoringReport Contains data for each Monitoring Event Report sent by the HSS
type MonitoringReport struct {
	// The ID to refer to a given Monitoring Event (and its corresponding Monitoring Configuration and Monitoring Event Report)
	ReferenceId int32 `json:"referenceId"`
	EventType EventType `json:"eventType"`
	// string with format 'date-time' as defined in OpenAPI.
	TimeStamp time.Time `json:"timeStamp"`
	Report *Report `json:"report,omitempty"`
}

// NewMonitoringReport instantiates a new MonitoringReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringReport(referenceId int32, eventType EventType, timeStamp time.Time) *MonitoringReport {
	this := MonitoringReport{}
	this.ReferenceId = referenceId
	this.EventType = eventType
	this.TimeStamp = timeStamp
	return &this
}

// NewMonitoringReportWithDefaults instantiates a new MonitoringReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringReportWithDefaults() *MonitoringReport {
	this := MonitoringReport{}
	return &this
}

// GetReferenceId returns the ReferenceId field value
func (o *MonitoringReport) GetReferenceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
func (o *MonitoringReport) GetReferenceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceId, true
}

// SetReferenceId sets field value
func (o *MonitoringReport) SetReferenceId(v int32) {
	o.ReferenceId = v
}

// GetEventType returns the EventType field value
func (o *MonitoringReport) GetEventType() EventType {
	if o == nil {
		var ret EventType
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *MonitoringReport) GetEventTypeOk() (*EventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *MonitoringReport) SetEventType(v EventType) {
	o.EventType = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *MonitoringReport) GetTimeStamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *MonitoringReport) GetTimeStampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *MonitoringReport) SetTimeStamp(v time.Time) {
	o.TimeStamp = v
}

// GetReport returns the Report field value if set, zero value otherwise.
func (o *MonitoringReport) GetReport() Report {
	if o == nil || isNil(o.Report) {
		var ret Report
		return ret
	}
	return *o.Report
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringReport) GetReportOk() (*Report, bool) {
	if o == nil || isNil(o.Report) {
		return nil, false
	}
	return o.Report, true
}

// HasReport returns a boolean if a field has been set.
func (o *MonitoringReport) HasReport() bool {
	if o != nil && !isNil(o.Report) {
		return true
	}

	return false
}

// SetReport gets a reference to the given Report and assigns it to the Report field.
func (o *MonitoringReport) SetReport(v Report) {
	o.Report = &v
}

func (o MonitoringReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitoringReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["referenceId"] = o.ReferenceId
	toSerialize["eventType"] = o.EventType
	toSerialize["timeStamp"] = o.TimeStamp
	if !isNil(o.Report) {
		toSerialize["report"] = o.Report
	}
	return toSerialize, nil
}

type NullableMonitoringReport struct {
	value *MonitoringReport
	isSet bool
}

func (v NullableMonitoringReport) Get() *MonitoringReport {
	return v.value
}

func (v *NullableMonitoringReport) Set(val *MonitoringReport) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringReport) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringReport(val *MonitoringReport) *NullableMonitoringReport {
	return &NullableMonitoringReport{value: val, isSet: true}
}

func (v NullableMonitoringReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


