/*
3gpp-5glan-pp

API for 5G LAN Parameter Provision.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_5GLANParameterProvision

import (
	"encoding/json"
	"fmt"
)

// AaaUsageAnyOf the model 'AaaUsageAnyOf'
type AaaUsageAnyOf string

// List of AaaUsage_anyOf
const (
	AUTH AaaUsageAnyOf = "AUTH"
	IP_ALLOC AaaUsageAnyOf = "IP_ALLOC"
)

// All allowed values of AaaUsageAnyOf enum
var AllowedAaaUsageAnyOfEnumValues = []AaaUsageAnyOf{
	"AUTH",
	"IP_ALLOC",
}

func (v *AaaUsageAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AaaUsageAnyOf(value)
	for _, existing := range AllowedAaaUsageAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AaaUsageAnyOf", value)
}

// NewAaaUsageAnyOfFromValue returns a pointer to a valid AaaUsageAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAaaUsageAnyOfFromValue(v string) (*AaaUsageAnyOf, error) {
	ev := AaaUsageAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AaaUsageAnyOf: valid values are %v", v, AllowedAaaUsageAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AaaUsageAnyOf) IsValid() bool {
	for _, existing := range AllowedAaaUsageAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AaaUsage_anyOf value
func (v AaaUsageAnyOf) Ptr() *AaaUsageAnyOf {
	return &v
}

type NullableAaaUsageAnyOf struct {
	value *AaaUsageAnyOf
	isSet bool
}

func (v NullableAaaUsageAnyOf) Get() *AaaUsageAnyOf {
	return v.value
}

func (v *NullableAaaUsageAnyOf) Set(val *AaaUsageAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAaaUsageAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAaaUsageAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAaaUsageAnyOf(val *AaaUsageAnyOf) *NullableAaaUsageAnyOf {
	return &NullableAaaUsageAnyOf{value: val, isSet: true}
}

func (v NullableAaaUsageAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAaaUsageAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

