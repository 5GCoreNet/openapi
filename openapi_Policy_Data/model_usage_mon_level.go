/*
Unified Data Repository Service API file for policy data

The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Policy_Data

import (
	"encoding/json"
	"fmt"
)

// UsageMonLevel Represents the usage monitoring level.
type UsageMonLevel struct {
	UsageMonLevelAnyOf *UsageMonLevelAnyOf
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *UsageMonLevel) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into UsageMonLevelAnyOf
	err = json.Unmarshal(data, &dst.UsageMonLevelAnyOf);
	if err == nil {
		jsonUsageMonLevelAnyOf, _ := json.Marshal(dst.UsageMonLevelAnyOf)
		if string(jsonUsageMonLevelAnyOf) == "{}" { // empty struct
			dst.UsageMonLevelAnyOf = nil
		} else {
			return nil // data stored in dst.UsageMonLevelAnyOf, return on the first match
		}
	} else {
		dst.UsageMonLevelAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(UsageMonLevel)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *UsageMonLevel) MarshalJSON() ([]byte, error) {
	if src.UsageMonLevelAnyOf != nil {
		return json.Marshal(&src.UsageMonLevelAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUsageMonLevel struct {
	value *UsageMonLevel
	isSet bool
}

func (v NullableUsageMonLevel) Get() *UsageMonLevel {
	return v.value
}

func (v *NullableUsageMonLevel) Set(val *UsageMonLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageMonLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageMonLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageMonLevel(val *UsageMonLevel) *NullableUsageMonLevel {
	return &NullableUsageMonLevel{value: val, isSet: true}
}

func (v NullableUsageMonLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageMonLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


