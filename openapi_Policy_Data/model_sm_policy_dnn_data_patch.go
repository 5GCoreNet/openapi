/*
Unified Data Repository Service API file for policy data

The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Policy_Data

import (
	"encoding/json"
)

// checks if the SmPolicyDnnDataPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmPolicyDnnDataPatch{}

// SmPolicyDnnDataPatch Contains the SM policy data for a given DNN (and S-NSSAI).
type SmPolicyDnnDataPatch struct {
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn string `json:"dnn"`
	// Contains updated transfer policies of background data transfer. Any string value can be used as a key of the map. 
	BdtRefIds map[string]string `json:"bdtRefIds,omitempty"`
}

// NewSmPolicyDnnDataPatch instantiates a new SmPolicyDnnDataPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmPolicyDnnDataPatch(dnn string) *SmPolicyDnnDataPatch {
	this := SmPolicyDnnDataPatch{}
	this.Dnn = dnn
	return &this
}

// NewSmPolicyDnnDataPatchWithDefaults instantiates a new SmPolicyDnnDataPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmPolicyDnnDataPatchWithDefaults() *SmPolicyDnnDataPatch {
	this := SmPolicyDnnDataPatch{}
	return &this
}

// GetDnn returns the Dnn field value
func (o *SmPolicyDnnDataPatch) GetDnn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnDataPatch) GetDnnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dnn, true
}

// SetDnn sets field value
func (o *SmPolicyDnnDataPatch) SetDnn(v string) {
	o.Dnn = v
}

// GetBdtRefIds returns the BdtRefIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDnnDataPatch) GetBdtRefIds() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.BdtRefIds
}

// GetBdtRefIdsOk returns a tuple with the BdtRefIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDnnDataPatch) GetBdtRefIdsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.BdtRefIds) {
		return nil, false
	}
	return &o.BdtRefIds, true
}

// HasBdtRefIds returns a boolean if a field has been set.
func (o *SmPolicyDnnDataPatch) HasBdtRefIds() bool {
	if o != nil && isNil(o.BdtRefIds) {
		return true
	}

	return false
}

// SetBdtRefIds gets a reference to the given map[string]string and assigns it to the BdtRefIds field.
func (o *SmPolicyDnnDataPatch) SetBdtRefIds(v map[string]string) {
	o.BdtRefIds = v
}

func (o SmPolicyDnnDataPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmPolicyDnnDataPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dnn"] = o.Dnn
	if o.BdtRefIds != nil {
		toSerialize["bdtRefIds"] = o.BdtRefIds
	}
	return toSerialize, nil
}

type NullableSmPolicyDnnDataPatch struct {
	value *SmPolicyDnnDataPatch
	isSet bool
}

func (v NullableSmPolicyDnnDataPatch) Get() *SmPolicyDnnDataPatch {
	return v.value
}

func (v *NullableSmPolicyDnnDataPatch) Set(val *SmPolicyDnnDataPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableSmPolicyDnnDataPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableSmPolicyDnnDataPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmPolicyDnnDataPatch(val *SmPolicyDnnDataPatch) *NullableSmPolicyDnnDataPatch {
	return &NullableSmPolicyDnnDataPatch{value: val, isSet: true}
}

func (v NullableSmPolicyDnnDataPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmPolicyDnnDataPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


