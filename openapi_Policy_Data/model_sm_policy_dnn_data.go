/*
Unified Data Repository Service API file for policy data

The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Policy_Data

import (
	"encoding/json"
)

// checks if the SmPolicyDnnData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmPolicyDnnData{}

// SmPolicyDnnData Contains the SM policy data for a given DNN (and S-NSSAI).
type SmPolicyDnnData struct {
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\"). 
	Dnn string `json:"dnn"`
	AllowedServices []string `json:"allowedServices,omitempty"`
	SubscCats []string `json:"subscCats,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	GbrUl *string `json:"gbrUl,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	GbrDl *string `json:"gbrDl,omitempty"`
	AdcSupport *bool `json:"adcSupport,omitempty"`
	SubscSpendingLimits *bool `json:"subscSpendingLimits,omitempty"`
	// Represents information that identifies which IP pool or external server is used to allocate the IP address. 
	Ipv4Index *int32 `json:"ipv4Index,omitempty"`
	// Represents information that identifies which IP pool or external server is used to allocate the IP address. 
	Ipv6Index *int32 `json:"ipv6Index,omitempty"`
	Offline *bool `json:"offline,omitempty"`
	Online *bool `json:"online,omitempty"`
	ChfInfo *ChargingInformation `json:"chfInfo,omitempty"`
	// A reference to the UsageMonitoringDataLimit or UsageMonitoringData instances for this DNN and SNSSAI that may also include the related monitoring key(s). The key of the map is the limit identifier. 
	RefUmDataLimitIds *map[string]LimitIdToMonitoringKey `json:"refUmDataLimitIds,omitempty"`
	MpsPriority *bool `json:"mpsPriority,omitempty"`
	McsPriority *bool `json:"mcsPriority,omitempty"`
	ImsSignallingPrio *bool `json:"imsSignallingPrio,omitempty"`
	MpsPriorityLevel *int32 `json:"mpsPriorityLevel,omitempty"`
	McsPriorityLevel *int32 `json:"mcsPriorityLevel,omitempty"`
	// Contains Presence reporting area information. The praId attribute within the PresenceInfo data type is the key of the map. 
	PraInfos *map[string]PresenceInfo `json:"praInfos,omitempty"`
	// Identifies transfer policies of background data transfer. Any string value can be used as a key of the map. 
	BdtRefIds map[string]string `json:"bdtRefIds,omitempty"`
	LocRoutNotAllowed *bool `json:"locRoutNotAllowed,omitempty"`
}

// NewSmPolicyDnnData instantiates a new SmPolicyDnnData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmPolicyDnnData(dnn string) *SmPolicyDnnData {
	this := SmPolicyDnnData{}
	this.Dnn = dnn
	return &this
}

// NewSmPolicyDnnDataWithDefaults instantiates a new SmPolicyDnnData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmPolicyDnnDataWithDefaults() *SmPolicyDnnData {
	this := SmPolicyDnnData{}
	return &this
}

// GetDnn returns the Dnn field value
func (o *SmPolicyDnnData) GetDnn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetDnnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dnn, true
}

// SetDnn sets field value
func (o *SmPolicyDnnData) SetDnn(v string) {
	o.Dnn = v
}

// GetAllowedServices returns the AllowedServices field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetAllowedServices() []string {
	if o == nil || isNil(o.AllowedServices) {
		var ret []string
		return ret
	}
	return o.AllowedServices
}

// GetAllowedServicesOk returns a tuple with the AllowedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetAllowedServicesOk() ([]string, bool) {
	if o == nil || isNil(o.AllowedServices) {
		return nil, false
	}
	return o.AllowedServices, true
}

// HasAllowedServices returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasAllowedServices() bool {
	if o != nil && !isNil(o.AllowedServices) {
		return true
	}

	return false
}

// SetAllowedServices gets a reference to the given []string and assigns it to the AllowedServices field.
func (o *SmPolicyDnnData) SetAllowedServices(v []string) {
	o.AllowedServices = v
}

// GetSubscCats returns the SubscCats field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetSubscCats() []string {
	if o == nil || isNil(o.SubscCats) {
		var ret []string
		return ret
	}
	return o.SubscCats
}

// GetSubscCatsOk returns a tuple with the SubscCats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetSubscCatsOk() ([]string, bool) {
	if o == nil || isNil(o.SubscCats) {
		return nil, false
	}
	return o.SubscCats, true
}

// HasSubscCats returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasSubscCats() bool {
	if o != nil && !isNil(o.SubscCats) {
		return true
	}

	return false
}

// SetSubscCats gets a reference to the given []string and assigns it to the SubscCats field.
func (o *SmPolicyDnnData) SetSubscCats(v []string) {
	o.SubscCats = v
}

// GetGbrUl returns the GbrUl field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetGbrUl() string {
	if o == nil || isNil(o.GbrUl) {
		var ret string
		return ret
	}
	return *o.GbrUl
}

// GetGbrUlOk returns a tuple with the GbrUl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetGbrUlOk() (*string, bool) {
	if o == nil || isNil(o.GbrUl) {
		return nil, false
	}
	return o.GbrUl, true
}

// HasGbrUl returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasGbrUl() bool {
	if o != nil && !isNil(o.GbrUl) {
		return true
	}

	return false
}

// SetGbrUl gets a reference to the given string and assigns it to the GbrUl field.
func (o *SmPolicyDnnData) SetGbrUl(v string) {
	o.GbrUl = &v
}

// GetGbrDl returns the GbrDl field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetGbrDl() string {
	if o == nil || isNil(o.GbrDl) {
		var ret string
		return ret
	}
	return *o.GbrDl
}

// GetGbrDlOk returns a tuple with the GbrDl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetGbrDlOk() (*string, bool) {
	if o == nil || isNil(o.GbrDl) {
		return nil, false
	}
	return o.GbrDl, true
}

// HasGbrDl returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasGbrDl() bool {
	if o != nil && !isNil(o.GbrDl) {
		return true
	}

	return false
}

// SetGbrDl gets a reference to the given string and assigns it to the GbrDl field.
func (o *SmPolicyDnnData) SetGbrDl(v string) {
	o.GbrDl = &v
}

// GetAdcSupport returns the AdcSupport field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetAdcSupport() bool {
	if o == nil || isNil(o.AdcSupport) {
		var ret bool
		return ret
	}
	return *o.AdcSupport
}

// GetAdcSupportOk returns a tuple with the AdcSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetAdcSupportOk() (*bool, bool) {
	if o == nil || isNil(o.AdcSupport) {
		return nil, false
	}
	return o.AdcSupport, true
}

// HasAdcSupport returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasAdcSupport() bool {
	if o != nil && !isNil(o.AdcSupport) {
		return true
	}

	return false
}

// SetAdcSupport gets a reference to the given bool and assigns it to the AdcSupport field.
func (o *SmPolicyDnnData) SetAdcSupport(v bool) {
	o.AdcSupport = &v
}

// GetSubscSpendingLimits returns the SubscSpendingLimits field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetSubscSpendingLimits() bool {
	if o == nil || isNil(o.SubscSpendingLimits) {
		var ret bool
		return ret
	}
	return *o.SubscSpendingLimits
}

// GetSubscSpendingLimitsOk returns a tuple with the SubscSpendingLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetSubscSpendingLimitsOk() (*bool, bool) {
	if o == nil || isNil(o.SubscSpendingLimits) {
		return nil, false
	}
	return o.SubscSpendingLimits, true
}

// HasSubscSpendingLimits returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasSubscSpendingLimits() bool {
	if o != nil && !isNil(o.SubscSpendingLimits) {
		return true
	}

	return false
}

// SetSubscSpendingLimits gets a reference to the given bool and assigns it to the SubscSpendingLimits field.
func (o *SmPolicyDnnData) SetSubscSpendingLimits(v bool) {
	o.SubscSpendingLimits = &v
}

// GetIpv4Index returns the Ipv4Index field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetIpv4Index() int32 {
	if o == nil || isNil(o.Ipv4Index) {
		var ret int32
		return ret
	}
	return *o.Ipv4Index
}

// GetIpv4IndexOk returns a tuple with the Ipv4Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetIpv4IndexOk() (*int32, bool) {
	if o == nil || isNil(o.Ipv4Index) {
		return nil, false
	}
	return o.Ipv4Index, true
}

// HasIpv4Index returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasIpv4Index() bool {
	if o != nil && !isNil(o.Ipv4Index) {
		return true
	}

	return false
}

// SetIpv4Index gets a reference to the given int32 and assigns it to the Ipv4Index field.
func (o *SmPolicyDnnData) SetIpv4Index(v int32) {
	o.Ipv4Index = &v
}

// GetIpv6Index returns the Ipv6Index field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetIpv6Index() int32 {
	if o == nil || isNil(o.Ipv6Index) {
		var ret int32
		return ret
	}
	return *o.Ipv6Index
}

// GetIpv6IndexOk returns a tuple with the Ipv6Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetIpv6IndexOk() (*int32, bool) {
	if o == nil || isNil(o.Ipv6Index) {
		return nil, false
	}
	return o.Ipv6Index, true
}

// HasIpv6Index returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasIpv6Index() bool {
	if o != nil && !isNil(o.Ipv6Index) {
		return true
	}

	return false
}

// SetIpv6Index gets a reference to the given int32 and assigns it to the Ipv6Index field.
func (o *SmPolicyDnnData) SetIpv6Index(v int32) {
	o.Ipv6Index = &v
}

// GetOffline returns the Offline field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetOffline() bool {
	if o == nil || isNil(o.Offline) {
		var ret bool
		return ret
	}
	return *o.Offline
}

// GetOfflineOk returns a tuple with the Offline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetOfflineOk() (*bool, bool) {
	if o == nil || isNil(o.Offline) {
		return nil, false
	}
	return o.Offline, true
}

// HasOffline returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasOffline() bool {
	if o != nil && !isNil(o.Offline) {
		return true
	}

	return false
}

// SetOffline gets a reference to the given bool and assigns it to the Offline field.
func (o *SmPolicyDnnData) SetOffline(v bool) {
	o.Offline = &v
}

// GetOnline returns the Online field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetOnline() bool {
	if o == nil || isNil(o.Online) {
		var ret bool
		return ret
	}
	return *o.Online
}

// GetOnlineOk returns a tuple with the Online field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetOnlineOk() (*bool, bool) {
	if o == nil || isNil(o.Online) {
		return nil, false
	}
	return o.Online, true
}

// HasOnline returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasOnline() bool {
	if o != nil && !isNil(o.Online) {
		return true
	}

	return false
}

// SetOnline gets a reference to the given bool and assigns it to the Online field.
func (o *SmPolicyDnnData) SetOnline(v bool) {
	o.Online = &v
}

// GetChfInfo returns the ChfInfo field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetChfInfo() ChargingInformation {
	if o == nil || isNil(o.ChfInfo) {
		var ret ChargingInformation
		return ret
	}
	return *o.ChfInfo
}

// GetChfInfoOk returns a tuple with the ChfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetChfInfoOk() (*ChargingInformation, bool) {
	if o == nil || isNil(o.ChfInfo) {
		return nil, false
	}
	return o.ChfInfo, true
}

// HasChfInfo returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasChfInfo() bool {
	if o != nil && !isNil(o.ChfInfo) {
		return true
	}

	return false
}

// SetChfInfo gets a reference to the given ChargingInformation and assigns it to the ChfInfo field.
func (o *SmPolicyDnnData) SetChfInfo(v ChargingInformation) {
	o.ChfInfo = &v
}

// GetRefUmDataLimitIds returns the RefUmDataLimitIds field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetRefUmDataLimitIds() map[string]LimitIdToMonitoringKey {
	if o == nil || isNil(o.RefUmDataLimitIds) {
		var ret map[string]LimitIdToMonitoringKey
		return ret
	}
	return *o.RefUmDataLimitIds
}

// GetRefUmDataLimitIdsOk returns a tuple with the RefUmDataLimitIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetRefUmDataLimitIdsOk() (*map[string]LimitIdToMonitoringKey, bool) {
	if o == nil || isNil(o.RefUmDataLimitIds) {
		return nil, false
	}
	return o.RefUmDataLimitIds, true
}

// HasRefUmDataLimitIds returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasRefUmDataLimitIds() bool {
	if o != nil && !isNil(o.RefUmDataLimitIds) {
		return true
	}

	return false
}

// SetRefUmDataLimitIds gets a reference to the given map[string]LimitIdToMonitoringKey and assigns it to the RefUmDataLimitIds field.
func (o *SmPolicyDnnData) SetRefUmDataLimitIds(v map[string]LimitIdToMonitoringKey) {
	o.RefUmDataLimitIds = &v
}

// GetMpsPriority returns the MpsPriority field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetMpsPriority() bool {
	if o == nil || isNil(o.MpsPriority) {
		var ret bool
		return ret
	}
	return *o.MpsPriority
}

// GetMpsPriorityOk returns a tuple with the MpsPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetMpsPriorityOk() (*bool, bool) {
	if o == nil || isNil(o.MpsPriority) {
		return nil, false
	}
	return o.MpsPriority, true
}

// HasMpsPriority returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasMpsPriority() bool {
	if o != nil && !isNil(o.MpsPriority) {
		return true
	}

	return false
}

// SetMpsPriority gets a reference to the given bool and assigns it to the MpsPriority field.
func (o *SmPolicyDnnData) SetMpsPriority(v bool) {
	o.MpsPriority = &v
}

// GetMcsPriority returns the McsPriority field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetMcsPriority() bool {
	if o == nil || isNil(o.McsPriority) {
		var ret bool
		return ret
	}
	return *o.McsPriority
}

// GetMcsPriorityOk returns a tuple with the McsPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetMcsPriorityOk() (*bool, bool) {
	if o == nil || isNil(o.McsPriority) {
		return nil, false
	}
	return o.McsPriority, true
}

// HasMcsPriority returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasMcsPriority() bool {
	if o != nil && !isNil(o.McsPriority) {
		return true
	}

	return false
}

// SetMcsPriority gets a reference to the given bool and assigns it to the McsPriority field.
func (o *SmPolicyDnnData) SetMcsPriority(v bool) {
	o.McsPriority = &v
}

// GetImsSignallingPrio returns the ImsSignallingPrio field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetImsSignallingPrio() bool {
	if o == nil || isNil(o.ImsSignallingPrio) {
		var ret bool
		return ret
	}
	return *o.ImsSignallingPrio
}

// GetImsSignallingPrioOk returns a tuple with the ImsSignallingPrio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetImsSignallingPrioOk() (*bool, bool) {
	if o == nil || isNil(o.ImsSignallingPrio) {
		return nil, false
	}
	return o.ImsSignallingPrio, true
}

// HasImsSignallingPrio returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasImsSignallingPrio() bool {
	if o != nil && !isNil(o.ImsSignallingPrio) {
		return true
	}

	return false
}

// SetImsSignallingPrio gets a reference to the given bool and assigns it to the ImsSignallingPrio field.
func (o *SmPolicyDnnData) SetImsSignallingPrio(v bool) {
	o.ImsSignallingPrio = &v
}

// GetMpsPriorityLevel returns the MpsPriorityLevel field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetMpsPriorityLevel() int32 {
	if o == nil || isNil(o.MpsPriorityLevel) {
		var ret int32
		return ret
	}
	return *o.MpsPriorityLevel
}

// GetMpsPriorityLevelOk returns a tuple with the MpsPriorityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetMpsPriorityLevelOk() (*int32, bool) {
	if o == nil || isNil(o.MpsPriorityLevel) {
		return nil, false
	}
	return o.MpsPriorityLevel, true
}

// HasMpsPriorityLevel returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasMpsPriorityLevel() bool {
	if o != nil && !isNil(o.MpsPriorityLevel) {
		return true
	}

	return false
}

// SetMpsPriorityLevel gets a reference to the given int32 and assigns it to the MpsPriorityLevel field.
func (o *SmPolicyDnnData) SetMpsPriorityLevel(v int32) {
	o.MpsPriorityLevel = &v
}

// GetMcsPriorityLevel returns the McsPriorityLevel field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetMcsPriorityLevel() int32 {
	if o == nil || isNil(o.McsPriorityLevel) {
		var ret int32
		return ret
	}
	return *o.McsPriorityLevel
}

// GetMcsPriorityLevelOk returns a tuple with the McsPriorityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetMcsPriorityLevelOk() (*int32, bool) {
	if o == nil || isNil(o.McsPriorityLevel) {
		return nil, false
	}
	return o.McsPriorityLevel, true
}

// HasMcsPriorityLevel returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasMcsPriorityLevel() bool {
	if o != nil && !isNil(o.McsPriorityLevel) {
		return true
	}

	return false
}

// SetMcsPriorityLevel gets a reference to the given int32 and assigns it to the McsPriorityLevel field.
func (o *SmPolicyDnnData) SetMcsPriorityLevel(v int32) {
	o.McsPriorityLevel = &v
}

// GetPraInfos returns the PraInfos field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetPraInfos() map[string]PresenceInfo {
	if o == nil || isNil(o.PraInfos) {
		var ret map[string]PresenceInfo
		return ret
	}
	return *o.PraInfos
}

// GetPraInfosOk returns a tuple with the PraInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetPraInfosOk() (*map[string]PresenceInfo, bool) {
	if o == nil || isNil(o.PraInfos) {
		return nil, false
	}
	return o.PraInfos, true
}

// HasPraInfos returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasPraInfos() bool {
	if o != nil && !isNil(o.PraInfos) {
		return true
	}

	return false
}

// SetPraInfos gets a reference to the given map[string]PresenceInfo and assigns it to the PraInfos field.
func (o *SmPolicyDnnData) SetPraInfos(v map[string]PresenceInfo) {
	o.PraInfos = &v
}

// GetBdtRefIds returns the BdtRefIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDnnData) GetBdtRefIds() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.BdtRefIds
}

// GetBdtRefIdsOk returns a tuple with the BdtRefIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDnnData) GetBdtRefIdsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.BdtRefIds) {
		return nil, false
	}
	return &o.BdtRefIds, true
}

// HasBdtRefIds returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasBdtRefIds() bool {
	if o != nil && isNil(o.BdtRefIds) {
		return true
	}

	return false
}

// SetBdtRefIds gets a reference to the given map[string]string and assigns it to the BdtRefIds field.
func (o *SmPolicyDnnData) SetBdtRefIds(v map[string]string) {
	o.BdtRefIds = v
}

// GetLocRoutNotAllowed returns the LocRoutNotAllowed field value if set, zero value otherwise.
func (o *SmPolicyDnnData) GetLocRoutNotAllowed() bool {
	if o == nil || isNil(o.LocRoutNotAllowed) {
		var ret bool
		return ret
	}
	return *o.LocRoutNotAllowed
}

// GetLocRoutNotAllowedOk returns a tuple with the LocRoutNotAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDnnData) GetLocRoutNotAllowedOk() (*bool, bool) {
	if o == nil || isNil(o.LocRoutNotAllowed) {
		return nil, false
	}
	return o.LocRoutNotAllowed, true
}

// HasLocRoutNotAllowed returns a boolean if a field has been set.
func (o *SmPolicyDnnData) HasLocRoutNotAllowed() bool {
	if o != nil && !isNil(o.LocRoutNotAllowed) {
		return true
	}

	return false
}

// SetLocRoutNotAllowed gets a reference to the given bool and assigns it to the LocRoutNotAllowed field.
func (o *SmPolicyDnnData) SetLocRoutNotAllowed(v bool) {
	o.LocRoutNotAllowed = &v
}

func (o SmPolicyDnnData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmPolicyDnnData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dnn"] = o.Dnn
	if !isNil(o.AllowedServices) {
		toSerialize["allowedServices"] = o.AllowedServices
	}
	if !isNil(o.SubscCats) {
		toSerialize["subscCats"] = o.SubscCats
	}
	if !isNil(o.GbrUl) {
		toSerialize["gbrUl"] = o.GbrUl
	}
	if !isNil(o.GbrDl) {
		toSerialize["gbrDl"] = o.GbrDl
	}
	if !isNil(o.AdcSupport) {
		toSerialize["adcSupport"] = o.AdcSupport
	}
	if !isNil(o.SubscSpendingLimits) {
		toSerialize["subscSpendingLimits"] = o.SubscSpendingLimits
	}
	if !isNil(o.Ipv4Index) {
		toSerialize["ipv4Index"] = o.Ipv4Index
	}
	if !isNil(o.Ipv6Index) {
		toSerialize["ipv6Index"] = o.Ipv6Index
	}
	if !isNil(o.Offline) {
		toSerialize["offline"] = o.Offline
	}
	if !isNil(o.Online) {
		toSerialize["online"] = o.Online
	}
	if !isNil(o.ChfInfo) {
		toSerialize["chfInfo"] = o.ChfInfo
	}
	if !isNil(o.RefUmDataLimitIds) {
		toSerialize["refUmDataLimitIds"] = o.RefUmDataLimitIds
	}
	if !isNil(o.MpsPriority) {
		toSerialize["mpsPriority"] = o.MpsPriority
	}
	if !isNil(o.McsPriority) {
		toSerialize["mcsPriority"] = o.McsPriority
	}
	if !isNil(o.ImsSignallingPrio) {
		toSerialize["imsSignallingPrio"] = o.ImsSignallingPrio
	}
	if !isNil(o.MpsPriorityLevel) {
		toSerialize["mpsPriorityLevel"] = o.MpsPriorityLevel
	}
	if !isNil(o.McsPriorityLevel) {
		toSerialize["mcsPriorityLevel"] = o.McsPriorityLevel
	}
	if !isNil(o.PraInfos) {
		toSerialize["praInfos"] = o.PraInfos
	}
	if o.BdtRefIds != nil {
		toSerialize["bdtRefIds"] = o.BdtRefIds
	}
	if !isNil(o.LocRoutNotAllowed) {
		toSerialize["locRoutNotAllowed"] = o.LocRoutNotAllowed
	}
	return toSerialize, nil
}

type NullableSmPolicyDnnData struct {
	value *SmPolicyDnnData
	isSet bool
}

func (v NullableSmPolicyDnnData) Get() *SmPolicyDnnData {
	return v.value
}

func (v *NullableSmPolicyDnnData) Set(val *SmPolicyDnnData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmPolicyDnnData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmPolicyDnnData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmPolicyDnnData(val *SmPolicyDnnData) *NullableSmPolicyDnnData {
	return &NullableSmPolicyDnnData{value: val, isSet: true}
}

func (v NullableSmPolicyDnnData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmPolicyDnnData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


