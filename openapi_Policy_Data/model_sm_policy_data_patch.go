/*
Unified Data Repository Service API file for policy data

The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Policy_Data

import (
	"encoding/json"
)

// checks if the SmPolicyDataPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmPolicyDataPatch{}

// SmPolicyDataPatch Contains the SM policy data for a given subscriber.
type SmPolicyDataPatch struct {
	// Contains the remaining allowed usage data associated with the subscriber. The value of the limit identifier is used as the key of the map. 
	UmData map[string]UsageMonData `json:"umData,omitempty"`
	// Modifiable Session Management Policy data per S-NSSAI for all the SNSSAIs of the subscriber. The key of the map is the S-NSSAI. 
	SmPolicySnssaiData *map[string]SmPolicySnssaiDataPatch `json:"smPolicySnssaiData,omitempty"`
}

// NewSmPolicyDataPatch instantiates a new SmPolicyDataPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmPolicyDataPatch() *SmPolicyDataPatch {
	this := SmPolicyDataPatch{}
	return &this
}

// NewSmPolicyDataPatchWithDefaults instantiates a new SmPolicyDataPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmPolicyDataPatchWithDefaults() *SmPolicyDataPatch {
	this := SmPolicyDataPatch{}
	return &this
}

// GetUmData returns the UmData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmPolicyDataPatch) GetUmData() map[string]UsageMonData {
	if o == nil {
		var ret map[string]UsageMonData
		return ret
	}
	return o.UmData
}

// GetUmDataOk returns a tuple with the UmData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmPolicyDataPatch) GetUmDataOk() (*map[string]UsageMonData, bool) {
	if o == nil || isNil(o.UmData) {
		return nil, false
	}
	return &o.UmData, true
}

// HasUmData returns a boolean if a field has been set.
func (o *SmPolicyDataPatch) HasUmData() bool {
	if o != nil && isNil(o.UmData) {
		return true
	}

	return false
}

// SetUmData gets a reference to the given map[string]UsageMonData and assigns it to the UmData field.
func (o *SmPolicyDataPatch) SetUmData(v map[string]UsageMonData) {
	o.UmData = v
}

// GetSmPolicySnssaiData returns the SmPolicySnssaiData field value if set, zero value otherwise.
func (o *SmPolicyDataPatch) GetSmPolicySnssaiData() map[string]SmPolicySnssaiDataPatch {
	if o == nil || isNil(o.SmPolicySnssaiData) {
		var ret map[string]SmPolicySnssaiDataPatch
		return ret
	}
	return *o.SmPolicySnssaiData
}

// GetSmPolicySnssaiDataOk returns a tuple with the SmPolicySnssaiData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmPolicyDataPatch) GetSmPolicySnssaiDataOk() (*map[string]SmPolicySnssaiDataPatch, bool) {
	if o == nil || isNil(o.SmPolicySnssaiData) {
		return nil, false
	}
	return o.SmPolicySnssaiData, true
}

// HasSmPolicySnssaiData returns a boolean if a field has been set.
func (o *SmPolicyDataPatch) HasSmPolicySnssaiData() bool {
	if o != nil && !isNil(o.SmPolicySnssaiData) {
		return true
	}

	return false
}

// SetSmPolicySnssaiData gets a reference to the given map[string]SmPolicySnssaiDataPatch and assigns it to the SmPolicySnssaiData field.
func (o *SmPolicyDataPatch) SetSmPolicySnssaiData(v map[string]SmPolicySnssaiDataPatch) {
	o.SmPolicySnssaiData = &v
}

func (o SmPolicyDataPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmPolicyDataPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UmData != nil {
		toSerialize["umData"] = o.UmData
	}
	if !isNil(o.SmPolicySnssaiData) {
		toSerialize["smPolicySnssaiData"] = o.SmPolicySnssaiData
	}
	return toSerialize, nil
}

type NullableSmPolicyDataPatch struct {
	value *SmPolicyDataPatch
	isSet bool
}

func (v NullableSmPolicyDataPatch) Get() *SmPolicyDataPatch {
	return v.value
}

func (v *NullableSmPolicyDataPatch) Set(val *SmPolicyDataPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableSmPolicyDataPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableSmPolicyDataPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmPolicyDataPatch(val *SmPolicyDataPatch) *NullableSmPolicyDataPatch {
	return &NullableSmPolicyDataPatch{value: val, isSet: true}
}

func (v NullableSmPolicyDataPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmPolicyDataPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


