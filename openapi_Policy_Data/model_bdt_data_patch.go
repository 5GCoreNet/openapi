/*
Unified Data Repository Service API file for policy data

The API version is defined in 3GPP TS 29.504   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: -
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Policy_Data

import (
	"encoding/json"
)

// checks if the BdtDataPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BdtDataPatch{}

// BdtDataPatch Contains the modified background data transfer data.
type BdtDataPatch struct {
	TransPolicy *TransferPolicy `json:"transPolicy,omitempty"`
	BdtpStatus *BdtPolicyStatus `json:"bdtpStatus,omitempty"`
}

// NewBdtDataPatch instantiates a new BdtDataPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBdtDataPatch() *BdtDataPatch {
	this := BdtDataPatch{}
	return &this
}

// NewBdtDataPatchWithDefaults instantiates a new BdtDataPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBdtDataPatchWithDefaults() *BdtDataPatch {
	this := BdtDataPatch{}
	return &this
}

// GetTransPolicy returns the TransPolicy field value if set, zero value otherwise.
func (o *BdtDataPatch) GetTransPolicy() TransferPolicy {
	if o == nil || IsNil(o.TransPolicy) {
		var ret TransferPolicy
		return ret
	}
	return *o.TransPolicy
}

// GetTransPolicyOk returns a tuple with the TransPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BdtDataPatch) GetTransPolicyOk() (*TransferPolicy, bool) {
	if o == nil || IsNil(o.TransPolicy) {
		return nil, false
	}
	return o.TransPolicy, true
}

// HasTransPolicy returns a boolean if a field has been set.
func (o *BdtDataPatch) HasTransPolicy() bool {
	if o != nil && !IsNil(o.TransPolicy) {
		return true
	}

	return false
}

// SetTransPolicy gets a reference to the given TransferPolicy and assigns it to the TransPolicy field.
func (o *BdtDataPatch) SetTransPolicy(v TransferPolicy) {
	o.TransPolicy = &v
}

// GetBdtpStatus returns the BdtpStatus field value if set, zero value otherwise.
func (o *BdtDataPatch) GetBdtpStatus() BdtPolicyStatus {
	if o == nil || IsNil(o.BdtpStatus) {
		var ret BdtPolicyStatus
		return ret
	}
	return *o.BdtpStatus
}

// GetBdtpStatusOk returns a tuple with the BdtpStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BdtDataPatch) GetBdtpStatusOk() (*BdtPolicyStatus, bool) {
	if o == nil || IsNil(o.BdtpStatus) {
		return nil, false
	}
	return o.BdtpStatus, true
}

// HasBdtpStatus returns a boolean if a field has been set.
func (o *BdtDataPatch) HasBdtpStatus() bool {
	if o != nil && !IsNil(o.BdtpStatus) {
		return true
	}

	return false
}

// SetBdtpStatus gets a reference to the given BdtPolicyStatus and assigns it to the BdtpStatus field.
func (o *BdtDataPatch) SetBdtpStatus(v BdtPolicyStatus) {
	o.BdtpStatus = &v
}

func (o BdtDataPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BdtDataPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransPolicy) {
		toSerialize["transPolicy"] = o.TransPolicy
	}
	if !IsNil(o.BdtpStatus) {
		toSerialize["bdtpStatus"] = o.BdtpStatus
	}
	return toSerialize, nil
}

type NullableBdtDataPatch struct {
	value *BdtDataPatch
	isSet bool
}

func (v NullableBdtDataPatch) Get() *BdtDataPatch {
	return v.value
}

func (v *NullableBdtDataPatch) Set(val *BdtDataPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableBdtDataPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableBdtDataPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBdtDataPatch(val *BdtDataPatch) *NullableBdtDataPatch {
	return &NullableBdtDataPatch{value: val, isSet: true}
}

func (v NullableBdtDataPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBdtDataPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


