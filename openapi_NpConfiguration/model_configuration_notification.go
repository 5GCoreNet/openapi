/*
3gpp-network-parameter-configuration

API for network parameter configuration.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NpConfiguration

import (
	"encoding/json"
)

// checks if the ConfigurationNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationNotification{}

// ConfigurationNotification Represents a configuration result notification.
type ConfigurationNotification struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Configuration string `json:"configuration"`
	// The grouping configuration result notification provided by the SCEF.
	ConfigResults []ConfigResult `json:"configResults,omitempty"`
	AppliedParam *AppliedParameterConfiguration `json:"appliedParam,omitempty"`
}

// NewConfigurationNotification instantiates a new ConfigurationNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationNotification(configuration string) *ConfigurationNotification {
	this := ConfigurationNotification{}
	this.Configuration = configuration
	return &this
}

// NewConfigurationNotificationWithDefaults instantiates a new ConfigurationNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationNotificationWithDefaults() *ConfigurationNotification {
	this := ConfigurationNotification{}
	return &this
}

// GetConfiguration returns the Configuration field value
func (o *ConfigurationNotification) GetConfiguration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *ConfigurationNotification) GetConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *ConfigurationNotification) SetConfiguration(v string) {
	o.Configuration = v
}

// GetConfigResults returns the ConfigResults field value if set, zero value otherwise.
func (o *ConfigurationNotification) GetConfigResults() []ConfigResult {
	if o == nil || isNil(o.ConfigResults) {
		var ret []ConfigResult
		return ret
	}
	return o.ConfigResults
}

// GetConfigResultsOk returns a tuple with the ConfigResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationNotification) GetConfigResultsOk() ([]ConfigResult, bool) {
	if o == nil || isNil(o.ConfigResults) {
		return nil, false
	}
	return o.ConfigResults, true
}

// HasConfigResults returns a boolean if a field has been set.
func (o *ConfigurationNotification) HasConfigResults() bool {
	if o != nil && !isNil(o.ConfigResults) {
		return true
	}

	return false
}

// SetConfigResults gets a reference to the given []ConfigResult and assigns it to the ConfigResults field.
func (o *ConfigurationNotification) SetConfigResults(v []ConfigResult) {
	o.ConfigResults = v
}

// GetAppliedParam returns the AppliedParam field value if set, zero value otherwise.
func (o *ConfigurationNotification) GetAppliedParam() AppliedParameterConfiguration {
	if o == nil || isNil(o.AppliedParam) {
		var ret AppliedParameterConfiguration
		return ret
	}
	return *o.AppliedParam
}

// GetAppliedParamOk returns a tuple with the AppliedParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationNotification) GetAppliedParamOk() (*AppliedParameterConfiguration, bool) {
	if o == nil || isNil(o.AppliedParam) {
		return nil, false
	}
	return o.AppliedParam, true
}

// HasAppliedParam returns a boolean if a field has been set.
func (o *ConfigurationNotification) HasAppliedParam() bool {
	if o != nil && !isNil(o.AppliedParam) {
		return true
	}

	return false
}

// SetAppliedParam gets a reference to the given AppliedParameterConfiguration and assigns it to the AppliedParam field.
func (o *ConfigurationNotification) SetAppliedParam(v AppliedParameterConfiguration) {
	o.AppliedParam = &v
}

func (o ConfigurationNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configuration"] = o.Configuration
	if !isNil(o.ConfigResults) {
		toSerialize["configResults"] = o.ConfigResults
	}
	if !isNil(o.AppliedParam) {
		toSerialize["appliedParam"] = o.AppliedParam
	}
	return toSerialize, nil
}

type NullableConfigurationNotification struct {
	value *ConfigurationNotification
	isSet bool
}

func (v NullableConfigurationNotification) Get() *ConfigurationNotification {
	return v.value
}

func (v *NullableConfigurationNotification) Set(val *ConfigurationNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationNotification(val *ConfigurationNotification) *NullableConfigurationNotification {
	return &NullableConfigurationNotification{value: val, isSet: true}
}

func (v NullableConfigurationNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


