/*
Nmbsmf-MBSSession

MB-SMF MBSSession Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nmbsmf_MBSSession

import (
	"encoding/json"
	"fmt"
)

// ReportingModeAnyOf the model 'ReportingModeAnyOf'
type ReportingModeAnyOf string

// List of ReportingMode_anyOf
const (
	CONTINUOUS ReportingModeAnyOf = "CONTINUOUS"
	ONE_TIME ReportingModeAnyOf = "ONE_TIME"
)

// All allowed values of ReportingModeAnyOf enum
var AllowedReportingModeAnyOfEnumValues = []ReportingModeAnyOf{
	"CONTINUOUS",
	"ONE_TIME",
}

func (v *ReportingModeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportingModeAnyOf(value)
	for _, existing := range AllowedReportingModeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportingModeAnyOf", value)
}

// NewReportingModeAnyOfFromValue returns a pointer to a valid ReportingModeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportingModeAnyOfFromValue(v string) (*ReportingModeAnyOf, error) {
	ev := ReportingModeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportingModeAnyOf: valid values are %v", v, AllowedReportingModeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportingModeAnyOf) IsValid() bool {
	for _, existing := range AllowedReportingModeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReportingMode_anyOf value
func (v ReportingModeAnyOf) Ptr() *ReportingModeAnyOf {
	return &v
}

type NullableReportingModeAnyOf struct {
	value *ReportingModeAnyOf
	isSet bool
}

func (v NullableReportingModeAnyOf) Get() *ReportingModeAnyOf {
	return v.value
}

func (v *NullableReportingModeAnyOf) Set(val *ReportingModeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingModeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingModeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingModeAnyOf(val *ReportingModeAnyOf) *NullableReportingModeAnyOf {
	return &NullableReportingModeAnyOf{value: val, isSet: true}
}

func (v NullableReportingModeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingModeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

