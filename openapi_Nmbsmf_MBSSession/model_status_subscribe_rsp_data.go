/*
Nmbsmf-MBSSession

MB-SMF MBSSession Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nmbsmf_MBSSession

import (
	"encoding/json"
)

// checks if the StatusSubscribeRspData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusSubscribeRspData{}

// StatusSubscribeRspData Data within StatusSubscribe Response
type StatusSubscribeRspData struct {
	Subscription MbsSessionSubscription `json:"subscription"`
	EventList *MbsSessionEventReportList `json:"eventList,omitempty"`
}

// NewStatusSubscribeRspData instantiates a new StatusSubscribeRspData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusSubscribeRspData(subscription MbsSessionSubscription) *StatusSubscribeRspData {
	this := StatusSubscribeRspData{}
	this.Subscription = subscription
	return &this
}

// NewStatusSubscribeRspDataWithDefaults instantiates a new StatusSubscribeRspData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusSubscribeRspDataWithDefaults() *StatusSubscribeRspData {
	this := StatusSubscribeRspData{}
	return &this
}

// GetSubscription returns the Subscription field value
func (o *StatusSubscribeRspData) GetSubscription() MbsSessionSubscription {
	if o == nil {
		var ret MbsSessionSubscription
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
func (o *StatusSubscribeRspData) GetSubscriptionOk() (*MbsSessionSubscription, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *StatusSubscribeRspData) SetSubscription(v MbsSessionSubscription) {
	o.Subscription = v
}

// GetEventList returns the EventList field value if set, zero value otherwise.
func (o *StatusSubscribeRspData) GetEventList() MbsSessionEventReportList {
	if o == nil || IsNil(o.EventList) {
		var ret MbsSessionEventReportList
		return ret
	}
	return *o.EventList
}

// GetEventListOk returns a tuple with the EventList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusSubscribeRspData) GetEventListOk() (*MbsSessionEventReportList, bool) {
	if o == nil || IsNil(o.EventList) {
		return nil, false
	}
	return o.EventList, true
}

// HasEventList returns a boolean if a field has been set.
func (o *StatusSubscribeRspData) HasEventList() bool {
	if o != nil && !IsNil(o.EventList) {
		return true
	}

	return false
}

// SetEventList gets a reference to the given MbsSessionEventReportList and assigns it to the EventList field.
func (o *StatusSubscribeRspData) SetEventList(v MbsSessionEventReportList) {
	o.EventList = &v
}

func (o StatusSubscribeRspData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusSubscribeRspData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscription"] = o.Subscription
	if !IsNil(o.EventList) {
		toSerialize["eventList"] = o.EventList
	}
	return toSerialize, nil
}

type NullableStatusSubscribeRspData struct {
	value *StatusSubscribeRspData
	isSet bool
}

func (v NullableStatusSubscribeRspData) Get() *StatusSubscribeRspData {
	return v.value
}

func (v *NullableStatusSubscribeRspData) Set(val *StatusSubscribeRspData) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusSubscribeRspData) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusSubscribeRspData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusSubscribeRspData(val *StatusSubscribeRspData) *NullableStatusSubscribeRspData {
	return &NullableStatusSubscribeRspData{value: val, isSet: true}
}

func (v NullableStatusSubscribeRspData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusSubscribeRspData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


