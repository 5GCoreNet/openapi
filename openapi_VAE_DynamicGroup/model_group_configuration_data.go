/*
VAE_DynamicGroup

VAE_Dynamic_Group Service   © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_VAE_DynamicGroup

import (
	"encoding/json"
	"time"
)

// checks if the GroupConfigurationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupConfigurationData{}

// GroupConfigurationData Represents an individual Group Configuration resource for a V2X group ID.
type GroupConfigurationData struct {
	// Represents the group ID for which a V2X message is addressed.
	GroupId    string `json:"groupId"`
	Definition string `json:"definition"`
	// Represents the identifier of the V2X UE.
	LeaderId string `json:"leaderId"`
	// String providing an URI formatted according to RFC 3986.
	NotifUri string `json:"notifUri"`
	// string with format 'date-time' as defined in OpenAPI.
	Duration *time.Time `json:"duration,omitempty"`
	// Set to true by the NF service consumer to request the VAE server to test a notification connection. Set to false or omitted otherwise.
	RequestTestNotification *bool               `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig      *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.
	SuppFeat *string `json:"suppFeat,omitempty"`
}

// NewGroupConfigurationData instantiates a new GroupConfigurationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupConfigurationData(groupId string, definition string, leaderId string, notifUri string) *GroupConfigurationData {
	this := GroupConfigurationData{}
	this.GroupId = groupId
	this.Definition = definition
	this.LeaderId = leaderId
	this.NotifUri = notifUri
	return &this
}

// NewGroupConfigurationDataWithDefaults instantiates a new GroupConfigurationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupConfigurationDataWithDefaults() *GroupConfigurationData {
	this := GroupConfigurationData{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *GroupConfigurationData) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *GroupConfigurationData) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *GroupConfigurationData) SetGroupId(v string) {
	o.GroupId = v
}

// GetDefinition returns the Definition field value
func (o *GroupConfigurationData) GetDefinition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value
// and a boolean to check if the value has been set.
func (o *GroupConfigurationData) GetDefinitionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Definition, true
}

// SetDefinition sets field value
func (o *GroupConfigurationData) SetDefinition(v string) {
	o.Definition = v
}

// GetLeaderId returns the LeaderId field value
func (o *GroupConfigurationData) GetLeaderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LeaderId
}

// GetLeaderIdOk returns a tuple with the LeaderId field value
// and a boolean to check if the value has been set.
func (o *GroupConfigurationData) GetLeaderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeaderId, true
}

// SetLeaderId sets field value
func (o *GroupConfigurationData) SetLeaderId(v string) {
	o.LeaderId = v
}

// GetNotifUri returns the NotifUri field value
func (o *GroupConfigurationData) GetNotifUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifUri
}

// GetNotifUriOk returns a tuple with the NotifUri field value
// and a boolean to check if the value has been set.
func (o *GroupConfigurationData) GetNotifUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifUri, true
}

// SetNotifUri sets field value
func (o *GroupConfigurationData) SetNotifUri(v string) {
	o.NotifUri = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *GroupConfigurationData) GetDuration() time.Time {
	if o == nil || IsNil(o.Duration) {
		var ret time.Time
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfigurationData) GetDurationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *GroupConfigurationData) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given time.Time and assigns it to the Duration field.
func (o *GroupConfigurationData) SetDuration(v time.Time) {
	o.Duration = &v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *GroupConfigurationData) GetRequestTestNotification() bool {
	if o == nil || IsNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfigurationData) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *GroupConfigurationData) HasRequestTestNotification() bool {
	if o != nil && !IsNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *GroupConfigurationData) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *GroupConfigurationData) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfigurationData) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *GroupConfigurationData) HasWebsockNotifConfig() bool {
	if o != nil && !IsNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *GroupConfigurationData) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *GroupConfigurationData) GetSuppFeat() string {
	if o == nil || IsNil(o.SuppFeat) {
		var ret string
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfigurationData) GetSuppFeatOk() (*string, bool) {
	if o == nil || IsNil(o.SuppFeat) {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *GroupConfigurationData) HasSuppFeat() bool {
	if o != nil && !IsNil(o.SuppFeat) {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given string and assigns it to the SuppFeat field.
func (o *GroupConfigurationData) SetSuppFeat(v string) {
	o.SuppFeat = &v
}

func (o GroupConfigurationData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupConfigurationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupId"] = o.GroupId
	toSerialize["definition"] = o.Definition
	toSerialize["leaderId"] = o.LeaderId
	toSerialize["notifUri"] = o.NotifUri
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !IsNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	if !IsNil(o.SuppFeat) {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return toSerialize, nil
}

type NullableGroupConfigurationData struct {
	value *GroupConfigurationData
	isSet bool
}

func (v NullableGroupConfigurationData) Get() *GroupConfigurationData {
	return v.value
}

func (v *NullableGroupConfigurationData) Set(val *GroupConfigurationData) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupConfigurationData) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupConfigurationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupConfigurationData(val *GroupConfigurationData) *NullableGroupConfigurationData {
	return &NullableGroupConfigurationData{value: val, isSet: true}
}

func (v NullableGroupConfigurationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupConfigurationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
