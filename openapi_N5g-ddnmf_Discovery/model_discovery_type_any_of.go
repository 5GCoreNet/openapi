/*
N5g-ddnmf_Discovery API

N5g-ddnmf_Discovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N5g-ddnmf_Discovery

import (
	"encoding/json"
	"fmt"
)

// DiscoveryTypeAnyOf the model 'DiscoveryTypeAnyOf'
type DiscoveryTypeAnyOf string

// List of DiscoveryType_anyOf
const (
	OPEN DiscoveryTypeAnyOf = "OPEN"
	RESTRICTED DiscoveryTypeAnyOf = "RESTRICTED"
)

// All allowed values of DiscoveryTypeAnyOf enum
var AllowedDiscoveryTypeAnyOfEnumValues = []DiscoveryTypeAnyOf{
	"OPEN",
	"RESTRICTED",
}

func (v *DiscoveryTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiscoveryTypeAnyOf(value)
	for _, existing := range AllowedDiscoveryTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiscoveryTypeAnyOf", value)
}

// NewDiscoveryTypeAnyOfFromValue returns a pointer to a valid DiscoveryTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiscoveryTypeAnyOfFromValue(v string) (*DiscoveryTypeAnyOf, error) {
	ev := DiscoveryTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiscoveryTypeAnyOf: valid values are %v", v, AllowedDiscoveryTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiscoveryTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedDiscoveryTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiscoveryType_anyOf value
func (v DiscoveryTypeAnyOf) Ptr() *DiscoveryTypeAnyOf {
	return &v
}

type NullableDiscoveryTypeAnyOf struct {
	value *DiscoveryTypeAnyOf
	isSet bool
}

func (v NullableDiscoveryTypeAnyOf) Get() *DiscoveryTypeAnyOf {
	return v.value
}

func (v *NullableDiscoveryTypeAnyOf) Set(val *DiscoveryTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveryTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveryTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveryTypeAnyOf(val *DiscoveryTypeAnyOf) *NullableDiscoveryTypeAnyOf {
	return &NullableDiscoveryTypeAnyOf{value: val, isSet: true}
}

func (v NullableDiscoveryTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveryTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

