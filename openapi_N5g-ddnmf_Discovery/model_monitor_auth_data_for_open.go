/*
N5g-ddnmf_Discovery API

N5g-ddnmf_Discovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_N5g-ddnmf_Discovery

import (
	"encoding/json"
)

// checks if the MonitorAuthDataForOpen type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorAuthDataForOpen{}

// MonitorAuthDataForOpen Represents the obtained Announce Authorize Data for open discovery for a UE
type MonitorAuthDataForOpen struct {
	ProseAppCodes []string `json:"proseAppCodes,omitempty"`
	// Contains the Prose Application Code Prefix.
	ProseAppPrefix *string `json:"proseAppPrefix,omitempty"`
	ProseAppMasks []string `json:"proseAppMasks"`
	Ttl int32 `json:"ttl"`
}

// NewMonitorAuthDataForOpen instantiates a new MonitorAuthDataForOpen object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorAuthDataForOpen(proseAppMasks []string, ttl int32) *MonitorAuthDataForOpen {
	this := MonitorAuthDataForOpen{}
	this.ProseAppMasks = proseAppMasks
	this.Ttl = ttl
	return &this
}

// NewMonitorAuthDataForOpenWithDefaults instantiates a new MonitorAuthDataForOpen object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorAuthDataForOpenWithDefaults() *MonitorAuthDataForOpen {
	this := MonitorAuthDataForOpen{}
	return &this
}

// GetProseAppCodes returns the ProseAppCodes field value if set, zero value otherwise.
func (o *MonitorAuthDataForOpen) GetProseAppCodes() []string {
	if o == nil || isNil(o.ProseAppCodes) {
		var ret []string
		return ret
	}
	return o.ProseAppCodes
}

// GetProseAppCodesOk returns a tuple with the ProseAppCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorAuthDataForOpen) GetProseAppCodesOk() ([]string, bool) {
	if o == nil || isNil(o.ProseAppCodes) {
		return nil, false
	}
	return o.ProseAppCodes, true
}

// HasProseAppCodes returns a boolean if a field has been set.
func (o *MonitorAuthDataForOpen) HasProseAppCodes() bool {
	if o != nil && !isNil(o.ProseAppCodes) {
		return true
	}

	return false
}

// SetProseAppCodes gets a reference to the given []string and assigns it to the ProseAppCodes field.
func (o *MonitorAuthDataForOpen) SetProseAppCodes(v []string) {
	o.ProseAppCodes = v
}

// GetProseAppPrefix returns the ProseAppPrefix field value if set, zero value otherwise.
func (o *MonitorAuthDataForOpen) GetProseAppPrefix() string {
	if o == nil || isNil(o.ProseAppPrefix) {
		var ret string
		return ret
	}
	return *o.ProseAppPrefix
}

// GetProseAppPrefixOk returns a tuple with the ProseAppPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorAuthDataForOpen) GetProseAppPrefixOk() (*string, bool) {
	if o == nil || isNil(o.ProseAppPrefix) {
		return nil, false
	}
	return o.ProseAppPrefix, true
}

// HasProseAppPrefix returns a boolean if a field has been set.
func (o *MonitorAuthDataForOpen) HasProseAppPrefix() bool {
	if o != nil && !isNil(o.ProseAppPrefix) {
		return true
	}

	return false
}

// SetProseAppPrefix gets a reference to the given string and assigns it to the ProseAppPrefix field.
func (o *MonitorAuthDataForOpen) SetProseAppPrefix(v string) {
	o.ProseAppPrefix = &v
}

// GetProseAppMasks returns the ProseAppMasks field value
func (o *MonitorAuthDataForOpen) GetProseAppMasks() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProseAppMasks
}

// GetProseAppMasksOk returns a tuple with the ProseAppMasks field value
// and a boolean to check if the value has been set.
func (o *MonitorAuthDataForOpen) GetProseAppMasksOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProseAppMasks, true
}

// SetProseAppMasks sets field value
func (o *MonitorAuthDataForOpen) SetProseAppMasks(v []string) {
	o.ProseAppMasks = v
}

// GetTtl returns the Ttl field value
func (o *MonitorAuthDataForOpen) GetTtl() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *MonitorAuthDataForOpen) GetTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *MonitorAuthDataForOpen) SetTtl(v int32) {
	o.Ttl = v
}

func (o MonitorAuthDataForOpen) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorAuthDataForOpen) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ProseAppCodes) {
		toSerialize["proseAppCodes"] = o.ProseAppCodes
	}
	if !isNil(o.ProseAppPrefix) {
		toSerialize["proseAppPrefix"] = o.ProseAppPrefix
	}
	toSerialize["proseAppMasks"] = o.ProseAppMasks
	toSerialize["ttl"] = o.Ttl
	return toSerialize, nil
}

type NullableMonitorAuthDataForOpen struct {
	value *MonitorAuthDataForOpen
	isSet bool
}

func (v NullableMonitorAuthDataForOpen) Get() *MonitorAuthDataForOpen {
	return v.value
}

func (v *NullableMonitorAuthDataForOpen) Set(val *MonitorAuthDataForOpen) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorAuthDataForOpen) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorAuthDataForOpen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorAuthDataForOpen(val *MonitorAuthDataForOpen) *NullableMonitorAuthDataForOpen {
	return &NullableMonitorAuthDataForOpen{value: val, isSet: true}
}

func (v NullableMonitorAuthDataForOpen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorAuthDataForOpen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


