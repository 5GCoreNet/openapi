/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the FulfilmentInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FulfilmentInfo{}

// FulfilmentInfo struct for FulfilmentInfo
type FulfilmentInfo struct {
	FulfilStatus       *FulfilStatus      `json:"fulfilStatus,omitempty"`
	NotFullfilledState *NotFulfilledState `json:"notFullfilledState,omitempty"`
	// -> An attribute which is used when FulfilmentInfo is implemented for IntentFulfilmentInfo
	NotFulfilledReasons *string `json:"notFulfilledReasons,omitempty"`
}

// NewFulfilmentInfo instantiates a new FulfilmentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFulfilmentInfo() *FulfilmentInfo {
	this := FulfilmentInfo{}
	return &this
}

// NewFulfilmentInfoWithDefaults instantiates a new FulfilmentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFulfilmentInfoWithDefaults() *FulfilmentInfo {
	this := FulfilmentInfo{}
	return &this
}

// GetFulfilStatus returns the FulfilStatus field value if set, zero value otherwise.
func (o *FulfilmentInfo) GetFulfilStatus() FulfilStatus {
	if o == nil || IsNil(o.FulfilStatus) {
		var ret FulfilStatus
		return ret
	}
	return *o.FulfilStatus
}

// GetFulfilStatusOk returns a tuple with the FulfilStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfilmentInfo) GetFulfilStatusOk() (*FulfilStatus, bool) {
	if o == nil || IsNil(o.FulfilStatus) {
		return nil, false
	}
	return o.FulfilStatus, true
}

// HasFulfilStatus returns a boolean if a field has been set.
func (o *FulfilmentInfo) HasFulfilStatus() bool {
	if o != nil && !IsNil(o.FulfilStatus) {
		return true
	}

	return false
}

// SetFulfilStatus gets a reference to the given FulfilStatus and assigns it to the FulfilStatus field.
func (o *FulfilmentInfo) SetFulfilStatus(v FulfilStatus) {
	o.FulfilStatus = &v
}

// GetNotFullfilledState returns the NotFullfilledState field value if set, zero value otherwise.
func (o *FulfilmentInfo) GetNotFullfilledState() NotFulfilledState {
	if o == nil || IsNil(o.NotFullfilledState) {
		var ret NotFulfilledState
		return ret
	}
	return *o.NotFullfilledState
}

// GetNotFullfilledStateOk returns a tuple with the NotFullfilledState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfilmentInfo) GetNotFullfilledStateOk() (*NotFulfilledState, bool) {
	if o == nil || IsNil(o.NotFullfilledState) {
		return nil, false
	}
	return o.NotFullfilledState, true
}

// HasNotFullfilledState returns a boolean if a field has been set.
func (o *FulfilmentInfo) HasNotFullfilledState() bool {
	if o != nil && !IsNil(o.NotFullfilledState) {
		return true
	}

	return false
}

// SetNotFullfilledState gets a reference to the given NotFulfilledState and assigns it to the NotFullfilledState field.
func (o *FulfilmentInfo) SetNotFullfilledState(v NotFulfilledState) {
	o.NotFullfilledState = &v
}

// GetNotFulfilledReasons returns the NotFulfilledReasons field value if set, zero value otherwise.
func (o *FulfilmentInfo) GetNotFulfilledReasons() string {
	if o == nil || IsNil(o.NotFulfilledReasons) {
		var ret string
		return ret
	}
	return *o.NotFulfilledReasons
}

// GetNotFulfilledReasonsOk returns a tuple with the NotFulfilledReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfilmentInfo) GetNotFulfilledReasonsOk() (*string, bool) {
	if o == nil || IsNil(o.NotFulfilledReasons) {
		return nil, false
	}
	return o.NotFulfilledReasons, true
}

// HasNotFulfilledReasons returns a boolean if a field has been set.
func (o *FulfilmentInfo) HasNotFulfilledReasons() bool {
	if o != nil && !IsNil(o.NotFulfilledReasons) {
		return true
	}

	return false
}

// SetNotFulfilledReasons gets a reference to the given string and assigns it to the NotFulfilledReasons field.
func (o *FulfilmentInfo) SetNotFulfilledReasons(v string) {
	o.NotFulfilledReasons = &v
}

func (o FulfilmentInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FulfilmentInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FulfilStatus) {
		toSerialize["fulfilStatus"] = o.FulfilStatus
	}
	if !IsNil(o.NotFullfilledState) {
		toSerialize["notFullfilledState"] = o.NotFullfilledState
	}
	if !IsNil(o.NotFulfilledReasons) {
		toSerialize["notFulfilledReasons"] = o.NotFulfilledReasons
	}
	return toSerialize, nil
}

type NullableFulfilmentInfo struct {
	value *FulfilmentInfo
	isSet bool
}

func (v NullableFulfilmentInfo) Get() *FulfilmentInfo {
	return v.value
}

func (v *NullableFulfilmentInfo) Set(val *FulfilmentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFulfilmentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFulfilmentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFulfilmentInfo(val *FulfilmentInfo) *NullableFulfilmentInfo {
	return &NullableFulfilmentInfo{value: val, isSet: true}
}

func (v NullableFulfilmentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFulfilmentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
