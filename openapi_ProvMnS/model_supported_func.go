/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the SupportedFunc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedFunc{}

// SupportedFunc struct for SupportedFunc
type SupportedFunc struct {
	Function *string `json:"function,omitempty"`
	Policy   *string `json:"policy,omitempty"`
}

// NewSupportedFunc instantiates a new SupportedFunc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedFunc() *SupportedFunc {
	this := SupportedFunc{}
	return &this
}

// NewSupportedFuncWithDefaults instantiates a new SupportedFunc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedFuncWithDefaults() *SupportedFunc {
	this := SupportedFunc{}
	return &this
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *SupportedFunc) GetFunction() string {
	if o == nil || IsNil(o.Function) {
		var ret string
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedFunc) GetFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.Function) {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *SupportedFunc) HasFunction() bool {
	if o != nil && !IsNil(o.Function) {
		return true
	}

	return false
}

// SetFunction gets a reference to the given string and assigns it to the Function field.
func (o *SupportedFunc) SetFunction(v string) {
	o.Function = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *SupportedFunc) GetPolicy() string {
	if o == nil || IsNil(o.Policy) {
		var ret string
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedFunc) GetPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *SupportedFunc) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the Policy field.
func (o *SupportedFunc) SetPolicy(v string) {
	o.Policy = &v
}

func (o SupportedFunc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedFunc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Function) {
		toSerialize["function"] = o.Function
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	return toSerialize, nil
}

type NullableSupportedFunc struct {
	value *SupportedFunc
	isSet bool
}

func (v NullableSupportedFunc) Get() *SupportedFunc {
	return v.value
}

func (v *NullableSupportedFunc) Set(val *SupportedFunc) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedFunc) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedFunc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedFunc(val *SupportedFunc) *NullableSupportedFunc {
	return &NullableSupportedFunc{value: val, isSet: true}
}

func (v NullableSupportedFunc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedFunc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
