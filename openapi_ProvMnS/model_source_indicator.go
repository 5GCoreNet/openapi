/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// SourceIndicator the model 'SourceIndicator'
type SourceIndicator string

// List of SourceIndicator
const (
	RESOURCE_OPERATION SourceIndicator = "RESOURCE_OPERATION"
	MANAGEMENT_OPERATION SourceIndicator = "MANAGEMENT_OPERATION"
	SON_OPERATION SourceIndicator = "SON_OPERATION"
	UNKNOWN SourceIndicator = "UNKNOWN"
)

// All allowed values of SourceIndicator enum
var AllowedSourceIndicatorEnumValues = []SourceIndicator{
	"RESOURCE_OPERATION",
	"MANAGEMENT_OPERATION",
	"SON_OPERATION",
	"UNKNOWN",
}

func (v *SourceIndicator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SourceIndicator(value)
	for _, existing := range AllowedSourceIndicatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SourceIndicator", value)
}

// NewSourceIndicatorFromValue returns a pointer to a valid SourceIndicator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSourceIndicatorFromValue(v string) (*SourceIndicator, error) {
	ev := SourceIndicator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SourceIndicator: valid values are %v", v, AllowedSourceIndicatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SourceIndicator) IsValid() bool {
	for _, existing := range AllowedSourceIndicatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SourceIndicator value
func (v SourceIndicator) Ptr() *SourceIndicator {
	return &v
}

type NullableSourceIndicator struct {
	value *SourceIndicator
	isSet bool
}

func (v NullableSourceIndicator) Get() *SourceIndicator {
	return v.value
}

func (v *NullableSourceIndicator) Set(val *SourceIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceIndicator(val *SourceIndicator) *NullableSourceIndicator {
	return &NullableSourceIndicator{value: val, isSet: true}
}

func (v NullableSourceIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

