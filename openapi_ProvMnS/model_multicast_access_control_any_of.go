/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// MulticastAccessControlAnyOf the model 'MulticastAccessControlAnyOf'
type MulticastAccessControlAnyOf string

// List of MulticastAccessControl_anyOf
const (
	ALLOWED MulticastAccessControlAnyOf = "ALLOWED"
	NOT_ALLOWED MulticastAccessControlAnyOf = "NOT_ALLOWED"
)

// All allowed values of MulticastAccessControlAnyOf enum
var AllowedMulticastAccessControlAnyOfEnumValues = []MulticastAccessControlAnyOf{
	"ALLOWED",
	"NOT_ALLOWED",
}

func (v *MulticastAccessControlAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MulticastAccessControlAnyOf(value)
	for _, existing := range AllowedMulticastAccessControlAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MulticastAccessControlAnyOf", value)
}

// NewMulticastAccessControlAnyOfFromValue returns a pointer to a valid MulticastAccessControlAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMulticastAccessControlAnyOfFromValue(v string) (*MulticastAccessControlAnyOf, error) {
	ev := MulticastAccessControlAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MulticastAccessControlAnyOf: valid values are %v", v, AllowedMulticastAccessControlAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MulticastAccessControlAnyOf) IsValid() bool {
	for _, existing := range AllowedMulticastAccessControlAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MulticastAccessControl_anyOf value
func (v MulticastAccessControlAnyOf) Ptr() *MulticastAccessControlAnyOf {
	return &v
}

type NullableMulticastAccessControlAnyOf struct {
	value *MulticastAccessControlAnyOf
	isSet bool
}

func (v NullableMulticastAccessControlAnyOf) Get() *MulticastAccessControlAnyOf {
	return v.value
}

func (v *NullableMulticastAccessControlAnyOf) Set(val *MulticastAccessControlAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMulticastAccessControlAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMulticastAccessControlAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMulticastAccessControlAnyOf(val *MulticastAccessControlAnyOf) *NullableMulticastAccessControlAnyOf {
	return &NullableMulticastAccessControlAnyOf{value: val, isSet: true}
}

func (v NullableMulticastAccessControlAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMulticastAccessControlAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

