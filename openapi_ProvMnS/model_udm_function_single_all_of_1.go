/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the UdmFunctionSingleAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdmFunctionSingleAllOf1{}

// UdmFunctionSingleAllOf1 struct for UdmFunctionSingleAllOf1
type UdmFunctionSingleAllOf1 struct {
	EPN8 []EPN8Single `json:"EP_N8,omitempty"`
	EPN10 []EPN10Single `json:"EP_N10,omitempty"`
	EPN13 []EPN13Single `json:"EP_N13,omitempty"`
}

// NewUdmFunctionSingleAllOf1 instantiates a new UdmFunctionSingleAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdmFunctionSingleAllOf1() *UdmFunctionSingleAllOf1 {
	this := UdmFunctionSingleAllOf1{}
	return &this
}

// NewUdmFunctionSingleAllOf1WithDefaults instantiates a new UdmFunctionSingleAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdmFunctionSingleAllOf1WithDefaults() *UdmFunctionSingleAllOf1 {
	this := UdmFunctionSingleAllOf1{}
	return &this
}

// GetEPN8 returns the EPN8 field value if set, zero value otherwise.
func (o *UdmFunctionSingleAllOf1) GetEPN8() []EPN8Single {
	if o == nil || isNil(o.EPN8) {
		var ret []EPN8Single
		return ret
	}
	return o.EPN8
}

// GetEPN8Ok returns a tuple with the EPN8 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdmFunctionSingleAllOf1) GetEPN8Ok() ([]EPN8Single, bool) {
	if o == nil || isNil(o.EPN8) {
		return nil, false
	}
	return o.EPN8, true
}

// HasEPN8 returns a boolean if a field has been set.
func (o *UdmFunctionSingleAllOf1) HasEPN8() bool {
	if o != nil && !isNil(o.EPN8) {
		return true
	}

	return false
}

// SetEPN8 gets a reference to the given []EPN8Single and assigns it to the EPN8 field.
func (o *UdmFunctionSingleAllOf1) SetEPN8(v []EPN8Single) {
	o.EPN8 = v
}

// GetEPN10 returns the EPN10 field value if set, zero value otherwise.
func (o *UdmFunctionSingleAllOf1) GetEPN10() []EPN10Single {
	if o == nil || isNil(o.EPN10) {
		var ret []EPN10Single
		return ret
	}
	return o.EPN10
}

// GetEPN10Ok returns a tuple with the EPN10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdmFunctionSingleAllOf1) GetEPN10Ok() ([]EPN10Single, bool) {
	if o == nil || isNil(o.EPN10) {
		return nil, false
	}
	return o.EPN10, true
}

// HasEPN10 returns a boolean if a field has been set.
func (o *UdmFunctionSingleAllOf1) HasEPN10() bool {
	if o != nil && !isNil(o.EPN10) {
		return true
	}

	return false
}

// SetEPN10 gets a reference to the given []EPN10Single and assigns it to the EPN10 field.
func (o *UdmFunctionSingleAllOf1) SetEPN10(v []EPN10Single) {
	o.EPN10 = v
}

// GetEPN13 returns the EPN13 field value if set, zero value otherwise.
func (o *UdmFunctionSingleAllOf1) GetEPN13() []EPN13Single {
	if o == nil || isNil(o.EPN13) {
		var ret []EPN13Single
		return ret
	}
	return o.EPN13
}

// GetEPN13Ok returns a tuple with the EPN13 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdmFunctionSingleAllOf1) GetEPN13Ok() ([]EPN13Single, bool) {
	if o == nil || isNil(o.EPN13) {
		return nil, false
	}
	return o.EPN13, true
}

// HasEPN13 returns a boolean if a field has been set.
func (o *UdmFunctionSingleAllOf1) HasEPN13() bool {
	if o != nil && !isNil(o.EPN13) {
		return true
	}

	return false
}

// SetEPN13 gets a reference to the given []EPN13Single and assigns it to the EPN13 field.
func (o *UdmFunctionSingleAllOf1) SetEPN13(v []EPN13Single) {
	o.EPN13 = v
}

func (o UdmFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdmFunctionSingleAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EPN8) {
		toSerialize["EP_N8"] = o.EPN8
	}
	if !isNil(o.EPN10) {
		toSerialize["EP_N10"] = o.EPN10
	}
	if !isNil(o.EPN13) {
		toSerialize["EP_N13"] = o.EPN13
	}
	return toSerialize, nil
}

type NullableUdmFunctionSingleAllOf1 struct {
	value *UdmFunctionSingleAllOf1
	isSet bool
}

func (v NullableUdmFunctionSingleAllOf1) Get() *UdmFunctionSingleAllOf1 {
	return v.value
}

func (v *NullableUdmFunctionSingleAllOf1) Set(val *UdmFunctionSingleAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableUdmFunctionSingleAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableUdmFunctionSingleAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdmFunctionSingleAllOf1(val *UdmFunctionSingleAllOf1) *NullableUdmFunctionSingleAllOf1 {
	return &NullableUdmFunctionSingleAllOf1{value: val, isSet: true}
}

func (v NullableUdmFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdmFunctionSingleAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


