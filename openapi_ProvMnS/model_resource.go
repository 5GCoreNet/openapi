/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// Resource - struct for Resource
type Resource struct {
	ResourceOneOf  *ResourceOneOf
	ResourceOneOf1 *ResourceOneOf1
}

// ResourceOneOfAsResource is a convenience function that returns ResourceOneOf wrapped in Resource
func ResourceOneOfAsResource(v *ResourceOneOf) Resource {
	return Resource{
		ResourceOneOf: v,
	}
}

// ResourceOneOf1AsResource is a convenience function that returns ResourceOneOf1 wrapped in Resource
func ResourceOneOf1AsResource(v *ResourceOneOf1) Resource {
	return Resource{
		ResourceOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Resource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ResourceOneOf
	err = newStrictDecoder(data).Decode(&dst.ResourceOneOf)
	if err == nil {
		jsonResourceOneOf, _ := json.Marshal(dst.ResourceOneOf)
		if string(jsonResourceOneOf) == "{}" { // empty struct
			dst.ResourceOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ResourceOneOf = nil
	}

	// try to unmarshal data into ResourceOneOf1
	err = newStrictDecoder(data).Decode(&dst.ResourceOneOf1)
	if err == nil {
		jsonResourceOneOf1, _ := json.Marshal(dst.ResourceOneOf1)
		if string(jsonResourceOneOf1) == "{}" { // empty struct
			dst.ResourceOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ResourceOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ResourceOneOf = nil
		dst.ResourceOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Resource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Resource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Resource) MarshalJSON() ([]byte, error) {
	if src.ResourceOneOf != nil {
		return json.Marshal(&src.ResourceOneOf)
	}

	if src.ResourceOneOf1 != nil {
		return json.Marshal(&src.ResourceOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Resource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ResourceOneOf != nil {
		return obj.ResourceOneOf
	}

	if obj.ResourceOneOf1 != nil {
		return obj.ResourceOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
