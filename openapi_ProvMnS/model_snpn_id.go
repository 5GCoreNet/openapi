/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the SnpnId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnpnId{}

// SnpnId struct for SnpnId
type SnpnId struct {
	Mcc *string `json:"mcc,omitempty"`
	Mnc *string `json:"mnc,omitempty"`
	Nid *string `json:"nid,omitempty"`
}

// NewSnpnId instantiates a new SnpnId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnpnId() *SnpnId {
	this := SnpnId{}
	return &this
}

// NewSnpnIdWithDefaults instantiates a new SnpnId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnpnIdWithDefaults() *SnpnId {
	this := SnpnId{}
	return &this
}

// GetMcc returns the Mcc field value if set, zero value otherwise.
func (o *SnpnId) GetMcc() string {
	if o == nil || IsNil(o.Mcc) {
		var ret string
		return ret
	}
	return *o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnpnId) GetMccOk() (*string, bool) {
	if o == nil || IsNil(o.Mcc) {
		return nil, false
	}
	return o.Mcc, true
}

// HasMcc returns a boolean if a field has been set.
func (o *SnpnId) HasMcc() bool {
	if o != nil && !IsNil(o.Mcc) {
		return true
	}

	return false
}

// SetMcc gets a reference to the given string and assigns it to the Mcc field.
func (o *SnpnId) SetMcc(v string) {
	o.Mcc = &v
}

// GetMnc returns the Mnc field value if set, zero value otherwise.
func (o *SnpnId) GetMnc() string {
	if o == nil || IsNil(o.Mnc) {
		var ret string
		return ret
	}
	return *o.Mnc
}

// GetMncOk returns a tuple with the Mnc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnpnId) GetMncOk() (*string, bool) {
	if o == nil || IsNil(o.Mnc) {
		return nil, false
	}
	return o.Mnc, true
}

// HasMnc returns a boolean if a field has been set.
func (o *SnpnId) HasMnc() bool {
	if o != nil && !IsNil(o.Mnc) {
		return true
	}

	return false
}

// SetMnc gets a reference to the given string and assigns it to the Mnc field.
func (o *SnpnId) SetMnc(v string) {
	o.Mnc = &v
}

// GetNid returns the Nid field value if set, zero value otherwise.
func (o *SnpnId) GetNid() string {
	if o == nil || IsNil(o.Nid) {
		var ret string
		return ret
	}
	return *o.Nid
}

// GetNidOk returns a tuple with the Nid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnpnId) GetNidOk() (*string, bool) {
	if o == nil || IsNil(o.Nid) {
		return nil, false
	}
	return o.Nid, true
}

// HasNid returns a boolean if a field has been set.
func (o *SnpnId) HasNid() bool {
	if o != nil && !IsNil(o.Nid) {
		return true
	}

	return false
}

// SetNid gets a reference to the given string and assigns it to the Nid field.
func (o *SnpnId) SetNid(v string) {
	o.Nid = &v
}

func (o SnpnId) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnpnId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mcc) {
		toSerialize["mcc"] = o.Mcc
	}
	if !IsNil(o.Mnc) {
		toSerialize["mnc"] = o.Mnc
	}
	if !IsNil(o.Nid) {
		toSerialize["nid"] = o.Nid
	}
	return toSerialize, nil
}

type NullableSnpnId struct {
	value *SnpnId
	isSet bool
}

func (v NullableSnpnId) Get() *SnpnId {
	return v.value
}

func (v *NullableSnpnId) Set(val *SnpnId) {
	v.value = val
	v.isSet = true
}

func (v NullableSnpnId) IsSet() bool {
	return v.isSet
}

func (v *NullableSnpnId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnpnId(val *SnpnId) *NullableSnpnId {
	return &NullableSnpnId{value: val, isSet: true}
}

func (v NullableSnpnId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnpnId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
