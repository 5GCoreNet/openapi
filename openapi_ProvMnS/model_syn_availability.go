/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// SynAvailability the model 'SynAvailability'
type SynAvailability string

// List of SynAvailability
const (
	NOT_SUPPORTED                SynAvailability = "NOT SUPPORTED"
	BETWEEN_BS_AND_UE            SynAvailability = "BETWEEN BS AND UE"
	BETWEEN_BS_AND_UE__UE_AND_UE SynAvailability = "BETWEEN BS AND UE & UE AND UE"
)

// All allowed values of SynAvailability enum
var AllowedSynAvailabilityEnumValues = []SynAvailability{
	"NOT SUPPORTED",
	"BETWEEN BS AND UE",
	"BETWEEN BS AND UE & UE AND UE",
}

func (v *SynAvailability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SynAvailability(value)
	for _, existing := range AllowedSynAvailabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SynAvailability", value)
}

// NewSynAvailabilityFromValue returns a pointer to a valid SynAvailability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSynAvailabilityFromValue(v string) (*SynAvailability, error) {
	ev := SynAvailability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SynAvailability: valid values are %v", v, AllowedSynAvailabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SynAvailability) IsValid() bool {
	for _, existing := range AllowedSynAvailabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SynAvailability value
func (v SynAvailability) Ptr() *SynAvailability {
	return &v
}

type NullableSynAvailability struct {
	value *SynAvailability
	isSet bool
}

func (v NullableSynAvailability) Get() *SynAvailability {
	return v.value
}

func (v *NullableSynAvailability) Set(val *SynAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableSynAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableSynAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSynAvailability(val *SynAvailability) *NullableSynAvailability {
	return &NullableSynAvailability{value: val, isSet: true}
}

func (v NullableSynAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSynAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
