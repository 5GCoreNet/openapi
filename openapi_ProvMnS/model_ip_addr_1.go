/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the IpAddr1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpAddr1{}

// IpAddr1 struct for IpAddr1
type IpAddr1 struct {
	Ipv4Addr   *string `json:"ipv4Addr,omitempty"`
	Ipv6Addr   *string `json:"ipv6Addr,omitempty"`
	Ipv6Prefix *string `json:"ipv6Prefix,omitempty"`
}

// NewIpAddr1 instantiates a new IpAddr1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpAddr1() *IpAddr1 {
	this := IpAddr1{}
	return &this
}

// NewIpAddr1WithDefaults instantiates a new IpAddr1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpAddr1WithDefaults() *IpAddr1 {
	this := IpAddr1{}
	return &this
}

// GetIpv4Addr returns the Ipv4Addr field value if set, zero value otherwise.
func (o *IpAddr1) GetIpv4Addr() string {
	if o == nil || IsNil(o.Ipv4Addr) {
		var ret string
		return ret
	}
	return *o.Ipv4Addr
}

// GetIpv4AddrOk returns a tuple with the Ipv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddr1) GetIpv4AddrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Addr) {
		return nil, false
	}
	return o.Ipv4Addr, true
}

// HasIpv4Addr returns a boolean if a field has been set.
func (o *IpAddr1) HasIpv4Addr() bool {
	if o != nil && !IsNil(o.Ipv4Addr) {
		return true
	}

	return false
}

// SetIpv4Addr gets a reference to the given string and assigns it to the Ipv4Addr field.
func (o *IpAddr1) SetIpv4Addr(v string) {
	o.Ipv4Addr = &v
}

// GetIpv6Addr returns the Ipv6Addr field value if set, zero value otherwise.
func (o *IpAddr1) GetIpv6Addr() string {
	if o == nil || IsNil(o.Ipv6Addr) {
		var ret string
		return ret
	}
	return *o.Ipv6Addr
}

// GetIpv6AddrOk returns a tuple with the Ipv6Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddr1) GetIpv6AddrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Addr) {
		return nil, false
	}
	return o.Ipv6Addr, true
}

// HasIpv6Addr returns a boolean if a field has been set.
func (o *IpAddr1) HasIpv6Addr() bool {
	if o != nil && !IsNil(o.Ipv6Addr) {
		return true
	}

	return false
}

// SetIpv6Addr gets a reference to the given string and assigns it to the Ipv6Addr field.
func (o *IpAddr1) SetIpv6Addr(v string) {
	o.Ipv6Addr = &v
}

// GetIpv6Prefix returns the Ipv6Prefix field value if set, zero value otherwise.
func (o *IpAddr1) GetIpv6Prefix() string {
	if o == nil || IsNil(o.Ipv6Prefix) {
		var ret string
		return ret
	}
	return *o.Ipv6Prefix
}

// GetIpv6PrefixOk returns a tuple with the Ipv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddr1) GetIpv6PrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Prefix) {
		return nil, false
	}
	return o.Ipv6Prefix, true
}

// HasIpv6Prefix returns a boolean if a field has been set.
func (o *IpAddr1) HasIpv6Prefix() bool {
	if o != nil && !IsNil(o.Ipv6Prefix) {
		return true
	}

	return false
}

// SetIpv6Prefix gets a reference to the given string and assigns it to the Ipv6Prefix field.
func (o *IpAddr1) SetIpv6Prefix(v string) {
	o.Ipv6Prefix = &v
}

func (o IpAddr1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpAddr1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4Addr) {
		toSerialize["ipv4Addr"] = o.Ipv4Addr
	}
	if !IsNil(o.Ipv6Addr) {
		toSerialize["ipv6Addr"] = o.Ipv6Addr
	}
	if !IsNil(o.Ipv6Prefix) {
		toSerialize["ipv6Prefix"] = o.Ipv6Prefix
	}
	return toSerialize, nil
}

type NullableIpAddr1 struct {
	value *IpAddr1
	isSet bool
}

func (v NullableIpAddr1) Get() *IpAddr1 {
	return v.value
}

func (v *NullableIpAddr1) Set(val *IpAddr1) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAddr1) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAddr1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAddr1(val *IpAddr1) *NullableIpAddr1 {
	return &NullableIpAddr1{value: val, isSet: true}
}

func (v NullableIpAddr1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAddr1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
