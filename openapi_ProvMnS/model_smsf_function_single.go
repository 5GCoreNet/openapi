/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the SmsfFunctionSingle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsfFunctionSingle{}

// SmsfFunctionSingle struct for SmsfFunctionSingle
type SmsfFunctionSingle struct {
	Top
	Attributes       *SmsfFunctionSingleAllOfAttributes `json:"attributes,omitempty"`
	PerfMetricJob    []PerfMetricJobSingle              `json:"PerfMetricJob,omitempty"`
	ThresholdMonitor []ThresholdMonitorSingle           `json:"ThresholdMonitor,omitempty"`
	ManagedNFService []ManagedNFServiceSingle           `json:"ManagedNFService,omitempty"`
	TraceJob         []TraceJobSingle                   `json:"TraceJob,omitempty"`
	EPN20            []EPN20Single                      `json:"EP_N20,omitempty"`
	EPN21            []EPN21Single                      `json:"EP_N21,omitempty"`
	EP_MAP_SMSC      []EPMAPSMSCSingle                  `json:"EP_MAP_SMSC,omitempty"`
}

// NewSmsfFunctionSingle instantiates a new SmsfFunctionSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsfFunctionSingle(id NullableString) *SmsfFunctionSingle {
	this := SmsfFunctionSingle{}
	this.Id = id
	return &this
}

// NewSmsfFunctionSingleWithDefaults instantiates a new SmsfFunctionSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsfFunctionSingleWithDefaults() *SmsfFunctionSingle {
	this := SmsfFunctionSingle{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SmsfFunctionSingle) GetAttributes() SmsfFunctionSingleAllOfAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret SmsfFunctionSingleAllOfAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfFunctionSingle) GetAttributesOk() (*SmsfFunctionSingleAllOfAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SmsfFunctionSingle) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given SmsfFunctionSingleAllOfAttributes and assigns it to the Attributes field.
func (o *SmsfFunctionSingle) SetAttributes(v SmsfFunctionSingleAllOfAttributes) {
	o.Attributes = &v
}

// GetPerfMetricJob returns the PerfMetricJob field value if set, zero value otherwise.
func (o *SmsfFunctionSingle) GetPerfMetricJob() []PerfMetricJobSingle {
	if o == nil || IsNil(o.PerfMetricJob) {
		var ret []PerfMetricJobSingle
		return ret
	}
	return o.PerfMetricJob
}

// GetPerfMetricJobOk returns a tuple with the PerfMetricJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfFunctionSingle) GetPerfMetricJobOk() ([]PerfMetricJobSingle, bool) {
	if o == nil || IsNil(o.PerfMetricJob) {
		return nil, false
	}
	return o.PerfMetricJob, true
}

// HasPerfMetricJob returns a boolean if a field has been set.
func (o *SmsfFunctionSingle) HasPerfMetricJob() bool {
	if o != nil && !IsNil(o.PerfMetricJob) {
		return true
	}

	return false
}

// SetPerfMetricJob gets a reference to the given []PerfMetricJobSingle and assigns it to the PerfMetricJob field.
func (o *SmsfFunctionSingle) SetPerfMetricJob(v []PerfMetricJobSingle) {
	o.PerfMetricJob = v
}

// GetThresholdMonitor returns the ThresholdMonitor field value if set, zero value otherwise.
func (o *SmsfFunctionSingle) GetThresholdMonitor() []ThresholdMonitorSingle {
	if o == nil || IsNil(o.ThresholdMonitor) {
		var ret []ThresholdMonitorSingle
		return ret
	}
	return o.ThresholdMonitor
}

// GetThresholdMonitorOk returns a tuple with the ThresholdMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfFunctionSingle) GetThresholdMonitorOk() ([]ThresholdMonitorSingle, bool) {
	if o == nil || IsNil(o.ThresholdMonitor) {
		return nil, false
	}
	return o.ThresholdMonitor, true
}

// HasThresholdMonitor returns a boolean if a field has been set.
func (o *SmsfFunctionSingle) HasThresholdMonitor() bool {
	if o != nil && !IsNil(o.ThresholdMonitor) {
		return true
	}

	return false
}

// SetThresholdMonitor gets a reference to the given []ThresholdMonitorSingle and assigns it to the ThresholdMonitor field.
func (o *SmsfFunctionSingle) SetThresholdMonitor(v []ThresholdMonitorSingle) {
	o.ThresholdMonitor = v
}

// GetManagedNFService returns the ManagedNFService field value if set, zero value otherwise.
func (o *SmsfFunctionSingle) GetManagedNFService() []ManagedNFServiceSingle {
	if o == nil || IsNil(o.ManagedNFService) {
		var ret []ManagedNFServiceSingle
		return ret
	}
	return o.ManagedNFService
}

// GetManagedNFServiceOk returns a tuple with the ManagedNFService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfFunctionSingle) GetManagedNFServiceOk() ([]ManagedNFServiceSingle, bool) {
	if o == nil || IsNil(o.ManagedNFService) {
		return nil, false
	}
	return o.ManagedNFService, true
}

// HasManagedNFService returns a boolean if a field has been set.
func (o *SmsfFunctionSingle) HasManagedNFService() bool {
	if o != nil && !IsNil(o.ManagedNFService) {
		return true
	}

	return false
}

// SetManagedNFService gets a reference to the given []ManagedNFServiceSingle and assigns it to the ManagedNFService field.
func (o *SmsfFunctionSingle) SetManagedNFService(v []ManagedNFServiceSingle) {
	o.ManagedNFService = v
}

// GetTraceJob returns the TraceJob field value if set, zero value otherwise.
func (o *SmsfFunctionSingle) GetTraceJob() []TraceJobSingle {
	if o == nil || IsNil(o.TraceJob) {
		var ret []TraceJobSingle
		return ret
	}
	return o.TraceJob
}

// GetTraceJobOk returns a tuple with the TraceJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfFunctionSingle) GetTraceJobOk() ([]TraceJobSingle, bool) {
	if o == nil || IsNil(o.TraceJob) {
		return nil, false
	}
	return o.TraceJob, true
}

// HasTraceJob returns a boolean if a field has been set.
func (o *SmsfFunctionSingle) HasTraceJob() bool {
	if o != nil && !IsNil(o.TraceJob) {
		return true
	}

	return false
}

// SetTraceJob gets a reference to the given []TraceJobSingle and assigns it to the TraceJob field.
func (o *SmsfFunctionSingle) SetTraceJob(v []TraceJobSingle) {
	o.TraceJob = v
}

// GetEPN20 returns the EPN20 field value if set, zero value otherwise.
func (o *SmsfFunctionSingle) GetEPN20() []EPN20Single {
	if o == nil || IsNil(o.EPN20) {
		var ret []EPN20Single
		return ret
	}
	return o.EPN20
}

// GetEPN20Ok returns a tuple with the EPN20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfFunctionSingle) GetEPN20Ok() ([]EPN20Single, bool) {
	if o == nil || IsNil(o.EPN20) {
		return nil, false
	}
	return o.EPN20, true
}

// HasEPN20 returns a boolean if a field has been set.
func (o *SmsfFunctionSingle) HasEPN20() bool {
	if o != nil && !IsNil(o.EPN20) {
		return true
	}

	return false
}

// SetEPN20 gets a reference to the given []EPN20Single and assigns it to the EPN20 field.
func (o *SmsfFunctionSingle) SetEPN20(v []EPN20Single) {
	o.EPN20 = v
}

// GetEPN21 returns the EPN21 field value if set, zero value otherwise.
func (o *SmsfFunctionSingle) GetEPN21() []EPN21Single {
	if o == nil || IsNil(o.EPN21) {
		var ret []EPN21Single
		return ret
	}
	return o.EPN21
}

// GetEPN21Ok returns a tuple with the EPN21 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfFunctionSingle) GetEPN21Ok() ([]EPN21Single, bool) {
	if o == nil || IsNil(o.EPN21) {
		return nil, false
	}
	return o.EPN21, true
}

// HasEPN21 returns a boolean if a field has been set.
func (o *SmsfFunctionSingle) HasEPN21() bool {
	if o != nil && !IsNil(o.EPN21) {
		return true
	}

	return false
}

// SetEPN21 gets a reference to the given []EPN21Single and assigns it to the EPN21 field.
func (o *SmsfFunctionSingle) SetEPN21(v []EPN21Single) {
	o.EPN21 = v
}

// GetEP_MAP_SMSC returns the EP_MAP_SMSC field value if set, zero value otherwise.
func (o *SmsfFunctionSingle) GetEP_MAP_SMSC() []EPMAPSMSCSingle {
	if o == nil || IsNil(o.EP_MAP_SMSC) {
		var ret []EPMAPSMSCSingle
		return ret
	}
	return o.EP_MAP_SMSC
}

// GetEP_MAP_SMSCOk returns a tuple with the EP_MAP_SMSC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfFunctionSingle) GetEP_MAP_SMSCOk() ([]EPMAPSMSCSingle, bool) {
	if o == nil || IsNil(o.EP_MAP_SMSC) {
		return nil, false
	}
	return o.EP_MAP_SMSC, true
}

// HasEP_MAP_SMSC returns a boolean if a field has been set.
func (o *SmsfFunctionSingle) HasEP_MAP_SMSC() bool {
	if o != nil && !IsNil(o.EP_MAP_SMSC) {
		return true
	}

	return false
}

// SetEP_MAP_SMSC gets a reference to the given []EPMAPSMSCSingle and assigns it to the EP_MAP_SMSC field.
func (o *SmsfFunctionSingle) SetEP_MAP_SMSC(v []EPMAPSMSCSingle) {
	o.EP_MAP_SMSC = v
}

func (o SmsfFunctionSingle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsfFunctionSingle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTop, errTop := json.Marshal(o.Top)
	if errTop != nil {
		return map[string]interface{}{}, errTop
	}
	errTop = json.Unmarshal([]byte(serializedTop), &toSerialize)
	if errTop != nil {
		return map[string]interface{}{}, errTop
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.PerfMetricJob) {
		toSerialize["PerfMetricJob"] = o.PerfMetricJob
	}
	if !IsNil(o.ThresholdMonitor) {
		toSerialize["ThresholdMonitor"] = o.ThresholdMonitor
	}
	if !IsNil(o.ManagedNFService) {
		toSerialize["ManagedNFService"] = o.ManagedNFService
	}
	if !IsNil(o.TraceJob) {
		toSerialize["TraceJob"] = o.TraceJob
	}
	if !IsNil(o.EPN20) {
		toSerialize["EP_N20"] = o.EPN20
	}
	if !IsNil(o.EPN21) {
		toSerialize["EP_N21"] = o.EPN21
	}
	if !IsNil(o.EP_MAP_SMSC) {
		toSerialize["EP_MAP_SMSC"] = o.EP_MAP_SMSC
	}
	return toSerialize, nil
}

type NullableSmsfFunctionSingle struct {
	value *SmsfFunctionSingle
	isSet bool
}

func (v NullableSmsfFunctionSingle) Get() *SmsfFunctionSingle {
	return v.value
}

func (v *NullableSmsfFunctionSingle) Set(val *SmsfFunctionSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsfFunctionSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsfFunctionSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsfFunctionSingle(val *SmsfFunctionSingle) *NullableSmsfFunctionSingle {
	return &NullableSmsfFunctionSingle{value: val, isSet: true}
}

func (v NullableSmsfFunctionSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsfFunctionSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
