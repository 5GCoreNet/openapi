/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the GnbDuFunctionSingle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GnbDuFunctionSingle{}

// GnbDuFunctionSingle struct for GnbDuFunctionSingle
type GnbDuFunctionSingle struct {
	Top
	Attributes                *GnbDuFunctionSingleAllOfAttributes `json:"attributes,omitempty"`
	PerfMetricJob             []PerfMetricJobSingle               `json:"PerfMetricJob,omitempty"`
	ThresholdMonitor          []ThresholdMonitorSingle            `json:"ThresholdMonitor,omitempty"`
	ManagedNFService          []ManagedNFServiceSingle            `json:"ManagedNFService,omitempty"`
	TraceJob                  []TraceJobSingle                    `json:"TraceJob,omitempty"`
	RRMPolicyRatio            []RRMPolicyRatioSingle              `json:"RRMPolicyRatio,omitempty"`
	NrCellDu                  []NrCellDuSingle                    `json:"NrCellDu,omitempty"`
	BwpMultiple               []BwpSingle                         `json:"Bwp-Multiple,omitempty"`
	NrSectorCarrierMultiple   []NrSectorCarrierSingle             `json:"NrSectorCarrier-Multiple,omitempty"`
	EPF1C                     *EPF1CSingle                        `json:"EP_F1C,omitempty"`
	EPF1U                     []EPF1USingle                       `json:"EP_F1U,omitempty"`
	DRACHOptimizationFunction *DRACHOptimizationFunctionSingle    `json:"DRACHOptimizationFunction,omitempty"`
	OperatorDU                []OperatorDuSingle                  `json:"OperatorDU,omitempty"`
	BWPSet                    []BWPSetSingle                      `json:"BWPSet,omitempty"`
}

// NewGnbDuFunctionSingle instantiates a new GnbDuFunctionSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGnbDuFunctionSingle(id NullableString) *GnbDuFunctionSingle {
	this := GnbDuFunctionSingle{}
	this.Id = id
	return &this
}

// NewGnbDuFunctionSingleWithDefaults instantiates a new GnbDuFunctionSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGnbDuFunctionSingleWithDefaults() *GnbDuFunctionSingle {
	this := GnbDuFunctionSingle{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetAttributes() GnbDuFunctionSingleAllOfAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret GnbDuFunctionSingleAllOfAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetAttributesOk() (*GnbDuFunctionSingleAllOfAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given GnbDuFunctionSingleAllOfAttributes and assigns it to the Attributes field.
func (o *GnbDuFunctionSingle) SetAttributes(v GnbDuFunctionSingleAllOfAttributes) {
	o.Attributes = &v
}

// GetPerfMetricJob returns the PerfMetricJob field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetPerfMetricJob() []PerfMetricJobSingle {
	if o == nil || IsNil(o.PerfMetricJob) {
		var ret []PerfMetricJobSingle
		return ret
	}
	return o.PerfMetricJob
}

// GetPerfMetricJobOk returns a tuple with the PerfMetricJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetPerfMetricJobOk() ([]PerfMetricJobSingle, bool) {
	if o == nil || IsNil(o.PerfMetricJob) {
		return nil, false
	}
	return o.PerfMetricJob, true
}

// HasPerfMetricJob returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasPerfMetricJob() bool {
	if o != nil && !IsNil(o.PerfMetricJob) {
		return true
	}

	return false
}

// SetPerfMetricJob gets a reference to the given []PerfMetricJobSingle and assigns it to the PerfMetricJob field.
func (o *GnbDuFunctionSingle) SetPerfMetricJob(v []PerfMetricJobSingle) {
	o.PerfMetricJob = v
}

// GetThresholdMonitor returns the ThresholdMonitor field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetThresholdMonitor() []ThresholdMonitorSingle {
	if o == nil || IsNil(o.ThresholdMonitor) {
		var ret []ThresholdMonitorSingle
		return ret
	}
	return o.ThresholdMonitor
}

// GetThresholdMonitorOk returns a tuple with the ThresholdMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetThresholdMonitorOk() ([]ThresholdMonitorSingle, bool) {
	if o == nil || IsNil(o.ThresholdMonitor) {
		return nil, false
	}
	return o.ThresholdMonitor, true
}

// HasThresholdMonitor returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasThresholdMonitor() bool {
	if o != nil && !IsNil(o.ThresholdMonitor) {
		return true
	}

	return false
}

// SetThresholdMonitor gets a reference to the given []ThresholdMonitorSingle and assigns it to the ThresholdMonitor field.
func (o *GnbDuFunctionSingle) SetThresholdMonitor(v []ThresholdMonitorSingle) {
	o.ThresholdMonitor = v
}

// GetManagedNFService returns the ManagedNFService field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetManagedNFService() []ManagedNFServiceSingle {
	if o == nil || IsNil(o.ManagedNFService) {
		var ret []ManagedNFServiceSingle
		return ret
	}
	return o.ManagedNFService
}

// GetManagedNFServiceOk returns a tuple with the ManagedNFService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetManagedNFServiceOk() ([]ManagedNFServiceSingle, bool) {
	if o == nil || IsNil(o.ManagedNFService) {
		return nil, false
	}
	return o.ManagedNFService, true
}

// HasManagedNFService returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasManagedNFService() bool {
	if o != nil && !IsNil(o.ManagedNFService) {
		return true
	}

	return false
}

// SetManagedNFService gets a reference to the given []ManagedNFServiceSingle and assigns it to the ManagedNFService field.
func (o *GnbDuFunctionSingle) SetManagedNFService(v []ManagedNFServiceSingle) {
	o.ManagedNFService = v
}

// GetTraceJob returns the TraceJob field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetTraceJob() []TraceJobSingle {
	if o == nil || IsNil(o.TraceJob) {
		var ret []TraceJobSingle
		return ret
	}
	return o.TraceJob
}

// GetTraceJobOk returns a tuple with the TraceJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetTraceJobOk() ([]TraceJobSingle, bool) {
	if o == nil || IsNil(o.TraceJob) {
		return nil, false
	}
	return o.TraceJob, true
}

// HasTraceJob returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasTraceJob() bool {
	if o != nil && !IsNil(o.TraceJob) {
		return true
	}

	return false
}

// SetTraceJob gets a reference to the given []TraceJobSingle and assigns it to the TraceJob field.
func (o *GnbDuFunctionSingle) SetTraceJob(v []TraceJobSingle) {
	o.TraceJob = v
}

// GetRRMPolicyRatio returns the RRMPolicyRatio field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetRRMPolicyRatio() []RRMPolicyRatioSingle {
	if o == nil || IsNil(o.RRMPolicyRatio) {
		var ret []RRMPolicyRatioSingle
		return ret
	}
	return o.RRMPolicyRatio
}

// GetRRMPolicyRatioOk returns a tuple with the RRMPolicyRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetRRMPolicyRatioOk() ([]RRMPolicyRatioSingle, bool) {
	if o == nil || IsNil(o.RRMPolicyRatio) {
		return nil, false
	}
	return o.RRMPolicyRatio, true
}

// HasRRMPolicyRatio returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasRRMPolicyRatio() bool {
	if o != nil && !IsNil(o.RRMPolicyRatio) {
		return true
	}

	return false
}

// SetRRMPolicyRatio gets a reference to the given []RRMPolicyRatioSingle and assigns it to the RRMPolicyRatio field.
func (o *GnbDuFunctionSingle) SetRRMPolicyRatio(v []RRMPolicyRatioSingle) {
	o.RRMPolicyRatio = v
}

// GetNrCellDu returns the NrCellDu field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetNrCellDu() []NrCellDuSingle {
	if o == nil || IsNil(o.NrCellDu) {
		var ret []NrCellDuSingle
		return ret
	}
	return o.NrCellDu
}

// GetNrCellDuOk returns a tuple with the NrCellDu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetNrCellDuOk() ([]NrCellDuSingle, bool) {
	if o == nil || IsNil(o.NrCellDu) {
		return nil, false
	}
	return o.NrCellDu, true
}

// HasNrCellDu returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasNrCellDu() bool {
	if o != nil && !IsNil(o.NrCellDu) {
		return true
	}

	return false
}

// SetNrCellDu gets a reference to the given []NrCellDuSingle and assigns it to the NrCellDu field.
func (o *GnbDuFunctionSingle) SetNrCellDu(v []NrCellDuSingle) {
	o.NrCellDu = v
}

// GetBwpMultiple returns the BwpMultiple field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetBwpMultiple() []BwpSingle {
	if o == nil || IsNil(o.BwpMultiple) {
		var ret []BwpSingle
		return ret
	}
	return o.BwpMultiple
}

// GetBwpMultipleOk returns a tuple with the BwpMultiple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetBwpMultipleOk() ([]BwpSingle, bool) {
	if o == nil || IsNil(o.BwpMultiple) {
		return nil, false
	}
	return o.BwpMultiple, true
}

// HasBwpMultiple returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasBwpMultiple() bool {
	if o != nil && !IsNil(o.BwpMultiple) {
		return true
	}

	return false
}

// SetBwpMultiple gets a reference to the given []BwpSingle and assigns it to the BwpMultiple field.
func (o *GnbDuFunctionSingle) SetBwpMultiple(v []BwpSingle) {
	o.BwpMultiple = v
}

// GetNrSectorCarrierMultiple returns the NrSectorCarrierMultiple field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetNrSectorCarrierMultiple() []NrSectorCarrierSingle {
	if o == nil || IsNil(o.NrSectorCarrierMultiple) {
		var ret []NrSectorCarrierSingle
		return ret
	}
	return o.NrSectorCarrierMultiple
}

// GetNrSectorCarrierMultipleOk returns a tuple with the NrSectorCarrierMultiple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetNrSectorCarrierMultipleOk() ([]NrSectorCarrierSingle, bool) {
	if o == nil || IsNil(o.NrSectorCarrierMultiple) {
		return nil, false
	}
	return o.NrSectorCarrierMultiple, true
}

// HasNrSectorCarrierMultiple returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasNrSectorCarrierMultiple() bool {
	if o != nil && !IsNil(o.NrSectorCarrierMultiple) {
		return true
	}

	return false
}

// SetNrSectorCarrierMultiple gets a reference to the given []NrSectorCarrierSingle and assigns it to the NrSectorCarrierMultiple field.
func (o *GnbDuFunctionSingle) SetNrSectorCarrierMultiple(v []NrSectorCarrierSingle) {
	o.NrSectorCarrierMultiple = v
}

// GetEPF1C returns the EPF1C field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetEPF1C() EPF1CSingle {
	if o == nil || IsNil(o.EPF1C) {
		var ret EPF1CSingle
		return ret
	}
	return *o.EPF1C
}

// GetEPF1COk returns a tuple with the EPF1C field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetEPF1COk() (*EPF1CSingle, bool) {
	if o == nil || IsNil(o.EPF1C) {
		return nil, false
	}
	return o.EPF1C, true
}

// HasEPF1C returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasEPF1C() bool {
	if o != nil && !IsNil(o.EPF1C) {
		return true
	}

	return false
}

// SetEPF1C gets a reference to the given EPF1CSingle and assigns it to the EPF1C field.
func (o *GnbDuFunctionSingle) SetEPF1C(v EPF1CSingle) {
	o.EPF1C = &v
}

// GetEPF1U returns the EPF1U field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetEPF1U() []EPF1USingle {
	if o == nil || IsNil(o.EPF1U) {
		var ret []EPF1USingle
		return ret
	}
	return o.EPF1U
}

// GetEPF1UOk returns a tuple with the EPF1U field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetEPF1UOk() ([]EPF1USingle, bool) {
	if o == nil || IsNil(o.EPF1U) {
		return nil, false
	}
	return o.EPF1U, true
}

// HasEPF1U returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasEPF1U() bool {
	if o != nil && !IsNil(o.EPF1U) {
		return true
	}

	return false
}

// SetEPF1U gets a reference to the given []EPF1USingle and assigns it to the EPF1U field.
func (o *GnbDuFunctionSingle) SetEPF1U(v []EPF1USingle) {
	o.EPF1U = v
}

// GetDRACHOptimizationFunction returns the DRACHOptimizationFunction field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetDRACHOptimizationFunction() DRACHOptimizationFunctionSingle {
	if o == nil || IsNil(o.DRACHOptimizationFunction) {
		var ret DRACHOptimizationFunctionSingle
		return ret
	}
	return *o.DRACHOptimizationFunction
}

// GetDRACHOptimizationFunctionOk returns a tuple with the DRACHOptimizationFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetDRACHOptimizationFunctionOk() (*DRACHOptimizationFunctionSingle, bool) {
	if o == nil || IsNil(o.DRACHOptimizationFunction) {
		return nil, false
	}
	return o.DRACHOptimizationFunction, true
}

// HasDRACHOptimizationFunction returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasDRACHOptimizationFunction() bool {
	if o != nil && !IsNil(o.DRACHOptimizationFunction) {
		return true
	}

	return false
}

// SetDRACHOptimizationFunction gets a reference to the given DRACHOptimizationFunctionSingle and assigns it to the DRACHOptimizationFunction field.
func (o *GnbDuFunctionSingle) SetDRACHOptimizationFunction(v DRACHOptimizationFunctionSingle) {
	o.DRACHOptimizationFunction = &v
}

// GetOperatorDU returns the OperatorDU field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetOperatorDU() []OperatorDuSingle {
	if o == nil || IsNil(o.OperatorDU) {
		var ret []OperatorDuSingle
		return ret
	}
	return o.OperatorDU
}

// GetOperatorDUOk returns a tuple with the OperatorDU field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetOperatorDUOk() ([]OperatorDuSingle, bool) {
	if o == nil || IsNil(o.OperatorDU) {
		return nil, false
	}
	return o.OperatorDU, true
}

// HasOperatorDU returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasOperatorDU() bool {
	if o != nil && !IsNil(o.OperatorDU) {
		return true
	}

	return false
}

// SetOperatorDU gets a reference to the given []OperatorDuSingle and assigns it to the OperatorDU field.
func (o *GnbDuFunctionSingle) SetOperatorDU(v []OperatorDuSingle) {
	o.OperatorDU = v
}

// GetBWPSet returns the BWPSet field value if set, zero value otherwise.
func (o *GnbDuFunctionSingle) GetBWPSet() []BWPSetSingle {
	if o == nil || IsNil(o.BWPSet) {
		var ret []BWPSetSingle
		return ret
	}
	return o.BWPSet
}

// GetBWPSetOk returns a tuple with the BWPSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GnbDuFunctionSingle) GetBWPSetOk() ([]BWPSetSingle, bool) {
	if o == nil || IsNil(o.BWPSet) {
		return nil, false
	}
	return o.BWPSet, true
}

// HasBWPSet returns a boolean if a field has been set.
func (o *GnbDuFunctionSingle) HasBWPSet() bool {
	if o != nil && !IsNil(o.BWPSet) {
		return true
	}

	return false
}

// SetBWPSet gets a reference to the given []BWPSetSingle and assigns it to the BWPSet field.
func (o *GnbDuFunctionSingle) SetBWPSet(v []BWPSetSingle) {
	o.BWPSet = v
}

func (o GnbDuFunctionSingle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GnbDuFunctionSingle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTop, errTop := json.Marshal(o.Top)
	if errTop != nil {
		return map[string]interface{}{}, errTop
	}
	errTop = json.Unmarshal([]byte(serializedTop), &toSerialize)
	if errTop != nil {
		return map[string]interface{}{}, errTop
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.PerfMetricJob) {
		toSerialize["PerfMetricJob"] = o.PerfMetricJob
	}
	if !IsNil(o.ThresholdMonitor) {
		toSerialize["ThresholdMonitor"] = o.ThresholdMonitor
	}
	if !IsNil(o.ManagedNFService) {
		toSerialize["ManagedNFService"] = o.ManagedNFService
	}
	if !IsNil(o.TraceJob) {
		toSerialize["TraceJob"] = o.TraceJob
	}
	if !IsNil(o.RRMPolicyRatio) {
		toSerialize["RRMPolicyRatio"] = o.RRMPolicyRatio
	}
	if !IsNil(o.NrCellDu) {
		toSerialize["NrCellDu"] = o.NrCellDu
	}
	if !IsNil(o.BwpMultiple) {
		toSerialize["Bwp-Multiple"] = o.BwpMultiple
	}
	if !IsNil(o.NrSectorCarrierMultiple) {
		toSerialize["NrSectorCarrier-Multiple"] = o.NrSectorCarrierMultiple
	}
	if !IsNil(o.EPF1C) {
		toSerialize["EP_F1C"] = o.EPF1C
	}
	if !IsNil(o.EPF1U) {
		toSerialize["EP_F1U"] = o.EPF1U
	}
	if !IsNil(o.DRACHOptimizationFunction) {
		toSerialize["DRACHOptimizationFunction"] = o.DRACHOptimizationFunction
	}
	if !IsNil(o.OperatorDU) {
		toSerialize["OperatorDU"] = o.OperatorDU
	}
	if !IsNil(o.BWPSet) {
		toSerialize["BWPSet"] = o.BWPSet
	}
	return toSerialize, nil
}

type NullableGnbDuFunctionSingle struct {
	value *GnbDuFunctionSingle
	isSet bool
}

func (v NullableGnbDuFunctionSingle) Get() *GnbDuFunctionSingle {
	return v.value
}

func (v *NullableGnbDuFunctionSingle) Set(val *GnbDuFunctionSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableGnbDuFunctionSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableGnbDuFunctionSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGnbDuFunctionSingle(val *GnbDuFunctionSingle) *NullableGnbDuFunctionSingle {
	return &NullableGnbDuFunctionSingle{value: val, isSet: true}
}

func (v NullableGnbDuFunctionSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGnbDuFunctionSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
