/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// AnalyticsScopeType - struct for AnalyticsScopeType
type AnalyticsScopeType struct {
	AnalyticsScopeTypeOneOf *AnalyticsScopeTypeOneOf
	AnalyticsScopeTypeOneOf1 *AnalyticsScopeTypeOneOf1
}

// AnalyticsScopeTypeOneOfAsAnalyticsScopeType is a convenience function that returns AnalyticsScopeTypeOneOf wrapped in AnalyticsScopeType
func AnalyticsScopeTypeOneOfAsAnalyticsScopeType(v *AnalyticsScopeTypeOneOf) AnalyticsScopeType {
	return AnalyticsScopeType{
		AnalyticsScopeTypeOneOf: v,
	}
}

// AnalyticsScopeTypeOneOf1AsAnalyticsScopeType is a convenience function that returns AnalyticsScopeTypeOneOf1 wrapped in AnalyticsScopeType
func AnalyticsScopeTypeOneOf1AsAnalyticsScopeType(v *AnalyticsScopeTypeOneOf1) AnalyticsScopeType {
	return AnalyticsScopeType{
		AnalyticsScopeTypeOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AnalyticsScopeType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AnalyticsScopeTypeOneOf
	err = newStrictDecoder(data).Decode(&dst.AnalyticsScopeTypeOneOf)
	if err == nil {
		jsonAnalyticsScopeTypeOneOf, _ := json.Marshal(dst.AnalyticsScopeTypeOneOf)
		if string(jsonAnalyticsScopeTypeOneOf) == "{}" { // empty struct
			dst.AnalyticsScopeTypeOneOf = nil
		} else {
			match++
		}
	} else {
		dst.AnalyticsScopeTypeOneOf = nil
	}

	// try to unmarshal data into AnalyticsScopeTypeOneOf1
	err = newStrictDecoder(data).Decode(&dst.AnalyticsScopeTypeOneOf1)
	if err == nil {
		jsonAnalyticsScopeTypeOneOf1, _ := json.Marshal(dst.AnalyticsScopeTypeOneOf1)
		if string(jsonAnalyticsScopeTypeOneOf1) == "{}" { // empty struct
			dst.AnalyticsScopeTypeOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.AnalyticsScopeTypeOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AnalyticsScopeTypeOneOf = nil
		dst.AnalyticsScopeTypeOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AnalyticsScopeType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AnalyticsScopeType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AnalyticsScopeType) MarshalJSON() ([]byte, error) {
	if src.AnalyticsScopeTypeOneOf != nil {
		return json.Marshal(&src.AnalyticsScopeTypeOneOf)
	}

	if src.AnalyticsScopeTypeOneOf1 != nil {
		return json.Marshal(&src.AnalyticsScopeTypeOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AnalyticsScopeType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AnalyticsScopeTypeOneOf != nil {
		return obj.AnalyticsScopeTypeOneOf
	}

	if obj.AnalyticsScopeTypeOneOf1 != nil {
		return obj.AnalyticsScopeTypeOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableAnalyticsScopeType struct {
	value *AnalyticsScopeType
	isSet bool
}

func (v NullableAnalyticsScopeType) Get() *AnalyticsScopeType {
	return v.value
}

func (v *NullableAnalyticsScopeType) Set(val *AnalyticsScopeType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsScopeType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsScopeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsScopeType(val *AnalyticsScopeType) *NullableAnalyticsScopeType {
	return &NullableAnalyticsScopeType{value: val, isSet: true}
}

func (v NullableAnalyticsScopeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsScopeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


