/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the RimRSSetSingleAllOfAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RimRSSetSingleAllOfAttributes{}

// RimRSSetSingleAllOfAttributes struct for RimRSSetSingleAllOfAttributes
type RimRSSetSingleAllOfAttributes struct {
	SetId *int32 `json:"setId,omitempty"`
	SetType *RSSetType `json:"setType,omitempty"`
	NRCellDURefs []string `json:"nRCellDURefs,omitempty"`
}

// NewRimRSSetSingleAllOfAttributes instantiates a new RimRSSetSingleAllOfAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRimRSSetSingleAllOfAttributes() *RimRSSetSingleAllOfAttributes {
	this := RimRSSetSingleAllOfAttributes{}
	return &this
}

// NewRimRSSetSingleAllOfAttributesWithDefaults instantiates a new RimRSSetSingleAllOfAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRimRSSetSingleAllOfAttributesWithDefaults() *RimRSSetSingleAllOfAttributes {
	this := RimRSSetSingleAllOfAttributes{}
	return &this
}

// GetSetId returns the SetId field value if set, zero value otherwise.
func (o *RimRSSetSingleAllOfAttributes) GetSetId() int32 {
	if o == nil || IsNil(o.SetId) {
		var ret int32
		return ret
	}
	return *o.SetId
}

// GetSetIdOk returns a tuple with the SetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RimRSSetSingleAllOfAttributes) GetSetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SetId) {
		return nil, false
	}
	return o.SetId, true
}

// HasSetId returns a boolean if a field has been set.
func (o *RimRSSetSingleAllOfAttributes) HasSetId() bool {
	if o != nil && !IsNil(o.SetId) {
		return true
	}

	return false
}

// SetSetId gets a reference to the given int32 and assigns it to the SetId field.
func (o *RimRSSetSingleAllOfAttributes) SetSetId(v int32) {
	o.SetId = &v
}

// GetSetType returns the SetType field value if set, zero value otherwise.
func (o *RimRSSetSingleAllOfAttributes) GetSetType() RSSetType {
	if o == nil || IsNil(o.SetType) {
		var ret RSSetType
		return ret
	}
	return *o.SetType
}

// GetSetTypeOk returns a tuple with the SetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RimRSSetSingleAllOfAttributes) GetSetTypeOk() (*RSSetType, bool) {
	if o == nil || IsNil(o.SetType) {
		return nil, false
	}
	return o.SetType, true
}

// HasSetType returns a boolean if a field has been set.
func (o *RimRSSetSingleAllOfAttributes) HasSetType() bool {
	if o != nil && !IsNil(o.SetType) {
		return true
	}

	return false
}

// SetSetType gets a reference to the given RSSetType and assigns it to the SetType field.
func (o *RimRSSetSingleAllOfAttributes) SetSetType(v RSSetType) {
	o.SetType = &v
}

// GetNRCellDURefs returns the NRCellDURefs field value if set, zero value otherwise.
func (o *RimRSSetSingleAllOfAttributes) GetNRCellDURefs() []string {
	if o == nil || IsNil(o.NRCellDURefs) {
		var ret []string
		return ret
	}
	return o.NRCellDURefs
}

// GetNRCellDURefsOk returns a tuple with the NRCellDURefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RimRSSetSingleAllOfAttributes) GetNRCellDURefsOk() ([]string, bool) {
	if o == nil || IsNil(o.NRCellDURefs) {
		return nil, false
	}
	return o.NRCellDURefs, true
}

// HasNRCellDURefs returns a boolean if a field has been set.
func (o *RimRSSetSingleAllOfAttributes) HasNRCellDURefs() bool {
	if o != nil && !IsNil(o.NRCellDURefs) {
		return true
	}

	return false
}

// SetNRCellDURefs gets a reference to the given []string and assigns it to the NRCellDURefs field.
func (o *RimRSSetSingleAllOfAttributes) SetNRCellDURefs(v []string) {
	o.NRCellDURefs = v
}

func (o RimRSSetSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RimRSSetSingleAllOfAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SetId) {
		toSerialize["setId"] = o.SetId
	}
	if !IsNil(o.SetType) {
		toSerialize["setType"] = o.SetType
	}
	if !IsNil(o.NRCellDURefs) {
		toSerialize["nRCellDURefs"] = o.NRCellDURefs
	}
	return toSerialize, nil
}

type NullableRimRSSetSingleAllOfAttributes struct {
	value *RimRSSetSingleAllOfAttributes
	isSet bool
}

func (v NullableRimRSSetSingleAllOfAttributes) Get() *RimRSSetSingleAllOfAttributes {
	return v.value
}

func (v *NullableRimRSSetSingleAllOfAttributes) Set(val *RimRSSetSingleAllOfAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableRimRSSetSingleAllOfAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableRimRSSetSingleAllOfAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRimRSSetSingleAllOfAttributes(val *RimRSSetSingleAllOfAttributes) *NullableRimRSSetSingleAllOfAttributes {
	return &NullableRimRSSetSingleAllOfAttributes{value: val, isSet: true}
}

func (v NullableRimRSSetSingleAllOfAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRimRSSetSingleAllOfAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


