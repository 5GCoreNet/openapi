/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the UpfFunctionSingleAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpfFunctionSingleAllOf1{}

// UpfFunctionSingleAllOf1 struct for UpfFunctionSingleAllOf1
type UpfFunctionSingleAllOf1 struct {
	EPN3 []EPN3Single `json:"EP_N3,omitempty"`
	EPN4 []EPN4Single `json:"EP_N4,omitempty"`
	EPN6 []EPN6Single `json:"EP_N6,omitempty"`
	EPN9 []EPN9Single `json:"EP_N9,omitempty"`
	EPS5U []EPS5USingle `json:"EP_S5U,omitempty"`
}

// NewUpfFunctionSingleAllOf1 instantiates a new UpfFunctionSingleAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpfFunctionSingleAllOf1() *UpfFunctionSingleAllOf1 {
	this := UpfFunctionSingleAllOf1{}
	return &this
}

// NewUpfFunctionSingleAllOf1WithDefaults instantiates a new UpfFunctionSingleAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpfFunctionSingleAllOf1WithDefaults() *UpfFunctionSingleAllOf1 {
	this := UpfFunctionSingleAllOf1{}
	return &this
}

// GetEPN3 returns the EPN3 field value if set, zero value otherwise.
func (o *UpfFunctionSingleAllOf1) GetEPN3() []EPN3Single {
	if o == nil || IsNil(o.EPN3) {
		var ret []EPN3Single
		return ret
	}
	return o.EPN3
}

// GetEPN3Ok returns a tuple with the EPN3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpfFunctionSingleAllOf1) GetEPN3Ok() ([]EPN3Single, bool) {
	if o == nil || IsNil(o.EPN3) {
		return nil, false
	}
	return o.EPN3, true
}

// HasEPN3 returns a boolean if a field has been set.
func (o *UpfFunctionSingleAllOf1) HasEPN3() bool {
	if o != nil && !IsNil(o.EPN3) {
		return true
	}

	return false
}

// SetEPN3 gets a reference to the given []EPN3Single and assigns it to the EPN3 field.
func (o *UpfFunctionSingleAllOf1) SetEPN3(v []EPN3Single) {
	o.EPN3 = v
}

// GetEPN4 returns the EPN4 field value if set, zero value otherwise.
func (o *UpfFunctionSingleAllOf1) GetEPN4() []EPN4Single {
	if o == nil || IsNil(o.EPN4) {
		var ret []EPN4Single
		return ret
	}
	return o.EPN4
}

// GetEPN4Ok returns a tuple with the EPN4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpfFunctionSingleAllOf1) GetEPN4Ok() ([]EPN4Single, bool) {
	if o == nil || IsNil(o.EPN4) {
		return nil, false
	}
	return o.EPN4, true
}

// HasEPN4 returns a boolean if a field has been set.
func (o *UpfFunctionSingleAllOf1) HasEPN4() bool {
	if o != nil && !IsNil(o.EPN4) {
		return true
	}

	return false
}

// SetEPN4 gets a reference to the given []EPN4Single and assigns it to the EPN4 field.
func (o *UpfFunctionSingleAllOf1) SetEPN4(v []EPN4Single) {
	o.EPN4 = v
}

// GetEPN6 returns the EPN6 field value if set, zero value otherwise.
func (o *UpfFunctionSingleAllOf1) GetEPN6() []EPN6Single {
	if o == nil || IsNil(o.EPN6) {
		var ret []EPN6Single
		return ret
	}
	return o.EPN6
}

// GetEPN6Ok returns a tuple with the EPN6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpfFunctionSingleAllOf1) GetEPN6Ok() ([]EPN6Single, bool) {
	if o == nil || IsNil(o.EPN6) {
		return nil, false
	}
	return o.EPN6, true
}

// HasEPN6 returns a boolean if a field has been set.
func (o *UpfFunctionSingleAllOf1) HasEPN6() bool {
	if o != nil && !IsNil(o.EPN6) {
		return true
	}

	return false
}

// SetEPN6 gets a reference to the given []EPN6Single and assigns it to the EPN6 field.
func (o *UpfFunctionSingleAllOf1) SetEPN6(v []EPN6Single) {
	o.EPN6 = v
}

// GetEPN9 returns the EPN9 field value if set, zero value otherwise.
func (o *UpfFunctionSingleAllOf1) GetEPN9() []EPN9Single {
	if o == nil || IsNil(o.EPN9) {
		var ret []EPN9Single
		return ret
	}
	return o.EPN9
}

// GetEPN9Ok returns a tuple with the EPN9 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpfFunctionSingleAllOf1) GetEPN9Ok() ([]EPN9Single, bool) {
	if o == nil || IsNil(o.EPN9) {
		return nil, false
	}
	return o.EPN9, true
}

// HasEPN9 returns a boolean if a field has been set.
func (o *UpfFunctionSingleAllOf1) HasEPN9() bool {
	if o != nil && !IsNil(o.EPN9) {
		return true
	}

	return false
}

// SetEPN9 gets a reference to the given []EPN9Single and assigns it to the EPN9 field.
func (o *UpfFunctionSingleAllOf1) SetEPN9(v []EPN9Single) {
	o.EPN9 = v
}

// GetEPS5U returns the EPS5U field value if set, zero value otherwise.
func (o *UpfFunctionSingleAllOf1) GetEPS5U() []EPS5USingle {
	if o == nil || IsNil(o.EPS5U) {
		var ret []EPS5USingle
		return ret
	}
	return o.EPS5U
}

// GetEPS5UOk returns a tuple with the EPS5U field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpfFunctionSingleAllOf1) GetEPS5UOk() ([]EPS5USingle, bool) {
	if o == nil || IsNil(o.EPS5U) {
		return nil, false
	}
	return o.EPS5U, true
}

// HasEPS5U returns a boolean if a field has been set.
func (o *UpfFunctionSingleAllOf1) HasEPS5U() bool {
	if o != nil && !IsNil(o.EPS5U) {
		return true
	}

	return false
}

// SetEPS5U gets a reference to the given []EPS5USingle and assigns it to the EPS5U field.
func (o *UpfFunctionSingleAllOf1) SetEPS5U(v []EPS5USingle) {
	o.EPS5U = v
}

func (o UpfFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpfFunctionSingleAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EPN3) {
		toSerialize["EP_N3"] = o.EPN3
	}
	if !IsNil(o.EPN4) {
		toSerialize["EP_N4"] = o.EPN4
	}
	if !IsNil(o.EPN6) {
		toSerialize["EP_N6"] = o.EPN6
	}
	if !IsNil(o.EPN9) {
		toSerialize["EP_N9"] = o.EPN9
	}
	if !IsNil(o.EPS5U) {
		toSerialize["EP_S5U"] = o.EPS5U
	}
	return toSerialize, nil
}

type NullableUpfFunctionSingleAllOf1 struct {
	value *UpfFunctionSingleAllOf1
	isSet bool
}

func (v NullableUpfFunctionSingleAllOf1) Get() *UpfFunctionSingleAllOf1 {
	return v.value
}

func (v *NullableUpfFunctionSingleAllOf1) Set(val *UpfFunctionSingleAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableUpfFunctionSingleAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableUpfFunctionSingleAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpfFunctionSingleAllOf1(val *UpfFunctionSingleAllOf1) *NullableUpfFunctionSingleAllOf1 {
	return &NullableUpfFunctionSingleAllOf1{value: val, isSet: true}
}

func (v NullableUpfFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpfFunctionSingleAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


