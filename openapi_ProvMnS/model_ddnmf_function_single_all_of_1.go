/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the DDNMFFunctionSingleAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DDNMFFunctionSingleAllOf1{}

// DDNMFFunctionSingleAllOf1 struct for DDNMFFunctionSingleAllOf1
type DDNMFFunctionSingleAllOf1 struct {
	EPNpc4 []EPNpc4Single `json:"EP_Npc4,omitempty"`
	EPNpc6 []EPNpc6Single `json:"EP_Npc6,omitempty"`
	EPNpc7 []EPNpc7Single `json:"EP_Npc7,omitempty"`
	EPNpc8 []EPNpc8Single `json:"EP_Npc8,omitempty"`
}

// NewDDNMFFunctionSingleAllOf1 instantiates a new DDNMFFunctionSingleAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDDNMFFunctionSingleAllOf1() *DDNMFFunctionSingleAllOf1 {
	this := DDNMFFunctionSingleAllOf1{}
	return &this
}

// NewDDNMFFunctionSingleAllOf1WithDefaults instantiates a new DDNMFFunctionSingleAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDDNMFFunctionSingleAllOf1WithDefaults() *DDNMFFunctionSingleAllOf1 {
	this := DDNMFFunctionSingleAllOf1{}
	return &this
}

// GetEPNpc4 returns the EPNpc4 field value if set, zero value otherwise.
func (o *DDNMFFunctionSingleAllOf1) GetEPNpc4() []EPNpc4Single {
	if o == nil || IsNil(o.EPNpc4) {
		var ret []EPNpc4Single
		return ret
	}
	return o.EPNpc4
}

// GetEPNpc4Ok returns a tuple with the EPNpc4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNMFFunctionSingleAllOf1) GetEPNpc4Ok() ([]EPNpc4Single, bool) {
	if o == nil || IsNil(o.EPNpc4) {
		return nil, false
	}
	return o.EPNpc4, true
}

// HasEPNpc4 returns a boolean if a field has been set.
func (o *DDNMFFunctionSingleAllOf1) HasEPNpc4() bool {
	if o != nil && !IsNil(o.EPNpc4) {
		return true
	}

	return false
}

// SetEPNpc4 gets a reference to the given []EPNpc4Single and assigns it to the EPNpc4 field.
func (o *DDNMFFunctionSingleAllOf1) SetEPNpc4(v []EPNpc4Single) {
	o.EPNpc4 = v
}

// GetEPNpc6 returns the EPNpc6 field value if set, zero value otherwise.
func (o *DDNMFFunctionSingleAllOf1) GetEPNpc6() []EPNpc6Single {
	if o == nil || IsNil(o.EPNpc6) {
		var ret []EPNpc6Single
		return ret
	}
	return o.EPNpc6
}

// GetEPNpc6Ok returns a tuple with the EPNpc6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNMFFunctionSingleAllOf1) GetEPNpc6Ok() ([]EPNpc6Single, bool) {
	if o == nil || IsNil(o.EPNpc6) {
		return nil, false
	}
	return o.EPNpc6, true
}

// HasEPNpc6 returns a boolean if a field has been set.
func (o *DDNMFFunctionSingleAllOf1) HasEPNpc6() bool {
	if o != nil && !IsNil(o.EPNpc6) {
		return true
	}

	return false
}

// SetEPNpc6 gets a reference to the given []EPNpc6Single and assigns it to the EPNpc6 field.
func (o *DDNMFFunctionSingleAllOf1) SetEPNpc6(v []EPNpc6Single) {
	o.EPNpc6 = v
}

// GetEPNpc7 returns the EPNpc7 field value if set, zero value otherwise.
func (o *DDNMFFunctionSingleAllOf1) GetEPNpc7() []EPNpc7Single {
	if o == nil || IsNil(o.EPNpc7) {
		var ret []EPNpc7Single
		return ret
	}
	return o.EPNpc7
}

// GetEPNpc7Ok returns a tuple with the EPNpc7 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNMFFunctionSingleAllOf1) GetEPNpc7Ok() ([]EPNpc7Single, bool) {
	if o == nil || IsNil(o.EPNpc7) {
		return nil, false
	}
	return o.EPNpc7, true
}

// HasEPNpc7 returns a boolean if a field has been set.
func (o *DDNMFFunctionSingleAllOf1) HasEPNpc7() bool {
	if o != nil && !IsNil(o.EPNpc7) {
		return true
	}

	return false
}

// SetEPNpc7 gets a reference to the given []EPNpc7Single and assigns it to the EPNpc7 field.
func (o *DDNMFFunctionSingleAllOf1) SetEPNpc7(v []EPNpc7Single) {
	o.EPNpc7 = v
}

// GetEPNpc8 returns the EPNpc8 field value if set, zero value otherwise.
func (o *DDNMFFunctionSingleAllOf1) GetEPNpc8() []EPNpc8Single {
	if o == nil || IsNil(o.EPNpc8) {
		var ret []EPNpc8Single
		return ret
	}
	return o.EPNpc8
}

// GetEPNpc8Ok returns a tuple with the EPNpc8 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNMFFunctionSingleAllOf1) GetEPNpc8Ok() ([]EPNpc8Single, bool) {
	if o == nil || IsNil(o.EPNpc8) {
		return nil, false
	}
	return o.EPNpc8, true
}

// HasEPNpc8 returns a boolean if a field has been set.
func (o *DDNMFFunctionSingleAllOf1) HasEPNpc8() bool {
	if o != nil && !IsNil(o.EPNpc8) {
		return true
	}

	return false
}

// SetEPNpc8 gets a reference to the given []EPNpc8Single and assigns it to the EPNpc8 field.
func (o *DDNMFFunctionSingleAllOf1) SetEPNpc8(v []EPNpc8Single) {
	o.EPNpc8 = v
}

func (o DDNMFFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DDNMFFunctionSingleAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EPNpc4) {
		toSerialize["EP_Npc4"] = o.EPNpc4
	}
	if !IsNil(o.EPNpc6) {
		toSerialize["EP_Npc6"] = o.EPNpc6
	}
	if !IsNil(o.EPNpc7) {
		toSerialize["EP_Npc7"] = o.EPNpc7
	}
	if !IsNil(o.EPNpc8) {
		toSerialize["EP_Npc8"] = o.EPNpc8
	}
	return toSerialize, nil
}

type NullableDDNMFFunctionSingleAllOf1 struct {
	value *DDNMFFunctionSingleAllOf1
	isSet bool
}

func (v NullableDDNMFFunctionSingleAllOf1) Get() *DDNMFFunctionSingleAllOf1 {
	return v.value
}

func (v *NullableDDNMFFunctionSingleAllOf1) Set(val *DDNMFFunctionSingleAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableDDNMFFunctionSingleAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableDDNMFFunctionSingleAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDDNMFFunctionSingleAllOf1(val *DDNMFFunctionSingleAllOf1) *NullableDDNMFFunctionSingleAllOf1 {
	return &NullableDDNMFFunctionSingleAllOf1{value: val, isSet: true}
}

func (v NullableDDNMFFunctionSingleAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDDNMFFunctionSingleAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
