/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// ResourcesGenericNrm - struct for ResourcesGenericNrm
type ResourcesGenericNrm struct {
	AlarmListSingle                *AlarmListSingle
	FileDownloadJobSingle          *FileDownloadJobSingle
	FileSingle                     *FileSingle
	FilesSingle                    *FilesSingle
	HeartbeatControlSingle         *HeartbeatControlSingle
	ManagedNFServiceSingle         *ManagedNFServiceSingle
	ManagementDataCollectionSingle *ManagementDataCollectionSingle
	ManagementNodeSingle           *ManagementNodeSingle
	MeContextSingle                *MeContextSingle
	MnsAgentSingle                 *MnsAgentSingle
	MnsInfoSingle                  *MnsInfoSingle
	MnsRegistrySingle              *MnsRegistrySingle
	NtfSubscriptionControlSingle   *NtfSubscriptionControlSingle
	PerfMetricJobSingle            *PerfMetricJobSingle
	ThresholdMonitorSingle         *ThresholdMonitorSingle
	TraceJobSingle                 *TraceJobSingle
	VsDataContainerSingle          *VsDataContainerSingle
}

// AlarmListSingleAsResourcesGenericNrm is a convenience function that returns AlarmListSingle wrapped in ResourcesGenericNrm
func AlarmListSingleAsResourcesGenericNrm(v *AlarmListSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		AlarmListSingle: v,
	}
}

// FileDownloadJobSingleAsResourcesGenericNrm is a convenience function that returns FileDownloadJobSingle wrapped in ResourcesGenericNrm
func FileDownloadJobSingleAsResourcesGenericNrm(v *FileDownloadJobSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		FileDownloadJobSingle: v,
	}
}

// FileSingleAsResourcesGenericNrm is a convenience function that returns FileSingle wrapped in ResourcesGenericNrm
func FileSingleAsResourcesGenericNrm(v *FileSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		FileSingle: v,
	}
}

// FilesSingleAsResourcesGenericNrm is a convenience function that returns FilesSingle wrapped in ResourcesGenericNrm
func FilesSingleAsResourcesGenericNrm(v *FilesSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		FilesSingle: v,
	}
}

// HeartbeatControlSingleAsResourcesGenericNrm is a convenience function that returns HeartbeatControlSingle wrapped in ResourcesGenericNrm
func HeartbeatControlSingleAsResourcesGenericNrm(v *HeartbeatControlSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		HeartbeatControlSingle: v,
	}
}

// ManagedNFServiceSingleAsResourcesGenericNrm is a convenience function that returns ManagedNFServiceSingle wrapped in ResourcesGenericNrm
func ManagedNFServiceSingleAsResourcesGenericNrm(v *ManagedNFServiceSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		ManagedNFServiceSingle: v,
	}
}

// ManagementDataCollectionSingleAsResourcesGenericNrm is a convenience function that returns ManagementDataCollectionSingle wrapped in ResourcesGenericNrm
func ManagementDataCollectionSingleAsResourcesGenericNrm(v *ManagementDataCollectionSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		ManagementDataCollectionSingle: v,
	}
}

// ManagementNodeSingleAsResourcesGenericNrm is a convenience function that returns ManagementNodeSingle wrapped in ResourcesGenericNrm
func ManagementNodeSingleAsResourcesGenericNrm(v *ManagementNodeSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		ManagementNodeSingle: v,
	}
}

// MeContextSingleAsResourcesGenericNrm is a convenience function that returns MeContextSingle wrapped in ResourcesGenericNrm
func MeContextSingleAsResourcesGenericNrm(v *MeContextSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		MeContextSingle: v,
	}
}

// MnsAgentSingleAsResourcesGenericNrm is a convenience function that returns MnsAgentSingle wrapped in ResourcesGenericNrm
func MnsAgentSingleAsResourcesGenericNrm(v *MnsAgentSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		MnsAgentSingle: v,
	}
}

// MnsInfoSingleAsResourcesGenericNrm is a convenience function that returns MnsInfoSingle wrapped in ResourcesGenericNrm
func MnsInfoSingleAsResourcesGenericNrm(v *MnsInfoSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		MnsInfoSingle: v,
	}
}

// MnsRegistrySingleAsResourcesGenericNrm is a convenience function that returns MnsRegistrySingle wrapped in ResourcesGenericNrm
func MnsRegistrySingleAsResourcesGenericNrm(v *MnsRegistrySingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		MnsRegistrySingle: v,
	}
}

// NtfSubscriptionControlSingleAsResourcesGenericNrm is a convenience function that returns NtfSubscriptionControlSingle wrapped in ResourcesGenericNrm
func NtfSubscriptionControlSingleAsResourcesGenericNrm(v *NtfSubscriptionControlSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		NtfSubscriptionControlSingle: v,
	}
}

// PerfMetricJobSingleAsResourcesGenericNrm is a convenience function that returns PerfMetricJobSingle wrapped in ResourcesGenericNrm
func PerfMetricJobSingleAsResourcesGenericNrm(v *PerfMetricJobSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		PerfMetricJobSingle: v,
	}
}

// ThresholdMonitorSingleAsResourcesGenericNrm is a convenience function that returns ThresholdMonitorSingle wrapped in ResourcesGenericNrm
func ThresholdMonitorSingleAsResourcesGenericNrm(v *ThresholdMonitorSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		ThresholdMonitorSingle: v,
	}
}

// TraceJobSingleAsResourcesGenericNrm is a convenience function that returns TraceJobSingle wrapped in ResourcesGenericNrm
func TraceJobSingleAsResourcesGenericNrm(v *TraceJobSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		TraceJobSingle: v,
	}
}

// VsDataContainerSingleAsResourcesGenericNrm is a convenience function that returns VsDataContainerSingle wrapped in ResourcesGenericNrm
func VsDataContainerSingleAsResourcesGenericNrm(v *VsDataContainerSingle) ResourcesGenericNrm {
	return ResourcesGenericNrm{
		VsDataContainerSingle: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResourcesGenericNrm) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AlarmListSingle
	err = newStrictDecoder(data).Decode(&dst.AlarmListSingle)
	if err == nil {
		jsonAlarmListSingle, _ := json.Marshal(dst.AlarmListSingle)
		if string(jsonAlarmListSingle) == "{}" { // empty struct
			dst.AlarmListSingle = nil
		} else {
			match++
		}
	} else {
		dst.AlarmListSingle = nil
	}

	// try to unmarshal data into FileDownloadJobSingle
	err = newStrictDecoder(data).Decode(&dst.FileDownloadJobSingle)
	if err == nil {
		jsonFileDownloadJobSingle, _ := json.Marshal(dst.FileDownloadJobSingle)
		if string(jsonFileDownloadJobSingle) == "{}" { // empty struct
			dst.FileDownloadJobSingle = nil
		} else {
			match++
		}
	} else {
		dst.FileDownloadJobSingle = nil
	}

	// try to unmarshal data into FileSingle
	err = newStrictDecoder(data).Decode(&dst.FileSingle)
	if err == nil {
		jsonFileSingle, _ := json.Marshal(dst.FileSingle)
		if string(jsonFileSingle) == "{}" { // empty struct
			dst.FileSingle = nil
		} else {
			match++
		}
	} else {
		dst.FileSingle = nil
	}

	// try to unmarshal data into FilesSingle
	err = newStrictDecoder(data).Decode(&dst.FilesSingle)
	if err == nil {
		jsonFilesSingle, _ := json.Marshal(dst.FilesSingle)
		if string(jsonFilesSingle) == "{}" { // empty struct
			dst.FilesSingle = nil
		} else {
			match++
		}
	} else {
		dst.FilesSingle = nil
	}

	// try to unmarshal data into HeartbeatControlSingle
	err = newStrictDecoder(data).Decode(&dst.HeartbeatControlSingle)
	if err == nil {
		jsonHeartbeatControlSingle, _ := json.Marshal(dst.HeartbeatControlSingle)
		if string(jsonHeartbeatControlSingle) == "{}" { // empty struct
			dst.HeartbeatControlSingle = nil
		} else {
			match++
		}
	} else {
		dst.HeartbeatControlSingle = nil
	}

	// try to unmarshal data into ManagedNFServiceSingle
	err = newStrictDecoder(data).Decode(&dst.ManagedNFServiceSingle)
	if err == nil {
		jsonManagedNFServiceSingle, _ := json.Marshal(dst.ManagedNFServiceSingle)
		if string(jsonManagedNFServiceSingle) == "{}" { // empty struct
			dst.ManagedNFServiceSingle = nil
		} else {
			match++
		}
	} else {
		dst.ManagedNFServiceSingle = nil
	}

	// try to unmarshal data into ManagementDataCollectionSingle
	err = newStrictDecoder(data).Decode(&dst.ManagementDataCollectionSingle)
	if err == nil {
		jsonManagementDataCollectionSingle, _ := json.Marshal(dst.ManagementDataCollectionSingle)
		if string(jsonManagementDataCollectionSingle) == "{}" { // empty struct
			dst.ManagementDataCollectionSingle = nil
		} else {
			match++
		}
	} else {
		dst.ManagementDataCollectionSingle = nil
	}

	// try to unmarshal data into ManagementNodeSingle
	err = newStrictDecoder(data).Decode(&dst.ManagementNodeSingle)
	if err == nil {
		jsonManagementNodeSingle, _ := json.Marshal(dst.ManagementNodeSingle)
		if string(jsonManagementNodeSingle) == "{}" { // empty struct
			dst.ManagementNodeSingle = nil
		} else {
			match++
		}
	} else {
		dst.ManagementNodeSingle = nil
	}

	// try to unmarshal data into MeContextSingle
	err = newStrictDecoder(data).Decode(&dst.MeContextSingle)
	if err == nil {
		jsonMeContextSingle, _ := json.Marshal(dst.MeContextSingle)
		if string(jsonMeContextSingle) == "{}" { // empty struct
			dst.MeContextSingle = nil
		} else {
			match++
		}
	} else {
		dst.MeContextSingle = nil
	}

	// try to unmarshal data into MnsAgentSingle
	err = newStrictDecoder(data).Decode(&dst.MnsAgentSingle)
	if err == nil {
		jsonMnsAgentSingle, _ := json.Marshal(dst.MnsAgentSingle)
		if string(jsonMnsAgentSingle) == "{}" { // empty struct
			dst.MnsAgentSingle = nil
		} else {
			match++
		}
	} else {
		dst.MnsAgentSingle = nil
	}

	// try to unmarshal data into MnsInfoSingle
	err = newStrictDecoder(data).Decode(&dst.MnsInfoSingle)
	if err == nil {
		jsonMnsInfoSingle, _ := json.Marshal(dst.MnsInfoSingle)
		if string(jsonMnsInfoSingle) == "{}" { // empty struct
			dst.MnsInfoSingle = nil
		} else {
			match++
		}
	} else {
		dst.MnsInfoSingle = nil
	}

	// try to unmarshal data into MnsRegistrySingle
	err = newStrictDecoder(data).Decode(&dst.MnsRegistrySingle)
	if err == nil {
		jsonMnsRegistrySingle, _ := json.Marshal(dst.MnsRegistrySingle)
		if string(jsonMnsRegistrySingle) == "{}" { // empty struct
			dst.MnsRegistrySingle = nil
		} else {
			match++
		}
	} else {
		dst.MnsRegistrySingle = nil
	}

	// try to unmarshal data into NtfSubscriptionControlSingle
	err = newStrictDecoder(data).Decode(&dst.NtfSubscriptionControlSingle)
	if err == nil {
		jsonNtfSubscriptionControlSingle, _ := json.Marshal(dst.NtfSubscriptionControlSingle)
		if string(jsonNtfSubscriptionControlSingle) == "{}" { // empty struct
			dst.NtfSubscriptionControlSingle = nil
		} else {
			match++
		}
	} else {
		dst.NtfSubscriptionControlSingle = nil
	}

	// try to unmarshal data into PerfMetricJobSingle
	err = newStrictDecoder(data).Decode(&dst.PerfMetricJobSingle)
	if err == nil {
		jsonPerfMetricJobSingle, _ := json.Marshal(dst.PerfMetricJobSingle)
		if string(jsonPerfMetricJobSingle) == "{}" { // empty struct
			dst.PerfMetricJobSingle = nil
		} else {
			match++
		}
	} else {
		dst.PerfMetricJobSingle = nil
	}

	// try to unmarshal data into ThresholdMonitorSingle
	err = newStrictDecoder(data).Decode(&dst.ThresholdMonitorSingle)
	if err == nil {
		jsonThresholdMonitorSingle, _ := json.Marshal(dst.ThresholdMonitorSingle)
		if string(jsonThresholdMonitorSingle) == "{}" { // empty struct
			dst.ThresholdMonitorSingle = nil
		} else {
			match++
		}
	} else {
		dst.ThresholdMonitorSingle = nil
	}

	// try to unmarshal data into TraceJobSingle
	err = newStrictDecoder(data).Decode(&dst.TraceJobSingle)
	if err == nil {
		jsonTraceJobSingle, _ := json.Marshal(dst.TraceJobSingle)
		if string(jsonTraceJobSingle) == "{}" { // empty struct
			dst.TraceJobSingle = nil
		} else {
			match++
		}
	} else {
		dst.TraceJobSingle = nil
	}

	// try to unmarshal data into VsDataContainerSingle
	err = newStrictDecoder(data).Decode(&dst.VsDataContainerSingle)
	if err == nil {
		jsonVsDataContainerSingle, _ := json.Marshal(dst.VsDataContainerSingle)
		if string(jsonVsDataContainerSingle) == "{}" { // empty struct
			dst.VsDataContainerSingle = nil
		} else {
			match++
		}
	} else {
		dst.VsDataContainerSingle = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AlarmListSingle = nil
		dst.FileDownloadJobSingle = nil
		dst.FileSingle = nil
		dst.FilesSingle = nil
		dst.HeartbeatControlSingle = nil
		dst.ManagedNFServiceSingle = nil
		dst.ManagementDataCollectionSingle = nil
		dst.ManagementNodeSingle = nil
		dst.MeContextSingle = nil
		dst.MnsAgentSingle = nil
		dst.MnsInfoSingle = nil
		dst.MnsRegistrySingle = nil
		dst.NtfSubscriptionControlSingle = nil
		dst.PerfMetricJobSingle = nil
		dst.ThresholdMonitorSingle = nil
		dst.TraceJobSingle = nil
		dst.VsDataContainerSingle = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResourcesGenericNrm)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResourcesGenericNrm)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResourcesGenericNrm) MarshalJSON() ([]byte, error) {
	if src.AlarmListSingle != nil {
		return json.Marshal(&src.AlarmListSingle)
	}

	if src.FileDownloadJobSingle != nil {
		return json.Marshal(&src.FileDownloadJobSingle)
	}

	if src.FileSingle != nil {
		return json.Marshal(&src.FileSingle)
	}

	if src.FilesSingle != nil {
		return json.Marshal(&src.FilesSingle)
	}

	if src.HeartbeatControlSingle != nil {
		return json.Marshal(&src.HeartbeatControlSingle)
	}

	if src.ManagedNFServiceSingle != nil {
		return json.Marshal(&src.ManagedNFServiceSingle)
	}

	if src.ManagementDataCollectionSingle != nil {
		return json.Marshal(&src.ManagementDataCollectionSingle)
	}

	if src.ManagementNodeSingle != nil {
		return json.Marshal(&src.ManagementNodeSingle)
	}

	if src.MeContextSingle != nil {
		return json.Marshal(&src.MeContextSingle)
	}

	if src.MnsAgentSingle != nil {
		return json.Marshal(&src.MnsAgentSingle)
	}

	if src.MnsInfoSingle != nil {
		return json.Marshal(&src.MnsInfoSingle)
	}

	if src.MnsRegistrySingle != nil {
		return json.Marshal(&src.MnsRegistrySingle)
	}

	if src.NtfSubscriptionControlSingle != nil {
		return json.Marshal(&src.NtfSubscriptionControlSingle)
	}

	if src.PerfMetricJobSingle != nil {
		return json.Marshal(&src.PerfMetricJobSingle)
	}

	if src.ThresholdMonitorSingle != nil {
		return json.Marshal(&src.ThresholdMonitorSingle)
	}

	if src.TraceJobSingle != nil {
		return json.Marshal(&src.TraceJobSingle)
	}

	if src.VsDataContainerSingle != nil {
		return json.Marshal(&src.VsDataContainerSingle)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResourcesGenericNrm) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AlarmListSingle != nil {
		return obj.AlarmListSingle
	}

	if obj.FileDownloadJobSingle != nil {
		return obj.FileDownloadJobSingle
	}

	if obj.FileSingle != nil {
		return obj.FileSingle
	}

	if obj.FilesSingle != nil {
		return obj.FilesSingle
	}

	if obj.HeartbeatControlSingle != nil {
		return obj.HeartbeatControlSingle
	}

	if obj.ManagedNFServiceSingle != nil {
		return obj.ManagedNFServiceSingle
	}

	if obj.ManagementDataCollectionSingle != nil {
		return obj.ManagementDataCollectionSingle
	}

	if obj.ManagementNodeSingle != nil {
		return obj.ManagementNodeSingle
	}

	if obj.MeContextSingle != nil {
		return obj.MeContextSingle
	}

	if obj.MnsAgentSingle != nil {
		return obj.MnsAgentSingle
	}

	if obj.MnsInfoSingle != nil {
		return obj.MnsInfoSingle
	}

	if obj.MnsRegistrySingle != nil {
		return obj.MnsRegistrySingle
	}

	if obj.NtfSubscriptionControlSingle != nil {
		return obj.NtfSubscriptionControlSingle
	}

	if obj.PerfMetricJobSingle != nil {
		return obj.PerfMetricJobSingle
	}

	if obj.ThresholdMonitorSingle != nil {
		return obj.ThresholdMonitorSingle
	}

	if obj.TraceJobSingle != nil {
		return obj.TraceJobSingle
	}

	if obj.VsDataContainerSingle != nil {
		return obj.VsDataContainerSingle
	}

	// all schemas are nil
	return nil
}

type NullableResourcesGenericNrm struct {
	value *ResourcesGenericNrm
	isSet bool
}

func (v NullableResourcesGenericNrm) Get() *ResourcesGenericNrm {
	return v.value
}

func (v *NullableResourcesGenericNrm) Set(val *ResourcesGenericNrm) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesGenericNrm) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesGenericNrm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesGenericNrm(val *ResourcesGenericNrm) *NullableResourcesGenericNrm {
	return &NullableResourcesGenericNrm{value: val, isSet: true}
}

func (v NullableResourcesGenericNrm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesGenericNrm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
