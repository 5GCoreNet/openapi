/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the MoiChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoiChange{}

// MoiChange struct for MoiChange
type MoiChange struct {
	NotificationId          int32                    `json:"notificationId"`
	CorrelatedNotifications []CorrelatedNotification `json:"correlatedNotifications,omitempty"`
	AdditionalText          *string                  `json:"additionalText,omitempty"`
	SourceIndicator         *SourceIndicator         `json:"sourceIndicator,omitempty"`
	Op                      Operation                `json:"op"`
	Path                    string                   `json:"path"`
	Insert                  *Insert                  `json:"insert,omitempty"`
	Value                   interface{}              `json:"value,omitempty"`
	OldValue                interface{}              `json:"oldValue,omitempty"`
}

// NewMoiChange instantiates a new MoiChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoiChange(notificationId int32, op Operation, path string) *MoiChange {
	this := MoiChange{}
	this.NotificationId = notificationId
	this.Op = op
	this.Path = path
	return &this
}

// NewMoiChangeWithDefaults instantiates a new MoiChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoiChangeWithDefaults() *MoiChange {
	this := MoiChange{}
	return &this
}

// GetNotificationId returns the NotificationId field value
func (o *MoiChange) GetNotificationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NotificationId
}

// GetNotificationIdOk returns a tuple with the NotificationId field value
// and a boolean to check if the value has been set.
func (o *MoiChange) GetNotificationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationId, true
}

// SetNotificationId sets field value
func (o *MoiChange) SetNotificationId(v int32) {
	o.NotificationId = v
}

// GetCorrelatedNotifications returns the CorrelatedNotifications field value if set, zero value otherwise.
func (o *MoiChange) GetCorrelatedNotifications() []CorrelatedNotification {
	if o == nil || IsNil(o.CorrelatedNotifications) {
		var ret []CorrelatedNotification
		return ret
	}
	return o.CorrelatedNotifications
}

// GetCorrelatedNotificationsOk returns a tuple with the CorrelatedNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoiChange) GetCorrelatedNotificationsOk() ([]CorrelatedNotification, bool) {
	if o == nil || IsNil(o.CorrelatedNotifications) {
		return nil, false
	}
	return o.CorrelatedNotifications, true
}

// HasCorrelatedNotifications returns a boolean if a field has been set.
func (o *MoiChange) HasCorrelatedNotifications() bool {
	if o != nil && !IsNil(o.CorrelatedNotifications) {
		return true
	}

	return false
}

// SetCorrelatedNotifications gets a reference to the given []CorrelatedNotification and assigns it to the CorrelatedNotifications field.
func (o *MoiChange) SetCorrelatedNotifications(v []CorrelatedNotification) {
	o.CorrelatedNotifications = v
}

// GetAdditionalText returns the AdditionalText field value if set, zero value otherwise.
func (o *MoiChange) GetAdditionalText() string {
	if o == nil || IsNil(o.AdditionalText) {
		var ret string
		return ret
	}
	return *o.AdditionalText
}

// GetAdditionalTextOk returns a tuple with the AdditionalText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoiChange) GetAdditionalTextOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalText) {
		return nil, false
	}
	return o.AdditionalText, true
}

// HasAdditionalText returns a boolean if a field has been set.
func (o *MoiChange) HasAdditionalText() bool {
	if o != nil && !IsNil(o.AdditionalText) {
		return true
	}

	return false
}

// SetAdditionalText gets a reference to the given string and assigns it to the AdditionalText field.
func (o *MoiChange) SetAdditionalText(v string) {
	o.AdditionalText = &v
}

// GetSourceIndicator returns the SourceIndicator field value if set, zero value otherwise.
func (o *MoiChange) GetSourceIndicator() SourceIndicator {
	if o == nil || IsNil(o.SourceIndicator) {
		var ret SourceIndicator
		return ret
	}
	return *o.SourceIndicator
}

// GetSourceIndicatorOk returns a tuple with the SourceIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoiChange) GetSourceIndicatorOk() (*SourceIndicator, bool) {
	if o == nil || IsNil(o.SourceIndicator) {
		return nil, false
	}
	return o.SourceIndicator, true
}

// HasSourceIndicator returns a boolean if a field has been set.
func (o *MoiChange) HasSourceIndicator() bool {
	if o != nil && !IsNil(o.SourceIndicator) {
		return true
	}

	return false
}

// SetSourceIndicator gets a reference to the given SourceIndicator and assigns it to the SourceIndicator field.
func (o *MoiChange) SetSourceIndicator(v SourceIndicator) {
	o.SourceIndicator = &v
}

// GetOp returns the Op field value
func (o *MoiChange) GetOp() Operation {
	if o == nil {
		var ret Operation
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *MoiChange) GetOpOk() (*Operation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *MoiChange) SetOp(v Operation) {
	o.Op = v
}

// GetPath returns the Path field value
func (o *MoiChange) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *MoiChange) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *MoiChange) SetPath(v string) {
	o.Path = v
}

// GetInsert returns the Insert field value if set, zero value otherwise.
func (o *MoiChange) GetInsert() Insert {
	if o == nil || IsNil(o.Insert) {
		var ret Insert
		return ret
	}
	return *o.Insert
}

// GetInsertOk returns a tuple with the Insert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoiChange) GetInsertOk() (*Insert, bool) {
	if o == nil || IsNil(o.Insert) {
		return nil, false
	}
	return o.Insert, true
}

// HasInsert returns a boolean if a field has been set.
func (o *MoiChange) HasInsert() bool {
	if o != nil && !IsNil(o.Insert) {
		return true
	}

	return false
}

// SetInsert gets a reference to the given Insert and assigns it to the Insert field.
func (o *MoiChange) SetInsert(v Insert) {
	o.Insert = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MoiChange) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MoiChange) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MoiChange) HasValue() bool {
	if o != nil && IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *MoiChange) SetValue(v interface{}) {
	o.Value = v
}

// GetOldValue returns the OldValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MoiChange) GetOldValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MoiChange) GetOldValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.OldValue) {
		return nil, false
	}
	return &o.OldValue, true
}

// HasOldValue returns a boolean if a field has been set.
func (o *MoiChange) HasOldValue() bool {
	if o != nil && IsNil(o.OldValue) {
		return true
	}

	return false
}

// SetOldValue gets a reference to the given interface{} and assigns it to the OldValue field.
func (o *MoiChange) SetOldValue(v interface{}) {
	o.OldValue = v
}

func (o MoiChange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoiChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notificationId"] = o.NotificationId
	if !IsNil(o.CorrelatedNotifications) {
		toSerialize["correlatedNotifications"] = o.CorrelatedNotifications
	}
	if !IsNil(o.AdditionalText) {
		toSerialize["additionalText"] = o.AdditionalText
	}
	if !IsNil(o.SourceIndicator) {
		toSerialize["sourceIndicator"] = o.SourceIndicator
	}
	toSerialize["op"] = o.Op
	toSerialize["path"] = o.Path
	if !IsNil(o.Insert) {
		toSerialize["insert"] = o.Insert
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.OldValue != nil {
		toSerialize["oldValue"] = o.OldValue
	}
	return toSerialize, nil
}

type NullableMoiChange struct {
	value *MoiChange
	isSet bool
}

func (v NullableMoiChange) Get() *MoiChange {
	return v.value
}

func (v *NullableMoiChange) Set(val *MoiChange) {
	v.value = val
	v.isSet = true
}

func (v NullableMoiChange) IsSet() bool {
	return v.isSet
}

func (v *NullableMoiChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoiChange(val *MoiChange) *NullableMoiChange {
	return &NullableMoiChange{value: val, isSet: true}
}

func (v NullableMoiChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoiChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
