/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// ResourcesNrNrm - struct for ResourcesNrNrm
type ResourcesNrNrm struct {
	BWPSetSingle                         *BWPSetSingle
	BeamSingle                           *BeamSingle
	BwpSingle                            *BwpSingle
	CCOFunctionSingle                    *CCOFunctionSingle
	CCOOvershootCoverageParametersSingle *CCOOvershootCoverageParametersSingle
	CCOPilotPollutionParametersSingle    *CCOPilotPollutionParametersSingle
	CCOWeakCoverageParametersSingle      *CCOWeakCoverageParametersSingle
	CESManagementFunctionSingle          *CESManagementFunctionSingle
	CPCIConfigurationFunctionSingle      *CPCIConfigurationFunctionSingle
	CommonBeamformingFunctionSingle      *CommonBeamformingFunctionSingle
	DANRManagementFunctionSingle         *DANRManagementFunctionSingle
	DESManagementFunctionSingle          *DESManagementFunctionSingle
	DLBOFunctionSingle                   *DLBOFunctionSingle
	DMROFunctionSingle                   *DMROFunctionSingle
	DPCIConfigurationFunctionSingle      *DPCIConfigurationFunctionSingle
	DRACHOptimizationFunctionSingle      *DRACHOptimizationFunctionSingle
	EPE1Single                           *EPE1Single
	EPF1CSingle                          *EPF1CSingle
	EPF1USingle                          *EPF1USingle
	EPNgCSingle                          *EPNgCSingle
	EPNgUSingle                          *EPNgUSingle
	EPS1USingle                          *EPS1USingle
	EPX2CSingle                          *EPX2CSingle
	EPX2USingle                          *EPX2USingle
	EPXnCSingle                          *EPXnCSingle
	EPXnUSingle                          *EPXnUSingle
	EUtranCellRelationSingle             *EUtranCellRelationSingle
	EUtranFreqRelationSingle             *EUtranFreqRelationSingle
	EUtranFrequencySingle                *EUtranFrequencySingle
	ExternalENBFunctionSingle            *ExternalENBFunctionSingle
	ExternalEUTranCellSingle             *ExternalEUTranCellSingle
	ExternalGnbCuCpFunctionSingle        *ExternalGnbCuCpFunctionSingle
	ExternalGnbCuUpFunctionSingle        *ExternalGnbCuUpFunctionSingle
	ExternalGnbDuFunctionSingle          *ExternalGnbDuFunctionSingle
	ExternalNrCellCuSingle               *ExternalNrCellCuSingle
	GnbCuCpFunctionSingle                *GnbCuCpFunctionSingle
	GnbCuUpFunctionSingle                *GnbCuUpFunctionSingle
	GnbDuFunctionSingle                  *GnbDuFunctionSingle
	ManagedElementSingle                 *ManagedElementSingle
	MnS                                  *MnS
	NRCellRelationSingle                 *NRCellRelationSingle
	NRFreqRelationSingle                 *NRFreqRelationSingle
	NRFrequencySingle                    *NRFrequencySingle
	NrCellCuSingle                       *NrCellCuSingle
	NrCellDuSingle                       *NrCellDuSingle
	NrOperatorCellDuSingle               *NrOperatorCellDuSingle
	NrSectorCarrierSingle                *NrSectorCarrierSingle
	OperatorDuSingle                     *OperatorDuSingle
	RRMPolicyRatioSingle                 *RRMPolicyRatioSingle
	RimRSGlobalSingle                    *RimRSGlobalSingle
	RimRSSetSingle                       *RimRSSetSingle
	SubNetworkSingle                     *SubNetworkSingle
}

// BWPSetSingleAsResourcesNrNrm is a convenience function that returns BWPSetSingle wrapped in ResourcesNrNrm
func BWPSetSingleAsResourcesNrNrm(v *BWPSetSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		BWPSetSingle: v,
	}
}

// BeamSingleAsResourcesNrNrm is a convenience function that returns BeamSingle wrapped in ResourcesNrNrm
func BeamSingleAsResourcesNrNrm(v *BeamSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		BeamSingle: v,
	}
}

// BwpSingleAsResourcesNrNrm is a convenience function that returns BwpSingle wrapped in ResourcesNrNrm
func BwpSingleAsResourcesNrNrm(v *BwpSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		BwpSingle: v,
	}
}

// CCOFunctionSingleAsResourcesNrNrm is a convenience function that returns CCOFunctionSingle wrapped in ResourcesNrNrm
func CCOFunctionSingleAsResourcesNrNrm(v *CCOFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		CCOFunctionSingle: v,
	}
}

// CCOOvershootCoverageParametersSingleAsResourcesNrNrm is a convenience function that returns CCOOvershootCoverageParametersSingle wrapped in ResourcesNrNrm
func CCOOvershootCoverageParametersSingleAsResourcesNrNrm(v *CCOOvershootCoverageParametersSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		CCOOvershootCoverageParametersSingle: v,
	}
}

// CCOPilotPollutionParametersSingleAsResourcesNrNrm is a convenience function that returns CCOPilotPollutionParametersSingle wrapped in ResourcesNrNrm
func CCOPilotPollutionParametersSingleAsResourcesNrNrm(v *CCOPilotPollutionParametersSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		CCOPilotPollutionParametersSingle: v,
	}
}

// CCOWeakCoverageParametersSingleAsResourcesNrNrm is a convenience function that returns CCOWeakCoverageParametersSingle wrapped in ResourcesNrNrm
func CCOWeakCoverageParametersSingleAsResourcesNrNrm(v *CCOWeakCoverageParametersSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		CCOWeakCoverageParametersSingle: v,
	}
}

// CESManagementFunctionSingleAsResourcesNrNrm is a convenience function that returns CESManagementFunctionSingle wrapped in ResourcesNrNrm
func CESManagementFunctionSingleAsResourcesNrNrm(v *CESManagementFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		CESManagementFunctionSingle: v,
	}
}

// CPCIConfigurationFunctionSingleAsResourcesNrNrm is a convenience function that returns CPCIConfigurationFunctionSingle wrapped in ResourcesNrNrm
func CPCIConfigurationFunctionSingleAsResourcesNrNrm(v *CPCIConfigurationFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		CPCIConfigurationFunctionSingle: v,
	}
}

// CommonBeamformingFunctionSingleAsResourcesNrNrm is a convenience function that returns CommonBeamformingFunctionSingle wrapped in ResourcesNrNrm
func CommonBeamformingFunctionSingleAsResourcesNrNrm(v *CommonBeamformingFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		CommonBeamformingFunctionSingle: v,
	}
}

// DANRManagementFunctionSingleAsResourcesNrNrm is a convenience function that returns DANRManagementFunctionSingle wrapped in ResourcesNrNrm
func DANRManagementFunctionSingleAsResourcesNrNrm(v *DANRManagementFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		DANRManagementFunctionSingle: v,
	}
}

// DESManagementFunctionSingleAsResourcesNrNrm is a convenience function that returns DESManagementFunctionSingle wrapped in ResourcesNrNrm
func DESManagementFunctionSingleAsResourcesNrNrm(v *DESManagementFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		DESManagementFunctionSingle: v,
	}
}

// DLBOFunctionSingleAsResourcesNrNrm is a convenience function that returns DLBOFunctionSingle wrapped in ResourcesNrNrm
func DLBOFunctionSingleAsResourcesNrNrm(v *DLBOFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		DLBOFunctionSingle: v,
	}
}

// DMROFunctionSingleAsResourcesNrNrm is a convenience function that returns DMROFunctionSingle wrapped in ResourcesNrNrm
func DMROFunctionSingleAsResourcesNrNrm(v *DMROFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		DMROFunctionSingle: v,
	}
}

// DPCIConfigurationFunctionSingleAsResourcesNrNrm is a convenience function that returns DPCIConfigurationFunctionSingle wrapped in ResourcesNrNrm
func DPCIConfigurationFunctionSingleAsResourcesNrNrm(v *DPCIConfigurationFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		DPCIConfigurationFunctionSingle: v,
	}
}

// DRACHOptimizationFunctionSingleAsResourcesNrNrm is a convenience function that returns DRACHOptimizationFunctionSingle wrapped in ResourcesNrNrm
func DRACHOptimizationFunctionSingleAsResourcesNrNrm(v *DRACHOptimizationFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		DRACHOptimizationFunctionSingle: v,
	}
}

// EPE1SingleAsResourcesNrNrm is a convenience function that returns EPE1Single wrapped in ResourcesNrNrm
func EPE1SingleAsResourcesNrNrm(v *EPE1Single) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPE1Single: v,
	}
}

// EPF1CSingleAsResourcesNrNrm is a convenience function that returns EPF1CSingle wrapped in ResourcesNrNrm
func EPF1CSingleAsResourcesNrNrm(v *EPF1CSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPF1CSingle: v,
	}
}

// EPF1USingleAsResourcesNrNrm is a convenience function that returns EPF1USingle wrapped in ResourcesNrNrm
func EPF1USingleAsResourcesNrNrm(v *EPF1USingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPF1USingle: v,
	}
}

// EPNgCSingleAsResourcesNrNrm is a convenience function that returns EPNgCSingle wrapped in ResourcesNrNrm
func EPNgCSingleAsResourcesNrNrm(v *EPNgCSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPNgCSingle: v,
	}
}

// EPNgUSingleAsResourcesNrNrm is a convenience function that returns EPNgUSingle wrapped in ResourcesNrNrm
func EPNgUSingleAsResourcesNrNrm(v *EPNgUSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPNgUSingle: v,
	}
}

// EPS1USingleAsResourcesNrNrm is a convenience function that returns EPS1USingle wrapped in ResourcesNrNrm
func EPS1USingleAsResourcesNrNrm(v *EPS1USingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPS1USingle: v,
	}
}

// EPX2CSingleAsResourcesNrNrm is a convenience function that returns EPX2CSingle wrapped in ResourcesNrNrm
func EPX2CSingleAsResourcesNrNrm(v *EPX2CSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPX2CSingle: v,
	}
}

// EPX2USingleAsResourcesNrNrm is a convenience function that returns EPX2USingle wrapped in ResourcesNrNrm
func EPX2USingleAsResourcesNrNrm(v *EPX2USingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPX2USingle: v,
	}
}

// EPXnCSingleAsResourcesNrNrm is a convenience function that returns EPXnCSingle wrapped in ResourcesNrNrm
func EPXnCSingleAsResourcesNrNrm(v *EPXnCSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPXnCSingle: v,
	}
}

// EPXnUSingleAsResourcesNrNrm is a convenience function that returns EPXnUSingle wrapped in ResourcesNrNrm
func EPXnUSingleAsResourcesNrNrm(v *EPXnUSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EPXnUSingle: v,
	}
}

// EUtranCellRelationSingleAsResourcesNrNrm is a convenience function that returns EUtranCellRelationSingle wrapped in ResourcesNrNrm
func EUtranCellRelationSingleAsResourcesNrNrm(v *EUtranCellRelationSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EUtranCellRelationSingle: v,
	}
}

// EUtranFreqRelationSingleAsResourcesNrNrm is a convenience function that returns EUtranFreqRelationSingle wrapped in ResourcesNrNrm
func EUtranFreqRelationSingleAsResourcesNrNrm(v *EUtranFreqRelationSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EUtranFreqRelationSingle: v,
	}
}

// EUtranFrequencySingleAsResourcesNrNrm is a convenience function that returns EUtranFrequencySingle wrapped in ResourcesNrNrm
func EUtranFrequencySingleAsResourcesNrNrm(v *EUtranFrequencySingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		EUtranFrequencySingle: v,
	}
}

// ExternalENBFunctionSingleAsResourcesNrNrm is a convenience function that returns ExternalENBFunctionSingle wrapped in ResourcesNrNrm
func ExternalENBFunctionSingleAsResourcesNrNrm(v *ExternalENBFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		ExternalENBFunctionSingle: v,
	}
}

// ExternalEUTranCellSingleAsResourcesNrNrm is a convenience function that returns ExternalEUTranCellSingle wrapped in ResourcesNrNrm
func ExternalEUTranCellSingleAsResourcesNrNrm(v *ExternalEUTranCellSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		ExternalEUTranCellSingle: v,
	}
}

// ExternalGnbCuCpFunctionSingleAsResourcesNrNrm is a convenience function that returns ExternalGnbCuCpFunctionSingle wrapped in ResourcesNrNrm
func ExternalGnbCuCpFunctionSingleAsResourcesNrNrm(v *ExternalGnbCuCpFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		ExternalGnbCuCpFunctionSingle: v,
	}
}

// ExternalGnbCuUpFunctionSingleAsResourcesNrNrm is a convenience function that returns ExternalGnbCuUpFunctionSingle wrapped in ResourcesNrNrm
func ExternalGnbCuUpFunctionSingleAsResourcesNrNrm(v *ExternalGnbCuUpFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		ExternalGnbCuUpFunctionSingle: v,
	}
}

// ExternalGnbDuFunctionSingleAsResourcesNrNrm is a convenience function that returns ExternalGnbDuFunctionSingle wrapped in ResourcesNrNrm
func ExternalGnbDuFunctionSingleAsResourcesNrNrm(v *ExternalGnbDuFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		ExternalGnbDuFunctionSingle: v,
	}
}

// ExternalNrCellCuSingleAsResourcesNrNrm is a convenience function that returns ExternalNrCellCuSingle wrapped in ResourcesNrNrm
func ExternalNrCellCuSingleAsResourcesNrNrm(v *ExternalNrCellCuSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		ExternalNrCellCuSingle: v,
	}
}

// GnbCuCpFunctionSingleAsResourcesNrNrm is a convenience function that returns GnbCuCpFunctionSingle wrapped in ResourcesNrNrm
func GnbCuCpFunctionSingleAsResourcesNrNrm(v *GnbCuCpFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		GnbCuCpFunctionSingle: v,
	}
}

// GnbCuUpFunctionSingleAsResourcesNrNrm is a convenience function that returns GnbCuUpFunctionSingle wrapped in ResourcesNrNrm
func GnbCuUpFunctionSingleAsResourcesNrNrm(v *GnbCuUpFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		GnbCuUpFunctionSingle: v,
	}
}

// GnbDuFunctionSingleAsResourcesNrNrm is a convenience function that returns GnbDuFunctionSingle wrapped in ResourcesNrNrm
func GnbDuFunctionSingleAsResourcesNrNrm(v *GnbDuFunctionSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		GnbDuFunctionSingle: v,
	}
}

// ManagedElementSingleAsResourcesNrNrm is a convenience function that returns ManagedElementSingle wrapped in ResourcesNrNrm
func ManagedElementSingleAsResourcesNrNrm(v *ManagedElementSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		ManagedElementSingle: v,
	}
}

// MnSAsResourcesNrNrm is a convenience function that returns MnS wrapped in ResourcesNrNrm
func MnSAsResourcesNrNrm(v *MnS) ResourcesNrNrm {
	return ResourcesNrNrm{
		MnS: v,
	}
}

// NRCellRelationSingleAsResourcesNrNrm is a convenience function that returns NRCellRelationSingle wrapped in ResourcesNrNrm
func NRCellRelationSingleAsResourcesNrNrm(v *NRCellRelationSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		NRCellRelationSingle: v,
	}
}

// NRFreqRelationSingleAsResourcesNrNrm is a convenience function that returns NRFreqRelationSingle wrapped in ResourcesNrNrm
func NRFreqRelationSingleAsResourcesNrNrm(v *NRFreqRelationSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		NRFreqRelationSingle: v,
	}
}

// NRFrequencySingleAsResourcesNrNrm is a convenience function that returns NRFrequencySingle wrapped in ResourcesNrNrm
func NRFrequencySingleAsResourcesNrNrm(v *NRFrequencySingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		NRFrequencySingle: v,
	}
}

// NrCellCuSingleAsResourcesNrNrm is a convenience function that returns NrCellCuSingle wrapped in ResourcesNrNrm
func NrCellCuSingleAsResourcesNrNrm(v *NrCellCuSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		NrCellCuSingle: v,
	}
}

// NrCellDuSingleAsResourcesNrNrm is a convenience function that returns NrCellDuSingle wrapped in ResourcesNrNrm
func NrCellDuSingleAsResourcesNrNrm(v *NrCellDuSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		NrCellDuSingle: v,
	}
}

// NrOperatorCellDuSingleAsResourcesNrNrm is a convenience function that returns NrOperatorCellDuSingle wrapped in ResourcesNrNrm
func NrOperatorCellDuSingleAsResourcesNrNrm(v *NrOperatorCellDuSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		NrOperatorCellDuSingle: v,
	}
}

// NrSectorCarrierSingleAsResourcesNrNrm is a convenience function that returns NrSectorCarrierSingle wrapped in ResourcesNrNrm
func NrSectorCarrierSingleAsResourcesNrNrm(v *NrSectorCarrierSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		NrSectorCarrierSingle: v,
	}
}

// OperatorDuSingleAsResourcesNrNrm is a convenience function that returns OperatorDuSingle wrapped in ResourcesNrNrm
func OperatorDuSingleAsResourcesNrNrm(v *OperatorDuSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		OperatorDuSingle: v,
	}
}

// RRMPolicyRatioSingleAsResourcesNrNrm is a convenience function that returns RRMPolicyRatioSingle wrapped in ResourcesNrNrm
func RRMPolicyRatioSingleAsResourcesNrNrm(v *RRMPolicyRatioSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		RRMPolicyRatioSingle: v,
	}
}

// RimRSGlobalSingleAsResourcesNrNrm is a convenience function that returns RimRSGlobalSingle wrapped in ResourcesNrNrm
func RimRSGlobalSingleAsResourcesNrNrm(v *RimRSGlobalSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		RimRSGlobalSingle: v,
	}
}

// RimRSSetSingleAsResourcesNrNrm is a convenience function that returns RimRSSetSingle wrapped in ResourcesNrNrm
func RimRSSetSingleAsResourcesNrNrm(v *RimRSSetSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		RimRSSetSingle: v,
	}
}

// SubNetworkSingleAsResourcesNrNrm is a convenience function that returns SubNetworkSingle wrapped in ResourcesNrNrm
func SubNetworkSingleAsResourcesNrNrm(v *SubNetworkSingle) ResourcesNrNrm {
	return ResourcesNrNrm{
		SubNetworkSingle: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResourcesNrNrm) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BWPSetSingle
	err = newStrictDecoder(data).Decode(&dst.BWPSetSingle)
	if err == nil {
		jsonBWPSetSingle, _ := json.Marshal(dst.BWPSetSingle)
		if string(jsonBWPSetSingle) == "{}" { // empty struct
			dst.BWPSetSingle = nil
		} else {
			match++
		}
	} else {
		dst.BWPSetSingle = nil
	}

	// try to unmarshal data into BeamSingle
	err = newStrictDecoder(data).Decode(&dst.BeamSingle)
	if err == nil {
		jsonBeamSingle, _ := json.Marshal(dst.BeamSingle)
		if string(jsonBeamSingle) == "{}" { // empty struct
			dst.BeamSingle = nil
		} else {
			match++
		}
	} else {
		dst.BeamSingle = nil
	}

	// try to unmarshal data into BwpSingle
	err = newStrictDecoder(data).Decode(&dst.BwpSingle)
	if err == nil {
		jsonBwpSingle, _ := json.Marshal(dst.BwpSingle)
		if string(jsonBwpSingle) == "{}" { // empty struct
			dst.BwpSingle = nil
		} else {
			match++
		}
	} else {
		dst.BwpSingle = nil
	}

	// try to unmarshal data into CCOFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.CCOFunctionSingle)
	if err == nil {
		jsonCCOFunctionSingle, _ := json.Marshal(dst.CCOFunctionSingle)
		if string(jsonCCOFunctionSingle) == "{}" { // empty struct
			dst.CCOFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.CCOFunctionSingle = nil
	}

	// try to unmarshal data into CCOOvershootCoverageParametersSingle
	err = newStrictDecoder(data).Decode(&dst.CCOOvershootCoverageParametersSingle)
	if err == nil {
		jsonCCOOvershootCoverageParametersSingle, _ := json.Marshal(dst.CCOOvershootCoverageParametersSingle)
		if string(jsonCCOOvershootCoverageParametersSingle) == "{}" { // empty struct
			dst.CCOOvershootCoverageParametersSingle = nil
		} else {
			match++
		}
	} else {
		dst.CCOOvershootCoverageParametersSingle = nil
	}

	// try to unmarshal data into CCOPilotPollutionParametersSingle
	err = newStrictDecoder(data).Decode(&dst.CCOPilotPollutionParametersSingle)
	if err == nil {
		jsonCCOPilotPollutionParametersSingle, _ := json.Marshal(dst.CCOPilotPollutionParametersSingle)
		if string(jsonCCOPilotPollutionParametersSingle) == "{}" { // empty struct
			dst.CCOPilotPollutionParametersSingle = nil
		} else {
			match++
		}
	} else {
		dst.CCOPilotPollutionParametersSingle = nil
	}

	// try to unmarshal data into CCOWeakCoverageParametersSingle
	err = newStrictDecoder(data).Decode(&dst.CCOWeakCoverageParametersSingle)
	if err == nil {
		jsonCCOWeakCoverageParametersSingle, _ := json.Marshal(dst.CCOWeakCoverageParametersSingle)
		if string(jsonCCOWeakCoverageParametersSingle) == "{}" { // empty struct
			dst.CCOWeakCoverageParametersSingle = nil
		} else {
			match++
		}
	} else {
		dst.CCOWeakCoverageParametersSingle = nil
	}

	// try to unmarshal data into CESManagementFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.CESManagementFunctionSingle)
	if err == nil {
		jsonCESManagementFunctionSingle, _ := json.Marshal(dst.CESManagementFunctionSingle)
		if string(jsonCESManagementFunctionSingle) == "{}" { // empty struct
			dst.CESManagementFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.CESManagementFunctionSingle = nil
	}

	// try to unmarshal data into CPCIConfigurationFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.CPCIConfigurationFunctionSingle)
	if err == nil {
		jsonCPCIConfigurationFunctionSingle, _ := json.Marshal(dst.CPCIConfigurationFunctionSingle)
		if string(jsonCPCIConfigurationFunctionSingle) == "{}" { // empty struct
			dst.CPCIConfigurationFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.CPCIConfigurationFunctionSingle = nil
	}

	// try to unmarshal data into CommonBeamformingFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.CommonBeamformingFunctionSingle)
	if err == nil {
		jsonCommonBeamformingFunctionSingle, _ := json.Marshal(dst.CommonBeamformingFunctionSingle)
		if string(jsonCommonBeamformingFunctionSingle) == "{}" { // empty struct
			dst.CommonBeamformingFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.CommonBeamformingFunctionSingle = nil
	}

	// try to unmarshal data into DANRManagementFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.DANRManagementFunctionSingle)
	if err == nil {
		jsonDANRManagementFunctionSingle, _ := json.Marshal(dst.DANRManagementFunctionSingle)
		if string(jsonDANRManagementFunctionSingle) == "{}" { // empty struct
			dst.DANRManagementFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.DANRManagementFunctionSingle = nil
	}

	// try to unmarshal data into DESManagementFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.DESManagementFunctionSingle)
	if err == nil {
		jsonDESManagementFunctionSingle, _ := json.Marshal(dst.DESManagementFunctionSingle)
		if string(jsonDESManagementFunctionSingle) == "{}" { // empty struct
			dst.DESManagementFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.DESManagementFunctionSingle = nil
	}

	// try to unmarshal data into DLBOFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.DLBOFunctionSingle)
	if err == nil {
		jsonDLBOFunctionSingle, _ := json.Marshal(dst.DLBOFunctionSingle)
		if string(jsonDLBOFunctionSingle) == "{}" { // empty struct
			dst.DLBOFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.DLBOFunctionSingle = nil
	}

	// try to unmarshal data into DMROFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.DMROFunctionSingle)
	if err == nil {
		jsonDMROFunctionSingle, _ := json.Marshal(dst.DMROFunctionSingle)
		if string(jsonDMROFunctionSingle) == "{}" { // empty struct
			dst.DMROFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.DMROFunctionSingle = nil
	}

	// try to unmarshal data into DPCIConfigurationFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.DPCIConfigurationFunctionSingle)
	if err == nil {
		jsonDPCIConfigurationFunctionSingle, _ := json.Marshal(dst.DPCIConfigurationFunctionSingle)
		if string(jsonDPCIConfigurationFunctionSingle) == "{}" { // empty struct
			dst.DPCIConfigurationFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.DPCIConfigurationFunctionSingle = nil
	}

	// try to unmarshal data into DRACHOptimizationFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.DRACHOptimizationFunctionSingle)
	if err == nil {
		jsonDRACHOptimizationFunctionSingle, _ := json.Marshal(dst.DRACHOptimizationFunctionSingle)
		if string(jsonDRACHOptimizationFunctionSingle) == "{}" { // empty struct
			dst.DRACHOptimizationFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.DRACHOptimizationFunctionSingle = nil
	}

	// try to unmarshal data into EPE1Single
	err = newStrictDecoder(data).Decode(&dst.EPE1Single)
	if err == nil {
		jsonEPE1Single, _ := json.Marshal(dst.EPE1Single)
		if string(jsonEPE1Single) == "{}" { // empty struct
			dst.EPE1Single = nil
		} else {
			match++
		}
	} else {
		dst.EPE1Single = nil
	}

	// try to unmarshal data into EPF1CSingle
	err = newStrictDecoder(data).Decode(&dst.EPF1CSingle)
	if err == nil {
		jsonEPF1CSingle, _ := json.Marshal(dst.EPF1CSingle)
		if string(jsonEPF1CSingle) == "{}" { // empty struct
			dst.EPF1CSingle = nil
		} else {
			match++
		}
	} else {
		dst.EPF1CSingle = nil
	}

	// try to unmarshal data into EPF1USingle
	err = newStrictDecoder(data).Decode(&dst.EPF1USingle)
	if err == nil {
		jsonEPF1USingle, _ := json.Marshal(dst.EPF1USingle)
		if string(jsonEPF1USingle) == "{}" { // empty struct
			dst.EPF1USingle = nil
		} else {
			match++
		}
	} else {
		dst.EPF1USingle = nil
	}

	// try to unmarshal data into EPNgCSingle
	err = newStrictDecoder(data).Decode(&dst.EPNgCSingle)
	if err == nil {
		jsonEPNgCSingle, _ := json.Marshal(dst.EPNgCSingle)
		if string(jsonEPNgCSingle) == "{}" { // empty struct
			dst.EPNgCSingle = nil
		} else {
			match++
		}
	} else {
		dst.EPNgCSingle = nil
	}

	// try to unmarshal data into EPNgUSingle
	err = newStrictDecoder(data).Decode(&dst.EPNgUSingle)
	if err == nil {
		jsonEPNgUSingle, _ := json.Marshal(dst.EPNgUSingle)
		if string(jsonEPNgUSingle) == "{}" { // empty struct
			dst.EPNgUSingle = nil
		} else {
			match++
		}
	} else {
		dst.EPNgUSingle = nil
	}

	// try to unmarshal data into EPS1USingle
	err = newStrictDecoder(data).Decode(&dst.EPS1USingle)
	if err == nil {
		jsonEPS1USingle, _ := json.Marshal(dst.EPS1USingle)
		if string(jsonEPS1USingle) == "{}" { // empty struct
			dst.EPS1USingle = nil
		} else {
			match++
		}
	} else {
		dst.EPS1USingle = nil
	}

	// try to unmarshal data into EPX2CSingle
	err = newStrictDecoder(data).Decode(&dst.EPX2CSingle)
	if err == nil {
		jsonEPX2CSingle, _ := json.Marshal(dst.EPX2CSingle)
		if string(jsonEPX2CSingle) == "{}" { // empty struct
			dst.EPX2CSingle = nil
		} else {
			match++
		}
	} else {
		dst.EPX2CSingle = nil
	}

	// try to unmarshal data into EPX2USingle
	err = newStrictDecoder(data).Decode(&dst.EPX2USingle)
	if err == nil {
		jsonEPX2USingle, _ := json.Marshal(dst.EPX2USingle)
		if string(jsonEPX2USingle) == "{}" { // empty struct
			dst.EPX2USingle = nil
		} else {
			match++
		}
	} else {
		dst.EPX2USingle = nil
	}

	// try to unmarshal data into EPXnCSingle
	err = newStrictDecoder(data).Decode(&dst.EPXnCSingle)
	if err == nil {
		jsonEPXnCSingle, _ := json.Marshal(dst.EPXnCSingle)
		if string(jsonEPXnCSingle) == "{}" { // empty struct
			dst.EPXnCSingle = nil
		} else {
			match++
		}
	} else {
		dst.EPXnCSingle = nil
	}

	// try to unmarshal data into EPXnUSingle
	err = newStrictDecoder(data).Decode(&dst.EPXnUSingle)
	if err == nil {
		jsonEPXnUSingle, _ := json.Marshal(dst.EPXnUSingle)
		if string(jsonEPXnUSingle) == "{}" { // empty struct
			dst.EPXnUSingle = nil
		} else {
			match++
		}
	} else {
		dst.EPXnUSingle = nil
	}

	// try to unmarshal data into EUtranCellRelationSingle
	err = newStrictDecoder(data).Decode(&dst.EUtranCellRelationSingle)
	if err == nil {
		jsonEUtranCellRelationSingle, _ := json.Marshal(dst.EUtranCellRelationSingle)
		if string(jsonEUtranCellRelationSingle) == "{}" { // empty struct
			dst.EUtranCellRelationSingle = nil
		} else {
			match++
		}
	} else {
		dst.EUtranCellRelationSingle = nil
	}

	// try to unmarshal data into EUtranFreqRelationSingle
	err = newStrictDecoder(data).Decode(&dst.EUtranFreqRelationSingle)
	if err == nil {
		jsonEUtranFreqRelationSingle, _ := json.Marshal(dst.EUtranFreqRelationSingle)
		if string(jsonEUtranFreqRelationSingle) == "{}" { // empty struct
			dst.EUtranFreqRelationSingle = nil
		} else {
			match++
		}
	} else {
		dst.EUtranFreqRelationSingle = nil
	}

	// try to unmarshal data into EUtranFrequencySingle
	err = newStrictDecoder(data).Decode(&dst.EUtranFrequencySingle)
	if err == nil {
		jsonEUtranFrequencySingle, _ := json.Marshal(dst.EUtranFrequencySingle)
		if string(jsonEUtranFrequencySingle) == "{}" { // empty struct
			dst.EUtranFrequencySingle = nil
		} else {
			match++
		}
	} else {
		dst.EUtranFrequencySingle = nil
	}

	// try to unmarshal data into ExternalENBFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.ExternalENBFunctionSingle)
	if err == nil {
		jsonExternalENBFunctionSingle, _ := json.Marshal(dst.ExternalENBFunctionSingle)
		if string(jsonExternalENBFunctionSingle) == "{}" { // empty struct
			dst.ExternalENBFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.ExternalENBFunctionSingle = nil
	}

	// try to unmarshal data into ExternalEUTranCellSingle
	err = newStrictDecoder(data).Decode(&dst.ExternalEUTranCellSingle)
	if err == nil {
		jsonExternalEUTranCellSingle, _ := json.Marshal(dst.ExternalEUTranCellSingle)
		if string(jsonExternalEUTranCellSingle) == "{}" { // empty struct
			dst.ExternalEUTranCellSingle = nil
		} else {
			match++
		}
	} else {
		dst.ExternalEUTranCellSingle = nil
	}

	// try to unmarshal data into ExternalGnbCuCpFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.ExternalGnbCuCpFunctionSingle)
	if err == nil {
		jsonExternalGnbCuCpFunctionSingle, _ := json.Marshal(dst.ExternalGnbCuCpFunctionSingle)
		if string(jsonExternalGnbCuCpFunctionSingle) == "{}" { // empty struct
			dst.ExternalGnbCuCpFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.ExternalGnbCuCpFunctionSingle = nil
	}

	// try to unmarshal data into ExternalGnbCuUpFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.ExternalGnbCuUpFunctionSingle)
	if err == nil {
		jsonExternalGnbCuUpFunctionSingle, _ := json.Marshal(dst.ExternalGnbCuUpFunctionSingle)
		if string(jsonExternalGnbCuUpFunctionSingle) == "{}" { // empty struct
			dst.ExternalGnbCuUpFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.ExternalGnbCuUpFunctionSingle = nil
	}

	// try to unmarshal data into ExternalGnbDuFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.ExternalGnbDuFunctionSingle)
	if err == nil {
		jsonExternalGnbDuFunctionSingle, _ := json.Marshal(dst.ExternalGnbDuFunctionSingle)
		if string(jsonExternalGnbDuFunctionSingle) == "{}" { // empty struct
			dst.ExternalGnbDuFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.ExternalGnbDuFunctionSingle = nil
	}

	// try to unmarshal data into ExternalNrCellCuSingle
	err = newStrictDecoder(data).Decode(&dst.ExternalNrCellCuSingle)
	if err == nil {
		jsonExternalNrCellCuSingle, _ := json.Marshal(dst.ExternalNrCellCuSingle)
		if string(jsonExternalNrCellCuSingle) == "{}" { // empty struct
			dst.ExternalNrCellCuSingle = nil
		} else {
			match++
		}
	} else {
		dst.ExternalNrCellCuSingle = nil
	}

	// try to unmarshal data into GnbCuCpFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.GnbCuCpFunctionSingle)
	if err == nil {
		jsonGnbCuCpFunctionSingle, _ := json.Marshal(dst.GnbCuCpFunctionSingle)
		if string(jsonGnbCuCpFunctionSingle) == "{}" { // empty struct
			dst.GnbCuCpFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.GnbCuCpFunctionSingle = nil
	}

	// try to unmarshal data into GnbCuUpFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.GnbCuUpFunctionSingle)
	if err == nil {
		jsonGnbCuUpFunctionSingle, _ := json.Marshal(dst.GnbCuUpFunctionSingle)
		if string(jsonGnbCuUpFunctionSingle) == "{}" { // empty struct
			dst.GnbCuUpFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.GnbCuUpFunctionSingle = nil
	}

	// try to unmarshal data into GnbDuFunctionSingle
	err = newStrictDecoder(data).Decode(&dst.GnbDuFunctionSingle)
	if err == nil {
		jsonGnbDuFunctionSingle, _ := json.Marshal(dst.GnbDuFunctionSingle)
		if string(jsonGnbDuFunctionSingle) == "{}" { // empty struct
			dst.GnbDuFunctionSingle = nil
		} else {
			match++
		}
	} else {
		dst.GnbDuFunctionSingle = nil
	}

	// try to unmarshal data into ManagedElementSingle
	err = newStrictDecoder(data).Decode(&dst.ManagedElementSingle)
	if err == nil {
		jsonManagedElementSingle, _ := json.Marshal(dst.ManagedElementSingle)
		if string(jsonManagedElementSingle) == "{}" { // empty struct
			dst.ManagedElementSingle = nil
		} else {
			match++
		}
	} else {
		dst.ManagedElementSingle = nil
	}

	// try to unmarshal data into MnS
	err = newStrictDecoder(data).Decode(&dst.MnS)
	if err == nil {
		jsonMnS, _ := json.Marshal(dst.MnS)
		if string(jsonMnS) == "{}" { // empty struct
			dst.MnS = nil
		} else {
			match++
		}
	} else {
		dst.MnS = nil
	}

	// try to unmarshal data into NRCellRelationSingle
	err = newStrictDecoder(data).Decode(&dst.NRCellRelationSingle)
	if err == nil {
		jsonNRCellRelationSingle, _ := json.Marshal(dst.NRCellRelationSingle)
		if string(jsonNRCellRelationSingle) == "{}" { // empty struct
			dst.NRCellRelationSingle = nil
		} else {
			match++
		}
	} else {
		dst.NRCellRelationSingle = nil
	}

	// try to unmarshal data into NRFreqRelationSingle
	err = newStrictDecoder(data).Decode(&dst.NRFreqRelationSingle)
	if err == nil {
		jsonNRFreqRelationSingle, _ := json.Marshal(dst.NRFreqRelationSingle)
		if string(jsonNRFreqRelationSingle) == "{}" { // empty struct
			dst.NRFreqRelationSingle = nil
		} else {
			match++
		}
	} else {
		dst.NRFreqRelationSingle = nil
	}

	// try to unmarshal data into NRFrequencySingle
	err = newStrictDecoder(data).Decode(&dst.NRFrequencySingle)
	if err == nil {
		jsonNRFrequencySingle, _ := json.Marshal(dst.NRFrequencySingle)
		if string(jsonNRFrequencySingle) == "{}" { // empty struct
			dst.NRFrequencySingle = nil
		} else {
			match++
		}
	} else {
		dst.NRFrequencySingle = nil
	}

	// try to unmarshal data into NrCellCuSingle
	err = newStrictDecoder(data).Decode(&dst.NrCellCuSingle)
	if err == nil {
		jsonNrCellCuSingle, _ := json.Marshal(dst.NrCellCuSingle)
		if string(jsonNrCellCuSingle) == "{}" { // empty struct
			dst.NrCellCuSingle = nil
		} else {
			match++
		}
	} else {
		dst.NrCellCuSingle = nil
	}

	// try to unmarshal data into NrCellDuSingle
	err = newStrictDecoder(data).Decode(&dst.NrCellDuSingle)
	if err == nil {
		jsonNrCellDuSingle, _ := json.Marshal(dst.NrCellDuSingle)
		if string(jsonNrCellDuSingle) == "{}" { // empty struct
			dst.NrCellDuSingle = nil
		} else {
			match++
		}
	} else {
		dst.NrCellDuSingle = nil
	}

	// try to unmarshal data into NrOperatorCellDuSingle
	err = newStrictDecoder(data).Decode(&dst.NrOperatorCellDuSingle)
	if err == nil {
		jsonNrOperatorCellDuSingle, _ := json.Marshal(dst.NrOperatorCellDuSingle)
		if string(jsonNrOperatorCellDuSingle) == "{}" { // empty struct
			dst.NrOperatorCellDuSingle = nil
		} else {
			match++
		}
	} else {
		dst.NrOperatorCellDuSingle = nil
	}

	// try to unmarshal data into NrSectorCarrierSingle
	err = newStrictDecoder(data).Decode(&dst.NrSectorCarrierSingle)
	if err == nil {
		jsonNrSectorCarrierSingle, _ := json.Marshal(dst.NrSectorCarrierSingle)
		if string(jsonNrSectorCarrierSingle) == "{}" { // empty struct
			dst.NrSectorCarrierSingle = nil
		} else {
			match++
		}
	} else {
		dst.NrSectorCarrierSingle = nil
	}

	// try to unmarshal data into OperatorDuSingle
	err = newStrictDecoder(data).Decode(&dst.OperatorDuSingle)
	if err == nil {
		jsonOperatorDuSingle, _ := json.Marshal(dst.OperatorDuSingle)
		if string(jsonOperatorDuSingle) == "{}" { // empty struct
			dst.OperatorDuSingle = nil
		} else {
			match++
		}
	} else {
		dst.OperatorDuSingle = nil
	}

	// try to unmarshal data into RRMPolicyRatioSingle
	err = newStrictDecoder(data).Decode(&dst.RRMPolicyRatioSingle)
	if err == nil {
		jsonRRMPolicyRatioSingle, _ := json.Marshal(dst.RRMPolicyRatioSingle)
		if string(jsonRRMPolicyRatioSingle) == "{}" { // empty struct
			dst.RRMPolicyRatioSingle = nil
		} else {
			match++
		}
	} else {
		dst.RRMPolicyRatioSingle = nil
	}

	// try to unmarshal data into RimRSGlobalSingle
	err = newStrictDecoder(data).Decode(&dst.RimRSGlobalSingle)
	if err == nil {
		jsonRimRSGlobalSingle, _ := json.Marshal(dst.RimRSGlobalSingle)
		if string(jsonRimRSGlobalSingle) == "{}" { // empty struct
			dst.RimRSGlobalSingle = nil
		} else {
			match++
		}
	} else {
		dst.RimRSGlobalSingle = nil
	}

	// try to unmarshal data into RimRSSetSingle
	err = newStrictDecoder(data).Decode(&dst.RimRSSetSingle)
	if err == nil {
		jsonRimRSSetSingle, _ := json.Marshal(dst.RimRSSetSingle)
		if string(jsonRimRSSetSingle) == "{}" { // empty struct
			dst.RimRSSetSingle = nil
		} else {
			match++
		}
	} else {
		dst.RimRSSetSingle = nil
	}

	// try to unmarshal data into SubNetworkSingle
	err = newStrictDecoder(data).Decode(&dst.SubNetworkSingle)
	if err == nil {
		jsonSubNetworkSingle, _ := json.Marshal(dst.SubNetworkSingle)
		if string(jsonSubNetworkSingle) == "{}" { // empty struct
			dst.SubNetworkSingle = nil
		} else {
			match++
		}
	} else {
		dst.SubNetworkSingle = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BWPSetSingle = nil
		dst.BeamSingle = nil
		dst.BwpSingle = nil
		dst.CCOFunctionSingle = nil
		dst.CCOOvershootCoverageParametersSingle = nil
		dst.CCOPilotPollutionParametersSingle = nil
		dst.CCOWeakCoverageParametersSingle = nil
		dst.CESManagementFunctionSingle = nil
		dst.CPCIConfigurationFunctionSingle = nil
		dst.CommonBeamformingFunctionSingle = nil
		dst.DANRManagementFunctionSingle = nil
		dst.DESManagementFunctionSingle = nil
		dst.DLBOFunctionSingle = nil
		dst.DMROFunctionSingle = nil
		dst.DPCIConfigurationFunctionSingle = nil
		dst.DRACHOptimizationFunctionSingle = nil
		dst.EPE1Single = nil
		dst.EPF1CSingle = nil
		dst.EPF1USingle = nil
		dst.EPNgCSingle = nil
		dst.EPNgUSingle = nil
		dst.EPS1USingle = nil
		dst.EPX2CSingle = nil
		dst.EPX2USingle = nil
		dst.EPXnCSingle = nil
		dst.EPXnUSingle = nil
		dst.EUtranCellRelationSingle = nil
		dst.EUtranFreqRelationSingle = nil
		dst.EUtranFrequencySingle = nil
		dst.ExternalENBFunctionSingle = nil
		dst.ExternalEUTranCellSingle = nil
		dst.ExternalGnbCuCpFunctionSingle = nil
		dst.ExternalGnbCuUpFunctionSingle = nil
		dst.ExternalGnbDuFunctionSingle = nil
		dst.ExternalNrCellCuSingle = nil
		dst.GnbCuCpFunctionSingle = nil
		dst.GnbCuUpFunctionSingle = nil
		dst.GnbDuFunctionSingle = nil
		dst.ManagedElementSingle = nil
		dst.MnS = nil
		dst.NRCellRelationSingle = nil
		dst.NRFreqRelationSingle = nil
		dst.NRFrequencySingle = nil
		dst.NrCellCuSingle = nil
		dst.NrCellDuSingle = nil
		dst.NrOperatorCellDuSingle = nil
		dst.NrSectorCarrierSingle = nil
		dst.OperatorDuSingle = nil
		dst.RRMPolicyRatioSingle = nil
		dst.RimRSGlobalSingle = nil
		dst.RimRSSetSingle = nil
		dst.SubNetworkSingle = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResourcesNrNrm)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResourcesNrNrm)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResourcesNrNrm) MarshalJSON() ([]byte, error) {
	if src.BWPSetSingle != nil {
		return json.Marshal(&src.BWPSetSingle)
	}

	if src.BeamSingle != nil {
		return json.Marshal(&src.BeamSingle)
	}

	if src.BwpSingle != nil {
		return json.Marshal(&src.BwpSingle)
	}

	if src.CCOFunctionSingle != nil {
		return json.Marshal(&src.CCOFunctionSingle)
	}

	if src.CCOOvershootCoverageParametersSingle != nil {
		return json.Marshal(&src.CCOOvershootCoverageParametersSingle)
	}

	if src.CCOPilotPollutionParametersSingle != nil {
		return json.Marshal(&src.CCOPilotPollutionParametersSingle)
	}

	if src.CCOWeakCoverageParametersSingle != nil {
		return json.Marshal(&src.CCOWeakCoverageParametersSingle)
	}

	if src.CESManagementFunctionSingle != nil {
		return json.Marshal(&src.CESManagementFunctionSingle)
	}

	if src.CPCIConfigurationFunctionSingle != nil {
		return json.Marshal(&src.CPCIConfigurationFunctionSingle)
	}

	if src.CommonBeamformingFunctionSingle != nil {
		return json.Marshal(&src.CommonBeamformingFunctionSingle)
	}

	if src.DANRManagementFunctionSingle != nil {
		return json.Marshal(&src.DANRManagementFunctionSingle)
	}

	if src.DESManagementFunctionSingle != nil {
		return json.Marshal(&src.DESManagementFunctionSingle)
	}

	if src.DLBOFunctionSingle != nil {
		return json.Marshal(&src.DLBOFunctionSingle)
	}

	if src.DMROFunctionSingle != nil {
		return json.Marshal(&src.DMROFunctionSingle)
	}

	if src.DPCIConfigurationFunctionSingle != nil {
		return json.Marshal(&src.DPCIConfigurationFunctionSingle)
	}

	if src.DRACHOptimizationFunctionSingle != nil {
		return json.Marshal(&src.DRACHOptimizationFunctionSingle)
	}

	if src.EPE1Single != nil {
		return json.Marshal(&src.EPE1Single)
	}

	if src.EPF1CSingle != nil {
		return json.Marshal(&src.EPF1CSingle)
	}

	if src.EPF1USingle != nil {
		return json.Marshal(&src.EPF1USingle)
	}

	if src.EPNgCSingle != nil {
		return json.Marshal(&src.EPNgCSingle)
	}

	if src.EPNgUSingle != nil {
		return json.Marshal(&src.EPNgUSingle)
	}

	if src.EPS1USingle != nil {
		return json.Marshal(&src.EPS1USingle)
	}

	if src.EPX2CSingle != nil {
		return json.Marshal(&src.EPX2CSingle)
	}

	if src.EPX2USingle != nil {
		return json.Marshal(&src.EPX2USingle)
	}

	if src.EPXnCSingle != nil {
		return json.Marshal(&src.EPXnCSingle)
	}

	if src.EPXnUSingle != nil {
		return json.Marshal(&src.EPXnUSingle)
	}

	if src.EUtranCellRelationSingle != nil {
		return json.Marshal(&src.EUtranCellRelationSingle)
	}

	if src.EUtranFreqRelationSingle != nil {
		return json.Marshal(&src.EUtranFreqRelationSingle)
	}

	if src.EUtranFrequencySingle != nil {
		return json.Marshal(&src.EUtranFrequencySingle)
	}

	if src.ExternalENBFunctionSingle != nil {
		return json.Marshal(&src.ExternalENBFunctionSingle)
	}

	if src.ExternalEUTranCellSingle != nil {
		return json.Marshal(&src.ExternalEUTranCellSingle)
	}

	if src.ExternalGnbCuCpFunctionSingle != nil {
		return json.Marshal(&src.ExternalGnbCuCpFunctionSingle)
	}

	if src.ExternalGnbCuUpFunctionSingle != nil {
		return json.Marshal(&src.ExternalGnbCuUpFunctionSingle)
	}

	if src.ExternalGnbDuFunctionSingle != nil {
		return json.Marshal(&src.ExternalGnbDuFunctionSingle)
	}

	if src.ExternalNrCellCuSingle != nil {
		return json.Marshal(&src.ExternalNrCellCuSingle)
	}

	if src.GnbCuCpFunctionSingle != nil {
		return json.Marshal(&src.GnbCuCpFunctionSingle)
	}

	if src.GnbCuUpFunctionSingle != nil {
		return json.Marshal(&src.GnbCuUpFunctionSingle)
	}

	if src.GnbDuFunctionSingle != nil {
		return json.Marshal(&src.GnbDuFunctionSingle)
	}

	if src.ManagedElementSingle != nil {
		return json.Marshal(&src.ManagedElementSingle)
	}

	if src.MnS != nil {
		return json.Marshal(&src.MnS)
	}

	if src.NRCellRelationSingle != nil {
		return json.Marshal(&src.NRCellRelationSingle)
	}

	if src.NRFreqRelationSingle != nil {
		return json.Marshal(&src.NRFreqRelationSingle)
	}

	if src.NRFrequencySingle != nil {
		return json.Marshal(&src.NRFrequencySingle)
	}

	if src.NrCellCuSingle != nil {
		return json.Marshal(&src.NrCellCuSingle)
	}

	if src.NrCellDuSingle != nil {
		return json.Marshal(&src.NrCellDuSingle)
	}

	if src.NrOperatorCellDuSingle != nil {
		return json.Marshal(&src.NrOperatorCellDuSingle)
	}

	if src.NrSectorCarrierSingle != nil {
		return json.Marshal(&src.NrSectorCarrierSingle)
	}

	if src.OperatorDuSingle != nil {
		return json.Marshal(&src.OperatorDuSingle)
	}

	if src.RRMPolicyRatioSingle != nil {
		return json.Marshal(&src.RRMPolicyRatioSingle)
	}

	if src.RimRSGlobalSingle != nil {
		return json.Marshal(&src.RimRSGlobalSingle)
	}

	if src.RimRSSetSingle != nil {
		return json.Marshal(&src.RimRSSetSingle)
	}

	if src.SubNetworkSingle != nil {
		return json.Marshal(&src.SubNetworkSingle)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResourcesNrNrm) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BWPSetSingle != nil {
		return obj.BWPSetSingle
	}

	if obj.BeamSingle != nil {
		return obj.BeamSingle
	}

	if obj.BwpSingle != nil {
		return obj.BwpSingle
	}

	if obj.CCOFunctionSingle != nil {
		return obj.CCOFunctionSingle
	}

	if obj.CCOOvershootCoverageParametersSingle != nil {
		return obj.CCOOvershootCoverageParametersSingle
	}

	if obj.CCOPilotPollutionParametersSingle != nil {
		return obj.CCOPilotPollutionParametersSingle
	}

	if obj.CCOWeakCoverageParametersSingle != nil {
		return obj.CCOWeakCoverageParametersSingle
	}

	if obj.CESManagementFunctionSingle != nil {
		return obj.CESManagementFunctionSingle
	}

	if obj.CPCIConfigurationFunctionSingle != nil {
		return obj.CPCIConfigurationFunctionSingle
	}

	if obj.CommonBeamformingFunctionSingle != nil {
		return obj.CommonBeamformingFunctionSingle
	}

	if obj.DANRManagementFunctionSingle != nil {
		return obj.DANRManagementFunctionSingle
	}

	if obj.DESManagementFunctionSingle != nil {
		return obj.DESManagementFunctionSingle
	}

	if obj.DLBOFunctionSingle != nil {
		return obj.DLBOFunctionSingle
	}

	if obj.DMROFunctionSingle != nil {
		return obj.DMROFunctionSingle
	}

	if obj.DPCIConfigurationFunctionSingle != nil {
		return obj.DPCIConfigurationFunctionSingle
	}

	if obj.DRACHOptimizationFunctionSingle != nil {
		return obj.DRACHOptimizationFunctionSingle
	}

	if obj.EPE1Single != nil {
		return obj.EPE1Single
	}

	if obj.EPF1CSingle != nil {
		return obj.EPF1CSingle
	}

	if obj.EPF1USingle != nil {
		return obj.EPF1USingle
	}

	if obj.EPNgCSingle != nil {
		return obj.EPNgCSingle
	}

	if obj.EPNgUSingle != nil {
		return obj.EPNgUSingle
	}

	if obj.EPS1USingle != nil {
		return obj.EPS1USingle
	}

	if obj.EPX2CSingle != nil {
		return obj.EPX2CSingle
	}

	if obj.EPX2USingle != nil {
		return obj.EPX2USingle
	}

	if obj.EPXnCSingle != nil {
		return obj.EPXnCSingle
	}

	if obj.EPXnUSingle != nil {
		return obj.EPXnUSingle
	}

	if obj.EUtranCellRelationSingle != nil {
		return obj.EUtranCellRelationSingle
	}

	if obj.EUtranFreqRelationSingle != nil {
		return obj.EUtranFreqRelationSingle
	}

	if obj.EUtranFrequencySingle != nil {
		return obj.EUtranFrequencySingle
	}

	if obj.ExternalENBFunctionSingle != nil {
		return obj.ExternalENBFunctionSingle
	}

	if obj.ExternalEUTranCellSingle != nil {
		return obj.ExternalEUTranCellSingle
	}

	if obj.ExternalGnbCuCpFunctionSingle != nil {
		return obj.ExternalGnbCuCpFunctionSingle
	}

	if obj.ExternalGnbCuUpFunctionSingle != nil {
		return obj.ExternalGnbCuUpFunctionSingle
	}

	if obj.ExternalGnbDuFunctionSingle != nil {
		return obj.ExternalGnbDuFunctionSingle
	}

	if obj.ExternalNrCellCuSingle != nil {
		return obj.ExternalNrCellCuSingle
	}

	if obj.GnbCuCpFunctionSingle != nil {
		return obj.GnbCuCpFunctionSingle
	}

	if obj.GnbCuUpFunctionSingle != nil {
		return obj.GnbCuUpFunctionSingle
	}

	if obj.GnbDuFunctionSingle != nil {
		return obj.GnbDuFunctionSingle
	}

	if obj.ManagedElementSingle != nil {
		return obj.ManagedElementSingle
	}

	if obj.MnS != nil {
		return obj.MnS
	}

	if obj.NRCellRelationSingle != nil {
		return obj.NRCellRelationSingle
	}

	if obj.NRFreqRelationSingle != nil {
		return obj.NRFreqRelationSingle
	}

	if obj.NRFrequencySingle != nil {
		return obj.NRFrequencySingle
	}

	if obj.NrCellCuSingle != nil {
		return obj.NrCellCuSingle
	}

	if obj.NrCellDuSingle != nil {
		return obj.NrCellDuSingle
	}

	if obj.NrOperatorCellDuSingle != nil {
		return obj.NrOperatorCellDuSingle
	}

	if obj.NrSectorCarrierSingle != nil {
		return obj.NrSectorCarrierSingle
	}

	if obj.OperatorDuSingle != nil {
		return obj.OperatorDuSingle
	}

	if obj.RRMPolicyRatioSingle != nil {
		return obj.RRMPolicyRatioSingle
	}

	if obj.RimRSGlobalSingle != nil {
		return obj.RimRSGlobalSingle
	}

	if obj.RimRSSetSingle != nil {
		return obj.RimRSSetSingle
	}

	if obj.SubNetworkSingle != nil {
		return obj.SubNetworkSingle
	}

	// all schemas are nil
	return nil
}

type NullableResourcesNrNrm struct {
	value *ResourcesNrNrm
	isSet bool
}

func (v NullableResourcesNrNrm) Get() *ResourcesNrNrm {
	return v.value
}

func (v *NullableResourcesNrNrm) Set(val *ResourcesNrNrm) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesNrNrm) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesNrNrm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesNrNrm(val *ResourcesNrNrm) *NullableResourcesNrNrm {
	return &NullableResourcesNrNrm{value: val, isSet: true}
}

func (v NullableResourcesNrNrm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesNrNrm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
