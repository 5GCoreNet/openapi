/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
)

// checks if the CommonBeamformingFunctionSingle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonBeamformingFunctionSingle{}

// CommonBeamformingFunctionSingle struct for CommonBeamformingFunctionSingle
type CommonBeamformingFunctionSingle struct {
	Top
	Attributes *CommonBeamformingFunctionSingleAllOfAttributes `json:"attributes,omitempty"`
	Beam       []BeamSingle                                    `json:"Beam,omitempty"`
}

// NewCommonBeamformingFunctionSingle instantiates a new CommonBeamformingFunctionSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonBeamformingFunctionSingle(id NullableString) *CommonBeamformingFunctionSingle {
	this := CommonBeamformingFunctionSingle{}
	this.Id = id
	return &this
}

// NewCommonBeamformingFunctionSingleWithDefaults instantiates a new CommonBeamformingFunctionSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonBeamformingFunctionSingleWithDefaults() *CommonBeamformingFunctionSingle {
	this := CommonBeamformingFunctionSingle{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *CommonBeamformingFunctionSingle) GetAttributes() CommonBeamformingFunctionSingleAllOfAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret CommonBeamformingFunctionSingleAllOfAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonBeamformingFunctionSingle) GetAttributesOk() (*CommonBeamformingFunctionSingleAllOfAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *CommonBeamformingFunctionSingle) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given CommonBeamformingFunctionSingleAllOfAttributes and assigns it to the Attributes field.
func (o *CommonBeamformingFunctionSingle) SetAttributes(v CommonBeamformingFunctionSingleAllOfAttributes) {
	o.Attributes = &v
}

// GetBeam returns the Beam field value if set, zero value otherwise.
func (o *CommonBeamformingFunctionSingle) GetBeam() []BeamSingle {
	if o == nil || IsNil(o.Beam) {
		var ret []BeamSingle
		return ret
	}
	return o.Beam
}

// GetBeamOk returns a tuple with the Beam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonBeamformingFunctionSingle) GetBeamOk() ([]BeamSingle, bool) {
	if o == nil || IsNil(o.Beam) {
		return nil, false
	}
	return o.Beam, true
}

// HasBeam returns a boolean if a field has been set.
func (o *CommonBeamformingFunctionSingle) HasBeam() bool {
	if o != nil && !IsNil(o.Beam) {
		return true
	}

	return false
}

// SetBeam gets a reference to the given []BeamSingle and assigns it to the Beam field.
func (o *CommonBeamformingFunctionSingle) SetBeam(v []BeamSingle) {
	o.Beam = v
}

func (o CommonBeamformingFunctionSingle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonBeamformingFunctionSingle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTop, errTop := json.Marshal(o.Top)
	if errTop != nil {
		return map[string]interface{}{}, errTop
	}
	errTop = json.Unmarshal([]byte(serializedTop), &toSerialize)
	if errTop != nil {
		return map[string]interface{}{}, errTop
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Beam) {
		toSerialize["Beam"] = o.Beam
	}
	return toSerialize, nil
}

type NullableCommonBeamformingFunctionSingle struct {
	value *CommonBeamformingFunctionSingle
	isSet bool
}

func (v NullableCommonBeamformingFunctionSingle) Get() *CommonBeamformingFunctionSingle {
	return v.value
}

func (v *NullableCommonBeamformingFunctionSingle) Set(val *CommonBeamformingFunctionSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonBeamformingFunctionSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonBeamformingFunctionSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonBeamformingFunctionSingle(val *CommonBeamformingFunctionSingle) *NullableCommonBeamformingFunctionSingle {
	return &NullableCommonBeamformingFunctionSingle{value: val, isSet: true}
}

func (v NullableCommonBeamformingFunctionSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonBeamformingFunctionSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
