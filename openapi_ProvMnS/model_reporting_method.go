/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// ReportingMethod the model 'ReportingMethod'
type ReportingMethod string

// List of ReportingMethod
const (
	FILE ReportingMethod = "FILE"
	STREAMING ReportingMethod = "STREAMING"
	NOTIFICATION ReportingMethod = "NOTIFICATION"
)

// All allowed values of ReportingMethod enum
var AllowedReportingMethodEnumValues = []ReportingMethod{
	"FILE",
	"STREAMING",
	"NOTIFICATION",
}

func (v *ReportingMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportingMethod(value)
	for _, existing := range AllowedReportingMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportingMethod", value)
}

// NewReportingMethodFromValue returns a pointer to a valid ReportingMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportingMethodFromValue(v string) (*ReportingMethod, error) {
	ev := ReportingMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportingMethod: valid values are %v", v, AllowedReportingMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportingMethod) IsValid() bool {
	for _, existing := range AllowedReportingMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReportingMethod value
func (v ReportingMethod) Ptr() *ReportingMethod {
	return &v
}

type NullableReportingMethod struct {
	value *ReportingMethod
	isSet bool
}

func (v NullableReportingMethod) Get() *ReportingMethod {
	return v.value
}

func (v *NullableReportingMethod) Set(val *ReportingMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingMethod(val *ReportingMethod) *NullableReportingMethod {
	return &NullableReportingMethod{value: val, isSet: true}
}

func (v NullableReportingMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

