/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// ResourcesIntentNrm - struct for ResourcesIntentNrm
type ResourcesIntentNrm struct {
	IntentSingle      *IntentSingle
	SubNetworkSingle4 *SubNetworkSingle4
}

// IntentSingleAsResourcesIntentNrm is a convenience function that returns IntentSingle wrapped in ResourcesIntentNrm
func IntentSingleAsResourcesIntentNrm(v *IntentSingle) ResourcesIntentNrm {
	return ResourcesIntentNrm{
		IntentSingle: v,
	}
}

// SubNetworkSingle4AsResourcesIntentNrm is a convenience function that returns SubNetworkSingle4 wrapped in ResourcesIntentNrm
func SubNetworkSingle4AsResourcesIntentNrm(v *SubNetworkSingle4) ResourcesIntentNrm {
	return ResourcesIntentNrm{
		SubNetworkSingle4: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResourcesIntentNrm) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntentSingle
	err = newStrictDecoder(data).Decode(&dst.IntentSingle)
	if err == nil {
		jsonIntentSingle, _ := json.Marshal(dst.IntentSingle)
		if string(jsonIntentSingle) == "{}" { // empty struct
			dst.IntentSingle = nil
		} else {
			match++
		}
	} else {
		dst.IntentSingle = nil
	}

	// try to unmarshal data into SubNetworkSingle4
	err = newStrictDecoder(data).Decode(&dst.SubNetworkSingle4)
	if err == nil {
		jsonSubNetworkSingle4, _ := json.Marshal(dst.SubNetworkSingle4)
		if string(jsonSubNetworkSingle4) == "{}" { // empty struct
			dst.SubNetworkSingle4 = nil
		} else {
			match++
		}
	} else {
		dst.SubNetworkSingle4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntentSingle = nil
		dst.SubNetworkSingle4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResourcesIntentNrm)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResourcesIntentNrm)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResourcesIntentNrm) MarshalJSON() ([]byte, error) {
	if src.IntentSingle != nil {
		return json.Marshal(&src.IntentSingle)
	}

	if src.SubNetworkSingle4 != nil {
		return json.Marshal(&src.SubNetworkSingle4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResourcesIntentNrm) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.IntentSingle != nil {
		return obj.IntentSingle
	}

	if obj.SubNetworkSingle4 != nil {
		return obj.SubNetworkSingle4
	}

	// all schemas are nil
	return nil
}

type NullableResourcesIntentNrm struct {
	value *ResourcesIntentNrm
	isSet bool
}

func (v NullableResourcesIntentNrm) Get() *ResourcesIntentNrm {
	return v.value
}

func (v *NullableResourcesIntentNrm) Set(val *ResourcesIntentNrm) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesIntentNrm) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesIntentNrm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesIntentNrm(val *ResourcesIntentNrm) *NullableResourcesIntentNrm {
	return &NullableResourcesIntentNrm{value: val, isSet: true}
}

func (v NullableResourcesIntentNrm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesIntentNrm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
