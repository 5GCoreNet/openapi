/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_ProvMnS

import (
	"encoding/json"
	"fmt"
)

// TxDirection the model 'TxDirection'
type TxDirection string

// List of TxDirection
const (
	DL        TxDirection = "DL"
	UL        TxDirection = "UL"
	DL_AND_UL TxDirection = "DL and UL"
)

// All allowed values of TxDirection enum
var AllowedTxDirectionEnumValues = []TxDirection{
	"DL",
	"UL",
	"DL and UL",
}

func (v *TxDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TxDirection(value)
	for _, existing := range AllowedTxDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TxDirection", value)
}

// NewTxDirectionFromValue returns a pointer to a valid TxDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTxDirectionFromValue(v string) (*TxDirection, error) {
	ev := TxDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TxDirection: valid values are %v", v, AllowedTxDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TxDirection) IsValid() bool {
	for _, existing := range AllowedTxDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TxDirection value
func (v TxDirection) Ptr() *TxDirection {
	return &v
}

type NullableTxDirection struct {
	value *TxDirection
	isSet bool
}

func (v NullableTxDirection) Get() *TxDirection {
	return v.value
}

func (v *NullableTxDirection) Set(val *TxDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableTxDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableTxDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTxDirection(val *TxDirection) *NullableTxDirection {
	return &NullableTxDirection{value: val, isSet: true}
}

func (v NullableTxDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTxDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
