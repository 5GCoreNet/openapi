/*
VAE_HDMapDynamicInfo

API for VAE HDMapDynamicInfo Service   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_VAE_HDMapDynamicInfo

import (
	"encoding/json"
)

// checks if the NearbyUeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NearbyUeInfo{}

// NearbyUeInfo Represents the informaiotn of nearby UEs.
type NearbyUeInfo struct {
	// Represents the identifier of the V2X UE.
	NearbyUeId string       `json:"nearbyUeId"`
	Location   UserLocation `json:"location"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Distance int32 `json:"distance"`
}

// NewNearbyUeInfo instantiates a new NearbyUeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNearbyUeInfo(nearbyUeId string, location UserLocation, distance int32) *NearbyUeInfo {
	this := NearbyUeInfo{}
	this.NearbyUeId = nearbyUeId
	this.Location = location
	this.Distance = distance
	return &this
}

// NewNearbyUeInfoWithDefaults instantiates a new NearbyUeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNearbyUeInfoWithDefaults() *NearbyUeInfo {
	this := NearbyUeInfo{}
	return &this
}

// GetNearbyUeId returns the NearbyUeId field value
func (o *NearbyUeInfo) GetNearbyUeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NearbyUeId
}

// GetNearbyUeIdOk returns a tuple with the NearbyUeId field value
// and a boolean to check if the value has been set.
func (o *NearbyUeInfo) GetNearbyUeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NearbyUeId, true
}

// SetNearbyUeId sets field value
func (o *NearbyUeInfo) SetNearbyUeId(v string) {
	o.NearbyUeId = v
}

// GetLocation returns the Location field value
func (o *NearbyUeInfo) GetLocation() UserLocation {
	if o == nil {
		var ret UserLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *NearbyUeInfo) GetLocationOk() (*UserLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *NearbyUeInfo) SetLocation(v UserLocation) {
	o.Location = v
}

// GetDistance returns the Distance field value
func (o *NearbyUeInfo) GetDistance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *NearbyUeInfo) GetDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *NearbyUeInfo) SetDistance(v int32) {
	o.Distance = v
}

func (o NearbyUeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NearbyUeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nearbyUeId"] = o.NearbyUeId
	toSerialize["location"] = o.Location
	toSerialize["distance"] = o.Distance
	return toSerialize, nil
}

type NullableNearbyUeInfo struct {
	value *NearbyUeInfo
	isSet bool
}

func (v NullableNearbyUeInfo) Get() *NearbyUeInfo {
	return v.value
}

func (v *NullableNearbyUeInfo) Set(val *NearbyUeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNearbyUeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNearbyUeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNearbyUeInfo(val *NearbyUeInfo) *NullableNearbyUeInfo {
	return &NullableNearbyUeInfo{value: val, isSet: true}
}

func (v NullableNearbyUeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNearbyUeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
