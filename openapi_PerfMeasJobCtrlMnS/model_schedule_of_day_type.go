/*
TS 28.550 Performance Measurement Job Control Service

OAS 3.0.1 specification of the Performance Measurement Job Control Service @ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 16.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_PerfMeasJobCtrlMnS

import (
	"encoding/json"
)

// checks if the ScheduleOfDayType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleOfDayType{}

// ScheduleOfDayType struct for ScheduleOfDayType
type ScheduleOfDayType struct {
	DayOfWeek      *DayOfWeekType     `json:"dayOfWeek,omitempty"`
	IntervalsOfDay []TimeIntervalType `json:"intervalsOfDay,omitempty"`
}

// NewScheduleOfDayType instantiates a new ScheduleOfDayType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleOfDayType() *ScheduleOfDayType {
	this := ScheduleOfDayType{}
	return &this
}

// NewScheduleOfDayTypeWithDefaults instantiates a new ScheduleOfDayType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleOfDayTypeWithDefaults() *ScheduleOfDayType {
	this := ScheduleOfDayType{}
	return &this
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *ScheduleOfDayType) GetDayOfWeek() DayOfWeekType {
	if o == nil || IsNil(o.DayOfWeek) {
		var ret DayOfWeekType
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOfDayType) GetDayOfWeekOk() (*DayOfWeekType, bool) {
	if o == nil || IsNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *ScheduleOfDayType) HasDayOfWeek() bool {
	if o != nil && !IsNil(o.DayOfWeek) {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given DayOfWeekType and assigns it to the DayOfWeek field.
func (o *ScheduleOfDayType) SetDayOfWeek(v DayOfWeekType) {
	o.DayOfWeek = &v
}

// GetIntervalsOfDay returns the IntervalsOfDay field value if set, zero value otherwise.
func (o *ScheduleOfDayType) GetIntervalsOfDay() []TimeIntervalType {
	if o == nil || IsNil(o.IntervalsOfDay) {
		var ret []TimeIntervalType
		return ret
	}
	return o.IntervalsOfDay
}

// GetIntervalsOfDayOk returns a tuple with the IntervalsOfDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOfDayType) GetIntervalsOfDayOk() ([]TimeIntervalType, bool) {
	if o == nil || IsNil(o.IntervalsOfDay) {
		return nil, false
	}
	return o.IntervalsOfDay, true
}

// HasIntervalsOfDay returns a boolean if a field has been set.
func (o *ScheduleOfDayType) HasIntervalsOfDay() bool {
	if o != nil && !IsNil(o.IntervalsOfDay) {
		return true
	}

	return false
}

// SetIntervalsOfDay gets a reference to the given []TimeIntervalType and assigns it to the IntervalsOfDay field.
func (o *ScheduleOfDayType) SetIntervalsOfDay(v []TimeIntervalType) {
	o.IntervalsOfDay = v
}

func (o ScheduleOfDayType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleOfDayType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DayOfWeek) {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if !IsNil(o.IntervalsOfDay) {
		toSerialize["intervalsOfDay"] = o.IntervalsOfDay
	}
	return toSerialize, nil
}

type NullableScheduleOfDayType struct {
	value *ScheduleOfDayType
	isSet bool
}

func (v NullableScheduleOfDayType) Get() *ScheduleOfDayType {
	return v.value
}

func (v *NullableScheduleOfDayType) Set(val *ScheduleOfDayType) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleOfDayType) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleOfDayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleOfDayType(val *ScheduleOfDayType) *NullableScheduleOfDayType {
	return &NullableScheduleOfDayType{value: val, isSet: true}
}

func (v NullableScheduleOfDayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleOfDayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
