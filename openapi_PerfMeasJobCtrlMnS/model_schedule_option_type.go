/*
TS 28.550 Performance Measurement Job Control Service

OAS 3.0.1 specification of the Performance Measurement Job Control Service @ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 16.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_PerfMeasJobCtrlMnS

import (
	"encoding/json"
	"fmt"
)

// ScheduleOptionType the model 'ScheduleOptionType'
type ScheduleOptionType string

// List of scheduleOption-Type
const (
	DAILY ScheduleOptionType = "daily"
	WEEKLY ScheduleOptionType = "weekly"
)

// All allowed values of ScheduleOptionType enum
var AllowedScheduleOptionTypeEnumValues = []ScheduleOptionType{
	"daily",
	"weekly",
}

func (v *ScheduleOptionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduleOptionType(value)
	for _, existing := range AllowedScheduleOptionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduleOptionType", value)
}

// NewScheduleOptionTypeFromValue returns a pointer to a valid ScheduleOptionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScheduleOptionTypeFromValue(v string) (*ScheduleOptionType, error) {
	ev := ScheduleOptionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScheduleOptionType: valid values are %v", v, AllowedScheduleOptionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScheduleOptionType) IsValid() bool {
	for _, existing := range AllowedScheduleOptionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to scheduleOption-Type value
func (v ScheduleOptionType) Ptr() *ScheduleOptionType {
	return &v
}

type NullableScheduleOptionType struct {
	value *ScheduleOptionType
	isSet bool
}

func (v NullableScheduleOptionType) Get() *ScheduleOptionType {
	return v.value
}

func (v *NullableScheduleOptionType) Set(val *ScheduleOptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleOptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleOptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleOptionType(val *ScheduleOptionType) *NullableScheduleOptionType {
	return &NullableScheduleOptionType{value: val, isSet: true}
}

func (v NullableScheduleOptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleOptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

