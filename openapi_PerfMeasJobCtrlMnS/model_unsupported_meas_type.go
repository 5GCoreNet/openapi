/*
TS 28.550 Performance Measurement Job Control Service

OAS 3.0.1 specification of the Performance Measurement Job Control Service @ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 16.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_PerfMeasJobCtrlMnS

import (
	"encoding/json"
)

// checks if the UnsupportedMeasType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnsupportedMeasType{}

// UnsupportedMeasType struct for UnsupportedMeasType
type UnsupportedMeasType struct {
	IOCInstance *string `json:"iOCInstance,omitempty"`
	MeasurementTypeName *string `json:"measurementTypeName,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewUnsupportedMeasType instantiates a new UnsupportedMeasType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnsupportedMeasType() *UnsupportedMeasType {
	this := UnsupportedMeasType{}
	return &this
}

// NewUnsupportedMeasTypeWithDefaults instantiates a new UnsupportedMeasType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnsupportedMeasTypeWithDefaults() *UnsupportedMeasType {
	this := UnsupportedMeasType{}
	return &this
}

// GetIOCInstance returns the IOCInstance field value if set, zero value otherwise.
func (o *UnsupportedMeasType) GetIOCInstance() string {
	if o == nil || IsNil(o.IOCInstance) {
		var ret string
		return ret
	}
	return *o.IOCInstance
}

// GetIOCInstanceOk returns a tuple with the IOCInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsupportedMeasType) GetIOCInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.IOCInstance) {
		return nil, false
	}
	return o.IOCInstance, true
}

// HasIOCInstance returns a boolean if a field has been set.
func (o *UnsupportedMeasType) HasIOCInstance() bool {
	if o != nil && !IsNil(o.IOCInstance) {
		return true
	}

	return false
}

// SetIOCInstance gets a reference to the given string and assigns it to the IOCInstance field.
func (o *UnsupportedMeasType) SetIOCInstance(v string) {
	o.IOCInstance = &v
}

// GetMeasurementTypeName returns the MeasurementTypeName field value if set, zero value otherwise.
func (o *UnsupportedMeasType) GetMeasurementTypeName() string {
	if o == nil || IsNil(o.MeasurementTypeName) {
		var ret string
		return ret
	}
	return *o.MeasurementTypeName
}

// GetMeasurementTypeNameOk returns a tuple with the MeasurementTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsupportedMeasType) GetMeasurementTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.MeasurementTypeName) {
		return nil, false
	}
	return o.MeasurementTypeName, true
}

// HasMeasurementTypeName returns a boolean if a field has been set.
func (o *UnsupportedMeasType) HasMeasurementTypeName() bool {
	if o != nil && !IsNil(o.MeasurementTypeName) {
		return true
	}

	return false
}

// SetMeasurementTypeName gets a reference to the given string and assigns it to the MeasurementTypeName field.
func (o *UnsupportedMeasType) SetMeasurementTypeName(v string) {
	o.MeasurementTypeName = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *UnsupportedMeasType) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsupportedMeasType) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *UnsupportedMeasType) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *UnsupportedMeasType) SetReason(v string) {
	o.Reason = &v
}

func (o UnsupportedMeasType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnsupportedMeasType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IOCInstance) {
		toSerialize["iOCInstance"] = o.IOCInstance
	}
	if !IsNil(o.MeasurementTypeName) {
		toSerialize["measurementTypeName"] = o.MeasurementTypeName
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableUnsupportedMeasType struct {
	value *UnsupportedMeasType
	isSet bool
}

func (v NullableUnsupportedMeasType) Get() *UnsupportedMeasType {
	return v.value
}

func (v *NullableUnsupportedMeasType) Set(val *UnsupportedMeasType) {
	v.value = val
	v.isSet = true
}

func (v NullableUnsupportedMeasType) IsSet() bool {
	return v.isSet
}

func (v *NullableUnsupportedMeasType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnsupportedMeasType(val *UnsupportedMeasType) *NullableUnsupportedMeasType {
	return &NullableUnsupportedMeasType{value: val, isSet: true}
}

func (v NullableUnsupportedMeasType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnsupportedMeasType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


