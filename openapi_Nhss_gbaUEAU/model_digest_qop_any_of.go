/*
Nhss_gbaUEAU

Nhss UE Authentication Service for GBA.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_gbaUEAU

import (
	"encoding/json"
	"fmt"
)

// DigestQopAnyOf the model 'DigestQopAnyOf'
type DigestQopAnyOf string

// List of DigestQop_anyOf
const (
	AUTH DigestQopAnyOf = "AUTH"
	AUTH_INT DigestQopAnyOf = "AUTH_INT"
)

// All allowed values of DigestQopAnyOf enum
var AllowedDigestQopAnyOfEnumValues = []DigestQopAnyOf{
	"AUTH",
	"AUTH_INT",
}

func (v *DigestQopAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DigestQopAnyOf(value)
	for _, existing := range AllowedDigestQopAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DigestQopAnyOf", value)
}

// NewDigestQopAnyOfFromValue returns a pointer to a valid DigestQopAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDigestQopAnyOfFromValue(v string) (*DigestQopAnyOf, error) {
	ev := DigestQopAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DigestQopAnyOf: valid values are %v", v, AllowedDigestQopAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DigestQopAnyOf) IsValid() bool {
	for _, existing := range AllowedDigestQopAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DigestQop_anyOf value
func (v DigestQopAnyOf) Ptr() *DigestQopAnyOf {
	return &v
}

type NullableDigestQopAnyOf struct {
	value *DigestQopAnyOf
	isSet bool
}

func (v NullableDigestQopAnyOf) Get() *DigestQopAnyOf {
	return v.value
}

func (v *NullableDigestQopAnyOf) Set(val *DigestQopAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDigestQopAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDigestQopAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigestQopAnyOf(val *DigestQopAnyOf) *NullableDigestQopAnyOf {
	return &NullableDigestQopAnyOf{value: val, isSet: true}
}

func (v NullableDigestQopAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigestQopAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

