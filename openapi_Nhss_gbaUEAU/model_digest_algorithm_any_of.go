/*
Nhss_gbaUEAU

Nhss UE Authentication Service for GBA.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_gbaUEAU

import (
	"encoding/json"
	"fmt"
)

// DigestAlgorithmAnyOf the model 'DigestAlgorithmAnyOf'
type DigestAlgorithmAnyOf string

// List of DigestAlgorithm_anyOf
const (
	MD5 DigestAlgorithmAnyOf = "MD5"
	MD5_SESS DigestAlgorithmAnyOf = "MD5_SESS"
)

// All allowed values of DigestAlgorithmAnyOf enum
var AllowedDigestAlgorithmAnyOfEnumValues = []DigestAlgorithmAnyOf{
	"MD5",
	"MD5_SESS",
}

func (v *DigestAlgorithmAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DigestAlgorithmAnyOf(value)
	for _, existing := range AllowedDigestAlgorithmAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DigestAlgorithmAnyOf", value)
}

// NewDigestAlgorithmAnyOfFromValue returns a pointer to a valid DigestAlgorithmAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDigestAlgorithmAnyOfFromValue(v string) (*DigestAlgorithmAnyOf, error) {
	ev := DigestAlgorithmAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DigestAlgorithmAnyOf: valid values are %v", v, AllowedDigestAlgorithmAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DigestAlgorithmAnyOf) IsValid() bool {
	for _, existing := range AllowedDigestAlgorithmAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DigestAlgorithm_anyOf value
func (v DigestAlgorithmAnyOf) Ptr() *DigestAlgorithmAnyOf {
	return &v
}

type NullableDigestAlgorithmAnyOf struct {
	value *DigestAlgorithmAnyOf
	isSet bool
}

func (v NullableDigestAlgorithmAnyOf) Get() *DigestAlgorithmAnyOf {
	return v.value
}

func (v *NullableDigestAlgorithmAnyOf) Set(val *DigestAlgorithmAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDigestAlgorithmAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDigestAlgorithmAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigestAlgorithmAnyOf(val *DigestAlgorithmAnyOf) *NullableDigestAlgorithmAnyOf {
	return &NullableDigestAlgorithmAnyOf{value: val, isSet: true}
}

func (v NullableDigestAlgorithmAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigestAlgorithmAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

