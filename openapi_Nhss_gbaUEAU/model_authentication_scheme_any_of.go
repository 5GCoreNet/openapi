/*
Nhss_gbaUEAU

Nhss UE Authentication Service for GBA.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_gbaUEAU

import (
	"encoding/json"
	"fmt"
)

// AuthenticationSchemeAnyOf the model 'AuthenticationSchemeAnyOf'
type AuthenticationSchemeAnyOf string

// List of AuthenticationScheme_anyOf
const (
	AKAV1_MD5 AuthenticationSchemeAnyOf = "DIGEST_AKAV1_MD5"
	HTTP AuthenticationSchemeAnyOf = "DIGEST_HTTP"
)

// All allowed values of AuthenticationSchemeAnyOf enum
var AllowedAuthenticationSchemeAnyOfEnumValues = []AuthenticationSchemeAnyOf{
	"DIGEST_AKAV1_MD5",
	"DIGEST_HTTP",
}

func (v *AuthenticationSchemeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthenticationSchemeAnyOf(value)
	for _, existing := range AllowedAuthenticationSchemeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthenticationSchemeAnyOf", value)
}

// NewAuthenticationSchemeAnyOfFromValue returns a pointer to a valid AuthenticationSchemeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticationSchemeAnyOfFromValue(v string) (*AuthenticationSchemeAnyOf, error) {
	ev := AuthenticationSchemeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticationSchemeAnyOf: valid values are %v", v, AllowedAuthenticationSchemeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthenticationSchemeAnyOf) IsValid() bool {
	for _, existing := range AllowedAuthenticationSchemeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthenticationScheme_anyOf value
func (v AuthenticationSchemeAnyOf) Ptr() *AuthenticationSchemeAnyOf {
	return &v
}

type NullableAuthenticationSchemeAnyOf struct {
	value *AuthenticationSchemeAnyOf
	isSet bool
}

func (v NullableAuthenticationSchemeAnyOf) Get() *AuthenticationSchemeAnyOf {
	return v.value
}

func (v *NullableAuthenticationSchemeAnyOf) Set(val *AuthenticationSchemeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationSchemeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationSchemeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationSchemeAnyOf(val *AuthenticationSchemeAnyOf) *NullableAuthenticationSchemeAnyOf {
	return &NullableAuthenticationSchemeAnyOf{value: val, isSet: true}
}

func (v NullableAuthenticationSchemeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationSchemeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

