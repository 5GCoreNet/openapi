/*
Nbsf_Management

Binding Support Management Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.4.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nbsf_Management

import (
	"encoding/json"
)

// checks if the PcfForPduSessionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PcfForPduSessionInfo{}

// PcfForPduSessionInfo Contains the informaiton of the PCF for a PDU session.
type PcfForPduSessionInfo struct {
	// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").
	Dnn    string `json:"dnn"`
	Snssai Snssai `json:"snssai"`
	// Fully Qualified Domain Name
	PcfFqdn *string `json:"pcfFqdn,omitempty"`
	// IP end points of the PCF hosting the Npcf_AmPolicyAuthorization service.
	PcfIpEndPoints []IpEndPoint `json:"pcfIpEndPoints,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166 with the OpenAPI defined 'nullable: true' property.
	Ipv4Addr NullableString `json:"ipv4Addr,omitempty"`
	IpDomain *string        `json:"ipDomain,omitempty"`
	// The IPv6 Address Prefixes of the served UE.
	Ipv6Prefixes []Ipv6Prefix `json:"ipv6Prefixes,omitempty"`
	// The MAC Addresses of the served UE.
	MacAddrs []string `json:"macAddrs,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
	PcfId *string `json:"pcfId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.
	PcfSetId  *string       `json:"pcfSetId,omitempty"`
	BindLevel *BindingLevel `json:"bindLevel,omitempty"`
}

// NewPcfForPduSessionInfo instantiates a new PcfForPduSessionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPcfForPduSessionInfo(dnn string, snssai Snssai) *PcfForPduSessionInfo {
	this := PcfForPduSessionInfo{}
	this.Dnn = dnn
	this.Snssai = snssai
	return &this
}

// NewPcfForPduSessionInfoWithDefaults instantiates a new PcfForPduSessionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPcfForPduSessionInfoWithDefaults() *PcfForPduSessionInfo {
	this := PcfForPduSessionInfo{}
	return &this
}

// GetDnn returns the Dnn field value
func (o *PcfForPduSessionInfo) GetDnn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetDnnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dnn, true
}

// SetDnn sets field value
func (o *PcfForPduSessionInfo) SetDnn(v string) {
	o.Dnn = v
}

// GetSnssai returns the Snssai field value
func (o *PcfForPduSessionInfo) GetSnssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetSnssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snssai, true
}

// SetSnssai sets field value
func (o *PcfForPduSessionInfo) SetSnssai(v Snssai) {
	o.Snssai = v
}

// GetPcfFqdn returns the PcfFqdn field value if set, zero value otherwise.
func (o *PcfForPduSessionInfo) GetPcfFqdn() string {
	if o == nil || IsNil(o.PcfFqdn) {
		var ret string
		return ret
	}
	return *o.PcfFqdn
}

// GetPcfFqdnOk returns a tuple with the PcfFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetPcfFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.PcfFqdn) {
		return nil, false
	}
	return o.PcfFqdn, true
}

// HasPcfFqdn returns a boolean if a field has been set.
func (o *PcfForPduSessionInfo) HasPcfFqdn() bool {
	if o != nil && !IsNil(o.PcfFqdn) {
		return true
	}

	return false
}

// SetPcfFqdn gets a reference to the given string and assigns it to the PcfFqdn field.
func (o *PcfForPduSessionInfo) SetPcfFqdn(v string) {
	o.PcfFqdn = &v
}

// GetPcfIpEndPoints returns the PcfIpEndPoints field value if set, zero value otherwise.
func (o *PcfForPduSessionInfo) GetPcfIpEndPoints() []IpEndPoint {
	if o == nil || IsNil(o.PcfIpEndPoints) {
		var ret []IpEndPoint
		return ret
	}
	return o.PcfIpEndPoints
}

// GetPcfIpEndPointsOk returns a tuple with the PcfIpEndPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetPcfIpEndPointsOk() ([]IpEndPoint, bool) {
	if o == nil || IsNil(o.PcfIpEndPoints) {
		return nil, false
	}
	return o.PcfIpEndPoints, true
}

// HasPcfIpEndPoints returns a boolean if a field has been set.
func (o *PcfForPduSessionInfo) HasPcfIpEndPoints() bool {
	if o != nil && !IsNil(o.PcfIpEndPoints) {
		return true
	}

	return false
}

// SetPcfIpEndPoints gets a reference to the given []IpEndPoint and assigns it to the PcfIpEndPoints field.
func (o *PcfForPduSessionInfo) SetPcfIpEndPoints(v []IpEndPoint) {
	o.PcfIpEndPoints = v
}

// GetIpv4Addr returns the Ipv4Addr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PcfForPduSessionInfo) GetIpv4Addr() string {
	if o == nil || IsNil(o.Ipv4Addr.Get()) {
		var ret string
		return ret
	}
	return *o.Ipv4Addr.Get()
}

// GetIpv4AddrOk returns a tuple with the Ipv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PcfForPduSessionInfo) GetIpv4AddrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv4Addr.Get(), o.Ipv4Addr.IsSet()
}

// HasIpv4Addr returns a boolean if a field has been set.
func (o *PcfForPduSessionInfo) HasIpv4Addr() bool {
	if o != nil && o.Ipv4Addr.IsSet() {
		return true
	}

	return false
}

// SetIpv4Addr gets a reference to the given NullableString and assigns it to the Ipv4Addr field.
func (o *PcfForPduSessionInfo) SetIpv4Addr(v string) {
	o.Ipv4Addr.Set(&v)
}

// SetIpv4AddrNil sets the value for Ipv4Addr to be an explicit nil
func (o *PcfForPduSessionInfo) SetIpv4AddrNil() {
	o.Ipv4Addr.Set(nil)
}

// UnsetIpv4Addr ensures that no value is present for Ipv4Addr, not even an explicit nil
func (o *PcfForPduSessionInfo) UnsetIpv4Addr() {
	o.Ipv4Addr.Unset()
}

// GetIpDomain returns the IpDomain field value if set, zero value otherwise.
func (o *PcfForPduSessionInfo) GetIpDomain() string {
	if o == nil || IsNil(o.IpDomain) {
		var ret string
		return ret
	}
	return *o.IpDomain
}

// GetIpDomainOk returns a tuple with the IpDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetIpDomainOk() (*string, bool) {
	if o == nil || IsNil(o.IpDomain) {
		return nil, false
	}
	return o.IpDomain, true
}

// HasIpDomain returns a boolean if a field has been set.
func (o *PcfForPduSessionInfo) HasIpDomain() bool {
	if o != nil && !IsNil(o.IpDomain) {
		return true
	}

	return false
}

// SetIpDomain gets a reference to the given string and assigns it to the IpDomain field.
func (o *PcfForPduSessionInfo) SetIpDomain(v string) {
	o.IpDomain = &v
}

// GetIpv6Prefixes returns the Ipv6Prefixes field value if set, zero value otherwise.
func (o *PcfForPduSessionInfo) GetIpv6Prefixes() []Ipv6Prefix {
	if o == nil || IsNil(o.Ipv6Prefixes) {
		var ret []Ipv6Prefix
		return ret
	}
	return o.Ipv6Prefixes
}

// GetIpv6PrefixesOk returns a tuple with the Ipv6Prefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetIpv6PrefixesOk() ([]Ipv6Prefix, bool) {
	if o == nil || IsNil(o.Ipv6Prefixes) {
		return nil, false
	}
	return o.Ipv6Prefixes, true
}

// HasIpv6Prefixes returns a boolean if a field has been set.
func (o *PcfForPduSessionInfo) HasIpv6Prefixes() bool {
	if o != nil && !IsNil(o.Ipv6Prefixes) {
		return true
	}

	return false
}

// SetIpv6Prefixes gets a reference to the given []Ipv6Prefix and assigns it to the Ipv6Prefixes field.
func (o *PcfForPduSessionInfo) SetIpv6Prefixes(v []Ipv6Prefix) {
	o.Ipv6Prefixes = v
}

// GetMacAddrs returns the MacAddrs field value if set, zero value otherwise.
func (o *PcfForPduSessionInfo) GetMacAddrs() []string {
	if o == nil || IsNil(o.MacAddrs) {
		var ret []string
		return ret
	}
	return o.MacAddrs
}

// GetMacAddrsOk returns a tuple with the MacAddrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetMacAddrsOk() ([]string, bool) {
	if o == nil || IsNil(o.MacAddrs) {
		return nil, false
	}
	return o.MacAddrs, true
}

// HasMacAddrs returns a boolean if a field has been set.
func (o *PcfForPduSessionInfo) HasMacAddrs() bool {
	if o != nil && !IsNil(o.MacAddrs) {
		return true
	}

	return false
}

// SetMacAddrs gets a reference to the given []string and assigns it to the MacAddrs field.
func (o *PcfForPduSessionInfo) SetMacAddrs(v []string) {
	o.MacAddrs = v
}

// GetPcfId returns the PcfId field value if set, zero value otherwise.
func (o *PcfForPduSessionInfo) GetPcfId() string {
	if o == nil || IsNil(o.PcfId) {
		var ret string
		return ret
	}
	return *o.PcfId
}

// GetPcfIdOk returns a tuple with the PcfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetPcfIdOk() (*string, bool) {
	if o == nil || IsNil(o.PcfId) {
		return nil, false
	}
	return o.PcfId, true
}

// HasPcfId returns a boolean if a field has been set.
func (o *PcfForPduSessionInfo) HasPcfId() bool {
	if o != nil && !IsNil(o.PcfId) {
		return true
	}

	return false
}

// SetPcfId gets a reference to the given string and assigns it to the PcfId field.
func (o *PcfForPduSessionInfo) SetPcfId(v string) {
	o.PcfId = &v
}

// GetPcfSetId returns the PcfSetId field value if set, zero value otherwise.
func (o *PcfForPduSessionInfo) GetPcfSetId() string {
	if o == nil || IsNil(o.PcfSetId) {
		var ret string
		return ret
	}
	return *o.PcfSetId
}

// GetPcfSetIdOk returns a tuple with the PcfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetPcfSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.PcfSetId) {
		return nil, false
	}
	return o.PcfSetId, true
}

// HasPcfSetId returns a boolean if a field has been set.
func (o *PcfForPduSessionInfo) HasPcfSetId() bool {
	if o != nil && !IsNil(o.PcfSetId) {
		return true
	}

	return false
}

// SetPcfSetId gets a reference to the given string and assigns it to the PcfSetId field.
func (o *PcfForPduSessionInfo) SetPcfSetId(v string) {
	o.PcfSetId = &v
}

// GetBindLevel returns the BindLevel field value if set, zero value otherwise.
func (o *PcfForPduSessionInfo) GetBindLevel() BindingLevel {
	if o == nil || IsNil(o.BindLevel) {
		var ret BindingLevel
		return ret
	}
	return *o.BindLevel
}

// GetBindLevelOk returns a tuple with the BindLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PcfForPduSessionInfo) GetBindLevelOk() (*BindingLevel, bool) {
	if o == nil || IsNil(o.BindLevel) {
		return nil, false
	}
	return o.BindLevel, true
}

// HasBindLevel returns a boolean if a field has been set.
func (o *PcfForPduSessionInfo) HasBindLevel() bool {
	if o != nil && !IsNil(o.BindLevel) {
		return true
	}

	return false
}

// SetBindLevel gets a reference to the given BindingLevel and assigns it to the BindLevel field.
func (o *PcfForPduSessionInfo) SetBindLevel(v BindingLevel) {
	o.BindLevel = &v
}

func (o PcfForPduSessionInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PcfForPduSessionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dnn"] = o.Dnn
	toSerialize["snssai"] = o.Snssai
	if !IsNil(o.PcfFqdn) {
		toSerialize["pcfFqdn"] = o.PcfFqdn
	}
	if !IsNil(o.PcfIpEndPoints) {
		toSerialize["pcfIpEndPoints"] = o.PcfIpEndPoints
	}
	if o.Ipv4Addr.IsSet() {
		toSerialize["ipv4Addr"] = o.Ipv4Addr.Get()
	}
	if !IsNil(o.IpDomain) {
		toSerialize["ipDomain"] = o.IpDomain
	}
	if !IsNil(o.Ipv6Prefixes) {
		toSerialize["ipv6Prefixes"] = o.Ipv6Prefixes
	}
	if !IsNil(o.MacAddrs) {
		toSerialize["macAddrs"] = o.MacAddrs
	}
	if !IsNil(o.PcfId) {
		toSerialize["pcfId"] = o.PcfId
	}
	if !IsNil(o.PcfSetId) {
		toSerialize["pcfSetId"] = o.PcfSetId
	}
	if !IsNil(o.BindLevel) {
		toSerialize["bindLevel"] = o.BindLevel
	}
	return toSerialize, nil
}

type NullablePcfForPduSessionInfo struct {
	value *PcfForPduSessionInfo
	isSet bool
}

func (v NullablePcfForPduSessionInfo) Get() *PcfForPduSessionInfo {
	return v.value
}

func (v *NullablePcfForPduSessionInfo) Set(val *PcfForPduSessionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePcfForPduSessionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePcfForPduSessionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePcfForPduSessionInfo(val *PcfForPduSessionInfo) *NullablePcfForPduSessionInfo {
	return &NullablePcfForPduSessionInfo{value: val, isSet: true}
}

func (v NullablePcfForPduSessionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePcfForPduSessionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
