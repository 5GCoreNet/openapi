/*
Nbsf_Management

Binding Support Management Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.4.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nbsf_Management

import (
	"encoding/json"
	"fmt"
)

// BindingLevelAnyOf the model 'BindingLevelAnyOf'
type BindingLevelAnyOf string

// List of BindingLevel_anyOf
const (
	SET BindingLevelAnyOf = "NF_SET"
	INSTANCE BindingLevelAnyOf = "NF_INSTANCE"
)

// All allowed values of BindingLevelAnyOf enum
var AllowedBindingLevelAnyOfEnumValues = []BindingLevelAnyOf{
	"NF_SET",
	"NF_INSTANCE",
}

func (v *BindingLevelAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BindingLevelAnyOf(value)
	for _, existing := range AllowedBindingLevelAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BindingLevelAnyOf", value)
}

// NewBindingLevelAnyOfFromValue returns a pointer to a valid BindingLevelAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBindingLevelAnyOfFromValue(v string) (*BindingLevelAnyOf, error) {
	ev := BindingLevelAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BindingLevelAnyOf: valid values are %v", v, AllowedBindingLevelAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BindingLevelAnyOf) IsValid() bool {
	for _, existing := range AllowedBindingLevelAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BindingLevel_anyOf value
func (v BindingLevelAnyOf) Ptr() *BindingLevelAnyOf {
	return &v
}

type NullableBindingLevelAnyOf struct {
	value *BindingLevelAnyOf
	isSet bool
}

func (v NullableBindingLevelAnyOf) Get() *BindingLevelAnyOf {
	return v.value
}

func (v *NullableBindingLevelAnyOf) Set(val *BindingLevelAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBindingLevelAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBindingLevelAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBindingLevelAnyOf(val *BindingLevelAnyOf) *NullableBindingLevelAnyOf {
	return &NullableBindingLevelAnyOf{value: val, isSet: true}
}

func (v NullableBindingLevelAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBindingLevelAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

