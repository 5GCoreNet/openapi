/*
Nbsf_Management

Binding Support Management Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.4.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nbsf_Management

import (
	"encoding/json"
)

// checks if the BsfEventNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BsfEventNotification{}

// BsfEventNotification Contains an event notification.
type BsfEventNotification struct {
	Event BsfEvent `json:"event"`
	PcfForUeInfo *PcfForUeInfo `json:"pcfForUeInfo,omitempty"`
	// The information of the PCF for a PDU session.
	PcfForPduSessInfos []PcfForPduSessionInfo `json:"pcfForPduSessInfos,omitempty"`
	// Matching S-NSSAI and DNN pairs.
	MatchSnssaiDnns []SnssaiDnnPair `json:"matchSnssaiDnns,omitempty"`
}

// NewBsfEventNotification instantiates a new BsfEventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBsfEventNotification(event BsfEvent) *BsfEventNotification {
	this := BsfEventNotification{}
	this.Event = event
	return &this
}

// NewBsfEventNotificationWithDefaults instantiates a new BsfEventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBsfEventNotificationWithDefaults() *BsfEventNotification {
	this := BsfEventNotification{}
	return &this
}

// GetEvent returns the Event field value
func (o *BsfEventNotification) GetEvent() BsfEvent {
	if o == nil {
		var ret BsfEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *BsfEventNotification) GetEventOk() (*BsfEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *BsfEventNotification) SetEvent(v BsfEvent) {
	o.Event = v
}

// GetPcfForUeInfo returns the PcfForUeInfo field value if set, zero value otherwise.
func (o *BsfEventNotification) GetPcfForUeInfo() PcfForUeInfo {
	if o == nil || isNil(o.PcfForUeInfo) {
		var ret PcfForUeInfo
		return ret
	}
	return *o.PcfForUeInfo
}

// GetPcfForUeInfoOk returns a tuple with the PcfForUeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfEventNotification) GetPcfForUeInfoOk() (*PcfForUeInfo, bool) {
	if o == nil || isNil(o.PcfForUeInfo) {
		return nil, false
	}
	return o.PcfForUeInfo, true
}

// HasPcfForUeInfo returns a boolean if a field has been set.
func (o *BsfEventNotification) HasPcfForUeInfo() bool {
	if o != nil && !isNil(o.PcfForUeInfo) {
		return true
	}

	return false
}

// SetPcfForUeInfo gets a reference to the given PcfForUeInfo and assigns it to the PcfForUeInfo field.
func (o *BsfEventNotification) SetPcfForUeInfo(v PcfForUeInfo) {
	o.PcfForUeInfo = &v
}

// GetPcfForPduSessInfos returns the PcfForPduSessInfos field value if set, zero value otherwise.
func (o *BsfEventNotification) GetPcfForPduSessInfos() []PcfForPduSessionInfo {
	if o == nil || isNil(o.PcfForPduSessInfos) {
		var ret []PcfForPduSessionInfo
		return ret
	}
	return o.PcfForPduSessInfos
}

// GetPcfForPduSessInfosOk returns a tuple with the PcfForPduSessInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfEventNotification) GetPcfForPduSessInfosOk() ([]PcfForPduSessionInfo, bool) {
	if o == nil || isNil(o.PcfForPduSessInfos) {
		return nil, false
	}
	return o.PcfForPduSessInfos, true
}

// HasPcfForPduSessInfos returns a boolean if a field has been set.
func (o *BsfEventNotification) HasPcfForPduSessInfos() bool {
	if o != nil && !isNil(o.PcfForPduSessInfos) {
		return true
	}

	return false
}

// SetPcfForPduSessInfos gets a reference to the given []PcfForPduSessionInfo and assigns it to the PcfForPduSessInfos field.
func (o *BsfEventNotification) SetPcfForPduSessInfos(v []PcfForPduSessionInfo) {
	o.PcfForPduSessInfos = v
}

// GetMatchSnssaiDnns returns the MatchSnssaiDnns field value if set, zero value otherwise.
func (o *BsfEventNotification) GetMatchSnssaiDnns() []SnssaiDnnPair {
	if o == nil || isNil(o.MatchSnssaiDnns) {
		var ret []SnssaiDnnPair
		return ret
	}
	return o.MatchSnssaiDnns
}

// GetMatchSnssaiDnnsOk returns a tuple with the MatchSnssaiDnns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfEventNotification) GetMatchSnssaiDnnsOk() ([]SnssaiDnnPair, bool) {
	if o == nil || isNil(o.MatchSnssaiDnns) {
		return nil, false
	}
	return o.MatchSnssaiDnns, true
}

// HasMatchSnssaiDnns returns a boolean if a field has been set.
func (o *BsfEventNotification) HasMatchSnssaiDnns() bool {
	if o != nil && !isNil(o.MatchSnssaiDnns) {
		return true
	}

	return false
}

// SetMatchSnssaiDnns gets a reference to the given []SnssaiDnnPair and assigns it to the MatchSnssaiDnns field.
func (o *BsfEventNotification) SetMatchSnssaiDnns(v []SnssaiDnnPair) {
	o.MatchSnssaiDnns = v
}

func (o BsfEventNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BsfEventNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	if !isNil(o.PcfForUeInfo) {
		toSerialize["pcfForUeInfo"] = o.PcfForUeInfo
	}
	if !isNil(o.PcfForPduSessInfos) {
		toSerialize["pcfForPduSessInfos"] = o.PcfForPduSessInfos
	}
	if !isNil(o.MatchSnssaiDnns) {
		toSerialize["matchSnssaiDnns"] = o.MatchSnssaiDnns
	}
	return toSerialize, nil
}

type NullableBsfEventNotification struct {
	value *BsfEventNotification
	isSet bool
}

func (v NullableBsfEventNotification) Get() *BsfEventNotification {
	return v.value
}

func (v *NullableBsfEventNotification) Set(val *BsfEventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableBsfEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableBsfEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBsfEventNotification(val *BsfEventNotification) *NullableBsfEventNotification {
	return &NullableBsfEventNotification{value: val, isSet: true}
}

func (v NullableBsfEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBsfEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


