/*
3gpp-device-triggering

API for device trigger.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_DeviceTriggering

import (
	"encoding/json"
)

// checks if the DeviceTriggeringPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceTriggeringPatch{}

// DeviceTriggeringPatch Represents device triggering related information.
type DeviceTriggeringPatch struct {
	// Unsigned integer identifying a period of time in units of seconds.
	ValidityPeriod *int32 `json:"validityPeriod,omitempty"`
	Priority *Priority `json:"priority,omitempty"`
	// Unsigned integer with valid values between 0 and 65535.
	ApplicationPortId *int32 `json:"applicationPortId,omitempty"`
	// Unsigned integer with valid values between 0 and 65535.
	AppSrcPortId *int32 `json:"appSrcPortId,omitempty"`
	// String with format \"byte\" as defined in OpenAPI Specification, i.e, base64-encoded characters.
	TriggerPayload *string `json:"triggerPayload,omitempty"`
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	NotificationDestination *string `json:"notificationDestination,omitempty"`
	// Set to true by the SCS/AS to request the SCEF to send a test notification as defined in clause 5.2.5.3. Set to false or omitted otherwise.
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
}

// NewDeviceTriggeringPatch instantiates a new DeviceTriggeringPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTriggeringPatch() *DeviceTriggeringPatch {
	this := DeviceTriggeringPatch{}
	return &this
}

// NewDeviceTriggeringPatchWithDefaults instantiates a new DeviceTriggeringPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTriggeringPatchWithDefaults() *DeviceTriggeringPatch {
	this := DeviceTriggeringPatch{}
	return &this
}

// GetValidityPeriod returns the ValidityPeriod field value if set, zero value otherwise.
func (o *DeviceTriggeringPatch) GetValidityPeriod() int32 {
	if o == nil || IsNil(o.ValidityPeriod) {
		var ret int32
		return ret
	}
	return *o.ValidityPeriod
}

// GetValidityPeriodOk returns a tuple with the ValidityPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTriggeringPatch) GetValidityPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.ValidityPeriod) {
		return nil, false
	}
	return o.ValidityPeriod, true
}

// HasValidityPeriod returns a boolean if a field has been set.
func (o *DeviceTriggeringPatch) HasValidityPeriod() bool {
	if o != nil && !IsNil(o.ValidityPeriod) {
		return true
	}

	return false
}

// SetValidityPeriod gets a reference to the given int32 and assigns it to the ValidityPeriod field.
func (o *DeviceTriggeringPatch) SetValidityPeriod(v int32) {
	o.ValidityPeriod = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *DeviceTriggeringPatch) GetPriority() Priority {
	if o == nil || IsNil(o.Priority) {
		var ret Priority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTriggeringPatch) GetPriorityOk() (*Priority, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *DeviceTriggeringPatch) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given Priority and assigns it to the Priority field.
func (o *DeviceTriggeringPatch) SetPriority(v Priority) {
	o.Priority = &v
}

// GetApplicationPortId returns the ApplicationPortId field value if set, zero value otherwise.
func (o *DeviceTriggeringPatch) GetApplicationPortId() int32 {
	if o == nil || IsNil(o.ApplicationPortId) {
		var ret int32
		return ret
	}
	return *o.ApplicationPortId
}

// GetApplicationPortIdOk returns a tuple with the ApplicationPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTriggeringPatch) GetApplicationPortIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ApplicationPortId) {
		return nil, false
	}
	return o.ApplicationPortId, true
}

// HasApplicationPortId returns a boolean if a field has been set.
func (o *DeviceTriggeringPatch) HasApplicationPortId() bool {
	if o != nil && !IsNil(o.ApplicationPortId) {
		return true
	}

	return false
}

// SetApplicationPortId gets a reference to the given int32 and assigns it to the ApplicationPortId field.
func (o *DeviceTriggeringPatch) SetApplicationPortId(v int32) {
	o.ApplicationPortId = &v
}

// GetAppSrcPortId returns the AppSrcPortId field value if set, zero value otherwise.
func (o *DeviceTriggeringPatch) GetAppSrcPortId() int32 {
	if o == nil || IsNil(o.AppSrcPortId) {
		var ret int32
		return ret
	}
	return *o.AppSrcPortId
}

// GetAppSrcPortIdOk returns a tuple with the AppSrcPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTriggeringPatch) GetAppSrcPortIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AppSrcPortId) {
		return nil, false
	}
	return o.AppSrcPortId, true
}

// HasAppSrcPortId returns a boolean if a field has been set.
func (o *DeviceTriggeringPatch) HasAppSrcPortId() bool {
	if o != nil && !IsNil(o.AppSrcPortId) {
		return true
	}

	return false
}

// SetAppSrcPortId gets a reference to the given int32 and assigns it to the AppSrcPortId field.
func (o *DeviceTriggeringPatch) SetAppSrcPortId(v int32) {
	o.AppSrcPortId = &v
}

// GetTriggerPayload returns the TriggerPayload field value if set, zero value otherwise.
func (o *DeviceTriggeringPatch) GetTriggerPayload() string {
	if o == nil || IsNil(o.TriggerPayload) {
		var ret string
		return ret
	}
	return *o.TriggerPayload
}

// GetTriggerPayloadOk returns a tuple with the TriggerPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTriggeringPatch) GetTriggerPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerPayload) {
		return nil, false
	}
	return o.TriggerPayload, true
}

// HasTriggerPayload returns a boolean if a field has been set.
func (o *DeviceTriggeringPatch) HasTriggerPayload() bool {
	if o != nil && !IsNil(o.TriggerPayload) {
		return true
	}

	return false
}

// SetTriggerPayload gets a reference to the given string and assigns it to the TriggerPayload field.
func (o *DeviceTriggeringPatch) SetTriggerPayload(v string) {
	o.TriggerPayload = &v
}

// GetNotificationDestination returns the NotificationDestination field value if set, zero value otherwise.
func (o *DeviceTriggeringPatch) GetNotificationDestination() string {
	if o == nil || IsNil(o.NotificationDestination) {
		var ret string
		return ret
	}
	return *o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTriggeringPatch) GetNotificationDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationDestination) {
		return nil, false
	}
	return o.NotificationDestination, true
}

// HasNotificationDestination returns a boolean if a field has been set.
func (o *DeviceTriggeringPatch) HasNotificationDestination() bool {
	if o != nil && !IsNil(o.NotificationDestination) {
		return true
	}

	return false
}

// SetNotificationDestination gets a reference to the given string and assigns it to the NotificationDestination field.
func (o *DeviceTriggeringPatch) SetNotificationDestination(v string) {
	o.NotificationDestination = &v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *DeviceTriggeringPatch) GetRequestTestNotification() bool {
	if o == nil || IsNil(o.RequestTestNotification) {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTriggeringPatch) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequestTestNotification) {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *DeviceTriggeringPatch) HasRequestTestNotification() bool {
	if o != nil && !IsNil(o.RequestTestNotification) {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *DeviceTriggeringPatch) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *DeviceTriggeringPatch) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTriggeringPatch) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || IsNil(o.WebsockNotifConfig) {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *DeviceTriggeringPatch) HasWebsockNotifConfig() bool {
	if o != nil && !IsNil(o.WebsockNotifConfig) {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *DeviceTriggeringPatch) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

func (o DeviceTriggeringPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceTriggeringPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ValidityPeriod) {
		toSerialize["validityPeriod"] = o.ValidityPeriod
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.ApplicationPortId) {
		toSerialize["applicationPortId"] = o.ApplicationPortId
	}
	if !IsNil(o.AppSrcPortId) {
		toSerialize["appSrcPortId"] = o.AppSrcPortId
	}
	if !IsNil(o.TriggerPayload) {
		toSerialize["triggerPayload"] = o.TriggerPayload
	}
	if !IsNil(o.NotificationDestination) {
		toSerialize["notificationDestination"] = o.NotificationDestination
	}
	if !IsNil(o.RequestTestNotification) {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if !IsNil(o.WebsockNotifConfig) {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}
	return toSerialize, nil
}

type NullableDeviceTriggeringPatch struct {
	value *DeviceTriggeringPatch
	isSet bool
}

func (v NullableDeviceTriggeringPatch) Get() *DeviceTriggeringPatch {
	return v.value
}

func (v *NullableDeviceTriggeringPatch) Set(val *DeviceTriggeringPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTriggeringPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTriggeringPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTriggeringPatch(val *DeviceTriggeringPatch) *NullableDeviceTriggeringPatch {
	return &NullableDeviceTriggeringPatch{value: val, isSet: true}
}

func (v NullableDeviceTriggeringPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTriggeringPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


