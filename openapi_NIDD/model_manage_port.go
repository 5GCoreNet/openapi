/*
3gpp-nidd

API for non IP data delivery.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NIDD

import (
	"encoding/json"
)

// checks if the ManagePort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagePort{}

// ManagePort Represents the configuration of a RDS dynamic port management.
type ManagePort struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self *string `json:"self,omitempty"`
	// Identifies the application.
	AppId string `json:"appId"`
	ManageEntity *ManageEntity `json:"manageEntity,omitempty"`
	// Indicate whether to skip UE inquiry.
	SkipUeInquiry *bool `json:"skipUeInquiry,omitempty"`
	// Indicates the serialization format(s) that are supported by the SCS/AS on the associated RDS port.
	SupportedFormats []SerializationFormat `json:"supportedFormats,omitempty"`
	ConfiguredFormat *SerializationFormat `json:"configuredFormat,omitempty"`
}

// NewManagePort instantiates a new ManagePort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagePort(appId string) *ManagePort {
	this := ManagePort{}
	this.AppId = appId
	return &this
}

// NewManagePortWithDefaults instantiates a new ManagePort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagePortWithDefaults() *ManagePort {
	this := ManagePort{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *ManagePort) GetSelf() string {
	if o == nil || isNil(o.Self) {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagePort) GetSelfOk() (*string, bool) {
	if o == nil || isNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *ManagePort) HasSelf() bool {
	if o != nil && !isNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *ManagePort) SetSelf(v string) {
	o.Self = &v
}

// GetAppId returns the AppId field value
func (o *ManagePort) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *ManagePort) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *ManagePort) SetAppId(v string) {
	o.AppId = v
}

// GetManageEntity returns the ManageEntity field value if set, zero value otherwise.
func (o *ManagePort) GetManageEntity() ManageEntity {
	if o == nil || isNil(o.ManageEntity) {
		var ret ManageEntity
		return ret
	}
	return *o.ManageEntity
}

// GetManageEntityOk returns a tuple with the ManageEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagePort) GetManageEntityOk() (*ManageEntity, bool) {
	if o == nil || isNil(o.ManageEntity) {
		return nil, false
	}
	return o.ManageEntity, true
}

// HasManageEntity returns a boolean if a field has been set.
func (o *ManagePort) HasManageEntity() bool {
	if o != nil && !isNil(o.ManageEntity) {
		return true
	}

	return false
}

// SetManageEntity gets a reference to the given ManageEntity and assigns it to the ManageEntity field.
func (o *ManagePort) SetManageEntity(v ManageEntity) {
	o.ManageEntity = &v
}

// GetSkipUeInquiry returns the SkipUeInquiry field value if set, zero value otherwise.
func (o *ManagePort) GetSkipUeInquiry() bool {
	if o == nil || isNil(o.SkipUeInquiry) {
		var ret bool
		return ret
	}
	return *o.SkipUeInquiry
}

// GetSkipUeInquiryOk returns a tuple with the SkipUeInquiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagePort) GetSkipUeInquiryOk() (*bool, bool) {
	if o == nil || isNil(o.SkipUeInquiry) {
		return nil, false
	}
	return o.SkipUeInquiry, true
}

// HasSkipUeInquiry returns a boolean if a field has been set.
func (o *ManagePort) HasSkipUeInquiry() bool {
	if o != nil && !isNil(o.SkipUeInquiry) {
		return true
	}

	return false
}

// SetSkipUeInquiry gets a reference to the given bool and assigns it to the SkipUeInquiry field.
func (o *ManagePort) SetSkipUeInquiry(v bool) {
	o.SkipUeInquiry = &v
}

// GetSupportedFormats returns the SupportedFormats field value if set, zero value otherwise.
func (o *ManagePort) GetSupportedFormats() []SerializationFormat {
	if o == nil || isNil(o.SupportedFormats) {
		var ret []SerializationFormat
		return ret
	}
	return o.SupportedFormats
}

// GetSupportedFormatsOk returns a tuple with the SupportedFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagePort) GetSupportedFormatsOk() ([]SerializationFormat, bool) {
	if o == nil || isNil(o.SupportedFormats) {
		return nil, false
	}
	return o.SupportedFormats, true
}

// HasSupportedFormats returns a boolean if a field has been set.
func (o *ManagePort) HasSupportedFormats() bool {
	if o != nil && !isNil(o.SupportedFormats) {
		return true
	}

	return false
}

// SetSupportedFormats gets a reference to the given []SerializationFormat and assigns it to the SupportedFormats field.
func (o *ManagePort) SetSupportedFormats(v []SerializationFormat) {
	o.SupportedFormats = v
}

// GetConfiguredFormat returns the ConfiguredFormat field value if set, zero value otherwise.
func (o *ManagePort) GetConfiguredFormat() SerializationFormat {
	if o == nil || isNil(o.ConfiguredFormat) {
		var ret SerializationFormat
		return ret
	}
	return *o.ConfiguredFormat
}

// GetConfiguredFormatOk returns a tuple with the ConfiguredFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagePort) GetConfiguredFormatOk() (*SerializationFormat, bool) {
	if o == nil || isNil(o.ConfiguredFormat) {
		return nil, false
	}
	return o.ConfiguredFormat, true
}

// HasConfiguredFormat returns a boolean if a field has been set.
func (o *ManagePort) HasConfiguredFormat() bool {
	if o != nil && !isNil(o.ConfiguredFormat) {
		return true
	}

	return false
}

// SetConfiguredFormat gets a reference to the given SerializationFormat and assigns it to the ConfiguredFormat field.
func (o *ManagePort) SetConfiguredFormat(v SerializationFormat) {
	o.ConfiguredFormat = &v
}

func (o ManagePort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagePort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	toSerialize["appId"] = o.AppId
	if !isNil(o.ManageEntity) {
		toSerialize["manageEntity"] = o.ManageEntity
	}
	if !isNil(o.SkipUeInquiry) {
		toSerialize["skipUeInquiry"] = o.SkipUeInquiry
	}
	if !isNil(o.SupportedFormats) {
		toSerialize["supportedFormats"] = o.SupportedFormats
	}
	if !isNil(o.ConfiguredFormat) {
		toSerialize["configuredFormat"] = o.ConfiguredFormat
	}
	return toSerialize, nil
}

type NullableManagePort struct {
	value *ManagePort
	isSet bool
}

func (v NullableManagePort) Get() *ManagePort {
	return v.value
}

func (v *NullableManagePort) Set(val *ManagePort) {
	v.value = val
	v.isSet = true
}

func (v NullableManagePort) IsSet() bool {
	return v.isSet
}

func (v *NullableManagePort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagePort(val *ManagePort) *NullableManagePort {
	return &NullableManagePort{value: val, isSet: true}
}

func (v NullableManagePort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagePort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


