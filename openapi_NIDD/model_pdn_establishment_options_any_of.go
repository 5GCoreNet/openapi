/*
3gpp-nidd

API for non IP data delivery.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NIDD

import (
	"encoding/json"
	"fmt"
)

// PdnEstablishmentOptionsAnyOf the model 'PdnEstablishmentOptionsAnyOf'
type PdnEstablishmentOptionsAnyOf string

// List of PdnEstablishmentOptions_anyOf
const (
	WAIT_FOR_UE PdnEstablishmentOptionsAnyOf = "WAIT_FOR_UE"
	INDICATE_ERROR PdnEstablishmentOptionsAnyOf = "INDICATE_ERROR"
	SEND_TRIGGER PdnEstablishmentOptionsAnyOf = "SEND_TRIGGER"
)

// All allowed values of PdnEstablishmentOptionsAnyOf enum
var AllowedPdnEstablishmentOptionsAnyOfEnumValues = []PdnEstablishmentOptionsAnyOf{
	"WAIT_FOR_UE",
	"INDICATE_ERROR",
	"SEND_TRIGGER",
}

func (v *PdnEstablishmentOptionsAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PdnEstablishmentOptionsAnyOf(value)
	for _, existing := range AllowedPdnEstablishmentOptionsAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PdnEstablishmentOptionsAnyOf", value)
}

// NewPdnEstablishmentOptionsAnyOfFromValue returns a pointer to a valid PdnEstablishmentOptionsAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPdnEstablishmentOptionsAnyOfFromValue(v string) (*PdnEstablishmentOptionsAnyOf, error) {
	ev := PdnEstablishmentOptionsAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PdnEstablishmentOptionsAnyOf: valid values are %v", v, AllowedPdnEstablishmentOptionsAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PdnEstablishmentOptionsAnyOf) IsValid() bool {
	for _, existing := range AllowedPdnEstablishmentOptionsAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PdnEstablishmentOptions_anyOf value
func (v PdnEstablishmentOptionsAnyOf) Ptr() *PdnEstablishmentOptionsAnyOf {
	return &v
}

type NullablePdnEstablishmentOptionsAnyOf struct {
	value *PdnEstablishmentOptionsAnyOf
	isSet bool
}

func (v NullablePdnEstablishmentOptionsAnyOf) Get() *PdnEstablishmentOptionsAnyOf {
	return v.value
}

func (v *NullablePdnEstablishmentOptionsAnyOf) Set(val *PdnEstablishmentOptionsAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePdnEstablishmentOptionsAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePdnEstablishmentOptionsAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePdnEstablishmentOptionsAnyOf(val *PdnEstablishmentOptionsAnyOf) *NullablePdnEstablishmentOptionsAnyOf {
	return &NullablePdnEstablishmentOptionsAnyOf{value: val, isSet: true}
}

func (v NullablePdnEstablishmentOptionsAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePdnEstablishmentOptionsAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

