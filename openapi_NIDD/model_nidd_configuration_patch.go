/*
3gpp-nidd

API for non IP data delivery.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NIDD

import (
	"encoding/json"
	"time"
)

// checks if the NiddConfigurationPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NiddConfigurationPatch{}

// NiddConfigurationPatch Represents the parameters to update a NIDD configuration.
type NiddConfigurationPatch struct {
	// string with format \"date-time\" as defined in OpenAPI with \"nullable=true\" property.
	Duration NullableTime `json:"duration,omitempty"`
	// Indicates whether the reliable data service (as defined in clause 4.5.14.3 of 3GPP TS  23.682) acknowledgement is requested (true) or not (false).
	ReliableDataService NullableBool `json:"reliableDataService,omitempty"`
	// Indicates the static port configuration that is used for reliable data transfer between specific applications using RDS (as defined in clause 5.2.4 and 5.2.5 of 3GPP TS 24.250).
	RdsPorts               []RdsPort                  `json:"rdsPorts,omitempty"`
	PdnEstablishmentOption *PdnEstablishmentOptionsRm `json:"pdnEstablishmentOption,omitempty"`
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	NotificationDestination *string `json:"notificationDestination,omitempty"`
}

// NewNiddConfigurationPatch instantiates a new NiddConfigurationPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiddConfigurationPatch() *NiddConfigurationPatch {
	this := NiddConfigurationPatch{}
	return &this
}

// NewNiddConfigurationPatchWithDefaults instantiates a new NiddConfigurationPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiddConfigurationPatchWithDefaults() *NiddConfigurationPatch {
	this := NiddConfigurationPatch{}
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiddConfigurationPatch) GetDuration() time.Time {
	if o == nil || IsNil(o.Duration.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiddConfigurationPatch) GetDurationOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *NiddConfigurationPatch) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableTime and assigns it to the Duration field.
func (o *NiddConfigurationPatch) SetDuration(v time.Time) {
	o.Duration.Set(&v)
}

// SetDurationNil sets the value for Duration to be an explicit nil
func (o *NiddConfigurationPatch) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *NiddConfigurationPatch) UnsetDuration() {
	o.Duration.Unset()
}

// GetReliableDataService returns the ReliableDataService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiddConfigurationPatch) GetReliableDataService() bool {
	if o == nil || IsNil(o.ReliableDataService.Get()) {
		var ret bool
		return ret
	}
	return *o.ReliableDataService.Get()
}

// GetReliableDataServiceOk returns a tuple with the ReliableDataService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiddConfigurationPatch) GetReliableDataServiceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReliableDataService.Get(), o.ReliableDataService.IsSet()
}

// HasReliableDataService returns a boolean if a field has been set.
func (o *NiddConfigurationPatch) HasReliableDataService() bool {
	if o != nil && o.ReliableDataService.IsSet() {
		return true
	}

	return false
}

// SetReliableDataService gets a reference to the given NullableBool and assigns it to the ReliableDataService field.
func (o *NiddConfigurationPatch) SetReliableDataService(v bool) {
	o.ReliableDataService.Set(&v)
}

// SetReliableDataServiceNil sets the value for ReliableDataService to be an explicit nil
func (o *NiddConfigurationPatch) SetReliableDataServiceNil() {
	o.ReliableDataService.Set(nil)
}

// UnsetReliableDataService ensures that no value is present for ReliableDataService, not even an explicit nil
func (o *NiddConfigurationPatch) UnsetReliableDataService() {
	o.ReliableDataService.Unset()
}

// GetRdsPorts returns the RdsPorts field value if set, zero value otherwise.
func (o *NiddConfigurationPatch) GetRdsPorts() []RdsPort {
	if o == nil || IsNil(o.RdsPorts) {
		var ret []RdsPort
		return ret
	}
	return o.RdsPorts
}

// GetRdsPortsOk returns a tuple with the RdsPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiddConfigurationPatch) GetRdsPortsOk() ([]RdsPort, bool) {
	if o == nil || IsNil(o.RdsPorts) {
		return nil, false
	}
	return o.RdsPorts, true
}

// HasRdsPorts returns a boolean if a field has been set.
func (o *NiddConfigurationPatch) HasRdsPorts() bool {
	if o != nil && !IsNil(o.RdsPorts) {
		return true
	}

	return false
}

// SetRdsPorts gets a reference to the given []RdsPort and assigns it to the RdsPorts field.
func (o *NiddConfigurationPatch) SetRdsPorts(v []RdsPort) {
	o.RdsPorts = v
}

// GetPdnEstablishmentOption returns the PdnEstablishmentOption field value if set, zero value otherwise.
func (o *NiddConfigurationPatch) GetPdnEstablishmentOption() PdnEstablishmentOptionsRm {
	if o == nil || IsNil(o.PdnEstablishmentOption) {
		var ret PdnEstablishmentOptionsRm
		return ret
	}
	return *o.PdnEstablishmentOption
}

// GetPdnEstablishmentOptionOk returns a tuple with the PdnEstablishmentOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiddConfigurationPatch) GetPdnEstablishmentOptionOk() (*PdnEstablishmentOptionsRm, bool) {
	if o == nil || IsNil(o.PdnEstablishmentOption) {
		return nil, false
	}
	return o.PdnEstablishmentOption, true
}

// HasPdnEstablishmentOption returns a boolean if a field has been set.
func (o *NiddConfigurationPatch) HasPdnEstablishmentOption() bool {
	if o != nil && !IsNil(o.PdnEstablishmentOption) {
		return true
	}

	return false
}

// SetPdnEstablishmentOption gets a reference to the given PdnEstablishmentOptionsRm and assigns it to the PdnEstablishmentOption field.
func (o *NiddConfigurationPatch) SetPdnEstablishmentOption(v PdnEstablishmentOptionsRm) {
	o.PdnEstablishmentOption = &v
}

// GetNotificationDestination returns the NotificationDestination field value if set, zero value otherwise.
func (o *NiddConfigurationPatch) GetNotificationDestination() string {
	if o == nil || IsNil(o.NotificationDestination) {
		var ret string
		return ret
	}
	return *o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiddConfigurationPatch) GetNotificationDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationDestination) {
		return nil, false
	}
	return o.NotificationDestination, true
}

// HasNotificationDestination returns a boolean if a field has been set.
func (o *NiddConfigurationPatch) HasNotificationDestination() bool {
	if o != nil && !IsNil(o.NotificationDestination) {
		return true
	}

	return false
}

// SetNotificationDestination gets a reference to the given string and assigns it to the NotificationDestination field.
func (o *NiddConfigurationPatch) SetNotificationDestination(v string) {
	o.NotificationDestination = &v
}

func (o NiddConfigurationPatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NiddConfigurationPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if o.ReliableDataService.IsSet() {
		toSerialize["reliableDataService"] = o.ReliableDataService.Get()
	}
	if !IsNil(o.RdsPorts) {
		toSerialize["rdsPorts"] = o.RdsPorts
	}
	if !IsNil(o.PdnEstablishmentOption) {
		toSerialize["pdnEstablishmentOption"] = o.PdnEstablishmentOption
	}
	if !IsNil(o.NotificationDestination) {
		toSerialize["notificationDestination"] = o.NotificationDestination
	}
	return toSerialize, nil
}

type NullableNiddConfigurationPatch struct {
	value *NiddConfigurationPatch
	isSet bool
}

func (v NullableNiddConfigurationPatch) Get() *NiddConfigurationPatch {
	return v.value
}

func (v *NullableNiddConfigurationPatch) Set(val *NiddConfigurationPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableNiddConfigurationPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableNiddConfigurationPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiddConfigurationPatch(val *NiddConfigurationPatch) *NullableNiddConfigurationPatch {
	return &NullableNiddConfigurationPatch{value: val, isSet: true}
}

func (v NullableNiddConfigurationPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiddConfigurationPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
