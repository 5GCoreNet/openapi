/*
3gpp-nidd

API for non IP data delivery.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NIDD

import (
	"encoding/json"
	"fmt"
)

// SerializationFormatAnyOf the model 'SerializationFormatAnyOf'
type SerializationFormatAnyOf string

// List of SerializationFormat_anyOf
const (
	CBOR SerializationFormatAnyOf = "CBOR"
	JSON SerializationFormatAnyOf = "JSON"
	XML SerializationFormatAnyOf = "XML"
)

// All allowed values of SerializationFormatAnyOf enum
var AllowedSerializationFormatAnyOfEnumValues = []SerializationFormatAnyOf{
	"CBOR",
	"JSON",
	"XML",
}

func (v *SerializationFormatAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SerializationFormatAnyOf(value)
	for _, existing := range AllowedSerializationFormatAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SerializationFormatAnyOf", value)
}

// NewSerializationFormatAnyOfFromValue returns a pointer to a valid SerializationFormatAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSerializationFormatAnyOfFromValue(v string) (*SerializationFormatAnyOf, error) {
	ev := SerializationFormatAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SerializationFormatAnyOf: valid values are %v", v, AllowedSerializationFormatAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SerializationFormatAnyOf) IsValid() bool {
	for _, existing := range AllowedSerializationFormatAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SerializationFormat_anyOf value
func (v SerializationFormatAnyOf) Ptr() *SerializationFormatAnyOf {
	return &v
}

type NullableSerializationFormatAnyOf struct {
	value *SerializationFormatAnyOf
	isSet bool
}

func (v NullableSerializationFormatAnyOf) Get() *SerializationFormatAnyOf {
	return v.value
}

func (v *NullableSerializationFormatAnyOf) Set(val *SerializationFormatAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSerializationFormatAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSerializationFormatAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSerializationFormatAnyOf(val *SerializationFormatAnyOf) *NullableSerializationFormatAnyOf {
	return &NullableSerializationFormatAnyOf{value: val, isSet: true}
}

func (v NullableSerializationFormatAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSerializationFormatAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

