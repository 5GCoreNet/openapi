/*
3gpp-nidd

API for non IP data delivery.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NIDD

import (
	"encoding/json"
	"fmt"
)

// ScsAsIdConfigurationsGetRequest - struct for ScsAsIdConfigurationsGetRequest
type ScsAsIdConfigurationsGetRequest struct {
	GmdNiddDownlinkDataDeliveryNotification *GmdNiddDownlinkDataDeliveryNotification
	ManagePortNotification *ManagePortNotification
	NiddConfigurationStatusNotification *NiddConfigurationStatusNotification
	NiddDownlinkDataDeliveryStatusNotification *NiddDownlinkDataDeliveryStatusNotification
	NiddUplinkDataNotification *NiddUplinkDataNotification
}

// GmdNiddDownlinkDataDeliveryNotificationAsScsAsIdConfigurationsGetRequest is a convenience function that returns GmdNiddDownlinkDataDeliveryNotification wrapped in ScsAsIdConfigurationsGetRequest
func GmdNiddDownlinkDataDeliveryNotificationAsScsAsIdConfigurationsGetRequest(v *GmdNiddDownlinkDataDeliveryNotification) ScsAsIdConfigurationsGetRequest {
	return ScsAsIdConfigurationsGetRequest{
		GmdNiddDownlinkDataDeliveryNotification: v,
	}
}

// ManagePortNotificationAsScsAsIdConfigurationsGetRequest is a convenience function that returns ManagePortNotification wrapped in ScsAsIdConfigurationsGetRequest
func ManagePortNotificationAsScsAsIdConfigurationsGetRequest(v *ManagePortNotification) ScsAsIdConfigurationsGetRequest {
	return ScsAsIdConfigurationsGetRequest{
		ManagePortNotification: v,
	}
}

// NiddConfigurationStatusNotificationAsScsAsIdConfigurationsGetRequest is a convenience function that returns NiddConfigurationStatusNotification wrapped in ScsAsIdConfigurationsGetRequest
func NiddConfigurationStatusNotificationAsScsAsIdConfigurationsGetRequest(v *NiddConfigurationStatusNotification) ScsAsIdConfigurationsGetRequest {
	return ScsAsIdConfigurationsGetRequest{
		NiddConfigurationStatusNotification: v,
	}
}

// NiddDownlinkDataDeliveryStatusNotificationAsScsAsIdConfigurationsGetRequest is a convenience function that returns NiddDownlinkDataDeliveryStatusNotification wrapped in ScsAsIdConfigurationsGetRequest
func NiddDownlinkDataDeliveryStatusNotificationAsScsAsIdConfigurationsGetRequest(v *NiddDownlinkDataDeliveryStatusNotification) ScsAsIdConfigurationsGetRequest {
	return ScsAsIdConfigurationsGetRequest{
		NiddDownlinkDataDeliveryStatusNotification: v,
	}
}

// NiddUplinkDataNotificationAsScsAsIdConfigurationsGetRequest is a convenience function that returns NiddUplinkDataNotification wrapped in ScsAsIdConfigurationsGetRequest
func NiddUplinkDataNotificationAsScsAsIdConfigurationsGetRequest(v *NiddUplinkDataNotification) ScsAsIdConfigurationsGetRequest {
	return ScsAsIdConfigurationsGetRequest{
		NiddUplinkDataNotification: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ScsAsIdConfigurationsGetRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GmdNiddDownlinkDataDeliveryNotification
	err = newStrictDecoder(data).Decode(&dst.GmdNiddDownlinkDataDeliveryNotification)
	if err == nil {
		jsonGmdNiddDownlinkDataDeliveryNotification, _ := json.Marshal(dst.GmdNiddDownlinkDataDeliveryNotification)
		if string(jsonGmdNiddDownlinkDataDeliveryNotification) == "{}" { // empty struct
			dst.GmdNiddDownlinkDataDeliveryNotification = nil
		} else {
			match++
		}
	} else {
		dst.GmdNiddDownlinkDataDeliveryNotification = nil
	}

	// try to unmarshal data into ManagePortNotification
	err = newStrictDecoder(data).Decode(&dst.ManagePortNotification)
	if err == nil {
		jsonManagePortNotification, _ := json.Marshal(dst.ManagePortNotification)
		if string(jsonManagePortNotification) == "{}" { // empty struct
			dst.ManagePortNotification = nil
		} else {
			match++
		}
	} else {
		dst.ManagePortNotification = nil
	}

	// try to unmarshal data into NiddConfigurationStatusNotification
	err = newStrictDecoder(data).Decode(&dst.NiddConfigurationStatusNotification)
	if err == nil {
		jsonNiddConfigurationStatusNotification, _ := json.Marshal(dst.NiddConfigurationStatusNotification)
		if string(jsonNiddConfigurationStatusNotification) == "{}" { // empty struct
			dst.NiddConfigurationStatusNotification = nil
		} else {
			match++
		}
	} else {
		dst.NiddConfigurationStatusNotification = nil
	}

	// try to unmarshal data into NiddDownlinkDataDeliveryStatusNotification
	err = newStrictDecoder(data).Decode(&dst.NiddDownlinkDataDeliveryStatusNotification)
	if err == nil {
		jsonNiddDownlinkDataDeliveryStatusNotification, _ := json.Marshal(dst.NiddDownlinkDataDeliveryStatusNotification)
		if string(jsonNiddDownlinkDataDeliveryStatusNotification) == "{}" { // empty struct
			dst.NiddDownlinkDataDeliveryStatusNotification = nil
		} else {
			match++
		}
	} else {
		dst.NiddDownlinkDataDeliveryStatusNotification = nil
	}

	// try to unmarshal data into NiddUplinkDataNotification
	err = newStrictDecoder(data).Decode(&dst.NiddUplinkDataNotification)
	if err == nil {
		jsonNiddUplinkDataNotification, _ := json.Marshal(dst.NiddUplinkDataNotification)
		if string(jsonNiddUplinkDataNotification) == "{}" { // empty struct
			dst.NiddUplinkDataNotification = nil
		} else {
			match++
		}
	} else {
		dst.NiddUplinkDataNotification = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GmdNiddDownlinkDataDeliveryNotification = nil
		dst.ManagePortNotification = nil
		dst.NiddConfigurationStatusNotification = nil
		dst.NiddDownlinkDataDeliveryStatusNotification = nil
		dst.NiddUplinkDataNotification = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ScsAsIdConfigurationsGetRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ScsAsIdConfigurationsGetRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ScsAsIdConfigurationsGetRequest) MarshalJSON() ([]byte, error) {
	if src.GmdNiddDownlinkDataDeliveryNotification != nil {
		return json.Marshal(&src.GmdNiddDownlinkDataDeliveryNotification)
	}

	if src.ManagePortNotification != nil {
		return json.Marshal(&src.ManagePortNotification)
	}

	if src.NiddConfigurationStatusNotification != nil {
		return json.Marshal(&src.NiddConfigurationStatusNotification)
	}

	if src.NiddDownlinkDataDeliveryStatusNotification != nil {
		return json.Marshal(&src.NiddDownlinkDataDeliveryStatusNotification)
	}

	if src.NiddUplinkDataNotification != nil {
		return json.Marshal(&src.NiddUplinkDataNotification)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ScsAsIdConfigurationsGetRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GmdNiddDownlinkDataDeliveryNotification != nil {
		return obj.GmdNiddDownlinkDataDeliveryNotification
	}

	if obj.ManagePortNotification != nil {
		return obj.ManagePortNotification
	}

	if obj.NiddConfigurationStatusNotification != nil {
		return obj.NiddConfigurationStatusNotification
	}

	if obj.NiddDownlinkDataDeliveryStatusNotification != nil {
		return obj.NiddDownlinkDataDeliveryStatusNotification
	}

	if obj.NiddUplinkDataNotification != nil {
		return obj.NiddUplinkDataNotification
	}

	// all schemas are nil
	return nil
}

type NullableScsAsIdConfigurationsGetRequest struct {
	value *ScsAsIdConfigurationsGetRequest
	isSet bool
}

func (v NullableScsAsIdConfigurationsGetRequest) Get() *ScsAsIdConfigurationsGetRequest {
	return v.value
}

func (v *NullableScsAsIdConfigurationsGetRequest) Set(val *ScsAsIdConfigurationsGetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableScsAsIdConfigurationsGetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableScsAsIdConfigurationsGetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScsAsIdConfigurationsGetRequest(val *ScsAsIdConfigurationsGetRequest) *NullableScsAsIdConfigurationsGetRequest {
	return &NullableScsAsIdConfigurationsGetRequest{value: val, isSet: true}
}

func (v NullableScsAsIdConfigurationsGetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScsAsIdConfigurationsGetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


