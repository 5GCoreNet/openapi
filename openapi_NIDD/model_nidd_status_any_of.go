/*
3gpp-nidd

API for non IP data delivery.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_NIDD

import (
	"encoding/json"
	"fmt"
)

// NiddStatusAnyOf the model 'NiddStatusAnyOf'
type NiddStatusAnyOf string

// List of NiddStatus_anyOf
const (
	ACTIVE NiddStatusAnyOf = "ACTIVE"
	TERMINATED_UE_NOT_AUTHORIZED NiddStatusAnyOf = "TERMINATED_UE_NOT_AUTHORIZED"
	TERMINATED NiddStatusAnyOf = "TERMINATED"
	RDS_PORT_UNKNOWN NiddStatusAnyOf = "RDS_PORT_UNKNOWN"
)

// All allowed values of NiddStatusAnyOf enum
var AllowedNiddStatusAnyOfEnumValues = []NiddStatusAnyOf{
	"ACTIVE",
	"TERMINATED_UE_NOT_AUTHORIZED",
	"TERMINATED",
	"RDS_PORT_UNKNOWN",
}

func (v *NiddStatusAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NiddStatusAnyOf(value)
	for _, existing := range AllowedNiddStatusAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NiddStatusAnyOf", value)
}

// NewNiddStatusAnyOfFromValue returns a pointer to a valid NiddStatusAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNiddStatusAnyOfFromValue(v string) (*NiddStatusAnyOf, error) {
	ev := NiddStatusAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NiddStatusAnyOf: valid values are %v", v, AllowedNiddStatusAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NiddStatusAnyOf) IsValid() bool {
	for _, existing := range AllowedNiddStatusAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NiddStatus_anyOf value
func (v NiddStatusAnyOf) Ptr() *NiddStatusAnyOf {
	return &v
}

type NullableNiddStatusAnyOf struct {
	value *NiddStatusAnyOf
	isSet bool
}

func (v NullableNiddStatusAnyOf) Get() *NiddStatusAnyOf {
	return v.value
}

func (v *NullableNiddStatusAnyOf) Set(val *NiddStatusAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNiddStatusAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNiddStatusAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiddStatusAnyOf(val *NiddStatusAnyOf) *NullableNiddStatusAnyOf {
	return &NullableNiddStatusAnyOf{value: val, isSet: true}
}

func (v NullableNiddStatusAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiddStatusAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

